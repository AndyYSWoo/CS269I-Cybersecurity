{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "1500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 20671, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2014-06-24T03:01:40.000Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "integer overflow in 'buffer' type allows reading memory", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$1,500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2014-07-19T00:00:40.487Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-07-19T00:00:40.487Z", 
            "actor": {
                "url": "/ibb-python", 
                "profile": {
                    "name": "Python (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/027/79e9602e5e25d02b7c34cdbc40438408f47e7cd7_medium.png?1383737131"
                }
            }, 
            "team_handle": "ibb-python", 
            "bounty_amount": "1500.0", 
            "collaborator": {
                "username": "removed", 
                "url": "/removed"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 91793, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-07-27T08:33:17.277Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-07-27T08:35:53.628Z", 
            "actor": {
                "username": "removed", 
                "url": "/removed", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ibb-python", 
            "message": "The report to security@python.org follows:\n\nLet me first say thanks for all of your support for this language. When perl had reached 5.8, I felt kind of abandoned as perl began the Perl6 chapter of it's life. At this point, I felt abandoned. I didn't know what language to keep developing in. (I almost went back to C99 exclusively! Those were rough times!) It was at this point that I remembered modifying the menus for this tool called the Quake Army Knife (QuArK). And it was since then that I had decided to migrate across the peninsula to Python. It has changed my life as it has probably changed all of us.\n\nhttps://hackerone.com/reports/12297\n\nSo I guess I saw this report, and it kind of surprised me. \"Kind of\" being an understatement even. But I figured I should do my part, as I've been an opensource leech for almost 15 years now.\n\nSo, here's another bug that can do similar things. I've only checked for it in the Python 2.x series because I'm pretty lame and my Vim instance isn't currently built against 3.x. :((\n\n------- 8< --- snip here --- 8< -------\n\nSo, if you look in Objects/bufferobject.c, there's this function called buffer_from_object. I'm sure you're pretty familiar with it. It contains a missing check that I was using for a bit so that I didn't have to use ctypes to read from my current process' memory. I had poked around to see if I could turn it into something used to \"write\" to arbitrary memory, but I didn't find anything that sets the readonly flag to True (except if you have access to an awesome external binary module called _ctypes. If you have access to ctypes though, you've already won.)\n\nSo the buffer object is used to convert from something that supports the buffer protocol into an object that can be used to read/write to that original object. \n\nHere's it's prototype:\nObjects/bufferobject.c:130\nstatic PyObject *\nbuffer_from_object(PyObject *base, Py_ssize_t size, Py_ssize_t offset, int readonly)\n\nAnd here's the code we care about:\nObjects/bufferobject.c:139\n        /* another buffer, refer to the base object */\n        PyBufferObject *b = (PyBufferObject *)base;\n        if (b->b_size != Py_END_OF_BUFFER) {\n            Py_ssize_t base_size = b->b_size - offset;\n            if (base_size < 0)\n                base_size = 0;\n            if (size == Py_END_OF_BUFFER || size > base_size)\n                size = base_size;\n        }\n        offset += b->b_offset;\n        base = b->b_base;\n\nSo the bug is related to the offset variable. The buffer_from_object function will take the \"b_offset\" field from the original object and add the parameter \"offset\" to it. This will then get passed to the buffer_from_memory function. Since there's no check, you can specify any offset you'd like.\n\nNow we'll need to find what python objects actually implement a buffer interface that will call buffer_from_object. From grepping and things, I've discovered you can use a memoryview or a bytearray. Unfortunately, none of these set the readonly argument to True. The only object that can do this is a ctypes instance. This means that all we can do is read from memory which is not as much fun as one would hope.\n\nHere's some example python code that triggers the bug:\na = bytearray('hola mundo')\nb = buffer(a, 0x7fffffff, 0x7fffffff)\nprint repr(b[:0xfeed]),\"the\",repr(b[-0xdead:])\n\nIf credit is necessary can you credit:\nChris Foster (sr20dett93@gmail.com)\n\nAnd my account on hackerone.com is : https://hackerone.com/arizvisa\n\nI had sent an email to them last night to ask them how they tie \ntogether with vulnerabilities reported to the vendor, but they haven't responded yet.\n\nIf you guys have any questions, or would like more work..feel free to hit me up.\n\nPeace.", 
            "markdown_message": "<p>The report to <a title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\">security@python.org</a> follows:</p>\n\n<p>Let me first say thanks for all of your support for this language. When perl had reached 5.8, I felt kind of abandoned as perl began the Perl6 chapter of it&#39;s life. At this point, I felt abandoned. I didn&#39;t know what language to keep developing in. (I almost went back to C99 exclusively! Those were rough times!) It was at this point that I remembered modifying the menus for this tool called the Quake Army Knife (QuArK). And it was since then that I had decided to migrate across the peninsula to Python. It has changed my life as it has probably changed all of us.</p>\n\n<p><a title=\"https://hackerone.com/reports/12297\" href=\"https://hackerone.com/reports/12297\">https://hackerone.com/reports/12297</a></p>\n\n<p>So I guess I saw this report, and it kind of surprised me. &quot;Kind of&quot; being an understatement even. But I figured I should do my part, as I&#39;ve been an opensource leech for almost 15 years now.</p>\n\n<p>So, here&#39;s another bug that can do similar things. I&#39;ve only checked for it in the Python 2.x series because I&#39;m pretty lame and my Vim instance isn&#39;t currently built against 3.x. :((</p>\n\n<p>------- 8&lt; --- snip here --- 8&lt; -------</p>\n\n<p>So, if you look in Objects/bufferobject.c, there&#39;s this function called buffer_from_object. I&#39;m sure you&#39;re pretty familiar with it. It contains a missing check that I was using for a bit so that I didn&#39;t have to use ctypes to read from my current process&#39; memory. I had poked around to see if I could turn it into something used to &quot;write&quot; to arbitrary memory, but I didn&#39;t find anything that sets the readonly flag to True (except if you have access to an awesome external binary module called _ctypes. If you have access to ctypes though, you&#39;ve already won.)</p>\n\n<p>So the buffer object is used to convert from something that supports the buffer protocol into an object that can be used to read/write to that original object. </p>\n\n<p>Here&#39;s it&#39;s prototype:<br>\nObjects/bufferobject.c:130<br>\nstatic PyObject *<br>\nbuffer_from_object(PyObject *base, Py_ssize_t size, Py_ssize_t offset, int readonly)</p>\n\n<p>And here&#39;s the code we care about:<br>\nObjects/bufferobject.c:139<br>\n        /* another buffer, refer to the base object */<br>\n        PyBufferObject *b = (PyBufferObject *)base;<br>\n        if (b-&gt;b_size != Py_END_OF_BUFFER) {<br>\n            Py_ssize_t base_size = b-&gt;b_size - offset;<br>\n            if (base_size &lt; 0)<br>\n                base_size = 0;<br>\n            if (size == Py_END_OF_BUFFER || size &gt; base_size)<br>\n                size = base_size;<br>\n        }<br>\n        offset += b-&gt;b_offset;<br>\n        base = b-&gt;b_base;</p>\n\n<p>So the bug is related to the offset variable. The buffer_from_object function will take the &quot;b_offset&quot; field from the original object and add the parameter &quot;offset&quot; to it. This will then get passed to the buffer_from_memory function. Since there&#39;s no check, you can specify any offset you&#39;d like.</p>\n\n<p>Now we&#39;ll need to find what python objects actually implement a buffer interface that will call buffer_from_object. From grepping and things, I&#39;ve discovered you can use a memoryview or a bytearray. Unfortunately, none of these set the readonly argument to True. The only object that can do this is a ctypes instance. This means that all we can do is read from memory which is not as much fun as one would hope.</p>\n\n<p>Here&#39;s some example python code that triggers the bug:<br>\na = bytearray(&#39;hola mundo&#39;)<br>\nb = buffer(a, 0x7fffffff, 0x7fffffff)<br>\nprint repr(b[:0xfeed]),&quot;the&quot;,repr(b[-0xdead:])</p>\n\n<p>If credit is necessary can you credit:<br>\nChris Foster (<a title=\"sr20dett93@gmail.com\" href=\"mailto:sr20dett93@gmail.com\" rel=\"nofollow noopener noreferrer\">sr20dett93@gmail.com</a>)</p>\n\n<p>And my account on hackerone.com is : <a title=\"https://hackerone.com/arizvisa\" href=\"https://hackerone.com/arizvisa\">https://hackerone.com/arizvisa</a></p>\n\n<p>I had sent an email to them last night to ask them how they tie <br>\ntogether with vulnerabilities reported to the vendor, but they haven&#39;t responded yet.</p>\n\n<p>If you guys have any questions, or would like more work..feel free to hit me up.</p>\n\n<p>Peace.</p>\n", 
            "type": "Activities::Comment", 
            "id": 96706, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-10-08T04:37:09.778Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-10-08T04:37:09.778Z", 
            "actor": {
                "username": "removed", 
                "url": "/removed", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ibb-python", 
            "message": "Chris Foster is now out of jail thanks to this submission. He now has 6 months of mandatory rehab and then he's free again. ", 
            "markdown_message": "<p>Chris Foster is now out of jail thanks to this submission. He now has 6 months of mandatory rehab and then he&#39;s free again. </p>\n", 
            "type": "Activities::Comment", 
            "id": 138463, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "removed", 
                "url": "/removed"
            }, 
            "created_at": "2014-10-08T04:37:09.778Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-15T13:29:22.437Z", 
            "actor": {
                "url": "/ibb-python", 
                "profile": {
                    "name": "Python (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/027/79e9602e5e25d02b7c34cdbc40438408f47e7cd7_medium.png?1383737131"
                }
            }, 
            "team_handle": "ibb-python", 
            "message": null, 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1196154, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "removed", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/removed", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2014-06-24T03:01:40.000Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/20671", 
    "created_at": "2014-06-23T09:15:00.000Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><a title=\"https://mail.python.org/pipermail/python-bugs-list/2014-June/244955.html\" href=\"/redirect?signature=30d0e94dfe751ecb83587a47f863d939cb179cd9&amp;url=https%3A%2F%2Fmail.python.org%2Fpipermail%2Fpython-bugs-list%2F2014-June%2F244955.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://mail.python.org/pipermail/python-bugs-list/2014-June/244955.html</span><i class=\"icon-external-link\"></i></a></p>\n", 
    "vulnerability_information": "https://mail.python.org/pipermail/python-bugs-list/2014-June/244955.html\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.python.org/news/security", 
            "about": "", 
            "twitter_handle": "", 
            "name": "Python (IBB)"
        }, 
        "handle": "ibb-python", 
        "url": "https://hackerone.com/ibb-python", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/027/22df52945ba6933f27a1dbc92380fe19a4a1a93d_small.png?1383737131", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/027/79e9602e5e25d02b7c34cdbc40438408f47e7cd7_medium.png?1383737131"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 27, 
        "default_currency": "usd"
    }, 
    "is_published": false
}