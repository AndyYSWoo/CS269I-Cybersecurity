{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": "2016-01-06T16:29:44.556Z", 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 106315, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-01-06T06:41:39.490Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Potential for Double Spend via Sign Message Utility", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-02-05T06:41:39.766Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Informative", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-12-22T04:57:21.899Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-12-22T04:57:21.899Z", 
            "actor": {
                "username": "coinbase2", 
                "url": "/coinbase2", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "Thanks for the report, we're investigating whether this is exploitable.", 
            "markdown_message": "<p>Thanks for the report, we&#39;re investigating whether this is exploitable.</p>\n", 
            "type": "Activities::Comment", 
            "id": 729024, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-05T22:59:35.821Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-05T22:59:35.821Z", 
            "actor": {
                "username": "coinbase9001", 
                "url": "/coinbase9001", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "Appreciate the patience, still investigating this one.", 
            "markdown_message": "<p>Appreciate the patience, still investigating this one.</p>\n", 
            "type": "Activities::Comment", 
            "id": 743309, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-06T03:07:59.487Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-06T03:07:59.487Z", 
            "actor": {
                "username": "coinbase9001", 
                "url": "/coinbase9001", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "Hi ddworken,\n\nThis is a clever idea, we had some fun working through it but determined in was not exploitable.  The concept is totally sound, but doesn't work because the string \"Bitcoin signed message:\\n\" is prepended to whatever you POST to Coinbase.  This is consistent with the behavior of bitcoin-core.\n\nExample in core: https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L101\nExample in bitcoin-ruby:  https://github.com/mhanne/bitcoin-ruby/blob/master/lib/bitcoin.rb#L326\n\nBut, assuming that was not present, you would still have some trouble exploiting this.  What you are trying to get us to sign is the raw sighash of a transaction, which is a binary sequence not guaranteed to be UTF-8 (or parse-able by any web server).  You would need to generate a transaction who's hash contains only valid UTF-8 characters.  We determined this could be done by including an OP_RETURN script with a nonce, where the nonce is changed until a hash is discovered with all valid UTF-8 bytes.  We were able to generate examples of this.\n\nThank you for your time, looking forward to future submissions.", 
            "markdown_message": "<p>Hi ddworken,</p>\n\n<p>This is a clever idea, we had some fun working through it but determined in was not exploitable.  The concept is totally sound, but doesn&#39;t work because the string &quot;Bitcoin signed message:\\n&quot; is prepended to whatever you POST to Coinbase.  This is consistent with the behavior of bitcoin-core.</p>\n\n<p>Example in core: <a title=\"https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L101\" href=\"/redirect?signature=882c0f9ab59b9efc6cdd8cd403277111b10ccbcd&amp;url=https%3A%2F%2Fgithub.com%2Fbitcoin%2Fbitcoin%2Fblob%2Fmaster%2Fsrc%2Fmain.cpp%23L101\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L101</span><i class=\"icon-external-link\"></i></a><br>\nExample in bitcoin-ruby:  <a title=\"https://github.com/mhanne/bitcoin-ruby/blob/master/lib/bitcoin.rb#L326\" href=\"/redirect?signature=711e116e8c8e6edc5a9312fabe137a7ad41bf8b3&amp;url=https%3A%2F%2Fgithub.com%2Fmhanne%2Fbitcoin-ruby%2Fblob%2Fmaster%2Flib%2Fbitcoin.rb%23L326\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/mhanne/bitcoin-ruby/blob/master/lib/bitcoin.rb#L326</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>But, assuming that was not present, you would still have some trouble exploiting this.  What you are trying to get us to sign is the raw sighash of a transaction, which is a binary sequence not guaranteed to be UTF-8 (or parse-able by any web server).  You would need to generate a transaction who&#39;s hash contains only valid UTF-8 characters.  We determined this could be done by including an OP_RETURN script with a nonce, where the nonce is changed until a hash is discovered with all valid UTF-8 bytes.  We were able to generate examples of this.</p>\n\n<p>Thank you for your time, looking forward to future submissions.</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 743613, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-06T06:41:39.517Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-06T06:41:39.517Z", 
            "actor": {
                "username": "coinbase2", 
                "url": "/coinbase2", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 743751, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-06T16:29:29.431Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-06T16:29:29.431Z", 
            "actor": {
                "username": "ddworken", 
                "url": "/ddworken", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/344/221b5d357fc59c63987d2ed60b7d586df065f92e_medium.png?1424388672"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "Thank you very much for looking into this! My guess was that it was not exploitable, so thank you for confirming that. \n\nThanks,\nDavid Dworken", 
            "markdown_message": "<p>Thank you very much for looking into this! My guess was that it was not exploitable, so thank you for confirming that. </p>\n\n<p>Thanks,<br>\nDavid Dworken</p>\n", 
            "type": "Activities::Comment", 
            "id": 744388, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-06T16:29:44.584Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-06T16:29:44.584Z", 
            "actor": {
                "username": "ddworken", 
                "url": "/ddworken", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/344/221b5d357fc59c63987d2ed60b7d586df065f92e_medium.png?1424388672"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 744389, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-06T16:29:44.946Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-06T16:29:44.946Z", 
            "actor": {
                "username": "ddworken", 
                "url": "/ddworken", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/344/221b5d357fc59c63987d2ed60b7d586df065f92e_medium.png?1424388672"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 744390, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "ddworken", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/ddworken", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/017/344/b5a8712fba49a7d64be9cd1b3d0b50d4076edb42_small.png?1424388672"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 32, 
        "name": "Cryptographic Issues - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -89482537.87697628, 
    "disclosed_at": "2016-01-06T16:29:44.923Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/106315", 
    "created_at": "2015-12-21T14:43:00.047Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hi, </p>\n\n<p>There is an unlikely (but theoretically exploitable vulnerability) is caused by allowing users to sign messages with their addresses. So far I have not been able to exploit this, but I believe that it is exploitable. </p>\n\n<p>On coinbse.com, the user can see a list of their addresses <a href=\"/redirect?signature=5a7b0cdccbe33478def10abc459b05795c8fde30&amp;url=https%3A%2F%2Fwww.coinbase.com%2Faddresses\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>here</span><i class=\"icon-external-link\"></i></a>. When they click on an address, they get the option to &quot;Sign a message&quot;. </p>\n\n<p>An attacker could create a raw transaction (explanation of how to do so is <a href=\"/redirect?signature=c8f9d7d7a250dc49f7d570a9db92e3eb391cd528&amp;url=http%3A%2F%2Fwww.righto.com%2F2014%2F02%2Fbitcoins-hard-way-using-raw-bitcoin.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>here</span><i class=\"icon-external-link\"></i></a>) spending from one of the addresses listed there to an attacker controlled address. The attacker would then sign the raw transaction so that it is ready to be sent out to the entire network. Then the attacker would send some amount of bitcoin to Coinbase (a predetermined amount to a predetermined address). Shortly after sending the bitcoin to Coinbase, the attacker would then relay his signed transaction to send the bitcoin to his own privately held address. </p>\n\n<p>The end outcome of this is that Coinbase believes they have received some amount of Bitcoin (and it had a number of confirmations in an address controlled by Coinbase), but in reality they lost it since the attacker stole it before Coinbase could transfer it elsewhere. </p>\n\n<p>Realistically, I&#39;m not sure whether this can be practically exploited. None the less, I would recommend adding some sort of parsing code to the &quot;Sign a message&quot; utility so that it will refuse to sign a transaction. </p>\n\n<p>Thanks,<br>\nDavid Dworken</p>\n", 
    "vulnerability_information": "Hi, \n\nThere is an unlikely (but theoretically exploitable vulnerability) is caused by allowing users to sign messages with their addresses. So far I have not been able to exploit this, but I believe that it is exploitable. \n\nOn coinbse.com, the user can see a list of their addresses [here](https://www.coinbase.com/addresses). When they click on an address, they get the option to \"Sign a message\". \n\nAn attacker could create a raw transaction (explanation of how to do so is [here](http://www.righto.com/2014/02/bitcoins-hard-way-using-raw-bitcoin.html)) spending from one of the addresses listed there to an attacker controlled address. The attacker would then sign the raw transaction so that it is ready to be sent out to the entire network. Then the attacker would send some amount of bitcoin to Coinbase (a predetermined amount to a predetermined address). Shortly after sending the bitcoin to Coinbase, the attacker would then relay his signed transaction to send the bitcoin to his own privately held address. \n\nThe end outcome of this is that Coinbase believes they have received some amount of Bitcoin (and it had a number of confirmations in an address controlled by Coinbase), but in reality they lost it since the attacker stole it before Coinbase could transfer it elsewhere. \n\nRealistically, I'm not sure whether this can be practically exploited. None the less, I would recommend adding some sort of parsing code to the \"Sign a message\" utility so that it will refuse to sign a transaction. \n\nThanks,\nDavid Dworken", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://coinbase.com/security", 
            "about": "Creating an open financial system for the world", 
            "twitter_handle": "", 
            "name": "Coinbase"
        }, 
        "handle": "coinbase", 
        "url": "https://hackerone.com/coinbase", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/104/985cb288fb7f1b0c19dd614c6de490762aa27723_small.png?1395368444", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/104/fd5bb1d22c531efe70f6594543d9e5685f08f4c5_medium.png?1395368444"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 104, 
        "default_currency": "usd"
    }, 
    "is_published": false
}