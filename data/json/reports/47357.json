{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": "2015-03-04T14:03:35.505Z", 
    "voters": [
        "spetr0x"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 47357, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "CSRF token from another valid user session accepted", 
    "is_member_of_team?": null, 
    "vote_count": 1, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2015-04-03T14:03:35.862Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Informative", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-02-10T23:49:51.820Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-10T23:49:51.820Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "mobilevikings", 
            "message": "Hey,\n\nThanks for sending this in. I can indeed confirm the X-CSRF token will also work using another token (in fact, it just seems to check whether it has a valid length, this shouldn't happen), but I'm a bit confused when it comes to the attack scenario: you'd bypass this CSRF protection using an XSS inserting the token of the attacker - but if the attacker can already exploit an XSS, why wouldn't he just use the victim's CSRF token then instead of his?\n\nOr does this trick work elsewhere where an external CSRF (e.g. auto submitting form, get request through image, ...) will work?\n\nThanks\n\nInti", 
            "markdown_message": "<p>Hey,</p>\n\n<p>Thanks for sending this in. I can indeed confirm the X-CSRF token will also work using another token (in fact, it just seems to check whether it has a valid length, this shouldn&#39;t happen), but I&#39;m a bit confused when it comes to the attack scenario: you&#39;d bypass this CSRF protection using an XSS inserting the token of the attacker - but if the attacker can already exploit an XSS, why wouldn&#39;t he just use the victim&#39;s CSRF token then instead of his?</p>\n\n<p>Or does this trick work elsewhere where an external CSRF (e.g. auto submitting form, get request through image, ...) will work?</p>\n\n<p>Thanks</p>\n\n<p>Inti</p>\n", 
            "type": "Activities::Comment", 
            "id": 329626, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-02-11T02:04:50.913Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-11T02:04:50.913Z", 
            "actor": {
                "username": "4lemon", 
                "url": "/4lemon", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/194/f1d223980a49b86ae2763450dd2d6fa25ed0d799_medium.jpg?1468248798"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "mobilevikings", 
            "message": "but if the attacker can already exploit an XSS, why wouldn't he just use the victim's CSRF token  - because it is easer to use own token than retrieve it on the user side. I made some test in your system there are three places where token is - header, cookie and post data. And my test shown that all of them should be the same. Although in common case auto form submit should work but only if CSRF token used only in post data. At this time i didn't find forms in the system where used only post data token. In all cases it compared with cookie token. So i think that this issue not good (as i said before attacker can use it's own token), but not really bad because auto form submit is hard to exploit.", 
            "markdown_message": "<p>but if the attacker can already exploit an XSS, why wouldn&#39;t he just use the victim&#39;s CSRF token  - because it is easer to use own token than retrieve it on the user side. I made some test in your system there are three places where token is - header, cookie and post data. And my test shown that all of them should be the same. Although in common case auto form submit should work but only if CSRF token used only in post data. At this time i didn&#39;t find forms in the system where used only post data token. In all cases it compared with cookie token. So i think that this issue not good (as i said before attacker can use it&#39;s own token), but not really bad because auto form submit is hard to exploit.</p>\n", 
            "type": "Activities::Comment", 
            "id": 329768, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-02-11T22:34:25.243Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-11T22:34:25.243Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "mobilevikings", 
            "message": "Hey 4lemon,\n\nI took a moment to think about your submission. I see what you are saying (CSRF token does not really get checked in all instances), but as we'd need a working XSS to use this trick, I can't think of any realistic attack scenario. Please correct me if I'm wrong. Facebook sometimes also includes CSRF tokens in their requests without really checking them.\n\nClosing this for now - If ever manage to create an external working PoC with an attack scenario using this technique, I will re-open this bug.\n\nThanks anyways, and if there are any further questions or comments, let me know!\n\nInti", 
            "markdown_message": "<p>Hey 4lemon,</p>\n\n<p>I took a moment to think about your submission. I see what you are saying (CSRF token does not really get checked in all instances), but as we&#39;d need a working XSS to use this trick, I can&#39;t think of any realistic attack scenario. Please correct me if I&#39;m wrong. Facebook sometimes also includes CSRF tokens in their requests without really checking them.</p>\n\n<p>Closing this for now - If ever manage to create an external working PoC with an attack scenario using this technique, I will re-open this bug.</p>\n\n<p>Thanks anyways, and if there are any further questions or comments, let me know!</p>\n\n<p>Inti</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 330500, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-02-24T08:45:09.685Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-24T08:45:09.685Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "mobilevikings", 
            "message": "Hey @4lemon,\n\nChanged my mind - this shouldn't happen. Will check with our devs how our CSRF system works and whether this can be exploited. \n\nThank you!\n\nInti", 
            "markdown_message": "<p>Hey <a href=\"/4lemon\">@4lemon</a>,</p>\n\n<p>Changed my mind - this shouldn&#39;t happen. Will check with our devs how our CSRF system works and whether this can be exploited. </p>\n\n<p>Thank you!</p>\n\n<p>Inti</p>\n", 
            "type": "Activities::BugReopened", 
            "id": 338956, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-02-24T08:45:42.143Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-24T08:45:42.143Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "mobilevikings", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 338957, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-03-02T20:58:57.219Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-03-02T20:58:57.219Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "mobilevikings", 
            "message": "Hi @4lemon,\n\nWe discussed this internally and decided not no fix this one. Note from out developer:\n\n> Django currently compares the content of the csrf cookie with the token in the post data. So, if you're able to set a cookie, this can be abused. However, we're not going to fix this one.\n\nThanks anyways for your great work so far. Keep your reports coming (make sure to take a look at our Viking Point system!)\nIf you have any further concerns to share regarding this issue, don't hesitate to contact me here.\n\nInti", 
            "markdown_message": "<p>Hi <a href=\"/4lemon\">@4lemon</a>,</p>\n\n<p>We discussed this internally and decided not no fix this one. Note from out developer:</p>\n\n<blockquote>\n<p>Django currently compares the content of the csrf cookie with the token in the post data. So, if you&#39;re able to set a cookie, this can be abused. However, we&#39;re not going to fix this one.</p>\n</blockquote>\n\n<p>Thanks anyways for your great work so far. Keep your reports coming (make sure to take a look at our Viking Point system!)<br>\nIf you have any further concerns to share regarding this issue, don&#39;t hesitate to contact me here.</p>\n\n<p>Inti</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 344601, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-03-04T14:03:35.575Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-03-04T14:03:35.575Z", 
            "actor": {
                "username": "4lemon", 
                "url": "/4lemon", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/194/f1d223980a49b86ae2763450dd2d6fa25ed0d799_medium.jpg?1468248798"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "mobilevikings", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 345848, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-04-03T14:03:59.555Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-04-03T14:03:59.555Z", 
            "actor": {
                "url": "/mobilevikings", 
                "profile": {
                    "name": "Mobile Vikings"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/607/a2feb11e2e38258cea671962df6525a7251415f2_medium.png?1429726565"
                }
            }, 
            "team_handle": "mobilevikings", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 370869, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "4lemon", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/4lemon", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/002/194/e692bb44d384f9a9ff923aa47266566581fb12b1_small.jpg?1468248798"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -116067473.719253, 
    "disclosed_at": "2015-04-03T14:03:59.511Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/47357", 
    "created_at": "2015-02-10T21:15:00.309Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>While testing website i have found interesting issue. For example request to remove sim auth:<br>\nPOST /en/sims/authorization/remove/admin/1036359/ HTTP/1.1<br>\nHost: mobilevikings.be<br>\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:35.0) Gecko/20100101 Firefox/35.0<br>\nAccept: <em>/</em><br>\nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3<br>\nAccept-Encoding: gzip, deflate<br>\nX-CSRFToken: LI6qbdczbgPPQ7fxXR3duFENgY1qr3wB<br>\nX-Requested-With: XMLHttpRequest<br>\nReferer: <a title=\"https://mobilevikings.be/en/account/authorization/overview/\" href=\"/redirect?signature=1225a82a3f279b8814b9d4b8f3cb910fcc5678fe&amp;url=https%3A%2F%2Fmobilevikings.be%2Fen%2Faccount%2Fauthorization%2Foverview%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://mobilevikings.be/en/account/authorization/overview/</span><i class=\"icon-external-link\"></i></a><br>\nCookie: mobilevikingsbe=fda79999f5d3ea86aee1cac688306948; csrftoken=LI6qbdczbgPPQ7fxXR3duFENgY1qr3wB; cookies.js=1; _ga=GA1.2.843387348.1423586164; __utmx=177304377.1C02iW_2TT2rFZKjDPjE7Q$0:0; __utmxx=177304377.1C02iW_2TT2rFZKjDPjE7Q$0:1423600511:8035200; __atuvc=5%7C6<br>\nConnection: keep-alive<br>\nPragma: no-cache<br>\nCache-Control: no-cache<br>\nContent-Length: 0</p>\n\n<p>Response:<br>\nHTTP/1.1 302 FOUND<br>\nServer: nginx/1.4.2<br>\nDate: Tue, 10 Feb 2015 21:02:50 GMT<br>\nContent-Type: text/html; charset=utf-8<br>\nConnection: keep-alive<br>\nVary: Cookie<br>\nLocation: <a title=\"https://mobilevikings.be/en/account/authorization/overview/\" href=\"/redirect?signature=1225a82a3f279b8814b9d4b8f3cb910fcc5678fe&amp;url=https%3A%2F%2Fmobilevikings.be%2Fen%2Faccount%2Fauthorization%2Foverview%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://mobilevikings.be/en/account/authorization/overview/</span><i class=\"icon-external-link\"></i></a><br>\nContent-Language: en-be<br>\nSet-Cookie: messages=&quot;cc71d85271dc293bce25170e9cfb3d36beef0b5f$[[\\&quot;__json_message\\&quot;\\0540\\05425\\054\\&quot;Authorization on this SIM card for  has been removed.\\&quot;]]&quot;; Path=/<br>\nContent-Length: 0</p>\n\n<p>Problem is that this request works with <br>\n X-CSRFToken: LI6qbdczbgPPQ7fxXR3duFENgY1qr3wB<br>\nthis token i got from another account<br>\nthe real token was <br>\nAlEqSERKOXKjZfSdw2WtPY4l7n5b68BM</p>\n\n<p>This issue make possible to attacker bypass CSRF using his own valid token (for example thru xss). Best practice is:</p>\n\n<ul>\n<li>token from different user do not work on other session</li>\n<li>and much better if token change on each request</li>\n</ul>\n", 
    "vulnerability_information": "While testing website i have found interesting issue. For example request to remove sim auth:\r\nPOST /en/sims/authorization/remove/admin/1036359/ HTTP/1.1\r\nHost: mobilevikings.be\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:35.0) Gecko/20100101 Firefox/35.0\r\nAccept: */*\r\nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\r\nAccept-Encoding: gzip, deflate\r\nX-CSRFToken: LI6qbdczbgPPQ7fxXR3duFENgY1qr3wB\r\nX-Requested-With: XMLHttpRequest\r\nReferer: https://mobilevikings.be/en/account/authorization/overview/\r\nCookie: mobilevikingsbe=fda79999f5d3ea86aee1cac688306948; csrftoken=LI6qbdczbgPPQ7fxXR3duFENgY1qr3wB; cookies.js=1; _ga=GA1.2.843387348.1423586164; __utmx=177304377.1C02iW_2TT2rFZKjDPjE7Q$0:0; __utmxx=177304377.1C02iW_2TT2rFZKjDPjE7Q$0:1423600511:8035200; __atuvc=5%7C6\r\nConnection: keep-alive\r\nPragma: no-cache\r\nCache-Control: no-cache\r\nContent-Length: 0\r\n\r\nResponse:\r\nHTTP/1.1 302 FOUND\r\nServer: nginx/1.4.2\r\nDate: Tue, 10 Feb 2015 21:02:50 GMT\r\nContent-Type: text/html; charset=utf-8\r\nConnection: keep-alive\r\nVary: Cookie\r\nLocation: https://mobilevikings.be/en/account/authorization/overview/\r\nContent-Language: en-be\r\nSet-Cookie: messages=\"cc71d85271dc293bce25170e9cfb3d36beef0b5f$[[\\\"__json_message\\\"\\0540\\05425\\054\\\"Authorization on this SIM card for  has been removed.\\\"]]\"; Path=/\r\nContent-Length: 0\r\n\r\nProblem is that this request works with \r\n X-CSRFToken: LI6qbdczbgPPQ7fxXR3duFENgY1qr3wB\r\nthis token i got from another account\r\nthe real token was \r\nAlEqSERKOXKjZfSdw2WtPY4l7n5b68BM\r\n\r\nThis issue make possible to attacker bypass CSRF using his own valid token (for example thru xss). Best practice is:\r\n- token from different user do not work on other session\r\n- and much better if token change on each request\r\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://mobilevikings.be/", 
            "about": "Mobile Vikings is a prepaid provider that lets you connect to your Viking friends for free!", 
            "twitter_handle": "mobilevikingsBE", 
            "name": "Mobile Vikings"
        }, 
        "handle": "mobilevikings", 
        "url": "https://hackerone.com/mobilevikings", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/607/946ca37367873093a71a9113d6216f1813ab00e7_small.png?1429726565", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/607/a2feb11e2e38258cea671962df6525a7251415f2_medium.png?1429726565"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 607, 
        "default_currency": "usd"
    }, 
    "is_published": false
}