{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2015-07-26T21:30:46.353Z", 
    "voters": [
        "spetr0x"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 74595, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "The product/status method CSRF", 
    "is_member_of_team?": null, 
    "vote_count": 1, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2015-08-25T21:30:47.067Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-07-09T22:37:21.529Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-09T22:37:21.529Z", 
            "actor": {
                "username": "panchocosil", 
                "url": "/panchocosil", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/460/82a361802ee4dcec0c9501ae515544fb5418d939_medium.jpg?1517439488"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "digitalsellz", 
            "message": "Nice Find! I will share this report with our team. Talk soon.", 
            "markdown_message": "<p>Nice Find! I will share this report with our team. Talk soon.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 504372, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-07-15T22:29:23.352Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-15T22:29:23.352Z", 
            "actor": {
                "username": "panchocosil", 
                "url": "/panchocosil", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/460/82a361802ee4dcec0c9501ae515544fb5418d939_medium.jpg?1517439488"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "digitalsellz", 
            "message": "Can you please confirm this bug it has been fixed?", 
            "markdown_message": "<p>Can you please confirm this bug it has been fixed?</p>\n", 
            "type": "Activities::Comment", 
            "id": 510856, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-07-16T11:12:59.327Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-16T11:12:59.327Z", 
            "actor": {
                "username": "s_p_q_r", 
                "url": "/s_p_q_r", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/032/547/3374585ea2b1d03bea7462bcc3cf7c2275f0f738_medium.jpg?1433541220"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "digitalsellz", 
            "message": "Yep, the CSRF-token has been added. The id is properly checked now as well.", 
            "markdown_message": "<p>Yep, the CSRF-token has been added. The id is properly checked now as well.</p>\n", 
            "type": "Activities::Comment", 
            "id": 511824, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "s_p_q_r", 
                "url": "/s_p_q_r"
            }, 
            "created_at": "2015-07-20T06:14:42.367Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-20T06:14:42.367Z", 
            "actor": {
                "username": "panchocosil", 
                "url": "/panchocosil", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/460/82a361802ee4dcec0c9501ae515544fb5418d939_medium.jpg?1517439488"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "digitalsellz", 
            "message": "Thanks for your help! and Welcome to our Wall of fame", 
            "markdown_message": "<p>Thanks for your help! and Welcome to our Wall of fame</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 516781, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-07-26T21:30:46.807Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-26T21:30:46.807Z", 
            "actor": {
                "username": "s_p_q_r", 
                "url": "/s_p_q_r", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/032/547/3374585ea2b1d03bea7462bcc3cf7c2275f0f738_medium.jpg?1433541220"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "digitalsellz", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 526319, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-08-25T21:31:02.049Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-25T21:31:02.049Z", 
            "actor": {
                "url": "/digitalsellz", 
                "profile": {
                    "name": "DigitalSellz"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/293/42e6077c521cf2191b52ca05535a82e40550aa32_medium.png?1405460051"
                }
            }, 
            "team_handle": "digitalsellz", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 563070, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "s_p_q_r", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/s_p_q_r", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/032/547/096b7aa1face7e7ce0fe10d3382ec45d167fc546_small.jpg?1433541220"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -103598923.25090903, 
    "disclosed_at": "2015-08-25T21:31:01.906Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/74595", 
    "created_at": "2015-07-09T10:59:26.018Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>When we use the &quot;on/off&quot; buttons to set the products to be shown on the <a href=\"/redirect?signature=392ad302af541473d2fe281b90f57a6c8601c662&amp;url=https%3A%2F%2Fwww.digitalsellz.com%2Fuser%2F%23%2Fproducts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>products page</span><i class=\"icon-external-link\"></i></a>, a POST-request to <a title=\"https://www.digitalsellz.com/product/status\" href=\"/redirect?signature=23372dc476133d7cd6a5957491c2d937434b0ebf&amp;url=https%3A%2F%2Fwww.digitalsellz.com%2Fproduct%2Fstatus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.digitalsellz.com/product/status</span><i class=\"icon-external-link\"></i></a> is sent with only the product id as a parameter (no other security tokens).</p>\n\n<p>So the idea is to make my rival visit a web page with a code like this:</p>\n\n<blockquote>\n<p>&lt;form action=&quot;https://www.digitalsellz.com/product/status&quot; method=&quot;POST&quot; onload=&quot;this.submit ()&quot;&gt;<br>\n  &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;%PRODUCT_ID%&quot; /&gt;<br>\n&lt;/form&gt;</p>\n</blockquote>\n\n<p>where %PRODUCT_ID% is an ID of one of the products shown on his DigitalSellz page. This way me make him hide his product, so the customers will more likely buy mine.</p>\n\n<p>So the purpose is to get a proper product id. Let&#39;s find out how it&#39;s formed. To do this let&#39;s upload a few projects at our page. After this when we check the <a title=\"https://www.digitalsellz.com/product/alllist/1\" href=\"/redirect?signature=b0aa4480bf100f40ade1ce7bcb574a33364272a7&amp;url=https%3A%2F%2Fwww.digitalsellz.com%2Fproduct%2Falllist%2F1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.digitalsellz.com/product/alllist/1</span><i class=\"icon-external-link\"></i></a> page we see that every product has both a key and an id, for example:</p>\n\n<blockquote>\n<p>{&quot;Id&quot;:&quot;<strong>WlojNDgxNSNZVg</strong>&quot;,&quot;name&quot;:&quot;test&quot;,&quot;currency&quot;:&quot;USD&quot;,&quot;price&quot;:&quot;0.90&quot;,&quot;prwlink&quot;:null,&quot;prwtype&quot;:&quot;No&quot;,&quot;createddate&quot;:&quot;2015-07-08 12:58:08&quot;,&quot;key&quot;:&quot;<strong>NDgxNQ</strong>&quot;,&quot;onprofile&quot;:&quot;Enable&quot;}</p>\n</blockquote>\n\n<p>The key is a public identificator: it&#39;s contained in the product URL: <a title=\"https://www.digitalsellz.com/p/NDgxNQ\" href=\"/redirect?signature=02638cdc5c2da42dedecf80e73bfe99598ba151f&amp;url=https%3A%2F%2Fwww.digitalsellz.com%2Fp%2FNDgxNQ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.digitalsellz.com/p/NDgxNQ</span><i class=\"icon-external-link\"></i></a>, and the id is a private one: it&#39;s not shown there. So we need to figure out the connection between the key and the id.</p>\n\n<p>If we take a look at them, we can notice they both look like Base64-encoded. Indeed, if we add &quot;==&quot; at the end and then do the Base64 decoding, <strong>NDgxNQ</strong> and <strong>WlojNDgxNSNZVg</strong> will turn into <strong>4815</strong> and <strong>ZZ#4815#YV</strong> correspondingly. Thus we see the product key is just its integer number and the id is the same number, just with some random symbols added!</p>\n\n<p>And what if we try to add some other symbols, for example AA, instead? Let&#39;s check it: <strong>ZZ#4815#YV</strong> \u2192 <strong>AA#4815#AA</strong> \u2192 <strong>QUEjNDgxNSNBQQ</strong>, and then we send a POST-request to <a title=\"https://www.digitalsellz.com/product/status\" href=\"/redirect?signature=23372dc476133d7cd6a5957491c2d937434b0ebf&amp;url=https%3A%2F%2Fwww.digitalsellz.com%2Fproduct%2Fstatus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.digitalsellz.com/product/status</span><i class=\"icon-external-link\"></i></a> with &quot;id=QUEjNDgxNSNBQQ&quot; parameters. In response we get {code:1}. Now if we open the <a href=\"/redirect?signature=392ad302af541473d2fe281b90f57a6c8601c662&amp;url=https%3A%2F%2Fwww.digitalsellz.com%2Fuser%2F%23%2Fproducts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>products page</span><i class=\"icon-external-link\"></i></a> we can see the product status changed. So it works!</p>\n\n<p><strong>This way the scenario for the attacker can be as follows:</strong></p>\n\n<ol>\n<li>He goes to his rival&#39;s page</li>\n<li>He opens the product he&#39;s interested in and gets its key from the URL</li>\n<li>He decodes it, adds &quot;AA#&quot; and &quot;#AA&quot; at both sides and then encodes it back and thus gets the product id</li>\n<li>He creates a web page with such content:</li>\n</ol>\n\n<blockquote>\n<blockquote>\n<p>&lt;form action=&quot;https://www.digitalsellz.com/product/status&quot; method=&quot;POST&quot; onload=&quot;this.submit ()&quot;&gt;<br>\n  &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;%PRODUCT_ID%&quot; /&gt;<br>\n&lt;/form&gt;</p>\n</blockquote>\n</blockquote>\n\n<p>where %PRODUCT_ID% is the product id he got, and sends a link to this page to the victim</p>\n\n<p>When the victim visits it, his product gets hidden from his page.</p>\n\n<p><strong>Proof of concept:</strong></p>\n\n<ol>\n<li>Go to your account and upload a product</li>\n<li>Go to your <a href=\"/redirect?signature=392ad302af541473d2fe281b90f57a6c8601c662&amp;url=https%3A%2F%2Fwww.digitalsellz.com%2Fuser%2F%23%2Fproducts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>products page</span><i class=\"icon-external-link\"></i></a> and get its key from the url in the &quot;Buy now link&quot; cell. For example, <strong>NDgxNQ</strong>\n</li>\n<li>Add &quot;==&quot; at the end and Base64-decode it: <strong>4815</strong>\n</li>\n<li>Surround it by &quot;AA&quot; symbols: <strong>AA#4815#AA</strong>\n</li>\n<li>Encode it into Base64 and remove the &quot;==&quot; symbols from the end: <strong>QUEjNDgxNSNBQQ</strong>\n</li>\n<li>Send a POST-request to <a title=\"https://www.digitalsellz.com/product/status\" href=\"/redirect?signature=23372dc476133d7cd6a5957491c2d937434b0ebf&amp;url=https%3A%2F%2Fwww.digitalsellz.com%2Fproduct%2Fstatus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.digitalsellz.com/product/status</span><i class=\"icon-external-link\"></i></a> with the &quot;id=QUEjNDgxNSNBQQ&quot; body</li>\n<li>Update your <a href=\"/redirect?signature=392ad302af541473d2fe281b90f57a6c8601c662&amp;url=https%3A%2F%2Fwww.digitalsellz.com%2Fuser%2F%23%2Fproducts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>products page</span><i class=\"icon-external-link\"></i></a> \u2014 you will see the product status has been successfully changed</li>\n</ol>\n\n<p><strong>Ways to fix:</strong></p>\n\n<ol>\n<li>Check the id entirely, not only the number</li>\n<li>Add another anti-CSRF token</li>\n</ol>\n", 
    "vulnerability_information": "When we use the \"on/off\" buttons to set the products to be shown on the [products page](https://www.digitalsellz.com/user/#/products), a POST-request to https://www.digitalsellz.com/product/status is sent with only the product id as a parameter (no other security tokens).\r\n\r\nSo the idea is to make my rival visit a web page with a code like this:\r\n\r\n> <form action=\"https://www.digitalsellz.com/product/status\" method=\"POST\" onload=\"this.submit ()\">\r\n  <input type=\"hidden\" name=\"id\" value=\"%PRODUCT_ID%\" />\r\n</form>\r\n\r\nwhere %PRODUCT_ID% is an ID of one of the products shown on his DigitalSellz page. This way me make him hide his product, so the customers will more likely buy mine.\r\n\r\nSo the purpose is to get a proper product id. Let's find out how it's formed. To do this let's upload a few projects at our page. After this when we check the https://www.digitalsellz.com/product/alllist/1 page we see that every product has both a key and an id, for example:\r\n\r\n> {\"Id\":\"__WlojNDgxNSNZVg__\",\"name\":\"test\",\"currency\":\"USD\",\"price\":\"0.90\",\"prwlink\":null,\"prwtype\":\"No\",\"createddate\":\"2015-07-08 12:58:08\",\"key\":\"__NDgxNQ__\",\"onprofile\":\"Enable\"}\r\n\r\nThe key is a public identificator: it's contained in the product URL: https://www.digitalsellz.com/p/NDgxNQ, and the id is a private one: it's not shown there. So we need to figure out the connection between the key and the id.\r\n\r\nIf we take a look at them, we can notice they both look like Base64-encoded. Indeed, if we add \"==\" at the end and then do the Base64 decoding, __NDgxNQ__ and __WlojNDgxNSNZVg__ will turn into __4815__ and __ZZ#4815#YV__ correspondingly. Thus we see the product key is just its integer number and the id is the same number, just with some random symbols added!\r\n\r\nAnd what if we try to add some other symbols, for example AA, instead? Let's check it: __ZZ#4815#YV__ \u2192 __AA#4815#AA__ \u2192 __QUEjNDgxNSNBQQ__, and then we send a POST-request to https://www.digitalsellz.com/product/status with \"id=QUEjNDgxNSNBQQ\" parameters. In response we get {code:1}. Now if we open the [products page](https://www.digitalsellz.com/user/#/products) we can see the product status changed. So it works!\r\n\r\n__This way the scenario for the attacker can be as follows:__\r\n\r\n1. He goes to his rival's page\r\n2. He opens the product he's interested in and gets its key from the URL\r\n3. He decodes it, adds \"AA#\" and \"#AA\" at both sides and then encodes it back and thus gets the product id\r\n4. He creates a web page with such content:\r\n\r\n> > <form action=\"https://www.digitalsellz.com/product/status\" method=\"POST\" onload=\"this.submit ()\">\r\n  <input type=\"hidden\" name=\"id\" value=\"%PRODUCT_ID%\" />\r\n</form>\r\n\r\nwhere %PRODUCT_ID% is the product id he got, and sends a link to this page to the victim\r\n\r\nWhen the victim visits it, his product gets hidden from his page.\r\n\r\n__Proof of concept:__\r\n\r\n1. Go to your account and upload a product\r\n2. Go to your [products page](https://www.digitalsellz.com/user/#/products) and get its key from the url in the \"Buy now link\" cell. For example, __NDgxNQ__\r\n3. Add \"==\" at the end and Base64-decode it: __4815__\r\n4. Surround it by \"AA\" symbols: __AA#4815#AA__\r\n5. Encode it into Base64 and remove the \"==\" symbols from the end: __QUEjNDgxNSNBQQ__\r\n6. Send a POST-request to https://www.digitalsellz.com/product/status with the \"id=QUEjNDgxNSNBQQ\" body\r\n7. Update your [products page](https://www.digitalsellz.com/user/#/products) \u2014 you will see the product status has been successfully changed\r\n\r\n__Ways to fix:__\r\n\r\n1. Check the id entirely, not only the number\r\n2. Add another anti-CSRF token", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.digitalsellz.com/", 
            "about": "Planning to sell your files? Need a platform to sell your new e-book? May be just music, photos, articles, digital art or movies? Try DigitalSellz.com", 
            "twitter_handle": null, 
            "name": "DigitalSellz"
        }, 
        "handle": "digitalsellz", 
        "url": "https://hackerone.com/digitalsellz", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/293/c275d532e928daf76d41ae66a63e8ab5c6661d64_small.png?1405460051", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/293/42e6077c521cf2191b52ca05535a82e40550aa32_medium.png?1405460051"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 293, 
        "default_currency": "usd"
    }, 
    "is_published": false
}