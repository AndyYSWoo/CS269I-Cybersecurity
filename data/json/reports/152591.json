{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-08-11T22:00:10.477Z", 
    "voters": [
        "yaworsk", 
        "ysx", 
        "zee_shan", 
        "malcolmx", 
        "metawolf", 
        "youssefmahmoud", 
        "fantam1", 
        "jens", 
        "spetr0x", 
        "ruisilva", 
        "and 4 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "350.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 152591, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Stored XSS on invoice, executing on any subdomain", 
    "is_member_of_team?": null, 
    "vote_count": 14, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-09-10T22:00:10.542Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$350", 
    "attachments": [
        {
            "file_name": "xss.swf", 
            "type": "application/x-shockwave-flash", 
            "id": 106128, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/106/128/b255db20d8c11fb9a0d0dbbd1e1de90131f982a0/xss.swf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSGAJTS7X%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224908Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDNv1JJkb2JCBJezLRSK3A3HLsRbM1N2dJQCs3cdkO9DdSlu97QyvuTWjB9TDM0zF0K5xYiGpDCZFKPrax%2BsFz5KI1WenrJdfAQhjK2VjV8ng750HOo6R9QtyoSkXqJSITk3z0sX6u%2BaGuR53DR1SgrXgU4%2BZj3kzVsOKKtd61G%2BDZP2N3q%2FR9lSxtCBWOIkOltAHyGZcqelOD%2BNHIXr08GPe3urs8MfpCWN12Uc98ELvbzHllGEdfFgQzzzB%2Fh03QvsfmUHldJCz%2F09ZO2mOXeVGvvhGa6P439ow0kmfHorCf2l49cQlp550RAVCceslQNRsIpjs%2FscvNzwUdv1wSWwe0IojrRDLG4nQFwiQ1K3a1GlpxXYzTv176jcnZhJdyzHXn0aNVd3n2yu6QXF1RyrednAqH6GTeLsY%2BmFdJvs1E%2FSPzNOEj5naR190ChZbKYdPEncIwhYy7S7R055CIUnAzUObhGpKBIz%2FL7hX57SOAVB8Fp6J9NWYxxkcT1Ux5M8TRdPzjlD4gsEW3VAWt2ylLrHUu11rkw%2BhgkA7Cbe4vsOk6sYBm%2BDSV9vvQVz42kWGtRMos%2BFMKzKt4FX3akfBm1nwEgIo656m4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=4522f60550d659380974b26a0df765b167ef498e103a5660131b27b0a5e66485"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-07-21T08:21:46.246Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-21T08:21:46.246Z", 
            "actor": {
                "username": "jorgeleria", 
                "url": "/jorgeleria", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/680/3e44968ac3b661792cd01009529cfad463cdf10c_medium.jpg?1459336835"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "harvest", 
            "message": "Hi Edgar,\n\nThanks again for the detailed report!\n\nVery nicely done, you found a good one with this, the only downside is that you need to have Flash installed, but no vulnerability is perfect :) \nI'll triage the report and will get back to you soon!\n\nRegards,\nJorge", 
            "markdown_message": "<p>Hi Edgar,</p>\n\n<p>Thanks again for the detailed report!</p>\n\n<p>Very nicely done, you found a good one with this, the only downside is that you need to have Flash installed, but no vulnerability is perfect :) <br>\nI&#39;ll triage the report and will get back to you soon!</p>\n\n<p>Regards,<br>\nJorge</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1079603, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-21T14:51:13.274Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-21T14:51:13.274Z", 
            "actor": {
                "username": "eboda", 
                "url": "/eboda", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/247/d7776229fda51a883d9c330038262d2272fe2360_medium.png?1515881564"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "harvest", 
            "message": "Hello Jorge,\n\nI just realized the filter can be more easily bypassed, without the need to have Flash installed. No more downside now :P\n\n1. Upload an attachment and in the request remove the line containing the `Content-Type`:\n    ```\n    Content-Type: image/svg+xml\n```\n\n    so the request should look similar to:\n    ```{bash}\nContent-Disposition: form-data; name=\"asset[data]\"; filename=\"test\"\n\n\n    <script>alert(document.domain)</script>\n```\n\n2.  Now share the link you got, and the server will not send a `Content-Type` header, letting the browser guess the content type:\n\n    https://asdfasdfasdf.harvestapp.com/attachments/171407?client_key=171536e6aa8206bf39ea43a5f9443e7a145ed657\n\n\nNotice you can also force a content-type on the browser. In this attachment: https://qwerty.harvestapp.com/attachments/171410?client_key=171536e6aa8206bf39ea43a5f9443e7a145ed657  I have like mixed content and as you can see the browser does not interpret it as html. But if we instead use a link with a `.html`:\n\nhttps://qwerty.harvestapp.com/attachments/171410.html?client_key=171536e6aa8206bf39ea43a5f9443e7a145ed657\n\nwe get XSS again (this trick only works on Firefox, does not seem to work on Chrome).", 
            "markdown_message": "<p>Hello Jorge,</p>\n\n<p>I just realized the filter can be more easily bypassed, without the need to have Flash installed. No more downside now :P</p>\n\n<ol>\n<li>\n<p>Upload an attachment and in the request remove the line containing the <code>Content-Type</code>:</p>\n<pre class=\"highlight plaintext\"><code>Content-Type: image/svg+xml\n</code></pre>\n<p>so the request should look similar to:</p>\n<pre class=\"highlight shell\"><code>Content-Disposition: form-data; <span class=\"nv\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;asset[data]&quot;</span>; <span class=\"nv\">filename</span><span class=\"o\">=</span><span class=\"s2\">&quot;test&quot;</span>\n\n&lt;script&gt;alert<span class=\"o\">(</span>document.domain<span class=\"o\">)</span>&lt;/script&gt;\n</code></pre>\n</li>\n<li>\n<p>Now share the link you got, and the server will not send a <code>Content-Type</code> header, letting the browser guess the content type:</p>\n\n<p><a title=\"https://asdfasdfasdf.harvestapp.com/attachments/171407?client_key=171536e6aa8206bf39ea43a5f9443e7a145ed657\" href=\"/redirect?signature=d519c255cde87000104297b2078c5b651243ab29&amp;url=https%3A%2F%2Fasdfasdfasdf.harvestapp.com%2Fattachments%2F171407%3Fclient_key%3D171536e6aa8206bf39ea43a5f9443e7a145ed657\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://asdfasdfasdf.harvestapp.com/attachments/171407?client_key=171536e6aa8206bf39ea43a5f9443e7a145ed657</span><i class=\"icon-external-link\"></i></a></p>\n</li>\n</ol>\n\n<p>Notice you can also force a content-type on the browser. In this attachment: <a title=\"https://qwerty.harvestapp.com/attachments/171410?client_key=171536e6aa8206bf39ea43a5f9443e7a145ed657\" href=\"/redirect?signature=20f9eec32d5410a44dc6fbc4811b47342b08739b&amp;url=https%3A%2F%2Fqwerty.harvestapp.com%2Fattachments%2F171410%3Fclient_key%3D171536e6aa8206bf39ea43a5f9443e7a145ed657\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://qwerty.harvestapp.com/attachments/171410?client_key=171536e6aa8206bf39ea43a5f9443e7a145ed657</span><i class=\"icon-external-link\"></i></a>  I have like mixed content and as you can see the browser does not interpret it as html. But if we instead use a link with a <code>.html</code>:</p>\n\n<p><a title=\"https://qwerty.harvestapp.com/attachments/171410.html?client_key=171536e6aa8206bf39ea43a5f9443e7a145ed657\" href=\"/redirect?signature=e901631e637479e64180b336a929d32ebb976e2a&amp;url=https%3A%2F%2Fqwerty.harvestapp.com%2Fattachments%2F171410.html%3Fclient_key%3D171536e6aa8206bf39ea43a5f9443e7a145ed657\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://qwerty.harvestapp.com/attachments/171410.html?client_key=171536e6aa8206bf39ea43a5f9443e7a145ed657</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>we get XSS again (this trick only works on Firefox, does not seem to work on Chrome).</p>\n", 
            "type": "Activities::Comment", 
            "id": 1080358, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-25T10:58:12.376Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-25T10:58:12.376Z", 
            "actor": {
                "username": "jorgeleria", 
                "url": "/jorgeleria", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/680/3e44968ac3b661792cd01009529cfad463cdf10c_medium.jpg?1459336835"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "harvest", 
            "message": "Hi Edgar,\n\nThanks for the second report, we are very impressed and we are looking into it!\nAbout the first one, I messed up with the avalanche of reports and someone reported it a few hours before you, I'm very sorry about it.\n\nI will get back to you soon!\nCheers,\nJorge\n\n", 
            "markdown_message": "<p>Hi Edgar,</p>\n\n<p>Thanks for the second report, we are very impressed and we are looking into it!<br>\nAbout the first one, I messed up with the avalanche of reports and someone reported it a few hours before you, I&#39;m very sorry about it.</p>\n\n<p>I will get back to you soon!<br>\nCheers,<br>\nJorge</p>\n", 
            "type": "Activities::Comment", 
            "id": 1085462, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-03T08:40:54.515Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-03T08:40:54.515Z", 
            "actor": {
                "username": "eboda", 
                "url": "/eboda", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/247/d7776229fda51a883d9c330038262d2272fe2360_medium.png?1515881564"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "harvest", 
            "message": "Hey Jorge,\n\nthese issues seem to be fixed now. Any update on it?", 
            "markdown_message": "<p>Hey Jorge,</p>\n\n<p>these issues seem to be fixed now. Any update on it?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1103672, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "eboda", 
                "url": "/eboda"
            }, 
            "created_at": "2016-08-08T21:01:36.732Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-08T21:01:36.732Z", 
            "actor": {
                "username": "jorgeleria", 
                "url": "/jorgeleria", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/680/3e44968ac3b661792cd01009529cfad463cdf10c_medium.jpg?1459336835"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "harvest", 
            "message": "Hi Edgar,\n\nAs you said now it is fixed. Going to close the report, and we'll be awarding a bounty in a few days.\nThanks for your patience!\n\nBest regards,\nJorge", 
            "markdown_message": "<p>Hi Edgar,</p>\n\n<p>As you said now it is fixed. Going to close the report, and we&#39;ll be awarding a bounty in a few days.<br>\nThanks for your patience!</p>\n\n<p>Best regards,<br>\nJorge</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1113537, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-08-11T15:29:55.116Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-11T15:29:55.116Z", 
            "actor": {
                "url": "/harvest", 
                "profile": {
                    "name": "Harvest"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/237/6d125866767807c1a1abda02f0ffd805c5928ff4_medium.png?1403079688"
                }
            }, 
            "team_handle": "harvest", 
            "bounty_amount": "350.0", 
            "collaborator": {
                "username": "eboda", 
                "url": "/eboda"
            }, 
            "message": "Thanks for helping make Harvest more secure!", 
            "markdown_message": "<p>Thanks for helping make Harvest more secure!</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 1119550, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-11T21:58:37.772Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-11T21:58:37.772Z", 
            "actor": {
                "username": "eboda", 
                "url": "/eboda", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/247/d7776229fda51a883d9c330038262d2272fe2360_medium.png?1515881564"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "harvest", 
            "message": "Great stuff, thank you for the bounty! Mind disclosing this report?", 
            "markdown_message": "<p>Great stuff, thank you for the bounty! Mind disclosing this report?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1120523, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-11T22:00:10.509Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-11T22:00:10.509Z", 
            "actor": {
                "username": "eboda", 
                "url": "/eboda", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/247/d7776229fda51a883d9c330038262d2272fe2360_medium.png?1515881564"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "harvest", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1120530, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-10T22:00:18.135Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-10T22:00:18.135Z", 
            "actor": {
                "url": "/harvest", 
                "profile": {
                    "name": "Harvest"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/237/6d125866767807c1a1abda02f0ffd805c5928ff4_medium.png?1403079688"
                }
            }, 
            "team_handle": "harvest", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1186769, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "eboda", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/eboda", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/014/247/f5d06f8f31212f1fcbe5f517ca4059566ca97553_small.png?1515881564"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 60, 
        "name": "Cross-site Scripting (XSS) - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -70591737.56140368, 
    "disclosed_at": "2016-09-10T22:00:18.072Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/152591", 
    "created_at": "2016-07-20T16:16:19.688Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h2 id=\"summary\">Summary</h2>\n\n<p>There is a stored XSS vulnerability, which can execute on any subdomain as the vulnerability lies in an invoice. You are filtering HTML and js, but you neglect to filter out Flash objects, which can execute javascript.</p>\n\n<h2 id=\"steps-to-reproduce\">Steps to reproduce</h2>\n\n<ol>\n<li>\n<p>Create an invoice and add a flash file which executes javascript as an attachment. </p>\n\n<p>You can use <a href=\"#\" class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"xss.swf\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/106/128/b255db20d8c11fb9a0d0dbbd1e1de90131f982a0/xss.swf?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQSGAJTS7X%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T224908Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDNv1JJkb2JCBJezLRSK3A3HLsRbM1N2dJQCs3cdkO9DdSlu97QyvuTWjB9TDM0zF0K5xYiGpDCZFKPrax%2BsFz5KI1WenrJdfAQhjK2VjV8ng750HOo6R9QtyoSkXqJSITk3z0sX6u%2BaGuR53DR1SgrXgU4%2BZj3kzVsOKKtd61G%2BDZP2N3q%2FR9lSxtCBWOIkOltAHyGZcqelOD%2BNHIXr08GPe3urs8MfpCWN12Uc98ELvbzHllGEdfFgQzzzB%2Fh03QvsfmUHldJCz%2F09ZO2mOXeVGvvhGa6P439ow0kmfHorCf2l49cQlp550RAVCceslQNRsIpjs%2FscvNzwUdv1wSWwe0IojrRDLG4nQFwiQ1K3a1GlpxXYzTv176jcnZhJdyzHXn0aNVd3n2yu6QXF1RyrednAqH6GTeLsY%2BmFdJvs1E%2FSPzNOEj5naR190ChZbKYdPEncIwhYy7S7R055CIUnAzUObhGpKBIz%2FL7hX57SOAVB8Fp6J9NWYxxkcT1Ux5M8TRdPzjlD4gsEW3VAWt2ylLrHUu11rkw%2BhgkA7Cbe4vsOk6sYBm%2BDSV9vvQVz42kWGtRMos%2BFMKzKt4FX3akfBm1nwEgIo656m4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=4522f60550d659380974b26a0df765b167ef498e103a5660131b27b0a5e66485\" data-attachment-type=\"application/x-shockwave-flash\">xss.swf (F106128)</a>, it is from this site: <a title=\"https://soroush.secproject.com/blog/2012/11/xss-by-uploadingincluding-a-swf-file/\" href=\"/redirect?signature=1d924f8c958c630286cdaf058c0cf10505e10c39&amp;url=https%3A%2F%2Fsoroush.secproject.com%2Fblog%2F2012%2F11%2Fxss-by-uploadingincluding-a-swf-file%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://soroush.secproject.com/blog/2012/11/xss-by-uploadingincluding-a-swf-file/</span><i class=\"icon-external-link\"></i></a> . It will execute whatever javascript you provide in the <code>js</code> parameter.</p>\n</li>\n<li>\n<p>Now share the link to your report and the XSS will execute. You can use any subdomain you like. Here are some examples which will execute <code>alert(document.domain)</code>:</p>\n\n<p><a title=\"https://asdf.harvestapp.com/attachments/171020?client_key=a143393e99114b677ce6450cf9861c3bde60f817&amp;js=alert%28document.domain%29\" href=\"/redirect?signature=0de8092cf858813f82c48bd59b8580642a963cc8&amp;url=https%3A%2F%2Fasdf.harvestapp.com%2Fattachments%2F171020%3Fclient_key%3Da143393e99114b677ce6450cf9861c3bde60f817%26js%3Dalert%2528document.domain%2529\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://asdf.harvestapp.com/attachments/171020?client_key=a143393e99114b677ce6450cf9861c3bde60f817&amp;js=alert%28document.domain%29</span><i class=\"icon-external-link\"></i></a></p>\n\n<p><a title=\"https://abcdefghijklmnopqrstuvwxyz.harvestapp.com/attachments/171020?client_key=a143393e99114b677ce6450cf9861c3bde60f817&amp;js=alert%28document.domain%29\" href=\"/redirect?signature=4c6a5f3a1fffad766afd139b20e06f646511b883&amp;url=https%3A%2F%2Fabcdefghijklmnopqrstuvwxyz.harvestapp.com%2Fattachments%2F171020%3Fclient_key%3Da143393e99114b677ce6450cf9861c3bde60f817%26js%3Dalert%2528document.domain%2529\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://abcdefghijklmnopqrstuvwxyz.harvestapp.com/attachments/171020?client_key=a143393e99114b677ce6450cf9861c3bde60f817&amp;js=alert%28document.domain%29</span><i class=\"icon-external-link\"></i></a></p>\n</li>\n</ol>\n\n<h2 id=\"impact\">Impact</h2>\n\n<p>This is a stored XSS effecting all applications/subdomains on harvest. Notice that of course you can create a flash file which directly executes a payload, without the need for the <code>js</code> parameter like in my proof of concept.</p>\n", 
    "vulnerability_information": "Summary\n-----------\n\nThere is a stored XSS vulnerability, which can execute on any subdomain as the vulnerability lies in an invoice. You are filtering HTML and js, but you neglect to filter out Flash objects, which can execute javascript.\n\nSteps to reproduce\n-------------\n\n1. Create an invoice and add a flash file which executes javascript as an attachment. \n\n    You can use F106128, it is from this site: https://soroush.secproject.com/blog/2012/11/xss-by-uploadingincluding-a-swf-file/ . It will execute whatever javascript you provide in the `js` parameter.\n\n2. Now share the link to your report and the XSS will execute. You can use any subdomain you like. Here are some examples which will execute `alert(document.domain)`:\n\n    https://asdf.harvestapp.com/attachments/171020?client_key=a143393e99114b677ce6450cf9861c3bde60f817&js=alert%28document.domain%29\n\n    https://abcdefghijklmnopqrstuvwxyz.harvestapp.com/attachments/171020?client_key=a143393e99114b677ce6450cf9861c3bde60f817&js=alert%28document.domain%29\n\nImpact\n--------------\n\nThis is a stored XSS effecting all applications/subdomains on harvest. Notice that of course you can create a flash file which directly executes a payload, without the need for the `js` parameter like in my proof of concept.\n\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://getharvest.com", 
            "about": "Harvest is a leader in online time tracking and invoicing. Work better, and make smarter decisions for your business.", 
            "twitter_handle": "", 
            "name": "Harvest"
        }, 
        "handle": "harvest", 
        "url": "https://hackerone.com/harvest", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/237/5a435a0bb3e0eb921fa925e824c6ed9d31eefdc8_small.png?1403079688", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/237/6d125866767807c1a1abda02f0ffd805c5928ff4_medium.png?1403079688"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 237, 
        "default_currency": "usd"
    }, 
    "is_published": false
}