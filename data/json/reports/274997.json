{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": "2017-10-25T20:40:43.611Z", 
    "voters": [
        "geeknik"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 274997, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-10-25T20:28:59.716Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Use of uninitialized value in memarea_strdup (src/common/memarea.c:369)", 
    "is_member_of_team?": null, 
    "vote_count": 1, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Informative", 
    "public": true, 
    "attachments": [
        {
            "file_name": "test001.gz", 
            "type": "application/gzip", 
            "id": 226863, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/226/863/9c30a64ff8382a1fa892b59259d5af26d15b8c65/test001.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T223057Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=60d12b3668912426df4e158c9a8b990be966503e3a609b34e811d8ce19a2a4d1"
        }
    ], 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-10-06T09:21:09.939Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-06T09:21:09.939Z", 
            "actor": {
                "username": "geeknik", 
                "url": "/geeknik", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/012/276/9b441990828d1a89d32990f39813a18ffb68da86_medium.jpg?1532034474"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_title": "Use of uninitialized value in memarea_strdup (src/common/memarea.c:369)", 
                "old_title": "Use of unintilialized value in memarea_strdup (src/common/memarea.c:369)"
            }, 
            "team_handle": "torproject", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportTitleUpdated", 
            "id": 2048569, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-07T16:06:53.143Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-07T16:06:53.143Z", 
            "actor": {
                "username": "asn", 
                "url": "/asn", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "Hey geeknik,\n\nthanks for the reports! We are currently gathering in Montreal for the biyearly Tor meeting this next week so we are all pretty busy!\nWe'll try to take a look soon!\n\nThanks! :)", 
            "markdown_message": "<p>Hey geeknik,</p>\n\n<p>thanks for the reports! We are currently gathering in Montreal for the biyearly Tor meeting this next week so we are all pretty busy!<br>\nWe&#39;ll try to take a look soon!</p>\n\n<p>Thanks! :)</p>\n", 
            "type": "Activities::Comment", 
            "id": 2051210, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-23T11:28:28.164Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-23T11:28:28.164Z", 
            "actor": {
                "username": "asn", 
                "url": "/asn", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "Hello again,\n\nwe are now coming back to life after the meeting. Hoping to resolve these reports within this week.\n\nThanks for your patience :)", 
            "markdown_message": "<p>Hello again,</p>\n\n<p>we are now coming back to life after the meeting. Hoping to resolve these reports within this week.</p>\n\n<p>Thanks for your patience :)</p>\n", 
            "type": "Activities::Comment", 
            "id": 2094579, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-25T18:07:14.654Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-25T18:07:14.654Z", 
            "actor": {
                "username": "argonblue", 
                "url": "/argonblue", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "Hi! Thanks for the report, and for your patience.\nI'm not finding an obvious way for this uninitialized read to occur. All uses of `mem_strdup()` in parsecommon.c go through the `RET_ERR()` macro, and all invocations of that macro seem to pass either string literals or a buffer that's just been written to with `tor_snprintf()` with arguments that should result in success.\nAre you able to reproduce this with better line number information? It would be helpful to know more precisely where in `get_next_token()` this is coming from. Also the \"offset 0\" looks suspicious and makes me wonder if this is a false positive.", 
            "markdown_message": "<p>Hi! Thanks for the report, and for your patience.<br>\nI&#39;m not finding an obvious way for this uninitialized read to occur. All uses of <code>mem_strdup()</code> in parsecommon.c go through the <code>RET_ERR()</code> macro, and all invocations of that macro seem to pass either string literals or a buffer that&#39;s just been written to with <code>tor_snprintf()</code> with arguments that should result in success.<br>\nAre you able to reproduce this with better line number information? It would be helpful to know more precisely where in <code>get_next_token()</code> this is coming from. Also the &quot;offset 0&quot; looks suspicious and makes me wonder if this is a false positive.</p>\n", 
            "type": "Activities::BugNeedsMoreInfo", 
            "id": 2102414, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-25T18:29:27.909Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-25T18:29:27.909Z", 
            "actor": {
                "username": "geeknik", 
                "url": "/geeknik", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/012/276/9b441990828d1a89d32990f39813a18ffb68da86_medium.jpg?1532034474"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "@argonblue, thank you for the update. I went ahead and rebuilt tor using the following:\n```\nCC=clang LD=clang CFLAGS=\"-O1 -fno-omit-frame-pointer -g -fsanitize=memory -fsanitize-memory-use-after-dtor -fsanitize-memory-track-origins=2 -fno-optimize-sibling-calls -fsanitize-coverage=edge,trace-pc-guard,indirect-calls,trace-cmp,trace-div,trace-gep\" LDFLAGS=\"-O1 -fno-omit-frame-pointer -g -fsanitize=memory -fsanitize-memory-use-after-dtor -fsanitize-memory-track-origins=2 -fno-optimize-sibling-calls -fsanitize-coverage=edge,trace-pc-guard,indirect-calls,trace-cmp,trace-div,trace-gep\"\n```\n\n`./fuzz-hsdescv2 --debug < test001` now returns this:\n```\nUninitialized bytes in __interceptor_strlen at offset 0 inside [0x7ffc1289c1c0, 51)\n==27361==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x564959acee11 in memarea_strdup /root/tor/src/common/memarea.c:261:34\n    #1 0x56495962ef9e in get_next_token /root/tor/src/or/parsecommon.c\n    #2 0x56495962b7e3 in tokenize_string /root/tor/src/or/parsecommon.c:72:11\n    #3 0x5649597d7623 in rend_parse_v2_service_descriptor /root/tor/src/or/routerparse.c:5197:7\n    #4 0x5649592728e9 in fuzz_main /root/tor/src/test/fuzz/fuzz_hsdescv2.c:40:10\n    #5 0x564959271fc0 in main /root/tor/src/test/fuzz/fuzzing_common.c:179:3\n    #6 0x7ffb1b7f63f0 in __libc_start_main /build/glibc-mXZSwJ/glibc-2.24/csu/../csu/libc-start.c:291\n    #7 0x5649591ffa19 in _start (/root/tor/src/test/fuzz/fuzz-hsdescv2+0x71a19)\n\n  Uninitialized value was created by an allocation of 'ebuf' in the stack frame of function 'get_next_token'\n    #0 0x56495962d320 in get_next_token /root/tor/src/or/parsecommon.c:253\n\nSUMMARY: MemorySanitizer: use-of-uninitialized-value /root/tor/src/common/memarea.c:261:34 in memarea_strdup\nExiting\n```", 
            "markdown_message": "<p><a href=\"/argonblue\">@argonblue</a>, thank you for the update. I went ahead and rebuilt tor using the following:</p>\n<pre class=\"highlight plaintext\"><code>CC=clang LD=clang CFLAGS=&quot;-O1 -fno-omit-frame-pointer -g -fsanitize=memory -fsanitize-memory-use-after-dtor -fsanitize-memory-track-origins=2 -fno-optimize-sibling-calls -fsanitize-coverage=edge,trace-pc-guard,indirect-calls,trace-cmp,trace-div,trace-gep&quot; LDFLAGS=&quot;-O1 -fno-omit-frame-pointer -g -fsanitize=memory -fsanitize-memory-use-after-dtor -fsanitize-memory-track-origins=2 -fno-optimize-sibling-calls -fsanitize-coverage=edge,trace-pc-guard,indirect-calls,trace-cmp,trace-div,trace-gep&quot;\n</code></pre>\n<p><code>./fuzz-hsdescv2 --debug &lt; test001</code> now returns this:</p>\n<pre class=\"highlight plaintext\"><code>Uninitialized bytes in __interceptor_strlen at offset 0 inside [0x7ffc1289c1c0, 51)\n==27361==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x564959acee11 in memarea_strdup /root/tor/src/common/memarea.c:261:34\n    #1 0x56495962ef9e in get_next_token /root/tor/src/or/parsecommon.c\n    #2 0x56495962b7e3 in tokenize_string /root/tor/src/or/parsecommon.c:72:11\n    #3 0x5649597d7623 in rend_parse_v2_service_descriptor /root/tor/src/or/routerparse.c:5197:7\n    #4 0x5649592728e9 in fuzz_main /root/tor/src/test/fuzz/fuzz_hsdescv2.c:40:10\n    #5 0x564959271fc0 in main /root/tor/src/test/fuzz/fuzzing_common.c:179:3\n    #6 0x7ffb1b7f63f0 in __libc_start_main /build/glibc-mXZSwJ/glibc-2.24/csu/../csu/libc-start.c:291\n    #7 0x5649591ffa19 in _start (/root/tor/src/test/fuzz/fuzz-hsdescv2+0x71a19)\n\n  Uninitialized value was created by an allocation of &#39;ebuf&#39; in the stack frame of function &#39;get_next_token&#39;\n    #0 0x56495962d320 in get_next_token /root/tor/src/or/parsecommon.c:253\n\nSUMMARY: MemorySanitizer: use-of-uninitialized-value /root/tor/src/common/memarea.c:261:34 in memarea_strdup\nExiting\n</code></pre>", 
            "type": "Activities::BugNew", 
            "id": 2102494, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-25T19:02:30.553Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-25T19:02:30.553Z", 
            "actor": {
                "username": "argonblue", 
                "url": "/argonblue", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "With your input file and `CC=clang CFLAGS='-g -O0 -fsanitize=memory'` on clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final), I get\n```\nOct 25 13:46:42.815 [warn] parse error: Too few arguments to rendezvous-service-descriptor\nOct 25 13:46:42.815 [warn] Error tokenizing descriptor.\nOct 25 13:46:42.815 [debug] fuzz_main: Parsing failed\n```\nand no warnings.  Could you please try again using `-O0` instead of `-O1`? Also the stack-allocated buffer `ebuf` is 128 bytes, not 51 as shown in the MemorySanitizer output. Coincidentally, \"Too few arguments to rendezvous-service-descriptor\" is 51 bytes including the terminating null character. Maybe MemorySanitizer is somehow marking those 51 bytes as \"uninitialized\" despite having been written by `vsnprintf()`? I'm sorry, this is looking more like a false positive to me now.", 
            "markdown_message": "<p>With your input file and <code>CC=clang CFLAGS=&#39;-g -O0 -fsanitize=memory&#39;</code> on clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final), I get</p>\n<pre class=\"highlight plaintext\"><code>Oct 25 13:46:42.815 [warn] parse error: Too few arguments to rendezvous-service-descriptor\nOct 25 13:46:42.815 [warn] Error tokenizing descriptor.\nOct 25 13:46:42.815 [debug] fuzz_main: Parsing failed\n</code></pre>\n<p>and no warnings.  Could you please try again using <code>-O0</code> instead of <code>-O1</code>? Also the stack-allocated buffer <code>ebuf</code> is 128 bytes, not 51 as shown in the MemorySanitizer output. Coincidentally, &quot;Too few arguments to rendezvous-service-descriptor&quot; is 51 bytes including the terminating null character. Maybe MemorySanitizer is somehow marking those 51 bytes as &quot;uninitialized&quot; despite having been written by <code>vsnprintf()</code>? I&#39;m sorry, this is looking more like a false positive to me now.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2102642, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-25T19:30:13.666Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-25T19:31:33.681Z", 
            "actor": {
                "username": "geeknik", 
                "url": "/geeknik", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/012/276/9b441990828d1a89d32990f39813a18ffb68da86_medium.jpg?1532034474"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "Coincidentally, this is my first time playing with `-fsanitize=memory` because it's a royal PITA (and fuzzing with MSan is uber slooooooooooow), so while it might be a false positive for tor, it's probably good enough for a bug report over to the LLVM folks. (; Anyways, here is the results of using -O0 instead of -O1:\n\n```\ntor/src/test/fuzz/fuzz-hsdescv2 --debug < test001\nOct 25 19:28:22.665 [warn] parse error: Too few arguments to rendezvous-service-descriptor\nOct 25 19:28:22.666 [warn] Error tokenizing descriptor.\nOct 25 19:28:22.666 [debug] fuzz_main: Parsing failed\n```\n\nDang. \ud83d\ude22 Hopefully some of the other similar bugs I reported aren't FPs like this one. (:\n\n", 
            "markdown_message": "<p>Coincidentally, this is my first time playing with <code>-fsanitize=memory</code> because it&#39;s a royal PITA (and fuzzing with MSan is uber slooooooooooow), so while it might be a false positive for tor, it&#39;s probably good enough for a bug report over to the LLVM folks. (; Anyways, here is the results of using -O0 instead of -O1:</p>\n<pre class=\"highlight plaintext\"><code>tor/src/test/fuzz/fuzz-hsdescv2 --debug &lt; test001\nOct 25 19:28:22.665 [warn] parse error: Too few arguments to rendezvous-service-descriptor\nOct 25 19:28:22.666 [warn] Error tokenizing descriptor.\nOct 25 19:28:22.666 [debug] fuzz_main: Parsing failed\n</code></pre>\n<p>Dang. \ud83d\ude22 Hopefully some of the other similar bugs I reported aren&#39;t FPs like this one. (:</p>\n", 
            "type": "Activities::Comment", 
            "id": 2102706, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-25T20:28:27.230Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-25T20:28:27.230Z", 
            "actor": {
                "username": "argonblue", 
                "url": "/argonblue", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "Thanks for your help with the investigation! Closing as informative, so we can make this public in case it helps with reporting bugs to LLVM. My suspicion is that MemorySanitizer is modeling `vsnprintf()` incorrectly, or failing to intercept it. The optimization level also appears to have a role.", 
            "markdown_message": "<p>Thanks for your help with the investigation! Closing as informative, so we can make this public in case it helps with reporting bugs to LLVM. My suspicion is that MemorySanitizer is modeling <code>vsnprintf()</code> incorrectly, or failing to intercept it. The optimization level also appears to have a role.</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 2103026, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-25T20:28:59.747Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-25T20:28:59.747Z", 
            "actor": {
                "username": "argonblue", 
                "url": "/argonblue", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2103029, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-25T20:40:43.633Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-25T20:40:43.633Z", 
            "actor": {
                "username": "geeknik", 
                "url": "/geeknik", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/012/276/9b441990828d1a89d32990f39813a18ffb68da86_medium.jpg?1532034474"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2103076, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-25T20:40:43.678Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-25T20:40:43.678Z", 
            "actor": {
                "username": "geeknik", 
                "url": "/geeknik", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/012/276/9b441990828d1a89d32990f39813a18ffb68da86_medium.jpg?1532034474"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2103077, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "geeknik", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/geeknik", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/012/276/a940a20d5207bd6044c795859801e3b1e1828604_small.jpg?1532034474"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 2, 
        "name": "Memory Corruption - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2017-10-25T20:40:43.658Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/274997", 
    "created_at": "2017-10-06T09:20:30.540Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Triggered in <code>51e4748</code>, compiled with clang 6.0.0-trunk and -fsanitize=memory.</p>\n\n<p><code>./fuzz-hsdescv2 &lt; test001</code></p>\n<pre class=\"highlight plaintext\"><code>Uninitialized bytes in __interceptor_strlen at offset 0 inside [0x7fff5525ff80, 51)\n==19693==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x5570edfe5fbd in memarea_strdup /root/tor/src/common/memarea.c:369:14\n    #1 0x5570edc4d77c in get_next_token /root/tor/src/or/parsecommon.c\n    #2 0x5570edc4a097 in tokenize_string /root/tor/src/or/parsecommon.c:72:11\n    #3 0x5570edda67f7 in rend_parse_v2_service_descriptor /root/tor/src/or/routerparse.c:5197:7\n    #4 0x5570ed946d02 in fuzz_main /root/tor/src/test/fuzz/fuzz_hsdescv2.c:40:10\n    #5 0x5570ed94677a in main /root/tor/src/test/fuzz/fuzzing_common.c:179:3\n    #6 0x7fee60f8a3f0 in __libc_start_main /build/glibc-mXZSwJ/glibc-2.24/csu/../csu/libc-start.c:291\n    #7 0x5570ed8d47d9 in _start (/root/tor/src/test/fuzz/fuzz-hsdescv2+0x717d9)\n\nSUMMARY: MemorySanitizer: use-of-uninitialized-value /root/tor/src/common/memarea.c:369:14 in memarea_strdup\n</code></pre>", 
    "vulnerability_information": "Triggered in `51e4748 `, compiled with clang 6.0.0-trunk and -fsanitize=memory.\n\n`./fuzz-hsdescv2 < test001`\n\n```\nUninitialized bytes in __interceptor_strlen at offset 0 inside [0x7fff5525ff80, 51)\n==19693==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x5570edfe5fbd in memarea_strdup /root/tor/src/common/memarea.c:369:14\n    #1 0x5570edc4d77c in get_next_token /root/tor/src/or/parsecommon.c\n    #2 0x5570edc4a097 in tokenize_string /root/tor/src/or/parsecommon.c:72:11\n    #3 0x5570edda67f7 in rend_parse_v2_service_descriptor /root/tor/src/or/routerparse.c:5197:7\n    #4 0x5570ed946d02 in fuzz_main /root/tor/src/test/fuzz/fuzz_hsdescv2.c:40:10\n    #5 0x5570ed94677a in main /root/tor/src/test/fuzz/fuzzing_common.c:179:3\n    #6 0x7fee60f8a3f0 in __libc_start_main /build/glibc-mXZSwJ/glibc-2.24/csu/../csu/libc-start.c:291\n    #7 0x5570ed8d47d9 in _start (/root/tor/src/test/fuzz/fuzz-hsdescv2+0x717d9)\n\nSUMMARY: MemorySanitizer: use-of-uninitialized-value /root/tor/src/common/memarea.c:369:14 in memarea_strdup\n```", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.torproject.org/", 
            "about": "Anonymity Online", 
            "twitter_handle": "torproject", 
            "name": "Tor"
        }, 
        "handle": "torproject", 
        "url": "https://hackerone.com/torproject", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/800/fe36670e5f7b7381549279801c447ae8a3ee12b0_small.jpg?1453239375", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/001/800/f60c4e0509668a31fcd9604fc653ef8a43f2e5c4_medium.jpg?1453239375"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 1800, 
        "default_currency": "usd"
    }, 
    "is_published": false
}