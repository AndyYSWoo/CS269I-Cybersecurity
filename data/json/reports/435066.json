{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2018-11-30T01:06:03.932Z", 
    "voters": [
        "mirchr", 
        "ziot", 
        "jobert", 
        "derision", 
        "spam404", 
        "kapytein", 
        "teknogeek", 
        "s_p_q_r", 
        "mik317", 
        "0xc0ffee", 
        "and 98 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 435066, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-11-30T01:26:39.843Z", 
    "vulnerability_information": "The `embedded_submission_form_uuid` parameter in the `/graphql` endpoint is vulnerable to a SQL injection. Execute the following command to reproduce the behavior:\n\n**Locally**:\n```\ncurl -X POST http://localhost:8080/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(30\\)%3B--%27\n```\n\n**HackerOne.com**\n```\ncurl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(30\\)%3B--%27\n```\n\n**Additional proof**\n```\n$ time curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(5\\)%3B--%27\n{}curl -X POST   0.03s user 0.01s system 0% cpu 5.726 total\n$ time curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(1\\)%3B--%27\n{}curl -X POST   0.03s user 0.01s system 2% cpu 1.631 total\n$ time curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(10\\)%3B--%27\n{}curl -X POST   0.02s user 0.01s system 0% cpu 10.557 total\n```\n\n## Impact\n\nThe SQL injections seems to be executing in the context of the `secure` schema, so impact is currently unknown. However, since an attacker may be able to switch schemas, we should consider this to have a high impact on confidentiality.", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "high", 
            "privileges_required": "none", 
            "user_interaction": "none", 
            "attack_vector": "network", 
            "attack_complexity": "low", 
            "scope": "changed", 
            "integrity": "none", 
            "availability": "none"
        }, 
        "rating": "critical", 
        "score": 10.0, 
        "author_type": "User"
    }, 
    "title": "SQL injection in GraphQL endpoint through embedded_submission_form_uuid parameter", 
    "is_member_of_team?": null, 
    "vote_count": 108, 
    "summaries": [
        {
            "category": "team", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 12272, 
            "content": "# Summary\nThe `embedded_submission_form_uuid` parameter in the `/graphql` endpoint was vulnerable to a SQL injection. This allowed an attacker to extract information from the public and secure schema. We have determine that the vulnerability was not exploited. A thorough explanation can be found in the report below.\n\n# Timeline\n\n| **Time (PST)**            | **Action**                                                                          |\n|---------------------------|-------------------------------------------------------------------------------------|\n| November 6th, 2018 8:04a  | @tomdev notices a `PG::SyntaxError` exception in hackerone.com's backend \ud83d\ude4c           |\n| November 6th, 2018 8:04a  | @jjoos alerted InfoSec, people were assigned tasks                                  |\n| November 6th, 2018 8:20a  | Root cause was identified and a hot fix was put up for review                       |\n| November 6th, 2018 8:52a  | This report was filed to document the vulnerability                          |\n| November 6th, 2018 12:42p | A hot fix for the security vulnerability was released                               |\n| November 15th, 2018 2:20p | Investigation was concluded and determined that the vulnerability was not exploited |\n\n# Impacted Data\nWe have determine that the vulnerability was not exploited. A thorough explanation can be found in the report below.\n\n# Root cause\nHackerOne.com has a GraphQL endpoint that the frontend uses to query its backend. When the embedded submission form feature was introduced, a design decisions was made to leverage a GraphQL parameter rather than an input field. Input fields are properly sanitized. However, GraphQL parameters, were not. These GraphQL parameters were not designed to take raw user input. Here's the vulnerable piece of code:\n\n```ruby\nunless database_parameters_up_to_date\n  safe_query = ''\n\n  new_parameters.each do |key, value|\n    safe_query += \"SET SESSION #{key} TO #{value};\" # <-- \ud83d\ude2e\n  end\n\n  begin\n    connection.query(safe_query)\n  rescue ActiveRecord::StatementInvalid => e\n    # NOTE: when the transaction is aborted, we cannot set or reset any parameters.\n    # Changes of previous SET statements are undone as well, so we can safely do\n    # nothing here\n    raise e unless e.cause.is_a? PG::InFailedSqlTransaction\n  end\nend\n```\n\nThe reason why we have to pass down these parameters to the PostgreSQL query level, is because HackerOne.com's database has two separate schemas. The `public` schema, which is where all the data resides and what we call the `secure` schema. The latter is a set of derived views from the `public` schema that returns data based on the currently signed in user (or signed out, for that matter). By default, GraphQL queries the `secure` schema. These derived views are automatically generated based on authorization logic we define in our GraphQL layer. This reduces the changes of information disclosure vulnerabilities, such as IDOR and SQL injections. Even when an attacker were to be able to query the `secure` schema, it'd reduce the number of exposed records significantly.", 
            "content_html": "<h1 id=\"summary\">Summary</h1>\n\n<p>The <code>embedded_submission_form_uuid</code> parameter in the <code>/graphql</code> endpoint was vulnerable to a SQL injection. This allowed an attacker to extract information from the public and secure schema. We have determine that the vulnerability was not exploited. A thorough explanation can be found in the report below.</p>\n\n<h1 id=\"timeline\">Timeline</h1>\n\n<table>\n<thead>\n<tr>\n<th><strong>Time (PST)</strong></th>\n<th><strong>Action</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>November 6th, 2018 8:04a</td>\n<td>\n<a href=\"/tomdev\">@tomdev</a> notices a <code>PG::SyntaxError</code> exception in hackerone.com&#39;s backend \ud83d\ude4c</td>\n</tr>\n<tr>\n<td>November 6th, 2018 8:04a</td>\n<td>\n<a href=\"/jjoos\">@jjoos</a> alerted InfoSec, people were assigned tasks</td>\n</tr>\n<tr>\n<td>November 6th, 2018 8:20a</td>\n<td>Root cause was identified and a hot fix was put up for review</td>\n</tr>\n<tr>\n<td>November 6th, 2018 8:52a</td>\n<td>This report was filed to document the vulnerability</td>\n</tr>\n<tr>\n<td>November 6th, 2018 12:42p</td>\n<td>A hot fix for the security vulnerability was released</td>\n</tr>\n<tr>\n<td>November 15th, 2018 2:20p</td>\n<td>Investigation was concluded and determined that the vulnerability was not exploited</td>\n</tr>\n</tbody>\n</table>\n\n<h1 id=\"impacted-data\">Impacted Data</h1>\n\n<p>We have determine that the vulnerability was not exploited. A thorough explanation can be found in the report below.</p>\n\n<h1 id=\"root-cause\">Root cause</h1>\n\n<p>HackerOne.com has a GraphQL endpoint that the frontend uses to query its backend. When the embedded submission form feature was introduced, a design decisions was made to leverage a GraphQL parameter rather than an input field. Input fields are properly sanitized. However, GraphQL parameters, were not. These GraphQL parameters were not designed to take raw user input. Here&#39;s the vulnerable piece of code:</p>\n<pre class=\"highlight ruby\"><code><span class=\"k\">unless</span> <span class=\"n\">database_parameters_up_to_date</span>\n  <span class=\"n\">safe_query</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n\n  <span class=\"n\">new_parameters</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">|</span>\n    <span class=\"n\">safe_query</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;SET SESSION </span><span class=\"si\">#{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\"> TO </span><span class=\"si\">#{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">;&quot;</span> <span class=\"c1\"># &lt;-- \ud83d\ude2e</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">begin</span>\n    <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">safe_query</span><span class=\"p\">)</span>\n  <span class=\"k\">rescue</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">StatementInvalid</span> <span class=\"o\">=&gt;</span> <span class=\"n\">e</span>\n    <span class=\"c1\"># NOTE: when the transaction is aborted, we cannot set or reset any parameters.</span>\n    <span class=\"c1\"># Changes of previous SET statements are undone as well, so we can safely do</span>\n    <span class=\"c1\"># nothing here</span>\n    <span class=\"k\">raise</span> <span class=\"n\">e</span> <span class=\"k\">unless</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nf\">cause</span><span class=\"p\">.</span><span class=\"nf\">is_a?</span> <span class=\"no\">PG</span><span class=\"o\">::</span><span class=\"no\">InFailedSqlTransaction</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n<p>The reason why we have to pass down these parameters to the PostgreSQL query level, is because HackerOne.com&#39;s database has two separate schemas. The <code>public</code> schema, which is where all the data resides and what we call the <code>secure</code> schema. The latter is a set of derived views from the <code>public</code> schema that returns data based on the currently signed in user (or signed out, for that matter). By default, GraphQL queries the <code>secure</code> schema. These derived views are automatically generated based on authorization logic we define in our GraphQL layer. This reduces the changes of information disclosure vulnerabilities, such as IDOR and SQL injections. Even when an attacker were to be able to query the <code>secure</code> schema, it&#39;d reduce the number of exposed records significantly.</p>\n"
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "https://hackerone.com", 
        "max_severity": "critical", 
        "databaseId": 3, 
        "asset_type": "URL"
    }, 
    "allow_singular_disclosure_at": "2018-12-30T01:06:04.055Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2018-11-06T16:54:46.681Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-11-06T16:54:46.681Z", 
            "actor": {
                "username": "jobert", 
                "url": "/jobert", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/002/35cc46a21b3756f9df61d6269d287b9dc53d5b27_medium.png?1410255083"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_title": "SQL injection in GraphQL endpoint through embedded_submission_form_uuid parameter", 
                "old_title": "SQL injection in GraphQL endpoint through UUID tracer parameter"
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportTitleUpdated", 
            "id": 3594658, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-11-06T16:55:16.383Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-11-06T16:55:16.383Z", 
            "actor": {
                "username": "pei", 
                "url": "/pei", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/016/939/a55a962aa01949228bacd2fbcd6d889aded8b4fa_medium.png?1422923318"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 3594660, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-11-07T19:20:48.403Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-11-07T19:20:48.403Z", 
            "actor": {
                "username": "jobert", 
                "url": "/jobert", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/002/35cc46a21b3756f9df61d6269d287b9dc53d5b27_medium.png?1410255083"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Yesterday, at 12:42 PM PDT, a patch was released to address the SQL injection. The underlying root cause has not been addressed yet. From our preliminary investigation, it looks like a sanitization step was skipped when converting the GraphQL query into a SQL statement. We will continue to investigation and determine whether this has been abused. The SQL injection can currently not be exploited anymore and we didn't find any other occurrences of the problem.", 
            "markdown_message": "<p>Yesterday, at 12:42 PM PDT, a patch was released to address the SQL injection. The underlying root cause has not been addressed yet. From our preliminary investigation, it looks like a sanitization step was skipped when converting the GraphQL query into a SQL statement. We will continue to investigation and determine whether this has been abused. The SQL injection can currently not be exploited anymore and we didn&#39;t find any other occurrences of the problem.</p>\n", 
            "type": "Activities::Comment", 
            "id": 3602706, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-11-07T21:39:12.921Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-11-07T21:39:12.921Z", 
            "actor": {
                "username": "jobert", 
                "url": "/jobert", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/002/35cc46a21b3756f9df61d6269d287b9dc53d5b27_medium.png?1410255083"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "The commit `a6f976743368c29f8b4c0590079808e5583d4fb6` (rH) introduced the `embedded_submission_form_uuid ` parameter in the `/graphql` endpoint. This commit was merged on develop on September 3rd, 2018 and released to production on September 4th, 2018. In order for someone to have exploited this, the request would match `/graphql.*?embedded_submission_form_uuid.*?'`. The load balancer access logs are currently being queried to filter all requests that match this regular expression. We will manually review any matching request to determine whether this has been abused.", 
            "markdown_message": "<p>The commit <code>a6f976743368c29f8b4c0590079808e5583d4fb6</code> (rH) introduced the <code>embedded_submission_form_uuid</code> parameter in the <code>/graphql</code> endpoint. This commit was merged on develop on September 3rd, 2018 and released to production on September 4th, 2018. In order for someone to have exploited this, the request would match <code>/graphql.*?embedded_submission_form_uuid.*?&#39;</code>. The load balancer access logs are currently being queried to filter all requests that match this regular expression. We will manually review any matching request to determine whether this has been abused.</p>\n", 
            "type": "Activities::Comment", 
            "id": 3605170, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-11-09T06:04:19.475Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-11-09T06:04:19.475Z", 
            "actor": {
                "url": "/security", 
                "profile": {
                    "name": "HackerOne"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/013/28af2ada2cc00aa9427504fc5a14f587362df84b_medium.png?1445331713"
                }
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 3614481, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-11-30T00:28:19.564Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-11-30T00:31:03.206Z", 
            "actor": {
                "username": "jobert", 
                "url": "/jobert", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/002/35cc46a21b3756f9df61d6269d287b9dc53d5b27_medium.png?1410255083"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "On November 15th, we concluded the investigation to determine whether this has been abused. The investigation started on November 7th, but was pushed back due to the [SAML JIT incident](/reports/438306). **TL;DR: the SQL injection was not absued**. A more detailed answer can be found below.\n\nBased on the root cause of the vulnerability we identified a number of straightforward identifiers:\n\n - a `POST` request was made to `/graphql`\n - the `embedded_submission_form_uuid` parameter was passed in the URL or `POST` body (either as JSON or form encoded)\n - the user input must've contained a single quote in order to exploit the vulnerability\n\nThese identifiers helped us write a query to extract useful information from our Log Analysis Platform to see whether this was abused. We ran the query on the access logs from September 3rd, 2018 until October 8th, 2018. The query is slightly optimized and it took 00:06:34 to execute (it queries from both the hot and cold storage) and returned 104 matching requests.\n\n**Query**\n```\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n```\n\nThis query filters all requests to the `/graphql` endpoint with an embedded submission form UUID. The regular expression extracts the user input, decodes it, and constructs the executed SQL query. This helped us to immediately see what happened and determine whether someone purposely exploited this. We were also returning some more fields to help us figure out what the user would've seen, such as the HTTP response status code.\n\nSome interesting indicators that helped us here to determine whether this was abused: \n\n - the HTTP response status code (`code`) - in most cases it was a non-200 response, indicating that something went wrong. In most cases, this was related to a payload being used that would not work for PostgreSQL\n - the PoC that we developed ourselves executed the `pg_sleep` function - we used the `upstream_response_time`, `executedSqlQuery`, and `code` to determine whether the SQL was actually executed. Of the four `pg_sleep` functions we executed (`pg_sleep(1)`, `pg_sleep(5)`, `pg_sleep(10)`, and `pg_sleep(30)`), three were successful. The last one, with a timeout of 30, returned a 500 Internal Server Error because the backend aborted the request after 28 seconds.\n - in the logs, we found multiple scanners who tried to find a vulnerability. However, the majority of the scanners expect that the injection point is within a `WHERE` clause. In this case, the injection point was within a different context: `SET SESSION <parameter> TO '<injection>'`. Because of this, automated scanners saw 500 Internal Server Errors and (most likely) didn't report a potential SQLi.\n\nThe **only** successful requests that were executed were our own `pg_sleep` payloads and came from trusted IP addresses.\n\nEarlier in this writeup, I wrote that one of the indicators was as following:\n\n - the `embedded_submission_form_uuid` parameter was passed in the URL or `POST` body (either as JSON or form encoded)\n\nThe underlying controller used the `params` object, which doesn't care where the user specified the parameter in the `POST` body or a URL (`GET`) parameter. This means that the nginx logs are not enough, as those don't log HTTP body data. The Rails logs do contain this information, but are harder to query, given that it's not in a JSON blob (**action item**: H1's security team prioritized a task to have a separate log pipeline that consists of JSON blogs). We've used the following query to filter the `embedded_submission_form_uuid` parameter from parameters Rails received:\n\n**Query**\n```\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n```\n\nThe result set was actually smaller (73 rows) than the initial results that were returned by the nginx access log query. We've looked into this and determined that not all requests from the load balancer were sent to unicorn and not all of the requests made it to Rails. This was not unexpected because nginx and/or Rack rejected some of the requests. We did not found any indicators that someone moved the parameters to the body. Here are the aggregated log counts per status code, which would also be a good indicator to see if this was abused:\n\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\nNone of the requests showed any form of exploitation. This is why the team concluded that this wasn't abused.\n\nThe main takeaway from the root cause analysis and investigation is the reinforcement that building out an application log pipeline that includes all this information to be able to give an answer faster. The HackerOne security team has since prioritized building out these cohesive logs in a queryable format and has started collecting logs with enough context.\n\nThis incident will be played out again early next year as a table-top exercise to see how well we can respond to the same incident, but then with the new logs.", 
            "markdown_message": "<p>On November 15th, we concluded the investigation to determine whether this has been abused. The investigation started on November 7th, but was pushed back due to the <a href=\"/reports/438306\">SAML JIT incident</a>. <strong>TL;DR: the SQL injection was not absued</strong>. A more detailed answer can be found below.</p>\n\n<p>Based on the root cause of the vulnerability we identified a number of straightforward identifiers:</p>\n\n<ul>\n<li>a <code>POST</code> request was made to <code>/graphql</code>\n</li>\n<li>the <code>embedded_submission_form_uuid</code> parameter was passed in the URL or <code>POST</code> body (either as JSON or form encoded)</li>\n<li>the user input must&#39;ve contained a single quote in order to exploit the vulnerability</li>\n</ul>\n\n<p>These identifiers helped us write a query to extract useful information from our Log Analysis Platform to see whether this was abused. We ran the query on the access logs from September 3rd, 2018 until October 8th, 2018. The query is slightly optimized and it took 00:06:34 to execute (it queries from both the hot and cold storage) and returned 104 matching requests.</p>\n\n<p><strong>Query</strong></p>\n<pre class=\"highlight plaintext\"><code>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n</code></pre>\n<p>This query filters all requests to the <code>/graphql</code> endpoint with an embedded submission form UUID. The regular expression extracts the user input, decodes it, and constructs the executed SQL query. This helped us to immediately see what happened and determine whether someone purposely exploited this. We were also returning some more fields to help us figure out what the user would&#39;ve seen, such as the HTTP response status code.</p>\n\n<p>Some interesting indicators that helped us here to determine whether this was abused: </p>\n\n<ul>\n<li>the HTTP response status code (<code>code</code>) - in most cases it was a non-200 response, indicating that something went wrong. In most cases, this was related to a payload being used that would not work for PostgreSQL</li>\n<li>the PoC that we developed ourselves executed the <code>pg_sleep</code> function - we used the <code>upstream_response_time</code>, <code>executedSqlQuery</code>, and <code>code</code> to determine whether the SQL was actually executed. Of the four <code>pg_sleep</code> functions we executed (<code>pg_sleep(1)</code>, <code>pg_sleep(5)</code>, <code>pg_sleep(10)</code>, and <code>pg_sleep(30)</code>), three were successful. The last one, with a timeout of 30, returned a 500 Internal Server Error because the backend aborted the request after 28 seconds.</li>\n<li>in the logs, we found multiple scanners who tried to find a vulnerability. However, the majority of the scanners expect that the injection point is within a <code>WHERE</code> clause. In this case, the injection point was within a different context: <code>SET SESSION &lt;parameter&gt; TO &#39;&lt;injection&gt;&#39;</code>. Because of this, automated scanners saw 500 Internal Server Errors and (most likely) didn&#39;t report a potential SQLi.</li>\n</ul>\n\n<p>The <strong>only</strong> successful requests that were executed were our own <code>pg_sleep</code> payloads and came from trusted IP addresses.</p>\n\n<p>Earlier in this writeup, I wrote that one of the indicators was as following:</p>\n\n<ul>\n<li>the <code>embedded_submission_form_uuid</code> parameter was passed in the URL or <code>POST</code> body (either as JSON or form encoded)</li>\n</ul>\n\n<p>The underlying controller used the <code>params</code> object, which doesn&#39;t care where the user specified the parameter in the <code>POST</code> body or a URL (<code>GET</code>) parameter. This means that the nginx logs are not enough, as those don&#39;t log HTTP body data. The Rails logs do contain this information, but are harder to query, given that it&#39;s not in a JSON blob (<strong>action item</strong>: H1&#39;s security team prioritized a task to have a separate log pipeline that consists of JSON blogs). We&#39;ve used the following query to filter the <code>embedded_submission_form_uuid</code> parameter from parameters Rails received:</p>\n\n<p><strong>Query</strong></p>\n<pre class=\"highlight plaintext\"><code>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n</code></pre>\n<p>The result set was actually smaller (73 rows) than the initial results that were returned by the nginx access log query. We&#39;ve looked into this and determined that not all requests from the load balancer were sent to unicorn and not all of the requests made it to Rails. This was not unexpected because nginx and/or Rack rejected some of the requests. We did not found any indicators that someone moved the parameters to the body. Here are the aggregated log counts per status code, which would also be a good indicator to see if this was abused:</p>\n\n<p>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588</p>\n\n<p>None of the requests showed any form of exploitation. This is why the team concluded that this wasn&#39;t abused.</p>\n\n<p>The main takeaway from the root cause analysis and investigation is the reinforcement that building out an application log pipeline that includes all this information to be able to give an answer faster. The HackerOne security team has since prioritized building out these cohesive logs in a queryable format and has started collecting logs with enough context.</p>\n\n<p>This incident will be played out again early next year as a table-top exercise to see how well we can respond to the same incident, but then with the new logs.</p>\n", 
            "type": "Activities::Comment", 
            "id": 3736166, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "jobert", 
                "url": "/jobert"
            }, 
            "created_at": "2018-11-30T00:29:14.052Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-11-30T00:29:14.052Z", 
            "actor": {
                "username": "jobert", 
                "url": "/jobert", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/002/35cc46a21b3756f9df61d6269d287b9dc53d5b27_medium.png?1410255083"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 3736170, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-11-30T01:06:03.971Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-11-30T01:06:03.971Z", 
            "actor": {
                "username": "jobert", 
                "url": "/jobert", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/002/35cc46a21b3756f9df61d6269d287b9dc53d5b27_medium.png?1410255083"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "first_to_agree": true, 
            "message": "This is ready to be disclosed.", 
            "markdown_message": "<p>This is ready to be disclosed.</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 3736324, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-11-30T01:26:39.878Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-11-30T01:26:39.878Z", 
            "actor": {
                "username": "bencode", 
                "url": "/bencode", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/117/d813c9668b163216f808ea44fe97d138069498fb_medium.jpg?1536189740"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 3736482, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-11-30T01:26:39.952Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-11-30T01:26:39.952Z", 
            "actor": {
                "username": "bencode", 
                "url": "/bencode", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/117/d813c9668b163216f808ea44fe97d138069498fb_medium.jpg?1536189740"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 3736483, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": false, 
    "reporter": {
        "username": "jobert", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/jobert", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/002/15c798072d48f06507cde4b11352a3338ae973fc_small.png?1410255083"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 67, 
        "name": "SQL Injection"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": 1997530.172216968, 
    "disclosed_at": "2018-11-30T01:26:39.932Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/435066", 
    "created_at": "2018-11-06T16:52:08.233Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>The <code>embedded_submission_form_uuid</code> parameter in the <code>/graphql</code> endpoint is vulnerable to a SQL injection. Execute the following command to reproduce the behavior:</p>\n\n<p><strong>Locally</strong>:</p>\n<pre class=\"highlight plaintext\"><code>curl -X POST http://localhost:8080/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(30\\)%3B--%27\n</code></pre>\n<p><strong>HackerOne.com</strong></p>\n<pre class=\"highlight plaintext\"><code>curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(30\\)%3B--%27\n</code></pre>\n<p><strong>Additional proof</strong></p>\n<pre class=\"highlight plaintext\"><code>$ time curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(5\\)%3B--%27\n{}curl -X POST   0.03s user 0.01s system 0% cpu 5.726 total\n$ time curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(1\\)%3B--%27\n{}curl -X POST   0.03s user 0.01s system 2% cpu 1.631 total\n$ time curl -X POST https://hackerone.com/graphql\\?embedded_submission_form_uuid\\=1%27%3BSELECT%201%3BSELECT%20pg_sleep\\(10\\)%3B--%27\n{}curl -X POST   0.02s user 0.01s system 0% cpu 10.557 total\n</code></pre>\n<h2 id=\"impact\">Impact</h2>\n\n<p>The SQL injections seems to be executing in the context of the <code>secure</code> schema, so impact is currently unknown. However, since an attacker may be able to switch schemas, we should consider this to have a high impact on confidentiality.</p>\n", 
    "severity_rating": "critical", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://hackerone.com", 
            "about": "Vulnerability disclosure should be safe, transparent, and rewarding.", 
            "twitter_handle": "Hacker0x01", 
            "name": "HackerOne"
        }, 
        "handle": "security", 
        "url": "https://hackerone.com/security", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/013/68fea1fe00dc833f4109e015738af4b374727e56_small.png?1445331713", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/013/28af2ada2cc00aa9427504fc5a14f587362df84b_medium.png?1445331713"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 13, 
        "default_currency": "usd"
    }, 
    "is_published": false
}