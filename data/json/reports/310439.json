{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "bl4de", 
        "eveeez", 
        "apapedulimu", 
        "christianhaller"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 310439, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-02-08T17:00:25.891Z", 
    "vulnerability_information": "As discussed in #309391, here's the separate report for each of the library. This one is the information for the Hoek library.\n\n**Module:**\n\n[hoek](https://www.npmjs.com/package/hoek)\n\n**Summary:**\n\nUtilities function in all the listed modules can be tricked into modify the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n**Description:** \n\n## Steps To Reproduce:\n\nThe simplest test case to reproduce the issue is the following code snippet. In the code snippet, \"malicious_payload\" would come from an endpoint which accepts JSON data. The test case also works with the \"Hoek.applyToDefaults\" function.\n\n> var Hoek = require('hoek');\n> var malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\n> \n> var a = {};\n> console.log(\"Before : \" + a.oops);\n> Hoek.merge({}, JSON.parse(malicious_payload));\n> console.log(\"After : \" + a.oops);\n\nThis shows that an attacker can add attributes to all existing object on the server. Additional attribute can be used to change the execution code flow or cause error on every subsequent request by replacing \"toString\" or \"valueOf\".\n\n## Impact:\n\nThis vulnerability is garanteed to at least obtain denial of service as all the library allow the property \"toString\" and \"valueOf\" to be replaced by a \"String\". This breaks the express module and forces the server to either crash or return a 500 to every subsequent request.\n\nMore complex payload can be crafted to gain remote code execution (see PoC in #309391).\n\n## Supporting Material/References:\n\nIf extra information is needed don't hesitate to ask.\n\n## Impact\n\nVariable. Server crash or the server becoming unable to respond to all request is garanteed, but more significant impact like remote code execution can be achieved in some cases.", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "none", 
            "privileges_required": "high", 
            "user_interaction": "required", 
            "attack_vector": "local", 
            "attack_complexity": "high", 
            "scope": "unchanged", 
            "integrity": "none", 
            "availability": "low"
        }, 
        "rating": "low", 
        "score": 2.5, 
        "author_type": "Team"
    }, 
    "title": "Prototype pollution attack (Hoek)", 
    "is_member_of_team?": null, 
    "vote_count": 4, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "hoek", 
        "max_severity": "critical", 
        "databaseId": 5913, 
        "asset_type": "SOURCE_CODE"
    }, 
    "allow_singular_disclosure_at": "2018-03-10T17:00:26.017Z", 
    "state": "Closed", 
    "cve_ids": [
        "CVE-2018-3728"
    ], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2018-01-30T06:32:35.833Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-30T06:32:35.833Z", 
            "actor": {
                "username": "holyvier", 
                "url": "/holyvier", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Markdown is slightly annoying for code block. The code in the proof of concept should read :\n> var malicious_payload = '{\"\\_\\_proto\\_\\_\":{\"oops\":\"It works !\"}}';", 
            "markdown_message": "<p>Markdown is slightly annoying for code block. The code in the proof of concept should read :</p>\n\n<blockquote>\n<p>var malicious_payload = &#39;{&quot;__proto__&quot;:{&quot;oops&quot;:&quot;It works !&quot;}}&#39;;</p>\n</blockquote>\n", 
            "type": "Activities::Comment", 
            "id": 2329912, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-30T13:32:48.590Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-30T13:32:48.590Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "So, I was able to reproduce the example code. I have pinged the lead maintainer of Hoek to invite him and get his opinion.", 
            "markdown_message": "<p>So, I was able to reproduce the example code. I have pinged the lead maintainer of Hoek to invite him and get his opinion.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2330512, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-30T18:46:32.374Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-30T18:46:32.374Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 2331455, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-31T23:18:59.103Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-31T23:18:59.103Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "I just invited Nathan to this report.", 
            "markdown_message": "<p>I just invited Nathan to this report.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2340619, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-02T20:58:32.158Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-02T20:58:32.158Z", 
            "actor": {
                "username": "nlf", 
                "url": "/nlf", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ExternalUserJoined", 
            "id": 2346614, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-02T21:02:54.411Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-02T21:02:54.411Z", 
            "actor": {
                "username": "nlf", 
                "url": "/nlf", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "I can also confirm this is an issue, I can patch these methods such that merge will ignore properties that are on the target's (that is, the first parameter's) prototype. I _believe_ that should alleviate this problem. Any concerns with that approach?", 
            "markdown_message": "<p>I can also confirm this is an issue, I can patch these methods such that merge will ignore properties that are on the target&#39;s (that is, the first parameter&#39;s) prototype. I <u>believe</u> that should alleviate this problem. Any concerns with that approach?</p>\n", 
            "type": "Activities::Comment", 
            "id": 2346619, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-02T21:05:32.733Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-02T21:05:32.733Z", 
            "actor": {
                "username": "nlf", 
                "url": "/nlf", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "```\n> Object.getOwnPropertyNames(Object.prototype)\n[ '__defineGetter__',\n  '__defineSetter__',\n  'hasOwnProperty',\n  '__lookupGetter__',\n  '__lookupSetter__',\n  'propertyIsEnumerable',\n  'toString',\n  'valueOf',\n  '__proto__',\n  'constructor',\n  'toLocaleString',\n  'isPrototypeOf' ]\n```\n\nfor reference, this would also vary depending on the type of the target since you can merge arrays and the like as well.", 
            "markdown_message": "<pre class=\"highlight plaintext\"><code>&gt; Object.getOwnPropertyNames(Object.prototype)\n[ &#39;__defineGetter__&#39;,\n  &#39;__defineSetter__&#39;,\n  &#39;hasOwnProperty&#39;,\n  &#39;__lookupGetter__&#39;,\n  &#39;__lookupSetter__&#39;,\n  &#39;propertyIsEnumerable&#39;,\n  &#39;toString&#39;,\n  &#39;valueOf&#39;,\n  &#39;__proto__&#39;,\n  &#39;constructor&#39;,\n  &#39;toLocaleString&#39;,\n  &#39;isPrototypeOf&#39; ]\n</code></pre>\n<p>for reference, this would also vary depending on the type of the target since you can merge arrays and the like as well.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2346621, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-04T04:29:06.178Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-04T04:29:06.178Z", 
            "actor": {
                "username": "holyvier", 
                "url": "/holyvier", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "It's really just the recursion on property of the prototype that causes issue. I don't think it's required to block all property assignment for value that exists on the prototype. The assignment will just override the default value from the prototype and won't cause pollution.\n\nEx.: \n\n> Hoek.merge({}, { \"valueOf\" : 123 }); // OK\n> Hoek.merge({}. { \"\\_\\_proto\\_\\_\" : { \"test\" : 123 }}); // Blocked", 
            "markdown_message": "<p>It&#39;s really just the recursion on property of the prototype that causes issue. I don&#39;t think it&#39;s required to block all property assignment for value that exists on the prototype. The assignment will just override the default value from the prototype and won&#39;t cause pollution.</p>\n\n<p>Ex.: </p>\n\n<blockquote>\n<p>Hoek.merge({}, { &quot;valueOf&quot; : 123 }); // OK<br>\nHoek.merge({}. { &quot;__proto__&quot; : { &quot;test&quot; : 123 }}); // Blocked</p>\n</blockquote>\n", 
            "type": "Activities::Comment", 
            "id": 2348643, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-06T17:57:10.208Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-06T17:57:10.208Z", 
            "actor": {
                "username": "nlf", 
                "url": "/nlf", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "so after much investigation, this _only_ works when you JSON.parse a stringified object that has an `__proto__` property. kind of a weird edge case, but a problem nonetheless.\n\ni've published hoek@5.0.3 that fixes this", 
            "markdown_message": "<p>so after much investigation, this <u>only</u> works when you JSON.parse a stringified object that has an <code>__proto__</code> property. kind of a weird edge case, but a problem nonetheless.</p>\n\n<p>i&#39;ve published <a title=\"hoek@5.0.3\" href=\"mailto:hoek@5.0.3\" rel=\"nofollow noopener noreferrer\">hoek@5.0.3</a> that fixes this</p>\n", 
            "type": "Activities::Comment", 
            "id": 2356265, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-08T03:22:40.452Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-08T03:22:40.452Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "cve_ids": [
                "CVE-2018-3728"
            ], 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::CveIdAdded", 
            "id": 2361037, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "old_scope": "Other module", 
            "created_at": "2018-02-08T03:31:48.853Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-08T03:31:48.853Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "new_scope": "hoek", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ChangedScope", 
            "id": 2361049, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "holyvier", 
                "url": "/holyvier"
            }, 
            "created_at": "2018-02-08T16:59:37.257Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-08T16:59:37.257Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 2363105, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-08T17:00:25.923Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-08T17:00:25.923Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "first_to_agree": true, 
            "message": "@nlf @holyvier I plan to fully disclose this report tomorrow evening (Paris time), does that work for you?", 
            "markdown_message": "<p><a href=\"/nlf\">@nlf</a> <a href=\"/holyvier\">@holyvier</a> I plan to fully disclose this report tomorrow evening (Paris time), does that work for you?</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2363107, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-08T17:00:56.404Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-08T17:00:56.404Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "Low (3.8)", 
                "old_severity": null
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 2363108, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-08T17:01:58.256Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-08T17:01:58.256Z", 
            "actor": {
                "username": "holyvier", 
                "url": "/holyvier", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Yes, the only one I would hold is #309391. Others are ok.", 
            "markdown_message": "<p>Yes, the only one I would hold is <a href=\"/reports/309391\">#309391</a>. Others are ok.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2363111, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-11T18:00:08.121Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-11T18:00:08.121Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "added_weaknesses": [
                    {
                        "id": 48, 
                        "name": "Denial of Service"
                    }
                ], 
                "removed_weaknesses": []
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportVulnerabilityTypesUpdated", 
            "id": 2373018, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-13T19:23:40.286Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-13T19:23:40.286Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 2379951, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-13T21:52:27.055Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-13T21:52:27.055Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "Low (2.5)", 
                "old_severity": "Low (3.8)"
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 2380330, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-15T19:02:50.293Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-15T19:02:50.293Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Fix has been backported to 4.x track of the module and published as 4.2.1. (see https://github.com/hapijs/hoek/pull/231 )", 
            "markdown_message": "<p>Fix has been backported to 4.x track of the module and published as 4.2.1. (see <a title=\"https://github.com/hapijs/hoek/pull/231\" href=\"/redirect?signature=05298759bc4cde6c77386efa2287215af923146f&amp;url=https%3A%2F%2Fgithub.com%2Fhapijs%2Fhoek%2Fpull%2F231\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/hapijs/hoek/pull/231</span><i class=\"icon-external-link\"></i></a> )</p>\n", 
            "type": "Activities::Comment", 
            "id": 2387533, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "holyvier", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/holyvier", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 48, 
        "name": "Denial of Service"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -23434000.44667053, 
    "disclosed_at": "2018-02-13T19:23:40.361Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/310439", 
    "created_at": "2018-01-30T06:24:55.040Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>As discussed in <a href=\"/reports/309391\">#309391</a>, here&#39;s the separate report for each of the library. This one is the information for the Hoek library.</p>\n\n<p><strong>Module:</strong></p>\n\n<p><a href=\"/redirect?signature=88ee0831a59a66e9f5ae7dcfd9d4a788256cd48a&amp;url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhoek\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>hoek</span><i class=\"icon-external-link\"></i></a></p>\n\n<p><strong>Summary:</strong></p>\n\n<p>Utilities function in all the listed modules can be tricked into modify the prototype of &quot;Object&quot; when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.</p>\n\n<p><strong>Description:</strong> </p>\n\n<h2 id=\"steps-to-reproduce\">Steps To Reproduce:</h2>\n\n<p>The simplest test case to reproduce the issue is the following code snippet. In the code snippet, &quot;malicious_payload&quot; would come from an endpoint which accepts JSON data. The test case also works with the &quot;Hoek.applyToDefaults&quot; function.</p>\n\n<blockquote>\n<p>var Hoek = require(&#39;hoek&#39;);<br>\nvar malicious_payload = &#39;{&quot;<strong>proto</strong>&quot;:{&quot;oops&quot;:&quot;It works !&quot;}}&#39;;</p>\n\n<p>var a = {};<br>\nconsole.log(&quot;Before : &quot; + a.oops);<br>\nHoek.merge({}, JSON.parse(malicious_payload));<br>\nconsole.log(&quot;After : &quot; + a.oops);</p>\n</blockquote>\n\n<p>This shows that an attacker can add attributes to all existing object on the server. Additional attribute can be used to change the execution code flow or cause error on every subsequent request by replacing &quot;toString&quot; or &quot;valueOf&quot;.</p>\n\n<h2 id=\"impact\">Impact:</h2>\n\n<p>This vulnerability is garanteed to at least obtain denial of service as all the library allow the property &quot;toString&quot; and &quot;valueOf&quot; to be replaced by a &quot;String&quot;. This breaks the express module and forces the server to either crash or return a 500 to every subsequent request.</p>\n\n<p>More complex payload can be crafted to gain remote code execution (see PoC in <a href=\"/reports/309391\">#309391</a>).</p>\n\n<h2 id=\"supporting-material-references\">Supporting Material/References:</h2>\n\n<p>If extra information is needed don&#39;t hesitate to ask.</p>\n\n<h2 id=\"impact\">Impact</h2>\n\n<p>Variable. Server crash or the server becoming unable to respond to all request is garanteed, but more significant impact like remote code execution can be achieved in some cases.</p>\n", 
    "severity_rating": "low", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://nodejs.org/en/security/", 
            "about": "This program is used to handle vulnerabilities in the Node.js ecosystem.", 
            "twitter_handle": "", 
            "name": "Node.js third-party modules"
        }, 
        "handle": "nodejs-ecosystem", 
        "url": "https://hackerone.com/nodejs-ecosystem", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/023/949/309112251b444244d95977d1299148aae6482789_small.?1508679627", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/023/949/c1f5f15ac094c1327c13dd19f55dbcb7411272bd_medium.?1508679627"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 23949, 
        "default_currency": "usd"
    }, 
    "is_published": false
}