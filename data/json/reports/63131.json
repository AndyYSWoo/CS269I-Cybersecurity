{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "cryptographer", 
        "arifbastian2017"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 63131, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2015-06-08T17:45:33.066Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Changeable model ids on vanilla update can lead to severely bad side-effects", 
    "is_member_of_team?": null, 
    "vote_count": 2, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2015-07-08T17:45:33.347Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Informative", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-05-21T18:39:40.247Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-21T18:39:40.247Z", 
            "actor": {
                "username": "zachaysan", 
                "url": "/zachaysan", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/031/532/bd6ccc398ecc8b4d1b32942699d77d4a99fdf85a_medium.jpg?1513184302"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "Also, I have confirmed that it works through the params. So doing a `PATCH` to `/users/1` with a body of `\"user\": { \"id\": 1701 }` will successfully change the user id.", 
            "markdown_message": "<p>Also, I have confirmed that it works through the params. So doing a <code>PATCH</code> to <code>/users/1</code> with a body of <code>&quot;user&quot;: { &quot;id&quot;: 1701 }</code> will successfully change the user id.</p>\n", 
            "type": "Activities::Comment", 
            "id": 426059, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-05-21T19:00:21.013Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-21T19:00:21.013Z", 
            "actor": {
                "username": "zachaysan", 
                "url": "/zachaysan", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/031/532/bd6ccc398ecc8b4d1b32942699d77d4a99fdf85a_medium.jpg?1513184302"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "Also note that even if this is intended behaviour (which while I disagree with, I could maybe think of other areas where you would need to update primary ids and areas where rails apps currently use update instead of a different method) then it also breaks AMS or AR (note that \"dividers\" does not actually include the changed id, it contains the previous id):\n\nhttps://gist.github.com/zachaysan/20be5fae27f61ac282e7\n\nThinking about this more, I'm starting to think that there shouldn't be a way to change ids once they have been set. There might be cases where a resource needs something to complete on a different machine and saves both a nil \"real\" id and a temporary id, but once something saves I'm having trouble thinking of a reason why you would need to change an id. And even in some messed up case, like say a unique constraint wasn't enforced, I could see those more being done in a migration context than a production code context.", 
            "markdown_message": "<p>Also note that even if this is intended behaviour (which while I disagree with, I could maybe think of other areas where you would need to update primary ids and areas where rails apps currently use update instead of a different method) then it also breaks AMS or AR (note that &quot;dividers&quot; does not actually include the changed id, it contains the previous id):</p>\n\n<p><a title=\"https://gist.github.com/zachaysan/20be5fae27f61ac282e7\" href=\"/redirect?signature=c88fe6742b0e34911a725bfc83169deb41eb6b57&amp;url=https%3A%2F%2Fgist.github.com%2Fzachaysan%2F20be5fae27f61ac282e7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://gist.github.com/zachaysan/20be5fae27f61ac282e7</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Thinking about this more, I&#39;m starting to think that there shouldn&#39;t be a way to change ids once they have been set. There might be cases where a resource needs something to complete on a different machine and saves both a nil &quot;real&quot; id and a temporary id, but once something saves I&#39;m having trouble thinking of a reason why you would need to change an id. And even in some messed up case, like say a unique constraint wasn&#39;t enforced, I could see those more being done in a migration context than a production code context.</p>\n", 
            "type": "Activities::Comment", 
            "id": 426084, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-05-21T19:09:51.804Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-21T19:09:51.804Z", 
            "actor": {
                "username": "zachaysan", 
                "url": "/zachaysan", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/031/532/bd6ccc398ecc8b4d1b32942699d77d4a99fdf85a_medium.jpg?1513184302"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "Also, I have another thought about how I would detect compromisable systems out in the wild:\n\nInstead of saving the resource with an arbitrarily large number which may be picked up by a data analyst or something, I would systematically create resources, get the id of each resource, then create a replacement resource and attempt to save it with the previous resource's id. If successful, I'm decently assured that the system is compromisable. This information could be stored and saved for a coordinated attack on multiple systems during a critical time with ransom demands sent to the site operators all at once. ", 
            "markdown_message": "<p>Also, I have another thought about how I would detect compromisable systems out in the wild:</p>\n\n<p>Instead of saving the resource with an arbitrarily large number which may be picked up by a data analyst or something, I would systematically create resources, get the id of each resource, then create a replacement resource and attempt to save it with the previous resource&#39;s id. If successful, I&#39;m decently assured that the system is compromisable. This information could be stored and saved for a coordinated attack on multiple systems during a critical time with ransom demands sent to the site operators all at once. </p>\n", 
            "type": "Activities::Comment", 
            "id": 426094, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-05-21T21:41:08.372Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-05-21T21:41:08.372Z", 
            "actor": {
                "username": "jeremy", 
                "url": "/jeremy", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/121/b55c74e2938ae7e3e4d52bab74ea37c7acf05a60_medium.jpg?1428043795"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "Hey Zach! Thanks for the report.\n\n`less experienced users will allow \"id\" as a param for a subnested resource`\n\nGot an example of this? I'm not sure I've seen that technique. Maybe someone transitioning from `attr_accessible`?\n\nThe update pattern is documented pretty clearly @ http://edgeapi.rubyonrails.org/classes/ActionController/StrongParameters.html, but strong params can certainly be used weakly. Def worth correcting any docs (or old practices) that steer users toward vulnerable usage.", 
            "markdown_message": "<p>Hey Zach! Thanks for the report.</p>\n\n<p><code>less experienced users will allow &quot;id&quot; as a param for a subnested resource</code></p>\n\n<p>Got an example of this? I&#39;m not sure I&#39;ve seen that technique. Maybe someone transitioning from <code>attr_accessible</code>?</p>\n\n<p>The update pattern is documented pretty clearly @ <a title=\"http://edgeapi.rubyonrails.org/classes/ActionController/StrongParameters.html\" href=\"/redirect?signature=81e5e864e6120e2c019fc140ade10ac498085f09&amp;url=http%3A%2F%2Fedgeapi.rubyonrails.org%2Fclasses%2FActionController%2FStrongParameters.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://edgeapi.rubyonrails.org/classes/ActionController/StrongParameters.html</span><i class=\"icon-external-link\"></i></a>, but strong params can certainly be used weakly. Def worth correcting any docs (or old practices) that steer users toward vulnerable usage.</p>\n", 
            "type": "Activities::Comment", 
            "id": 426280, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-04T17:16:03.866Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-04T17:16:03.866Z", 
            "actor": {
                "username": "rafaelfranca", 
                "url": "/rafaelfranca", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/004/981/281bfa78e7ec84f83ee4efe2cf53f744cf07b8c0_medium.jpg?1397516124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "Hey @zachaysan thank you for the report.\n\nI agree with @jeremy that the reported case if a misusage of the feature. To take an example, \"less experienced\" users can also allow \"admin\" as a params for a nested resource that also will lead to security problems.\n\nSo we should fix any documentation to be clear about the security implications of using strong parameters weakly, but I don't think we should deal with this as a security bug.\n\n", 
            "markdown_message": "<p>Hey <a href=\"/zachaysan\">@zachaysan</a> thank you for the report.</p>\n\n<p>I agree with <a href=\"/jeremy\">@jeremy</a> that the reported case if a misusage of the feature. To take an example, &quot;less experienced&quot; users can also allow &quot;admin&quot; as a params for a nested resource that also will lead to security problems.</p>\n\n<p>So we should fix any documentation to be clear about the security implications of using strong parameters weakly, but I don&#39;t think we should deal with this as a security bug.</p>\n", 
            "type": "Activities::Comment", 
            "id": 440832, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-04T17:22:36.655Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-04T17:22:36.655Z", 
            "actor": {
                "username": "rafaelfranca", 
                "url": "/rafaelfranca", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/004/981/281bfa78e7ec84f83ee4efe2cf53f744cf07b8c0_medium.jpg?1397516124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "Marking this as Won't fix. But fell free to keep discussing about how we can improve the documentation. \n\nThank you again for the report.", 
            "markdown_message": "<p>Marking this as Won&#39;t fix. But fell free to keep discussing about how we can improve the documentation. </p>\n\n<p>Thank you again for the report.</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 440842, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-04T20:18:39.664Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-04T20:18:39.664Z", 
            "actor": {
                "username": "zachaysan", 
                "url": "/zachaysan", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/031/532/bd6ccc398ecc8b4d1b32942699d77d4a99fdf85a_medium.jpg?1513184302"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "Hey sorry for falling off, I'm in the midst of getting a product ready for launch. I think the core difference between \"admin\" as a param and \"id\" as a param is that \"id\" is frequently listed as a param when doing nested updates with frameworks like Ember. Furthermore I do not see the upside of allowing users to trivially change things like id. Also, it should be fairly easy to write a crawler to find Rails apps using Ember-like frameworks. I canvassed my friends in the Toronto Ember / Rails community and 100% of them agree that this mistake is quite possible to make and many of them were shocked that id was changeable (something that wasn't possible in previous versions of Rails).\n\nThat being said, I get that you guys made the call while fully understanding the problem. Maybe I'm biased in that I don't use Rails *without* a frontend framework. I'm going to forward it to my sec friends / blog about it. Thanks for taking the time to read this report and for the work you guys are doing.", 
            "markdown_message": "<p>Hey sorry for falling off, I&#39;m in the midst of getting a product ready for launch. I think the core difference between &quot;admin&quot; as a param and &quot;id&quot; as a param is that &quot;id&quot; is frequently listed as a param when doing nested updates with frameworks like Ember. Furthermore I do not see the upside of allowing users to trivially change things like id. Also, it should be fairly easy to write a crawler to find Rails apps using Ember-like frameworks. I canvassed my friends in the Toronto Ember / Rails community and 100% of them agree that this mistake is quite possible to make and many of them were shocked that id was changeable (something that wasn&#39;t possible in previous versions of Rails).</p>\n\n<p>That being said, I get that you guys made the call while fully understanding the problem. Maybe I&#39;m biased in that I don&#39;t use Rails <em>without</em> a frontend framework. I&#39;m going to forward it to my sec friends / blog about it. Thanks for taking the time to read this report and for the work you guys are doing.</p>\n", 
            "type": "Activities::Comment", 
            "id": 441078, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-04T20:19:28.650Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-04T20:19:28.650Z", 
            "actor": {
                "username": "zachaysan", 
                "url": "/zachaysan", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/031/532/bd6ccc398ecc8b4d1b32942699d77d4a99fdf85a_medium.jpg?1513184302"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "Also, can we mark this bug as public so I can share this link?", 
            "markdown_message": "<p>Also, can we mark this bug as public so I can share this link?</p>\n", 
            "type": "Activities::Comment", 
            "id": 441080, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-08T17:45:22.353Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-08T17:45:22.353Z", 
            "actor": {
                "username": "rafaelfranca", 
                "url": "/rafaelfranca", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/004/981/281bfa78e7ec84f83ee4efe2cf53f744cf07b8c0_medium.jpg?1397516124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "@zachaysan I think we can still consider ways to address this problem discussing it openly so people affected by this patch can jump in the thread and give their inputs, and we don't introduce breaking changes in stable releases.\n\nDoes this plan sounds good to you? Could you open an issue in the Rails issue tracker or work in a PR?\n\nMeanwhile, I'm going to mark this report as public so we can link to it on the issue.", 
            "markdown_message": "<p><a href=\"/zachaysan\">@zachaysan</a> I think we can still consider ways to address this problem discussing it openly so people affected by this patch can jump in the thread and give their inputs, and we don&#39;t introduce breaking changes in stable releases.</p>\n\n<p>Does this plan sounds good to you? Could you open an issue in the Rails issue tracker or work in a PR?</p>\n\n<p>Meanwhile, I&#39;m going to mark this report as public so we can link to it on the issue.</p>\n", 
            "type": "Activities::Comment", 
            "id": 444751, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-08T17:45:33.119Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-08T17:45:33.119Z", 
            "actor": {
                "username": "rafaelfranca", 
                "url": "/rafaelfranca", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/004/981/281bfa78e7ec84f83ee4efe2cf53f744cf07b8c0_medium.jpg?1397516124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 444752, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-08T18:34:18.875Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-08T18:34:18.875Z", 
            "actor": {
                "username": "zachaysan", 
                "url": "/zachaysan", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/031/532/bd6ccc398ecc8b4d1b32942699d77d4a99fdf85a_medium.jpg?1513184302"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "@rafaelfranca I'm going to make it a priority to work on open source a set number of hours a week once I get this project out the door (end of this month hopefully). In the meantime I'm too busy to put together a pull request, but I'm very happy to open this as an issue so that others become aware of it.", 
            "markdown_message": "<p><a href=\"/rafaelfranca\">@rafaelfranca</a> I&#39;m going to make it a priority to work on open source a set number of hours a week once I get this project out the door (end of this month hopefully). In the meantime I&#39;m too busy to put together a pull request, but I&#39;m very happy to open this as an issue so that others become aware of it.</p>\n", 
            "type": "Activities::Comment", 
            "id": 444855, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-16T19:04:15.611Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-16T19:04:15.611Z", 
            "actor": {
                "url": "/rails", 
                "profile": {
                    "name": "Ruby on Rails"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/022/1b2dab688cae8b769493f39137f09274a6b5f156_medium.png?1383736680"
                }
            }, 
            "team_handle": "rails", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 474476, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-02-12T18:05:34.432Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-02-12T18:05:34.432Z", 
            "actor": {
                "username": "rafaelfranca", 
                "url": "/rafaelfranca", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/004/981/281bfa78e7ec84f83ee4efe2cf53f744cf07b8c0_medium.jpg?1397516124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "rails", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 796028, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "zachaysan", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/zachaysan", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/031/532/9da1cf2fd7d7a81dadc1a35aae91a0b53b68f57c_small.jpg?1513184302"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 57, 
        "name": "Violation of Secure Design Principles"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -107759476.8107748, 
    "disclosed_at": "2016-02-12T18:05:34.617Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/63131", 
    "created_at": "2015-05-20T19:16:40.094Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Proof of concept</p>\n\n<p><code>User.find(1).update!(id: 1701)</code></p>\n\n<blockquote>\n<p>But strong params!</p>\n</blockquote>\n\n<p>Disagree. There are cases where less experienced users will allow &quot;id&quot; as a param for a subnested resource and then copy and past that code into that subnested resource&#39;s own controller, forgetting to remove the &quot;id&quot;.</p>\n\n<p>I consider this bug extremely severe since it is a very common pattern in most Rails JSON APIs and by setting the id to the maximum value may lead to the database to refuse to create new records OR in better databases like Postgres, an attacker can continue to stay just ahead of of the id sequence which will issue this error:</p>\n\n<p><code>DETAIL:  Key (id)=(1701) already exists.</code></p>\n\n<p>This effectively stops any new content from being created with a very small number of attackers.</p>\n\n<p>I have also tried to think of a way that a user could gain access to information with this, but I think that it would have to be in a very weird way. For example a multiple associations table where both tables save their associations to each other then one of them gets deleted. Too unlikely to be a major concern.</p>\n\n<p>Proposed solution:</p>\n\n<p>Make a special flag or special method for updating a model with a model id, but by default ignore &quot;id&quot; as a param. The reason I say &quot;ignore&quot; and not &quot;raise exception&quot; is that it is more convenient to not have to strip ids out of everything.</p>\n", 
    "vulnerability_information": "Proof of concept\r\n\r\n`User.find(1).update!(id: 1701)`\r\n\r\n> But strong params!\r\n\r\nDisagree. There are cases where less experienced users will allow \"id\" as a param for a subnested resource and then copy and past that code into that subnested resource's own controller, forgetting to remove the \"id\".\r\n\r\nI consider this bug extremely severe since it is a very common pattern in most Rails JSON APIs and by setting the id to the maximum value may lead to the database to refuse to create new records OR in better databases like Postgres, an attacker can continue to stay just ahead of of the id sequence which will issue this error:\r\n\r\n`DETAIL:  Key (id)=(1701) already exists.`\r\n\r\nThis effectively stops any new content from being created with a very small number of attackers.\r\n\r\nI have also tried to think of a way that a user could gain access to information with this, but I think that it would have to be in a very weird way. For example a multiple associations table where both tables save their associations to each other then one of them gets deleted. Too unlikely to be a major concern.\r\n\r\nProposed solution:\r\n\r\nMake a special flag or special method for updating a model with a model id, but by default ignore \"id\" as a param. The reason I say \"ignore\" and not \"raise exception\" is that it is more convenient to not have to strip ids out of everything.", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://rubyonrails.org/security", 
            "about": "Web development that doesn't hurt.", 
            "twitter_handle": null, 
            "name": "Ruby on Rails"
        }, 
        "handle": "rails", 
        "url": "https://hackerone.com/rails", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/022/2883e997d5f9ddf2f1c31365d74abe52fc54c9c9_small.png?1383736680", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/022/1b2dab688cae8b769493f39137f09274a6b5f156_medium.png?1383736680"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 22, 
        "default_currency": "usd"
    }, 
    "is_published": false
}