{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "flex0geek"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 163815, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-08-27T23:50:25.594Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Lack of CSRF token validation at server side", 
    "is_member_of_team?": null, 
    "vote_count": 1, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Informative", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-08-27T14:13:57.000Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-27T14:13:57.000Z", 
            "actor": {
                "username": "nashe_", 
                "url": "/nashe_", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Hi @yodha,\n\nThanks for this report! However, since you're doing a GET request, we don't validate the presence of an CSRF token, [see our code](https://github.com/gratipay/gratipay.com/blob/master/gratipay/security/csrf.py#L49). Did you found a way to bypass this for POST quests of important actions that are made *via* GET?\n\nThanks for making Gratipay a safer place!", 
            "markdown_message": "<p>Hi <a href=\"/yodha\">@yodha</a>,</p>\n\n<p>Thanks for this report! However, since you&#39;re doing a GET request, we don&#39;t validate the presence of an CSRF token, <a href=\"/redirect?signature=c45a069b477828c725ace21f7eb3c91831c3aeb1&amp;url=https%3A%2F%2Fgithub.com%2Fgratipay%2Fgratipay.com%2Fblob%2Fmaster%2Fgratipay%2Fsecurity%2Fcsrf.py%23L49\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>see our code</span><i class=\"icon-external-link\"></i></a>. Did you found a way to bypass this for POST quests of important actions that are made <em>via</em> GET?</p>\n\n<p>Thanks for making Gratipay a safer place!</p>\n", 
            "type": "Activities::Comment", 
            "id": 1157587, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-27T14:25:24.907Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-27T14:25:24.907Z", 
            "actor": {
                "username": "yodha", 
                "url": "/yodha", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/751/b2af8df0f5c076e10699d0d7efaf1323fb0c5eeb_medium.jpg?1463244435"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Hi @nashe_\n\nGenerally applications implement the csrf protection application wide and does not limit it for particular request type. After viewing code, I got that you are only validating token for POST.\n\nI would say its not proper csrf implementation. In future, if you implemented method (POST) and it could be changed to GET due to lack of validation, the csrf will easily take place.\n\nYou could plan this as long term fix and keep the Gratipay secure from any CSRF attacks. Please let me know if require any more information from my side.", 
            "markdown_message": "<p>Hi <a href=\"/nashe_\">@nashe_</a></p>\n\n<p>Generally applications implement the csrf protection application wide and does not limit it for particular request type. After viewing code, I got that you are only validating token for POST.</p>\n\n<p>I would say its not proper csrf implementation. In future, if you implemented method (POST) and it could be changed to GET due to lack of validation, the csrf will easily take place.</p>\n\n<p>You could plan this as long term fix and keep the Gratipay secure from any CSRF attacks. Please let me know if require any more information from my side.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1157598, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-27T23:50:20.471Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-27T23:50:20.471Z", 
            "actor": {
                "username": "nashe_", 
                "url": "/nashe_", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "In OWASP's guide, you can find:\n\n> The ideal solution is to only include the CSRF token in POST requests and modify server-side actions that have state changing affect to only respond to POST requests. This is in fact what the RFC 2616 requires for GET requests. If sensitive server-side actions are guaranteed to only ever respond to POST requests, then there is no need to include the token in GET requests. \n\nIt's exactly what we try to achieve: the GET method should be considered as idempotent for all the actions, making the application more uniform and compliant to modern development standards, as well as removing the need for CSRF tokens on GET requests.\n\nIf you found one sensitive action triggered using GET, don't hesitate to open another report!", 
            "markdown_message": "<p>In OWASP&#39;s guide, you can find:</p>\n\n<blockquote>\n<p>The ideal solution is to only include the CSRF token in POST requests and modify server-side actions that have state changing affect to only respond to POST requests. This is in fact what the RFC 2616 requires for GET requests. If sensitive server-side actions are guaranteed to only ever respond to POST requests, then there is no need to include the token in GET requests. </p>\n</blockquote>\n\n<p>It&#39;s exactly what we try to achieve: the GET method should be considered as idempotent for all the actions, making the application more uniform and compliant to modern development standards, as well as removing the need for CSRF tokens on GET requests.</p>\n\n<p>If you found one sensitive action triggered using GET, don&#39;t hesitate to open another report!</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 1158036, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-27T23:50:25.627Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-27T23:50:25.627Z", 
            "actor": {
                "username": "nashe_", 
                "url": "/nashe_", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1158037, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-07-10T10:00:17.057Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-07-10T10:00:17.057Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 1819407, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "yodha", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/yodha", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/015/751/9cf0ec832aa54c33d2c394753feecc3558d657ef_small.jpg?1463244435"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2017-07-10T10:00:17.097Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/163815", 
    "created_at": "2016-08-27T13:55:11.557Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Description: Gratipay is not validating csrf token at server side for few requests. So csrf protection is not implemented application wide.</p>\n\n<p>Proof of concept (Video):<a title=\"https://drive.google.com/file/d/0B8z7y7DxxQbwUHY4YTduYzMxbnc/view?usp=sharing\" href=\"/redirect?signature=2212d43cd6cd082d07697b1a740940c57b4e7437&amp;url=https%3A%2F%2Fdrive.google.com%2Ffile%2Fd%2F0B8z7y7DxxQbwUHY4YTduYzMxbnc%2Fview%3Fusp%3Dsharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://drive.google.com/file/d/0B8z7y7DxxQbwUHY4YTduYzMxbnc/view?usp=sharing</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Recommended Fix:<br>\nFor CSRF Protection:</p>\n\n<ol>\n<li>Each critical operation request must be accompanied with a &quot;token&quot;\n\u2022Token is:</li>\n<li>Long, Random, not repeated for application lifetime.</li>\n<li>Unique per session or even per operation</li>\n<li>Part of URL in GET</li>\n<li>Hidden Field in POST (forms)</li>\n<li>Attacker cannot know / predict this token and hence cannot create requests to exploit the operation.</li>\n</ol>\n", 
    "vulnerability_information": "Description: Gratipay is not validating csrf token at server side for few requests. So csrf protection is not implemented application wide.\n\nProof of concept (Video):https://drive.google.com/file/d/0B8z7y7DxxQbwUHY4YTduYzMxbnc/view?usp=sharing\n\nRecommended Fix:\nFor CSRF Protection:\n1. Each critical operation request must be accompanied with a \"token\"\n\u2022Token is:\n- Long, Random, not repeated for application lifetime.\n- Unique per session or even per operation\n- Part of URL in GET\n- Hidden Field in POST (forms)\n- Attacker cannot know / predict this token and hence cannot create requests to exploit the operation.", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://gratipay.com/", 
            "about": "Gratitude? Gratipay! The easiest way for your company to pay for open source.", 
            "twitter_handle": "Gratipay", 
            "name": "Gratipay"
        }, 
        "handle": "gratipay", 
        "url": "https://hackerone.com/gratipay", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/868/5b2b5a44e2439cf6fe880b374cbbeaf38d740c6b_small.jpg?1458214340", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/001/868/d74b2c3d5d3975cb38a59a3176d952c3553a72f1_medium.jpg?1458214340"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 1868, 
        "default_currency": "usd"
    }, 
    "is_published": false
}