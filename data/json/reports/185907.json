{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "pekafat", 
        "eveeez", 
        "mpz", 
        "babayaga_", 
        "japz", 
        "spetr0x", 
        "dyabla"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "25.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 185907, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-11-29T15:26:22.298Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "unchecked unserialize usage in WordPress-Functionality-Plugin-Skeleton/functionality-plugin-skeleton.php", 
    "is_member_of_team?": null, 
    "vote_count": 7, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-12-29T15:26:22.338Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$25", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-11-28T16:36:33.634Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-28T16:36:33.634Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "Thanks Emanuel, this looks valid at first glance.", 
            "markdown_message": "<p>Thanks Emanuel, this looks valid at first glance.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1323292, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-11-29T04:27:17.897Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-29T04:27:17.897Z", 
            "actor": {
                "url": "/iandunn-projects", 
                "profile": {
                    "name": "Ian Dunn"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/162/cb18840e181960dbb77b2b8a38f637a2df47fa29_medium.jpg?1508123836"
                }
            }, 
            "team_handle": "iandunn-projects", 
            "bounty_amount": "25.0", 
            "collaborator": {
                "username": "e3amn2l", 
                "url": "/e3amn2l"
            }, 
            "message": "That function is probably already broken because Core is preferring HTTPS now, and the API endpoint is returning JSON since WP 3.7. It's also really old and I'm not using it anymore, so I just [disabled it](https://github.com/iandunn/WordPress-Functionality-Plugin-Skeleton/commit/dd2c808bc08e0c58d036ad01b72e8f829e662701).\n\nLet me know if you see any problem with that. If not, we can disclose this.", 
            "markdown_message": "<p>That function is probably already broken because Core is preferring HTTPS now, and the API endpoint is returning JSON since WP 3.7. It&#39;s also really old and I&#39;m not using it anymore, so I just <a href=\"/redirect?signature=f12e1a70dfce9742ff6d32830a0910491e3f414a&amp;url=https%3A%2F%2Fgithub.com%2Fiandunn%2FWordPress-Functionality-Plugin-Skeleton%2Fcommit%2Fdd2c808bc08e0c58d036ad01b72e8f829e662701\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>disabled it</span><i class=\"icon-external-link\"></i></a>.</p>\n\n<p>Let me know if you see any problem with that. If not, we can disclose this.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 1325071, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-29T09:32:02.673Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-29T09:32:02.673Z", 
            "actor": {
                "username": "e3amn2l", 
                "url": "/e3amn2l", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "the fix looks OK.", 
            "markdown_message": "<p>the fix looks OK.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1325479, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "e3amn2l", 
                "url": "/e3amn2l"
            }, 
            "created_at": "2016-11-29T15:19:08.161Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-29T15:19:08.161Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1326391, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-29T15:26:22.317Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-29T15:26:22.317Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1326430, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-29T15:26:42.042Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-29T15:26:42.042Z", 
            "actor": {
                "url": "/iandunn-projects", 
                "profile": {
                    "name": "Ian Dunn"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/162/cb18840e181960dbb77b2b8a38f637a2df47fa29_medium.jpg?1508123836"
                }
            }, 
            "team_handle": "iandunn-projects", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1390679, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "e3amn2l", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/e3amn2l", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -61111143.21706798, 
    "disclosed_at": "2016-12-29T15:26:40.116Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/185907", 
    "created_at": "2016-11-28T01:16:24.167Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>in:<br>\n        <a title=\"https://github.com/iandunn/WordPress-Functionality-Plugin-Skeleton/blob/547216caf1bef2664ec3920a9c749191dea13aeb/functionality-plugin-skeleton.php#L108\" href=\"/redirect?signature=9f59bec1319457b20c03a0abb9c325e06f5f1979&amp;url=https%3A%2F%2Fgithub.com%2Fiandunn%2FWordPress-Functionality-Plugin-Skeleton%2Fblob%2F547216caf1bef2664ec3920a9c749191dea13aeb%2Ffunctionality-plugin-skeleton.php%23L108\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/iandunn/WordPress-Functionality-Plugin-Skeleton/blob/547216caf1bef2664ec3920a9c749191dea13aeb/functionality-plugin-skeleton.php#L108</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>there is usage of unserialize function      </p>\n<pre class=\"highlight plaintext\"><code>public function block_plugin_updates( $request, $url ) {\n            if ( 0 !== strpos( $url, self::PLUGIN_UPDATE_CHECK_URL ) ) // todo moving to https at some point, if hasn&#39;t already\n                return $request;\n            $plugins = unserialize( $request[&#39;body&#39;][&#39;plugins&#39;] ); // todo use json now -- http://make.wordpress.org/core/2013/10/25/json-encoding-ssl-api-wordpress-3-7/\n</code></pre>\n<p>without disallowing unneeded classes.<br>\nthus, if attacker managed to control the value of $request[&#39;body&#39;][&#39;plugins&#39;] he will be able to:</p>\n\n<p>1. conduct PHP POP exploitation, more information:</p>\n\n<p><a title=\"http://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing\" href=\"/redirect?signature=538f3a855abbaee179232ca5a14356ba8540beea&amp;url=http%3A%2F%2Fwww.slideshare.net%2F_s_n_t%2Fphp-unserialization-vulnerabilities-what-are-we-missing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"http://www.slideshare.net/MailRuGroup/security-meetup-22-php-unserialize-exploiting\" href=\"/redirect?signature=ef72b8d03af653a6b7972721f8d8a7ce44e42b97&amp;url=http%3A%2F%2Fwww.slideshare.net%2FMailRuGroup%2Fsecurity-meetup-22-php-unserialize-exploiting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.slideshare.net/MailRuGroup/security-meetup-22-php-unserialize-exploiting</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>2. unserialize itself has many security bugs in previous PHP versions which can be exploited, more information:</p>\n\n<p><a title=\"https://www.evonide.com/fuzzing-unserialize/\" href=\"/redirect?signature=9d20a69f055de9bc0f0029c4ff7bc723161845c9&amp;url=https%3A%2F%2Fwww.evonide.com%2Ffuzzing-unserialize%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.evonide.com/fuzzing-unserialize/</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://blog.checkpoint.com/wp-content/uploads/2016/08/Exploiting-PHP-7-unserialize-Report-160829.pdf\" href=\"/redirect?signature=d15b50d13949d6dc15723b89d60c51cf6158fc77&amp;url=https%3A%2F%2Fblog.checkpoint.com%2Fwp-content%2Fuploads%2F2016%2F08%2FExploiting-PHP-7-unserialize-Report-160829.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://blog.checkpoint.com/wp-content/uploads/2016/08/Exploiting-PHP-7-unserialize-Report-160829.pdf</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>fix:</p>\n\n<p>1. don&#39;t use serialize/unserialize if json_encode/json_decode can be used instead. (fix both 1 &amp; 2 attack vectors)<br>\n2. if 1 isn&#39;t possible, use safe unserialize invocation, such as:</p>\n<pre class=\"highlight plaintext\"><code>        if (version_compare(PHP_VERSION, &#39;7.0&#39;, &#39;lt&#39;)) {\n            return safeUnserialize($data);\n        } else {\n            return safeUnserialize($data, false);\n        }\n</code></pre>\n<p>Implement safeUnserialize function that based on PMA_safeUnserialize:<br>\n<a title=\"https://github.com/phpmyadmin/phpmyadmin/blob/fb161a7bebe60d902f743227158eca6a9889c472/libraries/core.lib.php#L1080\" href=\"/redirect?signature=992e44f1de33b2942b43abdcbd3ee2dc20ab3cfe&amp;url=https%3A%2F%2Fgithub.com%2Fphpmyadmin%2Fphpmyadmin%2Fblob%2Ffb161a7bebe60d902f743227158eca6a9889c472%2Flibraries%2Fcore.lib.php%23L1080\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/phpmyadmin/phpmyadmin/blob/fb161a7bebe60d902f743227158eca6a9889c472/libraries/core.lib.php#L1080</span><i class=\"icon-external-link\"></i></a><br>\nbut with fix for the issue described in:<br>\n<a title=\"https://hackerone.com/reports/181315#activity-1322058\" href=\"https://hackerone.com/reports/181315#activity-1322058\">https://hackerone.com/reports/181315#activity-1322058</a></p>\n", 
    "vulnerability_information": "in:\n\t\thttps://github.com/iandunn/WordPress-Functionality-Plugin-Skeleton/blob/547216caf1bef2664ec3920a9c749191dea13aeb/functionality-plugin-skeleton.php#L108\n\nthere is usage of unserialize function\t\t\n```\npublic function block_plugin_updates( $request, $url ) {\n\t\t\tif ( 0 !== strpos( $url, self::PLUGIN_UPDATE_CHECK_URL ) ) // todo moving to https at some point, if hasn't already\n\t\t\t\treturn $request;\n\t\t\t$plugins = unserialize( $request['body']['plugins'] ); // todo use json now -- http://make.wordpress.org/core/2013/10/25/json-encoding-ssl-api-wordpress-3-7/\n```\n\nwithout disallowing unneeded classes.\nthus, if attacker managed to control the value of $request['body']['plugins'] he will be able to:\n\n1\\. conduct PHP POP exploitation, more information:\n\nhttp://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing\nhttp://www.slideshare.net/MailRuGroup/security-meetup-22-php-unserialize-exploiting\n\n2\\. unserialize itself has many security bugs in previous PHP versions which can be exploited, more information:\n\nhttps://www.evonide.com/fuzzing-unserialize/\nhttps://blog.checkpoint.com/wp-content/uploads/2016/08/Exploiting-PHP-7-unserialize-Report-160829.pdf\n\nfix:\n\n1\\. don't use serialize/unserialize if json_encode/json_decode can be used instead. (fix both 1 & 2 attack vectors)\n2\\. if 1 isn't possible, use safe unserialize invocation, such as:\n```\n        if (version_compare(PHP_VERSION, '7.0', 'lt')) {\n            return safeUnserialize($data);\n        } else {\n            return safeUnserialize($data, false);\n        }\n```\n\nImplement safeUnserialize function that based on PMA_safeUnserialize:\nhttps://github.com/phpmyadmin/phpmyadmin/blob/fb161a7bebe60d902f743227158eca6a9889c472/libraries/core.lib.php#L1080\nbut with fix for the issue described in:\nhttps://hackerone.com/reports/181315#activity-1322058", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "", 
            "about": "I'm a WordPress developer who maintains several small open source projects.", 
            "twitter_handle": "", 
            "name": "Ian Dunn"
        }, 
        "handle": "iandunn-projects", 
        "url": "https://hackerone.com/iandunn-projects", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/162/eb309ba9f6270977cf4e55dc66f0b8d7099a34b7_small.jpg?1508123836", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/162/cb18840e181960dbb77b2b8a38f637a2df47fa29_medium.jpg?1508123836"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 162, 
        "default_currency": "usd"
    }, 
    "is_published": false
}