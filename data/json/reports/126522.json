{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2018-08-16T05:57:17.497Z", 
    "voters": [
        "jokebookservice1", 
        "shivasurya", 
        "miguel_santareno", 
        "foobar7", 
        "spam404", 
        "hunter", 
        "kapytein", 
        "haones", 
        "balis0ng", 
        "ramsexy", 
        "and 100 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "2520.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 126522, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-08-18T05:57:11.979Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Incorrect param parsing in Digits web authentication", 
    "is_member_of_team?": null, 
    "vote_count": 110, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2018-09-15T05:57:17.605Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$2,520", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-03-28T17:00:42.695Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-28T17:00:42.695Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "It looks like HackerOne automatically encodes all semi-colon in the URL. Please copy-paste the URL to test.", 
            "markdown_message": "<p>It looks like HackerOne automatically encodes all semi-colon in the URL. Please copy-paste the URL to test.</p>\n", 
            "type": "Activities::Comment", 
            "id": 874727, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-28T19:22:35.996Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-28T19:22:35.996Z", 
            "actor": {
                "username": "andrewsorensen", 
                "url": "/andrewsorensen", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p>Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 875086, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-04-01T19:09:54.279Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-01T19:09:54.279Z", 
            "actor": {
                "url": "/twitter", 
                "profile": {
                    "name": "Twitter"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
                }
            }, 
            "team_handle": "twitter", 
            "bounty_amount": "2520.0", 
            "collaborator": {
                "username": "filedescriptor", 
                "url": "/filedescriptor"
            }, 
            "message": "Thanks again. As mentioned we\u2019ll keep you updated as we investigate further. As a reminder, please remember to keep the details of this report private until we have fully investigated and addressed the issue.", 
            "markdown_message": "<p>Thanks again. As mentioned we\u2019ll keep you updated as we investigate further. As a reminder, please remember to keep the details of this report private until we have fully investigated and addressed the issue.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 883637, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "filedescriptor", 
                "url": "/filedescriptor"
            }, 
            "created_at": "2016-09-01T21:19:52.809Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-01T21:19:52.809Z", 
            "actor": {
                "username": "andrewsorensen", 
                "url": "/andrewsorensen", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "We consider this issue to be fixed. Can you please confirm?\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p>We consider this issue to be fixed. Can you please confirm?</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1168525, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-02T05:24:05.942Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-02T05:24:05.942Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "I can confirm this is fixed (fixed months ago actually).", 
            "markdown_message": "<p>I can confirm this is fixed (fixed months ago actually).</p>\n", 
            "type": "Activities::Comment", 
            "id": 1169038, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-16T05:57:17.539Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-16T05:57:17.539Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 3201865, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-18T05:57:12.033Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-18T05:57:12.033Z", 
            "actor": {
                "username": "andrewsorensen", 
                "url": "/andrewsorensen", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 3212946, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-18T05:57:12.151Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-18T05:57:12.151Z", 
            "actor": {
                "username": "andrewsorensen", 
                "url": "/andrewsorensen", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 3212947, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "filedescriptor", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/filedescriptor", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 27, 
        "name": "Improper Authentication - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -7143625.06719995, 
    "disclosed_at": "2018-08-18T05:57:12.114Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/126522", 
    "created_at": "2016-03-28T16:57:50.738Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hi,<br>\nI would like to report an issue on Digits web authentication which allows attackers to retrieve the OAuth credential data of an application victims authorized.</p>\n\n<h1 id=\"detail\">Detail</h1>\n\n<p>Digits web authentication has strict validation on <em>host</em> and <em>callback_url</em>. On the server side, the values are compared with the registered domain. However, on the client side, the way parameters are parsed has a wrong assumption. Specifically, <br>\nin <a title=\"https://cdn.digits.com/45ed91c4cf9b6bb7465c27574b16910df8a86d2e_1458327827406/javascripts/popup.js\" href=\"/redirect?signature=bb034590f3ce50b43056fb96815a43348f777ca1&amp;url=https%3A%2F%2Fcdn.digits.com%2F45ed91c4cf9b6bb7465c27574b16910df8a86d2e_1458327827406%2Fjavascripts%2Fpopup.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://cdn.digits.com/45ed91c4cf9b6bb7465c27574b16910df8a86d2e_1458327827406/javascripts/popup.js</span><i class=\"icon-external-link\"></i></a></p>\n<pre class=\"highlight javascript\"><code>              <span class=\"k\">return</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;&amp;&quot;</span><span class=\"p\">).</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"kd\">var</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">);</span>\n                    <span class=\"nx\">t</span><span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">unescape</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n                <span class=\"p\">})</span>\n</code></pre>\n<p>The above code snippet is responsible to convert query string into parameters, which assumes that the param delimiter has to be ampersand (&amp;). In fact, the server side also accepts semi-colon (;) as param delimiter. For example:</p>\n\n<blockquote>\n<p><a title=\"https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE%3Bhost=https%3A%2F%2Fwww.periscope.tv\" href=\"/redirect?signature=ae6bfef3bb02175c8cdd48c151ee1525700c442d&amp;url=https%3A%2F%2Fwww.digits.com%2Flogin%3Fconsumer_key%3D9I4iINIyd0R01qEPEwT9IC6RE%253Bhost%3Dhttps%253A%252F%252Fwww.periscope.tv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE%3Bhost=https%3A%2F%2Fwww.periscope.tv</span><i class=\"icon-external-link\"></i></a></p>\n</blockquote>\n\n<p>is the same as </p>\n\n<blockquote>\n<p><a title=\"https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE&amp;host=https%3A%2F%2Fwww.periscope.tv\" href=\"/redirect?signature=f61f8ce5a1863bef53bd2cf848233b50fbeb9452&amp;url=https%3A%2F%2Fwww.digits.com%2Flogin%3Fconsumer_key%3D9I4iINIyd0R01qEPEwT9IC6RE%26host%3Dhttps%253A%252F%252Fwww.periscope.tv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE&amp;host=https%3A%2F%2Fwww.periscope.tv</span><i class=\"icon-external-link\"></i></a></p>\n</blockquote>\n\n<p>This creates a problem because from the server&#39;s perspective, <code>a=b;c=d</code> is two different parameters <em>a</em> and <em>c</em>, while the client thinks there is only one parameter <em>a</em> with value <em>b;c=d</em>. Attacker can evade the validation by append <code>;@attacker.com</code> in the corresponding param. Such bypass looks like this:</p>\n\n<blockquote>\n<p><a title=\"https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE&amp;host=https%3A%2F%2Fwww.periscope.tv%3B@attacker.com\" href=\"/redirect?signature=1c3459e7b9d0b5e38ddaba765f65983a0062bd43&amp;url=https%3A%2F%2Fwww.digits.com%2Flogin%3Fconsumer_key%3D9I4iINIyd0R01qEPEwT9IC6RE%26host%3Dhttps%253A%252F%252Fwww.periscope.tv%253B%40attacker.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE&amp;host=https%3A%2F%2Fwww.periscope.tv%3B@attacker.com</span><i class=\"icon-external-link\"></i></a></p>\n</blockquote>\n\n<p>The server side thinks the  <em>host</em> parameter is <code>https://www.periscope.tv</code>, while for client side it is <code>https://www.periscope.tv;@attacker.com</code>.</p>\n\n<p>The funky URL in browser perspective looks like this:</p>\n<pre class=\"highlight plaintext\"><code>https://www.periscope.tv;@attacker.com\n--------\\    authority   /\\ hostname /\n</code></pre>\n<p>Therefore attacker successfully control the destination domain to his/her controlled site.</p>\n\n<h1 id=\"poc\">PoC</h1>\n\n<ol>\n<li>Prepare a Periscope account which is associated with a phone number</li>\n<li>Login to Periscope using the phone number with digits web login flow: <a title=\"https://innerht.ml/pocs/digits-validation-bypass/\" href=\"/redirect?signature=65e8ec5c578f0ce20800de584abb8602722ee717&amp;url=https%3A%2F%2Finnerht.ml%2Fpocs%2Fdigits-validation-bypass%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://innerht.ml/pocs/digits-validation-bypass/</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>After that your account will be renamed as &quot;Pwn3d&quot;</li>\n</ol>\n\n<h1 id=\"fix\">Fix</h1>\n\n<p>In addition to ampersand, also treat semi-colon as param delimiter. A sample patch would be to change</p>\n<pre class=\"highlight javascript\"><code><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;&amp;&quot;</span><span class=\"p\">)</span>\n</code></pre>\n<p>to</p>\n<pre class=\"highlight javascript\"><code><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"sr\">/</span><span class=\"se\">[</span><span class=\"sr\">&amp;;</span><span class=\"se\">]</span><span class=\"sr\">/</span><span class=\"p\">)</span>\n</code></pre>", 
    "vulnerability_information": "Hi,\nI would like to report an issue on Digits web authentication which allows attackers to retrieve the OAuth credential data of an application victims authorized.\n\n#Detail\nDigits web authentication has strict validation on *host* and *callback_url*. On the server side, the values are compared with the registered domain. However, on the client side, the way parameters are parsed has a wrong assumption. Specifically, \nin https://cdn.digits.com/45ed91c4cf9b6bb7465c27574b16910df8a86d2e_1458327827406/javascripts/popup.js\n\n```javascript\n              return window.location.search.slice(1).split(\"&\").forEach(function(e) {\n                    var n = e.split(\"=\");\n                    t[n[0]] = window.unescape(n[1])\n                })\n```\n\nThe above code snippet is responsible to convert query string into parameters, which assumes that the param delimiter has to be ampersand (&). In fact, the server side also accepts semi-colon (;) as param delimiter. For example:\n> https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE;host=https%3A%2F%2Fwww.periscope.tv\n\nis the same as \n\n> https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE&host=https%3A%2F%2Fwww.periscope.tv\n\nThis creates a problem because from the server's perspective, ```a=b;c=d``` is two different parameters *a* and *c*, while the client thinks there is only one parameter *a* with value *b;c=d*. Attacker can evade the validation by append `;@attacker.com` in the corresponding param. Such bypass looks like this:\n\n> https://www.digits.com/login?consumer_key=9I4iINIyd0R01qEPEwT9IC6RE&host=https%3A%2F%2Fwww.periscope.tv;@attacker.com\n\nThe server side thinks the  *host* parameter is ```https://www.periscope.tv```, while for client side it is ```https://www.periscope.tv;@attacker.com```.\n\nThe funky URL in browser perspective looks like this:\n\n```\nhttps://www.periscope.tv;@attacker.com\n--------\\    authority   /\\ hostname /\n```\n\nTherefore attacker successfully control the destination domain to his/her controlled site.\n\n#PoC\n1. Prepare a Periscope account which is associated with a phone number\n2. Login to Periscope using the phone number with digits web login flow: https://innerht.ml/pocs/digits-validation-bypass/\n3. After that your account will be renamed as \"Pwn3d\"\n\n#Fix\nIn addition to ampersand, also treat semi-colon as param delimiter. A sample patch would be to change\n```javascript\nwindow.location.search.slice(1).split(\"&\")\n```\nto\n```javascript\nwindow.location.search.slice(1).split(/[&;]/)\n```", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://twitter.com", 
            "about": "Twitter helps you create and share ideas and information instantly, without barriers.", 
            "twitter_handle": "twittersecurity", 
            "name": "Twitter"
        }, 
        "handle": "twitter", 
        "url": "https://hackerone.com/twitter", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/061/4acfe72859c5e9cb48a152edb4e498e13fa28df2_small.?1439954730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 61, 
        "default_currency": "usd"
    }, 
    "is_published": false
}