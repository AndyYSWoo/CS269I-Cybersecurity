{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-05-17T14:28:30.555Z", 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 15574, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Reporting Bugs", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-06-16T14:28:30.624Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2014-06-08T03:19:17.113Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-08T03:19:17.113Z", 
            "actor": {
                "username": "thalaivarsubu", 
                "url": "/thalaivarsubu", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/005/459/10be3f9803aa552f0029b2d74f6cd7dfdfe34672_medium.jpg?1493742795"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "fanfootage", 
            "message": "4)This web application is potentially vulnerable to the BREACH attack.\nBREACH (Browser Reconnaissance & Exfiltration via Adaptive Compression of Hypertext) is a category of vulnerabilities and not a specific instance affecting a specific piece of software. To be vulnerable, a web application must: \nBe served from a server that uses HTTP-level compression \nReflect user-input in HTTP response bodies \nReflect a secret (such as a CSRF token) in HTTP response bodies \nThis vulnerability affects https://fanfootage.com/. \nThe page content is served via HTTPS\nThe server is using HTTP-level compression\nURL encoded POST input user%5bemail%5d was reflected into the HTTP response body.\nHTTP response body contains a secret named authenticity_token\nView HTTP headers \nRequest\nPOST / HTTP/1.1\nContent-Length: 321\nContent-Type: application/x-www-form-urlencoded\nReferer: https://fanfootage.com/\nCookie: __cfduid=d1aa6e19203ffceef1224efc42f828ef21402189639240; _session_id=894c99e3671367d81517110b13e4fe51\nHost: fanfootage.com\nAccept-Encoding: gzip,deflate\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.63 Safari/537.36\nAccept: */*\nAn attacker can leverage information leaked by compression to recover targeted parts of the plaintext.\nThe mitigations are ordered by effectiveness (not by their practicality - as this may differ from one application to another). \nDisabling HTTP compression \nSeparating secrets from user input \nRandomizing secrets per request \nMasking secrets (effectively randomizing by XORing with a random secret per request) \nProtecting vulnerable pages with CSRF \nLength hiding (by adding random number of bytes to the responses) \nRate-limiting the requests \n", 
            "markdown_message": "<p>4)This web application is potentially vulnerable to the BREACH attack.<br>\nBREACH (Browser Reconnaissance &amp; Exfiltration via Adaptive Compression of Hypertext) is a category of vulnerabilities and not a specific instance affecting a specific piece of software. To be vulnerable, a web application must: <br>\nBe served from a server that uses HTTP-level compression <br>\nReflect user-input in HTTP response bodies <br>\nReflect a secret (such as a CSRF token) in HTTP response bodies <br>\nThis vulnerability affects <a title=\"https://fanfootage.com/\" href=\"/redirect?signature=66ee614934b43d4d5a841a13f06e17f265fe868c&amp;url=https%3A%2F%2Ffanfootage.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://fanfootage.com/</span><i class=\"icon-external-link\"></i></a>. <br>\nThe page content is served via HTTPS<br>\nThe server is using HTTP-level compression<br>\nURL encoded POST input user%5bemail%5d was reflected into the HTTP response body.<br>\nHTTP response body contains a secret named authenticity_token<br>\nView HTTP headers <br>\nRequest<br>\nPOST / HTTP/1.1<br>\nContent-Length: 321<br>\nContent-Type: application/x-www-form-urlencoded<br>\nReferer: <a title=\"https://fanfootage.com/\" href=\"/redirect?signature=66ee614934b43d4d5a841a13f06e17f265fe868c&amp;url=https%3A%2F%2Ffanfootage.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://fanfootage.com/</span><i class=\"icon-external-link\"></i></a><br>\nCookie: __cfduid=d1aa6e19203ffceef1224efc42f828ef21402189639240; _session_id=894c99e3671367d81517110b13e4fe51<br>\nHost: fanfootage.com<br>\nAccept-Encoding: gzip,deflate<br>\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.63 Safari/537.36<br>\nAccept: <em>/</em><br>\nAn attacker can leverage information leaked by compression to recover targeted parts of the plaintext.<br>\nThe mitigations are ordered by effectiveness (not by their practicality - as this may differ from one application to another). <br>\nDisabling HTTP compression <br>\nSeparating secrets from user input <br>\nRandomizing secrets per request <br>\nMasking secrets (effectively randomizing by XORing with a random secret per request) <br>\nProtecting vulnerable pages with CSRF <br>\nLength hiding (by adding random number of bytes to the responses) <br>\nRate-limiting the requests </p>\n", 
            "type": "Activities::Comment", 
            "id": 69377, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-12T00:18:21.808Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-12T00:18:21.808Z", 
            "actor": {
                "username": "1fanfootage", 
                "url": "/1fanfootage", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "fanfootage", 
            "message": "Not concerned about BREACH. \nAUTOCOMPLETE, good find, fix will go live, will let you know, once its verified its fixed, you got HOF\n\nWe allow iframing of our content on non fanfootage.com sites, hence we have removed the x-frame-option on purpose. See scope within our description which highlights this.\n\nBest,\nVinny", 
            "markdown_message": "<p>Not concerned about BREACH. <br>\nAUTOCOMPLETE, good find, fix will go live, will let you know, once its verified its fixed, you got HOF</p>\n\n<p>We allow iframing of our content on non fanfootage.com sites, hence we have removed the x-frame-option on purpose. See scope within our description which highlights this.</p>\n\n<p>Best,<br>\nVinny</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 72054, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "thalaivarsubu", 
                "url": "/thalaivarsubu"
            }, 
            "created_at": "2014-06-12T01:36:04.399Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-12T01:36:04.399Z", 
            "actor": {
                "username": "1fanfootage", 
                "url": "/1fanfootage", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "fanfootage", 
            "message": "Live updated, all good?", 
            "markdown_message": "<p>Live updated, all good?</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 72082, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-12T01:36:26.882Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-12T01:36:26.882Z", 
            "actor": {
                "username": "1fanfootage", 
                "url": "/1fanfootage", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "fanfootage", 
            "message": "Thank you very much!!\nBest,\nVinny", 
            "markdown_message": "<p>Thank you very much!!<br>\nBest,<br>\nVinny</p>\n", 
            "type": "Activities::Comment", 
            "id": 72083, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-17T14:28:30.583Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-17T14:28:30.583Z", 
            "actor": {
                "username": "thalaivarsubu", 
                "url": "/thalaivarsubu", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/005/459/10be3f9803aa552f0029b2d74f6cd7dfdfe34672_medium.jpg?1493742795"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "fanfootage", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 961329, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-16T14:28:40.564Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-16T14:28:40.564Z", 
            "actor": {
                "url": "/fanfootage", 
                "profile": {
                    "name": "FanFootage"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/222/eee2d18a1e1f3fa400057f281d990a561da41158_medium.png?1401800415"
                }
            }, 
            "team_handle": "fanfootage", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1017338, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "thalaivarsubu", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/thalaivarsubu", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/005/459/0d617c740c930396f114cfd220daffec6a91595f_small.jpg?1493742795"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -78049475.62918156, 
    "disclosed_at": "2016-06-16T14:28:31.891Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/15574", 
    "created_at": "2014-06-08T01:23:34.231Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>1)This page allows visitors to upload files to the server. Various web applications allow users to upload files (such as pictures, images, sounds, ...). Uploaded files may pose a significant risk if not handled correctly. A remote attacker could send a multipart/form-data POST request with a specially-crafted filename or mime type and execute arbitrary code.<br>\nAffected items<br>\n/artists <br>\nIf the uploaded files are not safely checked an attacker may upload malicious files.<br>\nRestrict file types accepted for upload: check the file extension and only allow certain files to be uploaded. Use a whitelist approach instead of a blacklist. Check for double extensions such as .php.png. Check for files without a filename like .htaccess (on ASP.NET, check for configuration files like web.config). Change the permissions on the upload folder so the files within it are not executable. If possible, rename the files that are uploaded.</p>\n\n<p>2)When a new name and password is entered in a form and the form is submitted, the browser asks if the password should be saved. Thereafter when the form is displayed, the name and password are filled in automatically or are completed as the name is entered. An attacker with local access could obtain the cleartext password from the browser cache.<br>\nAffected items<br>\n/login <br>\n/register <br>\nPossible sensitive information disclosure<br>\nThe password auto-complete should be disabled in sensitive applications. <br>\nTo disable auto-complete, you may use a code similar to: <br>\n&lt;INPUT TYPE=&quot;password&quot; AUTOCOMPLETE=&quot;off&quot;&gt;</p>\n\n<p>3)Vulnerability:     Clickjacking<br>\nVulnerable Domain:  fanfootage.com<br>\nVulnerable URL: <a title=\"https://fanfootage.com/\" href=\"/redirect?signature=66ee614934b43d4d5a841a13f06e17f265fe868c&amp;url=https%3A%2F%2Ffanfootage.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://fanfootage.com/</span><i class=\"icon-external-link\"></i></a><br>\nBrowser version:    Google Chrome 35.0.1916.114<br>\nOperating system:   Windows<br>\nSteps to Reproduce;<br>\n&lt;html&gt;<br>\n    &lt;style&gt;<br>\n        iframe { <br>\n        width: 800px; <br>\n        height: 500px; <br>\n        position: absolute; <br>\n        top: 0; left: 0; <br>\n        filter: alpha(opacity=50); <br>\n        opacity: 0.5; <br>\n        }<br><br>\n    &lt;/style&gt;<br>\n    &lt;iframe src=&quot;https://fanfootage.com/&quot;&gt;<br>\n&lt;/html&gt;</p>\n", 
    "vulnerability_information": "1)This page allows visitors to upload files to the server. Various web applications allow users to upload files (such as pictures, images, sounds, ...). Uploaded files may pose a significant risk if not handled correctly. A remote attacker could send a multipart/form-data POST request with a specially-crafted filename or mime type and execute arbitrary code.\r\nAffected items\r\n/artists \r\nIf the uploaded files are not safely checked an attacker may upload malicious files.\r\nRestrict file types accepted for upload: check the file extension and only allow certain files to be uploaded. Use a whitelist approach instead of a blacklist. Check for double extensions such as .php.png. Check for files without a filename like .htaccess (on ASP.NET, check for configuration files like web.config). Change the permissions on the upload folder so the files within it are not executable. If possible, rename the files that are uploaded.\r\n\r\n2)When a new name and password is entered in a form and the form is submitted, the browser asks if the password should be saved. Thereafter when the form is displayed, the name and password are filled in automatically or are completed as the name is entered. An attacker with local access could obtain the cleartext password from the browser cache.\r\nAffected items\r\n/login \r\n/register \r\nPossible sensitive information disclosure\r\nThe password auto-complete should be disabled in sensitive applications. \r\nTo disable auto-complete, you may use a code similar to: \r\n<INPUT TYPE=\"password\" AUTOCOMPLETE=\"off\">\r\n\r\n3)Vulnerability:\t Clickjacking\r\nVulnerable Domain:\tfanfootage.com\r\nVulnerable URL:\thttps://fanfootage.com/\r\nBrowser version:\tGoogle Chrome 35.0.1916.114\r\nOperating system:\tWindows\r\nSteps to Reproduce;\r\n<html>\r\n\t<style>\r\n\t\tiframe { \r\n\t\twidth: 800px; \r\n\t\theight: 500px; \r\n\t\tposition: absolute; \r\n\t\ttop: 0; left: 0; \r\n\t\tfilter: alpha(opacity=50); \r\n\t\topacity: 0.5; \r\n\t\t}  \r\n\t</style>\r\n\t<iframe src=\"https://fanfootage.com/\">\r\n</html>", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://fanfootage.com", 
            "about": "Film and upload your videos and watch previous shows back from all fan angles on FanFootage", 
            "twitter_handle": null, 
            "name": "FanFootage"
        }, 
        "handle": "fanfootage", 
        "url": "https://hackerone.com/fanfootage", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/222/203555ba0b6a73efb38bc794136bad90a4d2c9ca_small.png?1401800415", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/222/eee2d18a1e1f3fa400057f281d990a561da41158_medium.png?1401800415"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 222, 
        "default_currency": "usd"
    }, 
    "is_published": false
}