{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "fantam1", 
        "cryptographer"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "300.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 4114, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2014-03-17T20:04:33.019Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Persistent XSS: Editor link", 
    "is_member_of_team?": null, 
    "vote_count": 2, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2014-04-16T19:02:13.954Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$300", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2014-03-16T13:44:56.003Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-16T13:44:56.003Z", 
            "actor": {
                "username": "epriestley", 
                "url": "/epriestley", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/043/67210f4155bb8999679d01c81406df1242df0f8c_medium.jpg?1383694450"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "phabricator", 
            "message": "Hmm. It looks like Safari and Firefox don't interpret \"javascript\\n:alert(1)\" as Javascript (am I setting things up wrong?), but Chrome does. IE11 also does.", 
            "markdown_message": "<p>Hmm. It looks like Safari and Firefox don&#39;t interpret &quot;javascript\\n:alert(1)&quot; as Javascript (am I setting things up wrong?), but Chrome does. IE11 also does.</p>\n", 
            "type": "Activities::Comment", 
            "id": 17158, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-03-16T14:04:18.425Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-16T14:04:18.425Z", 
            "actor": {
                "username": "tomvg", 
                "url": "/tomvg", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/088/a1334d0d6c48d8f6f8c98dc1bb4d7a0ebb7d2ada_medium.jpg?1383931501"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "phabricator", 
            "message": "That seems correct, Opera also does.\nSee [shazzer fuzz db](http://shazzer.co.uk/database/All/Characters-after-javascript-uri)\n\nNote that a character that is not matched by `\\s` in PCRE may be prepended as well; again see [fuzz db](http://shazzer.co.uk/database/All/Characters-before-javascript-uri).", 
            "markdown_message": "<p>That seems correct, Opera also does.<br>\nSee <a href=\"/redirect?signature=101546612b78630126e10374929106768afc7092&amp;url=http%3A%2F%2Fshazzer.co.uk%2Fdatabase%2FAll%2FCharacters-after-javascript-uri\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>shazzer fuzz db</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Note that a character that is not matched by <code>\\s</code> in PCRE may be prepended as well; again see <a href=\"/redirect?signature=2f592ffba94001b44007da67894a1377ceb7993b&amp;url=http%3A%2F%2Fshazzer.co.uk%2Fdatabase%2FAll%2FCharacters-before-javascript-uri\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>fuzz db</span><i class=\"icon-external-link\"></i></a>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 17160, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-03-16T14:30:56.578Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-16T14:30:56.578Z", 
            "actor": {
                "username": "epriestley", 
                "url": "/epriestley", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/043/67210f4155bb8999679d01c81406df1242df0f8c_medium.jpg?1383694450"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "phabricator", 
            "message": "Thanks, that's helpful. I think this should fix it:\n\nhttps://secure.phabricator.com/D8548\n\nMaybe we should also whitelist editor protocols and give administrators configuration to control that. I'm hesitant to lock it down too much since I don't want to prevent users from using it with weird/obscure/future editors, but as long as administrators could configure it we could probably create a reasonable whitelist. I could imagine the editor feature opening up other attacks in the future that we don't really need to be exposed to (we do already whitelist protocols allowed in links).", 
            "markdown_message": "<p>Thanks, that&#39;s helpful. I think this should fix it:</p>\n\n<p><a title=\"https://secure.phabricator.com/D8548\" href=\"/redirect?signature=899cd3b1be387a3324c817b1182da736171e3366&amp;url=https%3A%2F%2Fsecure.phabricator.com%2FD8548\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://secure.phabricator.com/D8548</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Maybe we should also whitelist editor protocols and give administrators configuration to control that. I&#39;m hesitant to lock it down too much since I don&#39;t want to prevent users from using it with weird/obscure/future editors, but as long as administrators could configure it we could probably create a reasonable whitelist. I could imagine the editor feature opening up other attacks in the future that we don&#39;t really need to be exposed to (we do already whitelist protocols allowed in links).</p>\n", 
            "type": "Activities::Comment", 
            "id": 17164, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-03-17T13:02:13.246Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-17T13:02:13.246Z", 
            "actor": {
                "username": "tomvg", 
                "url": "/tomvg", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/088/a1334d0d6c48d8f6f8c98dc1bb4d7a0ebb7d2ada_medium.jpg?1383931501"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "phabricator", 
            "message": "That patch seems to fix the reported problem.\n\nA whitelist seems like a good idea: it should also prevent some phishing attacks after temporary account compromise (e.g. URLs with `data:` scheme or external phishing websites could trick a user into re-entering his credentials). ", 
            "markdown_message": "<p>That patch seems to fix the reported problem.</p>\n\n<p>A whitelist seems like a good idea: it should also prevent some phishing attacks after temporary account compromise (e.g. URLs with <code>data:</code> scheme or external phishing websites could trick a user into re-entering his credentials). </p>\n", 
            "type": "Activities::Comment", 
            "id": 17334, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-03-17T19:00:25.153Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-17T19:00:25.153Z", 
            "actor": {
                "username": "epriestley", 
                "url": "/epriestley", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/043/67210f4155bb8999679d01c81406df1242df0f8c_medium.jpg?1383694450"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "phabricator", 
            "message": "The `javascript:` fix is in HEAD; this should whitelist editor protocols:\n\nhttps://secure.phabricator.com/D8551\n\nI'll close this out once that lands.", 
            "markdown_message": "<p>The <code>javascript:</code> fix is in HEAD; this should whitelist editor protocols:</p>\n\n<p><a title=\"https://secure.phabricator.com/D8551\" href=\"/redirect?signature=cce42af6915180babbf31e112a6c82b7f4040bac&amp;url=https%3A%2F%2Fsecure.phabricator.com%2FD8551\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://secure.phabricator.com/D8551</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>I&#39;ll close this out once that lands.</p>\n", 
            "type": "Activities::Comment", 
            "id": 17438, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "tomvg", 
                "url": "/tomvg"
            }, 
            "created_at": "2014-03-17T20:02:14.045Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-17T20:02:14.045Z", 
            "actor": {
                "username": "epriestley", 
                "url": "/epriestley", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/043/67210f4155bb8999679d01c81406df1242df0f8c_medium.jpg?1383694450"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "phabricator", 
            "message": "This should now be fixed in HEAD.", 
            "markdown_message": "<p>This should now be fixed in HEAD.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 17452, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2014-03-17T20:04:12.669Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-17T20:04:12.669Z", 
            "actor": {
                "url": "/phabricator", 
                "profile": {
                    "name": "Phabricator"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/018/29aa105aca62b26e62c64e57c902e5db2bb8daf6_medium.jpg?1487955532"
                }
            }, 
            "team_handle": "phabricator", 
            "bounty_amount": "300.0", 
            "collaborator": {
                "username": "tomvg", 
                "url": "/tomvg"
            }, 
            "message": "I'm assessing this as relatively low-severity because it's self-XSS only and the user must click a fairly obscure link after being XSS'd.", 
            "markdown_message": "<p>I&#39;m assessing this as relatively low-severity because it&#39;s self-XSS only and the user must click a fairly obscure link after being XSS&#39;d.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 17454, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-03-17T20:04:33.031Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-17T20:04:33.031Z", 
            "actor": {
                "username": "epriestley", 
                "url": "/epriestley", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/043/67210f4155bb8999679d01c81406df1242df0f8c_medium.jpg?1383694450"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "phabricator", 
            "message": "This can be disclosed publicly at any time. Thanks for the report!", 
            "markdown_message": "<p>This can be disclosed publicly at any time. Thanks for the report!</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 17455, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-04-16T20:02:21.583Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-04-16T20:02:21.583Z", 
            "actor": {
                "url": "/phabricator", 
                "profile": {
                    "name": "Phabricator"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/018/29aa105aca62b26e62c64e57c902e5db2bb8daf6_medium.jpg?1487955532"
                }
            }, 
            "team_handle": "phabricator", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 31511, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "tomvg", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/tomvg", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/088/18d675fa6505135a25491a23ae38cd96956b5250_small.jpg?1383931501"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 60, 
        "name": "Cross-site Scripting (XSS) - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -146462652.31597167, 
    "disclosed_at": "2014-04-16T20:02:21.407Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/4114", 
    "created_at": "2014-03-16T11:30:47.494Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>The editor link used for external applications allows scheme other than <code>http:</code> or <code>https:</code>.  Although the <code>phutil_tag</code> function checks whether the scheme is <code>javascript:</code> to prevent XSS attacks (<a href=\"/redirect?signature=a6f14af0697c940640262a9131e4bc466f6c43d3&amp;url=https%3A%2F%2Fgithub.com%2Ffacebook%2Flibphutil%2Fblob%2F6b1066f7c0b34f5a485ad5d8af57792b3acae4d9%2Fsrc%2Fmarkup%2Frender.php%23L19\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>see GitHub</span><i class=\"icon-external-link\"></i></a>), it is straightforward to bypass this check by adding a whitespace character in between <code>javascript</code> and <code>:</code>.  For instance, clicking a link with the following value for the <code>href</code> attribute will execute arbitary JavaScript code: </p>\n<pre class=\"highlight plaintext\"><code>javascript\n:alert(&#39;xss&#39;)\n</code></pre>\n<p>(note the newline character between <code>javascript</code> and <code>:</code>).</p>\n\n<h1 id=\"replication-steps\">Replication steps:</h1>\n\n<ul>\n<li>Go to <code>settings/panel/display/</code>\n</li>\n<li>Press &quot;Save&quot; with network panel of console active</li>\n<li>Copy the POST request as cURL</li>\n<li>Use <code>curl</code> to set the <code>editor</code> parameter to <code>javascript%0A%3Aalert%281%29</code> (this is not possible to do in the browser as it strips these characters from input fields)</li>\n<li>Go to a repository, and click &quot;Edit&quot;, you should now see an alert box pop up</li>\n</ul>\n\n<h1 id=\"attack-scenarios\">Attack scenarios</h1>\n\n<p>Although the JavaScript code will only be executed on the user&#39;s own account, several attack scenarios are possible:</p>\n\n<ol>\n<li>A temporary account take-over would allow the attacker to set the editor link to include JavaScript code. Even when the victim manages to recover his account, clicking on the &quot;Edit&quot; link will  give the attacker again control over the account.</li>\n<li>Several login-csrf were found in Phabricator, so an attacker could have abused this (or abuse it if a similar issue arises) to login the victim into his account. The attacker could use the XSS to trick the victim into entering his own credentials</li>\n</ol>\n\n<h1 id=\"proposed-fix\">Proposed fix</h1>\n\n<p>In the <code>phutil_tag</code> function, first filter all non-alphanumerical characters of <code>$href</code> and then check whether it starts with <code>javascript:</code>.</p>\n", 
    "vulnerability_information": "The editor link used for external applications allows scheme other than `http:` or `https:`.  Although the `phutil_tag` function checks whether the scheme is `javascript:` to prevent XSS attacks ([see GitHub](https://github.com/facebook/libphutil/blob/6b1066f7c0b34f5a485ad5d8af57792b3acae4d9/src/markup/render.php#L19)), it is straightforward to bypass this check by adding a whitespace character in between `javascript` and `:`.  For instance, clicking a link with the following value for the `href` attribute will execute arbitary JavaScript code: \r\n\r\n```\r\njavascript\r\n:alert('xss')\r\n``` \r\n(note the newline character between `javascript` and `:`).\r\n\r\n# Replication steps:\r\n\r\n* Go to `settings/panel/display/`\r\n* Press \"Save\" with network panel of console active\r\n* Copy the POST request as cURL\r\n* Use `curl` to set the `editor` parameter to `javascript%0A%3Aalert%281%29` (this is not possible to do in the browser as it strips these characters from input fields)\r\n* Go to a repository, and click \"Edit\", you should now see an alert box pop up\r\n\r\n# Attack scenarios\r\n\r\nAlthough the JavaScript code will only be executed on the user's own account, several attack scenarios are possible:\r\n\r\n1. A temporary account take-over would allow the attacker to set the editor link to include JavaScript code. Even when the victim manages to recover his account, clicking on the \"Edit\" link will  give the attacker again control over the account.\r\n2. Several login-csrf were found in Phabricator, so an attacker could have abused this (or abuse it if a similar issue arises) to login the victim into his account. The attacker could use the XSS to trick the victim into entering his own credentials\r\n\r\n# Proposed fix\r\n\r\nIn the `phutil_tag` function, first filter all non-alphanumerical characters of `$href` and then check whether it starts with `javascript:`.", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://phacility.com/phabricator/", 
            "about": "Phabricator is a collection of open source web applications that help software companies build better software.", 
            "twitter_handle": "phabricator", 
            "name": "Phabricator"
        }, 
        "handle": "phabricator", 
        "url": "https://hackerone.com/phabricator", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/018/8f0130b0439b00cdeeddd76246ec8063cac6495f_small.jpg?1487955532", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/018/29aa105aca62b26e62c64e57c902e5db2bb8daf6_medium.jpg?1487955532"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 18, 
        "default_currency": "usd"
    }, 
    "is_published": false
}