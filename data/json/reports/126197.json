{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-04-01T22:07:52.433Z", 
    "voters": [
        "dyabla"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "750.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 126197, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-04-06T21:27:46.789Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "XSS In archive.uber.com Due to Mime Sniffing in IE", 
    "is_member_of_team?": null, 
    "vote_count": 1, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 1784, 
            "content": "archive.uber.com mirrors pypi. When downloading ```.tar.gz``` files from archive.uber.com, the MIME type is ```application/octet-stream```. Injecting ```<html><script>alert(0)</script>``` into the start of the ```.tar.gz``` causes an XSS in Internet Explorer due to MIME sniffing. ", 
            "content_html": "<p>archive.uber.com mirrors pypi. When downloading <code>.tar.gz</code> files from archive.uber.com, the MIME type is <code>application/octet-stream</code>. Injecting <code>&lt;html&gt;&lt;script&gt;alert(0)&lt;/script&gt;</code> into the start of the <code>.tar.gz</code> causes an XSS in Internet Explorer due to MIME sniffing. </p>\n"
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-05-01T22:07:53.030Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$750", 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-03-26T17:58:58.448Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-26T17:58:58.448Z", 
            "actor": {
                "username": "ddworken", 
                "url": "/ddworken", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/344/221b5d357fc59c63987d2ed60b7d586df065f92e_medium.png?1424388672"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Just realized I did not specifically note that this XSS is stored/persistent. \n\nThanks,\nDavid Dworken", 
            "markdown_message": "<p>Just realized I did not specifically note that this XSS is stored/persistent. </p>\n\n<p>Thanks,<br>\nDavid Dworken</p>\n", 
            "type": "Activities::Comment", 
            "id": 872561, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-28T13:52:15.948Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-28T13:52:15.948Z", 
            "actor": {
                "username": "ddworken", 
                "url": "/ddworken", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/344/221b5d357fc59c63987d2ed60b7d586df065f92e_medium.png?1424388672"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Please note that pypi has now patched this on their end by adding the ```nosniff``` header. Thus the example link to pypi will no longer work. \n\nThanks,\nDavid Dworken", 
            "markdown_message": "<p>Please note that pypi has now patched this on their end by adding the <code>nosniff</code> header. Thus the example link to pypi will no longer work. </p>\n\n<p>Thanks,<br>\nDavid Dworken</p>\n", 
            "type": "Activities::Comment", 
            "id": 874349, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-28T19:26:23.803Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-28T19:26:23.803Z", 
            "actor": {
                "username": "bugtriage-josh", 
                "url": "/bugtriage-josh", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Thank you for your report.\n\nFrom your last comment, it sounds as if this issue was fixed by pypi, and is no longer exploitable.  Can you confirm this is true, or do you have another PoC that you wish to submit around this issue?\n\nThanks, and good luck with your future bug hunting.", 
            "markdown_message": "<p>Thank you for your report.</p>\n\n<p>From your last comment, it sounds as if this issue was fixed by pypi, and is no longer exploitable.  Can you confirm this is true, or do you have another PoC that you wish to submit around this issue?</p>\n\n<p>Thanks, and good luck with your future bug hunting.</p>\n", 
            "type": "Activities::BugNeedsMoreInfo", 
            "id": 875097, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-28T19:37:34.291Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-28T19:37:34.291Z", 
            "actor": {
                "username": "ddworken", 
                "url": "/ddworken", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/344/221b5d357fc59c63987d2ed60b7d586df065f92e_medium.png?1424388672"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Both pypi and Uber are vulnerable to this. I contacted both Uber and pypi to report this. They have already fixed it. \n\nAs far as another PoC, I have already submitted a PoC. It is the one hosted at the above pypi link. Once Uber updates the mirror (which seems to happen in some sort of periodic fashion-likely somehow related to Uber's deployment process) it will be pulled into archive.uber.com. \n\nIn terms of how you can verify that archive.uber.com is vulnerable, you have two options: \n\n1. Update Uber's mirror of pypi and then download the ```.tar.gz``` from archive.uber.com\n2. Examination\n    -  Look at the headers sent by archive.uber.com and note that they are ```application/octet-stream```. \n    - Read about Internet Explorer's MIME sniffing ([here](https://msdn.microsoft.com/en-us/library/ms775147(v=vs.85).aspx))\n    - See that Internet Explorer will sniff a file with ```application/octet-stream``` and interpret it as HTML if it contains ```html``` within the first 256 bytes of the file based off of reading the above spec. \n    -  Examine the ```.tar.gz``` that I uploaded to pypi and note that it contains ```html``` within the first 256 bytes of the file\n    - Look at the rest of the ```.tar.gz``` and note that the full code is ```<html><script>alert(0)</script></html>``` which runs ```alert(0)```\n\nSorry about any confusion related to pypi. The PoC just used them as an example of another website that was vulnerable in an identical manner. \n\nThanks,\nDavid Dworken", 
            "markdown_message": "<p>Both pypi and Uber are vulnerable to this. I contacted both Uber and pypi to report this. They have already fixed it. </p>\n\n<p>As far as another PoC, I have already submitted a PoC. It is the one hosted at the above pypi link. Once Uber updates the mirror (which seems to happen in some sort of periodic fashion-likely somehow related to Uber&#39;s deployment process) it will be pulled into archive.uber.com. </p>\n\n<p>In terms of how you can verify that archive.uber.com is vulnerable, you have two options: </p>\n\n<ol>\n<li>Update Uber&#39;s mirror of pypi and then download the <code>.tar.gz</code> from archive.uber.com</li>\n<li>Examination\n\n<ul>\n<li> Look at the headers sent by archive.uber.com and note that they are <code>application/octet-stream</code>. </li>\n<li>Read about Internet Explorer&#39;s MIME sniffing (<a href=\"/redirect?signature=fc86cd381366f8462b7cb9b45683889afcfbfdec&amp;url=https%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fms775147%28v%3Dvs.85%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>here</span><i class=\"icon-external-link\"></i></a>)</li>\n<li>See that Internet Explorer will sniff a file with <code>application/octet-stream</code> and interpret it as HTML if it contains <code>html</code> within the first 256 bytes of the file based off of reading the above spec. </li>\n<li> Examine the <code>.tar.gz</code> that I uploaded to pypi and note that it contains <code>html</code> within the first 256 bytes of the file</li>\n<li>Look at the rest of the <code>.tar.gz</code> and note that the full code is <code>&lt;html&gt;&lt;script&gt;alert(0)&lt;/script&gt;&lt;/html&gt;</code> which runs <code>alert(0)</code>\n</li>\n</ul>\n</li>\n</ol>\n\n<p>Sorry about any confusion related to pypi. The PoC just used them as an example of another website that was vulnerable in an identical manner. </p>\n\n<p>Thanks,<br>\nDavid Dworken</p>\n", 
            "type": "Activities::BugNew", 
            "id": 875123, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-28T22:38:35.765Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-28T22:38:35.765Z", 
            "actor": {
                "username": "jmilne-uber", 
                "url": "/jmilne-uber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/043/902/f369ee534bf8afc43b413508f45c37249b00ce46_medium.jpg?1447796372"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Thanks for another great report, @ddworken! :)\n\nI agree with your assessment here, and your suggested fix of adding `X-Content-Type-Options: nosniff` to prevent questionable `Content-Type` sniffing behaviour. I've triaged the issue internally, and I'll update you with any progress on fixing it.", 
            "markdown_message": "<p>Thanks for another great report, <a href=\"/ddworken\">@ddworken</a>! :)</p>\n\n<p>I agree with your assessment here, and your suggested fix of adding <code>X-Content-Type-Options: nosniff</code> to prevent questionable <code>Content-Type</code> sniffing behaviour. I&#39;ve triaged the issue internally, and I&#39;ll update you with any progress on fixing it.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 875494, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-28T22:40:16.285Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-28T22:40:16.285Z", 
            "actor": {
                "username": "ddworken", 
                "url": "/ddworken", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/344/221b5d357fc59c63987d2ed60b7d586df065f92e_medium.png?1424388672"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Great! Thank you very much. ", 
            "markdown_message": "<p>Great! Thank you very much. </p>\n", 
            "type": "Activities::Comment", 
            "id": 875500, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "ddworken", 
                "url": "/ddworken"
            }, 
            "created_at": "2016-04-01T20:59:47.324Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-01T20:59:47.324Z", 
            "actor": {
                "username": "fletcher", 
                "url": "/fletcher", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/016/090/ff77c612c467177339fdbacd37000fddabaec61b_medium.jpg?1420748005"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "@ddworken,\n\nThis should now be adding the `'X-Content-Type-Options: nosniff` - can you verify this is fixed?\n\nThanks,\nRob", 
            "markdown_message": "<p><a href=\"/ddworken\">@ddworken</a>,</p>\n\n<p>This should now be adding the <code>&#39;X-Content-Type-Options: nosniff</code> - can you verify this is fixed?</p>\n\n<p>Thanks,<br>\nRob</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 883901, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-01T22:07:52.463Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-01T22:07:52.463Z", 
            "actor": {
                "username": "ddworken", 
                "url": "/ddworken", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/344/221b5d357fc59c63987d2ed60b7d586df065f92e_medium.png?1424388672"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "first_to_agree": true, 
            "message": "Yup, I can confirm that this is fixed. \n\nThanks,\nDavid Dworken", 
            "markdown_message": "<p>Yup, I can confirm that this is fixed. </p>\n\n<p>Thanks,<br>\nDavid Dworken</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 884055, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-04-06T21:27:05.535Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-06T21:27:05.535Z", 
            "actor": {
                "url": "/uber", 
                "profile": {
                    "name": "Uber"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/314/0010251d7088db2a1b236eb594b6371af4492609_medium.png?1514905146"
                }
            }, 
            "team_handle": "uber", 
            "bounty_amount": "750.0", 
            "collaborator": {
                "username": "ddworken", 
                "url": "/ddworken"
            }, 
            "message": "Thanks for the cool bug and nice work!\n\nThe award amount of $750 is based on this XSS only affecting certain versions of IE, and archive.uber.com being a less sensitive domain.\n\nGood luck bug hunting and look forward to your future reports!", 
            "markdown_message": "<p>Thanks for the cool bug and nice work!</p>\n\n<p>The award amount of $750 is based on this XSS only affecting certain versions of IE, and archive.uber.com being a less sensitive domain.</p>\n\n<p>Good luck bug hunting and look forward to your future reports!</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 892744, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-06T21:27:46.822Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-06T21:27:46.822Z", 
            "actor": {
                "username": "fletcher", 
                "url": "/fletcher", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/016/090/ff77c612c467177339fdbacd37000fddabaec61b_medium.jpg?1420748005"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 892746, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-06T21:27:56.897Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-06T21:27:56.897Z", 
            "actor": {
                "username": "fletcher", 
                "url": "/fletcher", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/016/090/ff77c612c467177339fdbacd37000fddabaec61b_medium.jpg?1420748005"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 892749, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-06T21:31:59.544Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-06T21:31:59.544Z", 
            "actor": {
                "username": "ddworken", 
                "url": "/ddworken", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/344/221b5d357fc59c63987d2ed60b7d586df065f92e_medium.png?1424388672"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Great! Thank you very much for the bounty and the quick response time!\n\nThanks,\nDavid Dworken", 
            "markdown_message": "<p>Great! Thank you very much for the bounty and the quick response time!</p>\n\n<p>Thanks,<br>\nDavid Dworken</p>\n", 
            "type": "Activities::Comment", 
            "id": 892757, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "ddworken", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/ddworken", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/017/344/b5a8712fba49a7d64be9cd1b3d0b50d4076edb42_small.png?1424388672"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 60, 
        "name": "Cross-site Scripting (XSS) - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -81996461.22731894, 
    "disclosed_at": "2016-04-06T21:27:51.396Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/126197", 
    "created_at": "2016-03-26T17:00:44.769Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><code>archive.uber.com</code> hosts a mirror of pypi at <code>archive.uber.com/pypi/simple/</code>. It mirrors all of the <code>.tar.gz</code> that are uploaded to pypi. The MIME type of all the <code>.tar.gz</code> files is <code>application/octet-stream</code>. Since the MIME type is not specified, browsers will automatically try to determine the type of the file. Chrome and Firefox both do so by looking the first few bytes of the file. Internet explorer scans the first 256 bytes of the file for <code>html</code> and if it finds <code>html</code> it will interpret the file as HTML. So by creating a <code>.tar.gz</code> that contains <code>&lt;html&gt;&lt;script&gt;alert(0)&lt;/script&gt;&lt;/html&gt;</code> one can inject javascript into the page. </p>\n\n<p>By default pypi doesn&#39;t allow you to create the <code>.tar.gz</code> manually (instead it creates it and uploads it with the same command). This can be bypassed by first building the <code>.tar.gz</code> by doing <code>python setup.py sdist</code> to build the <code>.tar.gz</code> before uploading it with an external program. After we create the <code>.tar.gz</code> we need to modify it so that it contains our inject HTML. Thankfully pypi doesn&#39;t validate a <code>.tar.gz</code> to check whether it is valid, so we can simply edit the <code>.tar.gz</code> and blindly insert the injected HTML. <code>nano</code> works just fine for this. Then we need to upload the modified/malicious <code>.tar.gz</code>. In order to upload our modified <code>.tar.gz</code> we use twine (<code>pip install twine</code>) and run <code>twine upload dist/evil.tar.gz</code>. </p>\n\n<p>I have done all of the above and uploaded it here: <code>https://pypi.python.org/packages/source/I/IgnoreMe_mime/IgnoreMe_mime-1.0.1.tar.gz#md5=6a9aa8e15f726b161680fbb854281775</code>. Note that if you open that link in internet explorer you will get an <code>alert(0)</code> box. </p>\n\n<p>So far this has not been mirrored to <code>archive.uber.com</code> but as far as I can tell it is only a matter of time until it is pulled into that mirror. Once it is pulled into <code>archive.uber.com</code> it will work identically (since both pypi and uber fail to set a MIME type for these files). </p>\n\n<p>On a sidenote, while researching this vulnerability I discovered that pypi is also vulnerable (hence why the above link works). I am also reporting this to their security team. </p>\n\n<p>In order to patch this you need to either correctly specify the MIME type of the <code>.tar.gz</code> files or disable content sniffing. </p>\n\n<p>Thanks,<br>\nDavid Dworken</p>\n", 
    "vulnerability_information": "```archive.uber.com``` hosts a mirror of pypi at ```archive.uber.com/pypi/simple/```. It mirrors all of the ```.tar.gz``` that are uploaded to pypi. The MIME type of all the ```.tar.gz``` files is ```application/octet-stream```. Since the MIME type is not specified, browsers will automatically try to determine the type of the file. Chrome and Firefox both do so by looking the first few bytes of the file. Internet explorer scans the first 256 bytes of the file for ```html``` and if it finds ```html``` it will interpret the file as HTML. So by creating a ```.tar.gz``` that contains ```<html><script>alert(0)</script></html>``` one can inject javascript into the page. \n\nBy default pypi doesn't allow you to create the ```.tar.gz``` manually (instead it creates it and uploads it with the same command). This can be bypassed by first building the ```.tar.gz``` by doing ```python setup.py sdist``` to build the ```.tar.gz``` before uploading it with an external program. After we create the ```.tar.gz``` we need to modify it so that it contains our inject HTML. Thankfully pypi doesn't validate a ```.tar.gz``` to check whether it is valid, so we can simply edit the ```.tar.gz``` and blindly insert the injected HTML. ```nano``` works just fine for this. Then we need to upload the modified/malicious ```.tar.gz```. In order to upload our modified ```.tar.gz``` we use twine (```pip install twine```) and run ```twine upload dist/evil.tar.gz```. \n\nI have done all of the above and uploaded it here: ```https://pypi.python.org/packages/source/I/IgnoreMe_mime/IgnoreMe_mime-1.0.1.tar.gz#md5=6a9aa8e15f726b161680fbb854281775```. Note that if you open that link in internet explorer you will get an ```alert(0)``` box. \n\nSo far this has not been mirrored to ```archive.uber.com``` but as far as I can tell it is only a matter of time until it is pulled into that mirror. Once it is pulled into ```archive.uber.com``` it will work identically (since both pypi and uber fail to set a MIME type for these files). \n\nOn a sidenote, while researching this vulnerability I discovered that pypi is also vulnerable (hence why the above link works). I am also reporting this to their security team. \n\nIn order to patch this you need to either correctly specify the MIME type of the ```.tar.gz``` files or disable content sniffing. \n\nThanks,\nDavid Dworken", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.uber.com", 
            "about": "", 
            "twitter_handle": "", 
            "name": "Uber"
        }, 
        "handle": "uber", 
        "url": "https://hackerone.com/uber", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/314/826c90cba1555458df787ae914793cd5070e18df_small.png?1514905146", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/314/0010251d7088db2a1b236eb594b6371af4492609_medium.png?1514905146"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 314, 
        "default_currency": "usd"
    }, 
    "is_published": false
}