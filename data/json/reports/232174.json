{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-06-27T23:49:28.007Z", 
    "voters": [
        "zhchbin", 
        "sp1d3rs", 
        "bl4de", 
        "rijalrojan", 
        "r0x33d", 
        "spam404", 
        "hunter", 
        "gerben_javado", 
        "ramsexy", 
        "cdl", 
        "and 64 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "5000.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 232174, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-06-27T23:00:42.926Z", 
    "vulnerability_information": "# Description\nShopify allows developers to create a special type of application called a \"[Sales Channel](https://help.shopify.com/api/sdks/sales-channel-sdk)\". Developers are allowed to upload a 16x16 SVG \"Navigation Icon\" for their app provided the SVG follows the [design guidelines](https://help.shopify.com/api/sdks/sales-channel-sdk/design-guidelines/checklist#navigation-icon) which limits the allowed elements and attributes. For some reason when the SVG contains an XML entity this whitelist is no longer enforced allowing the developer to include malicious attributes such as `onload`. By uploading a malicious SVG a developer can obtain XSS on both partners.shopify.com, as well as any the admin panel of any shop which has authorized the sales channel. \n\n# Proof of Concept\nThis is relatively easy to reproduce, first create a new application within the [Partners dashboard](https://partners.shopify.com) then navigate to \"Extensions\" -> \"Sales channel\" to convert the application. After saving those changes a new field within the \"App info\" section titled \"Navigation icon\". Upload the following SVG:\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE svg [\n    <!ENTITY elem \"\">\n]>\n<svg onload=\"alert(document.domain);\" height=\"16\" width=\"16\">\n  &elem;\n</svg>\n```\nAfter saving changes the XSS payload will fire on [partners.shopify.com](https://partners.shopify.com). To fire the payload on `$shop$.myshopify.com/admin/` you'll need to authorize the application on your shop:\nI've created an example malicious application associated with my partner account `shopify-whitehat-2+hackerone@bored.engineer` to help demonstrate the issue, you can authorize it by opening the following URL on `$your-shop$.myshopify.com`:\n```\n/admin/oauth/authorize?client_id=672a937d5eb24e10c756ea256c73bb8c&scope=read_products&redirect_uri=https://attackerdoma.in/93ba4bef-cff1-43b1-922d-0631bd387e2e.html&state=nonce\n```\nImmediately after authorizing the application (and all future admin panel loads) an alert should appear on the /admin window containing document.domain.\n\n# Exploitability\nThis seems like a really odd issue, so it may good to see if there are other places this icon could surface (ex. the app store or internal admin panels) to full understand the impact. For the known exploitable use-case via OAuth authorization you do need to convince an administrator to authorize your malicious application, however the exploit does not require any specific permissions to trigger so an admin may be more willing to authorize the application. Once the administrator has loaded the application it will immediately fire without additional user-interaction. \n\n# Remediation\nThe application should not allow XML entities in uploaded SVGs (or at least fix the parsing so it handles them correctly).", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "high", 
        "author_type": "User"
    }, 
    "title": "XSS on $shop$.myshopify.com/admin/ and partners.shopify.com via whitelist bypass in SVG icon for sales channel applications", 
    "is_member_of_team?": null, 
    "vote_count": 74, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "partners.shopify.com", 
        "max_severity": "critical", 
        "databaseId": 422, 
        "asset_type": "URL"
    }, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$5,000", 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-05-26T13:59:14.305Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-05-26T13:59:14.305Z", 
            "actor": {
                "username": "clayton", 
                "url": "/clayton", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/166/6d366b567e9fef1c476c1505c0016e3031a74a34_medium.jpg?1493127129"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "message": "Thanks for another great report! Our engineering team is investigating the issue.", 
            "markdown_message": "<p>Thanks for another great report! Our engineering team is investigating the issue.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1703464, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "bored-engineer", 
                "url": "/bored-engineer"
            }, 
            "created_at": "2017-06-27T14:41:39.289Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-27T14:41:39.289Z", 
            "actor": {
                "username": "clayton", 
                "url": "/clayton", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/166/6d366b567e9fef1c476c1505c0016e3031a74a34_medium.jpg?1493127129"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "message": "Thanks again for your report.\n\nIt turned out that a recent change to the SVG sanitization code introduced a bug that caused it to fail open when an XML parsing error occurred, which is why it was possible to bypass the sanitizer by adding an XML entity. We corrected the bug, and verified that it had not been exploited by any other users.\n\nBesides being rendered in partners.shopify.com and the Shopify admin panel, uploaded SVG files also appeared in an internal admin panel, which increased the impact of this bug. This functionality was not required, so it has been removed.\n\nOur next round of bounty decisions will take place later this week, so we'll be in touch with you again soon.", 
            "markdown_message": "<p>Thanks again for your report.</p>\n\n<p>It turned out that a recent change to the SVG sanitization code introduced a bug that caused it to fail open when an XML parsing error occurred, which is why it was possible to bypass the sanitizer by adding an XML entity. We corrected the bug, and verified that it had not been exploited by any other users.</p>\n\n<p>Besides being rendered in partners.shopify.com and the Shopify admin panel, uploaded SVG files also appeared in an internal admin panel, which increased the impact of this bug. This functionality was not required, so it has been removed.</p>\n\n<p>Our next round of bounty decisions will take place later this week, so we&#39;ll be in touch with you again soon.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1784531, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-27T23:00:18.255Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-27T23:00:18.255Z", 
            "actor": {
                "username": "francoischagnon", 
                "url": "/francoischagnon", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/168/3b5130025fbf90eaeb1c9234baa340dfead68f44_medium.jpg?1429126005"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "message": "Thanks again for this report. We're awarding 10x our minimum for this issue based on a couple of factors. First this XSS affected all important areas of Shopify: the partners dashboard, the admin area and our internal area accessible to employees only. Second we verified that the issue could have been used to exfiltrate merchant data if a successful attack was performed against a shopify employee. Third the complexity of the attack is low and we believe the probability of success is high.", 
            "markdown_message": "<p>Thanks again for this report. We&#39;re awarding 10x our minimum for this issue based on a couple of factors. First this XSS affected all important areas of Shopify: the partners dashboard, the admin area and our internal area accessible to employees only. Second we verified that the issue could have been used to exfiltrate merchant data if a successful attack was performed against a shopify employee. Third the complexity of the attack is low and we believe the probability of success is high.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1786191, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2017-06-27T23:00:31.943Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-27T23:00:31.943Z", 
            "actor": {
                "url": "/shopify", 
                "profile": {
                    "name": "Shopify"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/382/30421c25f4a7b03ec3250e36efb64f7291402806_medium.jpg?1532728703"
                }
            }, 
            "team_handle": "shopify", 
            "bonus_amount": "0.0", 
            "bounty_amount": "5000.0", 
            "collaborator": {
                "username": "bored-engineer", 
                "url": "/bored-engineer"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 1786192, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-27T23:00:42.950Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-27T23:00:42.950Z", 
            "actor": {
                "username": "francoischagnon", 
                "url": "/francoischagnon", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/168/3b5130025fbf90eaeb1c9234baa340dfead68f44_medium.jpg?1429126005"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1786193, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-27T23:49:28.036Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-27T23:49:28.036Z", 
            "actor": {
                "username": "bored-engineer", 
                "url": "/bored-engineer", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/007/328/1b156e9f7c558cb2b9910d7b538b1d0190f5d1b9_medium.png?1467257466"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "message": "Thanks!", 
            "markdown_message": "<p>Thanks!</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1786275, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-27T23:49:28.092Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-27T23:49:28.092Z", 
            "actor": {
                "username": "bored-engineer", 
                "url": "/bored-engineer", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/007/328/1b156e9f7c558cb2b9910d7b538b1d0190f5d1b9_medium.png?1467257466"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1786276, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "old_scope": "None", 
            "created_at": "2018-06-15T19:05:26.703Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-15T19:05:26.703Z", 
            "actor": {
                "username": "shopify-peteryaworski", 
                "url": "/shopify-peteryaworski", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/175/526/540ca6d631d17896334275083b38566a86be2b2b_medium.jpg?1497551006"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "new_scope": "partners.shopify.com", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ChangedScope", 
            "id": 2890080, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-06-15T19:05:43.960Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-15T19:05:43.960Z", 
            "actor": {
                "username": "shopify-peteryaworski", 
                "url": "/shopify-peteryaworski", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/175/526/540ca6d631d17896334275083b38566a86be2b2b_medium.jpg?1497551006"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "added_weaknesses": [
                    {
                        "id": 62, 
                        "name": "Cross-site Scripting (XSS) - Stored"
                    }
                ], 
                "removed_weaknesses": [
                    {
                        "id": 63, 
                        "name": "Cross-site Scripting (XSS) - DOM"
                    }
                ]
            }, 
            "team_handle": "shopify", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportVulnerabilityTypesUpdated", 
            "id": 2890082, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "bored-engineer", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/bored-engineer", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/007/328/369436c6c39c8338c3bd3c96466f58fd2b4bee1d_small.png?1467257466"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 62, 
        "name": "Cross-site Scripting (XSS) - Stored"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2017-06-27T23:49:28.072Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/232174", 
    "created_at": "2017-05-26T09:12:00.386Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"description\">Description</h1>\n\n<p>Shopify allows developers to create a special type of application called a &quot;<a href=\"/redirect?signature=1c1f7bef89f4dcdcb60439629bd7977ba23ee893&amp;url=https%3A%2F%2Fhelp.shopify.com%2Fapi%2Fsdks%2Fsales-channel-sdk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Sales Channel</span><i class=\"icon-external-link\"></i></a>&quot;. Developers are allowed to upload a 16x16 SVG &quot;Navigation Icon&quot; for their app provided the SVG follows the <a href=\"/redirect?signature=177b3b9619d8037cfac6a12f1116ea250303ef5a&amp;url=https%3A%2F%2Fhelp.shopify.com%2Fapi%2Fsdks%2Fsales-channel-sdk%2Fdesign-guidelines%2Fchecklist%23navigation-icon\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>design guidelines</span><i class=\"icon-external-link\"></i></a> which limits the allowed elements and attributes. For some reason when the SVG contains an XML entity this whitelist is no longer enforced allowing the developer to include malicious attributes such as <code>onload</code>. By uploading a malicious SVG a developer can obtain XSS on both partners.shopify.com, as well as any the admin panel of any shop which has authorized the sales channel. </p>\n\n<h1 id=\"proof-of-concept\">Proof of Concept</h1>\n\n<p>This is relatively easy to reproduce, first create a new application within the <a href=\"/redirect?signature=99cbdda247a850bb265556ea1ded1b4366b51318&amp;url=https%3A%2F%2Fpartners.shopify.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Partners dashboard</span><i class=\"icon-external-link\"></i></a> then navigate to &quot;Extensions&quot; -&gt; &quot;Sales channel&quot; to convert the application. After saving those changes a new field within the &quot;App info&quot; section titled &quot;Navigation icon&quot;. Upload the following SVG:</p>\n<pre class=\"highlight xml\"><code><span class=\"cp\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>\n<span class=\"cp\">&lt;!DOCTYPE svg [\n    &lt;!ENTITY elem &quot;&quot;&gt;</span>\n]&gt;\n<span class=\"nt\">&lt;svg</span> <span class=\"na\">onload=</span><span class=\"s\">&quot;alert(document.domain);&quot;</span> <span class=\"na\">height=</span><span class=\"s\">&quot;16&quot;</span> <span class=\"na\">width=</span><span class=\"s\">&quot;16&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"ni\">&amp;elem;</span>\n<span class=\"nt\">&lt;/svg&gt;</span>\n</code></pre>\n<p>After saving changes the XSS payload will fire on <a href=\"/redirect?signature=99cbdda247a850bb265556ea1ded1b4366b51318&amp;url=https%3A%2F%2Fpartners.shopify.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>partners.shopify.com</span><i class=\"icon-external-link\"></i></a>. To fire the payload on <code>$shop$.myshopify.com/admin/</code> you&#39;ll need to authorize the application on your shop:<br>\nI&#39;ve created an example malicious application associated with my partner account <code>shopify-whitehat-2+hackerone@bored.engineer</code> to help demonstrate the issue, you can authorize it by opening the following URL on <code>$your-shop$.myshopify.com</code>:</p>\n<pre class=\"highlight plaintext\"><code>/admin/oauth/authorize?client_id=672a937d5eb24e10c756ea256c73bb8c&amp;scope=read_products&amp;redirect_uri=https://attackerdoma.in/93ba4bef-cff1-43b1-922d-0631bd387e2e.html&amp;state=nonce\n</code></pre>\n<p>Immediately after authorizing the application (and all future admin panel loads) an alert should appear on the /admin window containing document.domain.</p>\n\n<h1 id=\"exploitability\">Exploitability</h1>\n\n<p>This seems like a really odd issue, so it may good to see if there are other places this icon could surface (ex. the app store or internal admin panels) to full understand the impact. For the known exploitable use-case via OAuth authorization you do need to convince an administrator to authorize your malicious application, however the exploit does not require any specific permissions to trigger so an admin may be more willing to authorize the application. Once the administrator has loaded the application it will immediately fire without additional user-interaction. </p>\n\n<h1 id=\"remediation\">Remediation</h1>\n\n<p>The application should not allow XML entities in uploaded SVGs (or at least fix the parsing so it handles them correctly).</p>\n", 
    "severity_rating": "high", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.shopify.com", 
            "about": "Shopify is a multi-channel commerce platform that helps people sell online, in-store, and everywhere in between.", 
            "twitter_handle": "", 
            "name": "Shopify"
        }, 
        "handle": "shopify", 
        "url": "https://hackerone.com/shopify", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/382/1e9872bf9cfe04008c2673e07bfecaa83858cca1_small.jpg?1532728703", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/001/382/30421c25f4a7b03ec3250e36efb64f7291402806_medium.jpg?1532728703"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 1382, 
        "default_currency": "usd"
    }, 
    "is_published": false
}