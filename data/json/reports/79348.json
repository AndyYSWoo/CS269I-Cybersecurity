{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-05-25T16:17:08.565Z", 
    "voters": [
        "jokebookservice1", 
        "lukasreschke", 
        "tomdev", 
        "fransrosen", 
        "jobert", 
        "michiel", 
        "harisec", 
        "hunter", 
        "wkcaj", 
        "gerben_javado", 
        "and 61 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "1000.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 79348, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "OSX slack:// protocol handler javascript injection", 
    "is_member_of_team?": null, 
    "vote_count": 71, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-06-24T16:17:08.757Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$1,000", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-07-29T06:42:36.038Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-29T06:42:36.038Z", 
            "actor": {
                "username": "leighhoneywell", 
                "url": "/leighhoneywell", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/411/41db791571bb85d35a552804c3e6ea50c878a04e_medium.jpeg?1435253032"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 529597, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-07-29T06:44:37.851Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-29T06:44:37.851Z", 
            "actor": {
                "username": "leighhoneywell", 
                "url": "/leighhoneywell", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/411/41db791571bb85d35a552804c3e6ea50c878a04e_medium.jpeg?1435253032"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "message": "Hi Jay! Thanks for the report. We've been able to reproduce this bug and are investigating a comprehensive fix.", 
            "markdown_message": "<p>Hi Jay! Thanks for the report. We&#39;ve been able to reproduce this bug and are investigating a comprehensive fix.</p>\n", 
            "type": "Activities::Comment", 
            "id": 529599, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-08-03T22:02:51.323Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-03T22:02:51.323Z", 
            "actor": {
                "username": "computerality", 
                "url": "/computerality", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "message": "Hey, it looks like the issue I reported has been fixed with the 1.1.2 release. I checked the function again and didn't see additional injections.", 
            "markdown_message": "<p>Hey, it looks like the issue I reported has been fixed with the 1.1.2 release. I checked the function again and didn&#39;t see additional injections.</p>\n", 
            "type": "Activities::Comment", 
            "id": 536398, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-08-18T14:30:42.613Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-18T14:30:42.613Z", 
            "actor": {
                "username": "computerality", 
                "url": "/computerality", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "message": "Hi, since this is now fixed, would it qualify for a bounty award? Thanks.", 
            "markdown_message": "<p>Hi, since this is now fixed, would it qualify for a bounty award? Thanks.</p>\n", 
            "type": "Activities::Comment", 
            "id": 552985, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-08-18T18:52:28.087Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-18T18:52:28.087Z", 
            "actor": {
                "url": "/slack", 
                "profile": {
                    "name": "Slack"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/069/50cfd8e05b18bade214847ec5f61dcb9e6c85fa9_medium.png?1449082084"
                }
            }, 
            "team_handle": "slack", 
            "bounty_amount": "1000.0", 
            "collaborator": {
                "username": "computerality", 
                "url": "/computerality"
            }, 
            "message": "Hey Jay! Thanks for your patience. This was a great bug so I'm happy to award you $1000.", 
            "markdown_message": "<p>Hey Jay! Thanks for your patience. This was a great bug so I&#39;m happy to award you $1000.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 553312, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "computerality", 
                "url": "/computerality"
            }, 
            "created_at": "2015-08-18T18:52:44.291Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-18T18:52:44.291Z", 
            "actor": {
                "username": "leighhoneywell", 
                "url": "/leighhoneywell", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/411/41db791571bb85d35a552804c3e6ea50c878a04e_medium.jpeg?1435253032"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 553314, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-25T16:17:08.614Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-25T16:17:08.614Z", 
            "actor": {
                "username": "computerality", 
                "url": "/computerality", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "first_to_agree": true, 
            "message": "This was a fixed a while ago and I think it would be a valuable pattern for the public to learn about.", 
            "markdown_message": "<p>This was a fixed a while ago and I think it would be a valuable pattern for the public to learn about.</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 983277, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T16:17:18.093Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T16:17:18.093Z", 
            "actor": {
                "url": "/slack", 
                "profile": {
                    "name": "Slack"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/069/50cfd8e05b18bade214847ec5f61dcb9e6c85fa9_medium.png?1449082084"
                }
            }, 
            "team_handle": "slack", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1035650, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "computerality", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/computerality", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 58, 
        "name": "Command Injection - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -77351724.99078737, 
    "disclosed_at": "2016-06-24T16:17:17.826Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/79348", 
    "created_at": "2015-07-29T05:47:55.388Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>The Mac Slack app version 1.1 introduced the slack:// protocol handler. Due to improper input sanitization, arbitrary Javascript code can be run in the context of the client app if the user clicks on a slack:// link on a website or email. I have confirmed this issue still exists in the 1.1.1 release.</p>\n\n<h1 id=\"poc\">PoC</h1>\n\n<p>If a user clicks this link, a message will be posted on their behalf to their general channel.<br>\n    &lt;a href=&quot;slack://test?team=1&amp;a=&#39;);eval(atob(&#39;VFNTU0Iuc2VuZE1zZ0Zyb21Vc2VyKHdpbmRvdy5UUy5jaGFubmVscy5nZXRHZW5lcmFsQ2hhbm5lbCgpLmlkLCAiSGVsbG8sIEkgYW0gcHJvb2Ygb2YganMgaW5qZWN0aW9uIik7&#39;));String(&#39;&quot;&gt;Click me for a good time&lt;/a&gt;</p>\n\n<p>or go to <a title=\"http://computerality.com/t/slack_report.html\" href=\"/redirect?signature=ed62a5953dcd98e448a50231b7c8c95fb0298b69&amp;url=http%3A%2F%2Fcomputerality.com%2Ft%2Fslack_report.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://computerality.com/t/slack_report.html</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>The example javascript that is run in the context of the client app is:<br>\n    TSSSB.sendMsgFromUser(window.TS.channels.getGeneralChannel().id, &quot;Hello, I am proof of js injection&quot;);</p>\n\n<h1 id=\"details\">Details</h1>\n\n<p>The Objective-C function responsible for handling the scheme processing is:<br>\n -[SLAppDelegate handleURLEvent:withReplyEvent:]</p>\n\n<p>The argument is passed into the format string: &quot;TSSSB.handleDeepLink(\u2018%@\u2018);\u201d. Then the resulting string is evaluated in javascript via the stringByEvaluatingJavaScriptFromString method call.</p>\n\n<p>An attempt is made to sanitize input by calling stringByAddingPercentEscapesUsingEncoding. This function will perform escaping of certain characters but leave the single quote character unmodified.</p>\n\n<p>In the PoC link, the team argument is set to any value. When an invalid team id is used, a popup appears but the rest of the Javascript still runs. Next, the a parameter is processed. We escape and end the TSSSB.handleDeepLink() function call. Next we want to run arbitrary Javascript without having any spaces. To do this, we use the base64 decoding function atob() and call eval() on the result. Finally, the Javascript needs to continue to be valid so we create an unused object using the String constructor.</p>\n\n<p>If you have any other questions or if anything needs clarification, please let me know.</p>\n\n<p>Thanks!</p>\n\n<p>-Jay</p>\n", 
    "vulnerability_information": "The Mac Slack app version 1.1 introduced the slack:// protocol handler. Due to improper input sanitization, arbitrary Javascript code can be run in the context of the client app if the user clicks on a slack:// link on a website or email. I have confirmed this issue still exists in the 1.1.1 release.\r\n\r\nPoC\r\n=== \r\nIf a user clicks this link, a message will be posted on their behalf to their general channel.\r\n    <a href=\"slack://test?team=1&a=');eval(atob('VFNTU0Iuc2VuZE1zZ0Zyb21Vc2VyKHdpbmRvdy5UUy5jaGFubmVscy5nZXRHZW5lcmFsQ2hhbm5lbCgpLmlkLCAiSGVsbG8sIEkgYW0gcHJvb2Ygb2YganMgaW5qZWN0aW9uIik7'));String('\">Click me for a good time</a>\r\n\r\nor go to http://computerality.com/t/slack_report.html\r\n\r\nThe example javascript that is run in the context of the client app is:\r\n    TSSSB.sendMsgFromUser(window.TS.channels.getGeneralChannel().id, \"Hello, I am proof of js injection\");\r\n\r\nDetails\r\n======\r\nThe Objective-C function responsible for handling the scheme processing is:\r\n -[SLAppDelegate handleURLEvent:withReplyEvent:]\r\n\r\nThe argument is passed into the format string: \"TSSSB.handleDeepLink(\u2018%@\u2018);\u201d. Then the resulting string is evaluated in javascript via the stringByEvaluatingJavaScriptFromString method call.\r\n\r\nAn attempt is made to sanitize input by calling stringByAddingPercentEscapesUsingEncoding. This function will perform escaping of certain characters but leave the single quote character unmodified.\r\n\r\nIn the PoC link, the team argument is set to any value. When an invalid team id is used, a popup appears but the rest of the Javascript still runs. Next, the a parameter is processed. We escape and end the TSSSB.handleDeepLink() function call. Next we want to run arbitrary Javascript without having any spaces. To do this, we use the base64 decoding function atob() and call eval() on the result. Finally, the Javascript needs to continue to be valid so we create an unused object using the String constructor.\r\n\r\nIf you have any other questions or if anything needs clarification, please let me know.\r\n\r\nThanks!\r\n\r\n-Jay", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://slack.com", 
            "about": "All your team communication in one place, instantly searchable, and available wherever you go.", 
            "twitter_handle": "slackhq", 
            "name": "Slack"
        }, 
        "handle": "slack", 
        "url": "https://hackerone.com/slack", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/069/a44d7bfd843f514c723441a5a40daf5bac8e9e38_small.png?1449082084", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/069/50cfd8e05b18bade214847ec5f61dcb9e6c85fa9_medium.png?1449082084"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 69, 
        "default_currency": "usd"
    }, 
    "is_published": false
}