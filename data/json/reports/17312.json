{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 17312, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2014-06-23T12:26:47.523Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "HTML Form Without CSRF Protection Vulnerability", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2014-07-23T12:26:47.712Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Informative", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2014-06-23T11:33:23.048Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-23T11:33:23.048Z", 
            "actor": {
                "username": "anonymous_india", 
                "url": "/anonymous_india", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uzbey", 
            "message": "Imagine an e-banking web application at banking.example.com with the following form to submit a transaction:\n\n<form action=\"/transaction\" method=\"post\">\n<input type=\"text\" name=\"beneficiary\"/>\n<input type=\"text\" name=\"amount\"/>\n<input type=\"submit\" value=\"Pay\"/>\n</form>\n\nAn attacker could now set up a website at hacker.net with the following:\n\n<form action=\"https://banking.example.com/transaction\" method=\"post\" style=\"visibility:hidden\">\n<input type=\"text\" name=\"beneficiary\" value=\"John Doe, Account No. 34-236326-1\"/>\n<input type=\"text\" name=\"amount\" value=\"1000000\"/>\n<input type=\"submit\" value=\"Pay\"/>\n</form>\n<script>\ndocument.forms[0].submit();\n</script>\n\nThe attacker would then trick victims into visiting hacker.net, which will cause the victims' browsers to send a POST request to the e-banking application, making a large transaction to the hacker. This works because the victim's browser happily sends the session cookie along with the forged POST request to the e-banking application. If the form would have been protected by a CSRF token, then the attacker could not have caused the victim's browser to send a valid POST request and thus the attack would not be possible.\n\nThis type of attack is called a Cross-Site Request Forgery (CSRF) attack.\n\nIncidently, CSRF attacks are also the reason why people give the advice of never ever visiting other websites while being logged into an e-banking or other critical web application.\n\nCSRF tokens do not protect a web form being automatically submitted by regular authorized users as themselves. To protect from that, you'd use a CAPTCHA.", 
            "markdown_message": "<p>Imagine an e-banking web application at banking.example.com with the following form to submit a transaction:</p>\n\n<p>&lt;form action=&quot;/transaction&quot; method=&quot;post&quot;&gt;<br>\n&lt;input type=&quot;text&quot; name=&quot;beneficiary&quot;/&gt;<br>\n&lt;input type=&quot;text&quot; name=&quot;amount&quot;/&gt;<br>\n&lt;input type=&quot;submit&quot; value=&quot;Pay&quot;/&gt;<br>\n&lt;/form&gt;</p>\n\n<p>An attacker could now set up a website at hacker.net with the following:</p>\n\n<p>&lt;form action=&quot;https://banking.example.com/transaction&quot; method=&quot;post&quot; style=&quot;visibility:hidden&quot;&gt;<br>\n&lt;input type=&quot;text&quot; name=&quot;beneficiary&quot; value=&quot;John Doe, Account No. 34-236326-1&quot;/&gt;<br>\n&lt;input type=&quot;text&quot; name=&quot;amount&quot; value=&quot;1000000&quot;/&gt;<br>\n&lt;input type=&quot;submit&quot; value=&quot;Pay&quot;/&gt;<br>\n&lt;/form&gt;<br>\n&lt;script&gt;<br>\ndocument.forms[0].submit();<br>\n&lt;/script&gt;</p>\n\n<p>The attacker would then trick victims into visiting hacker.net, which will cause the victims&#39; browsers to send a POST request to the e-banking application, making a large transaction to the hacker. This works because the victim&#39;s browser happily sends the session cookie along with the forged POST request to the e-banking application. If the form would have been protected by a CSRF token, then the attacker could not have caused the victim&#39;s browser to send a valid POST request and thus the attack would not be possible.</p>\n\n<p>This type of attack is called a Cross-Site Request Forgery (CSRF) attack.</p>\n\n<p>Incidently, CSRF attacks are also the reason why people give the advice of never ever visiting other websites while being logged into an e-banking or other critical web application.</p>\n\n<p>CSRF tokens do not protect a web form being automatically submitted by regular authorized users as themselves. To protect from that, you&#39;d use a CAPTCHA.</p>\n", 
            "type": "Activities::Comment", 
            "id": 77687, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-23T11:33:34.535Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-23T11:33:34.535Z", 
            "actor": {
                "username": "anonymous_india", 
                "url": "/anonymous_india", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uzbey", 
            "message": "You need to validate (on the server side) everything that needs to be validated. What exactly needs to be validated depends on many factors and personal choices. Some of it may be for safety, but only a bare minimum is needed for that in many cases. For the most part validation is to improve or create user experience.\n\nFor example you can check to see whether they have entered a valid email address. If they haven't, you can give them a message. If you don't do that nothing bad will happen to your application, but the user won't be able to receive email from you.\n\nThere is also an important distinction between validation and sanitation. Sanitation is done for security (e.g. to prevent injection). Validation is done to make sure that input meets requirements to work correctly with your application although incorrect input may be benign. It's also possible for sanitized malicious input to be valid.\n\nAll input must be sanitized. No input needs to be validated, so it's really up to you.\n\nCSRF protection has nothing to do with validation. All it does is prevent a user from making a request using your form from an external source because the only way to generate and see the token is to make a request to your site first.", 
            "markdown_message": "<p>You need to validate (on the server side) everything that needs to be validated. What exactly needs to be validated depends on many factors and personal choices. Some of it may be for safety, but only a bare minimum is needed for that in many cases. For the most part validation is to improve or create user experience.</p>\n\n<p>For example you can check to see whether they have entered a valid email address. If they haven&#39;t, you can give them a message. If you don&#39;t do that nothing bad will happen to your application, but the user won&#39;t be able to receive email from you.</p>\n\n<p>There is also an important distinction between validation and sanitation. Sanitation is done for security (e.g. to prevent injection). Validation is done to make sure that input meets requirements to work correctly with your application although incorrect input may be benign. It&#39;s also possible for sanitized malicious input to be valid.</p>\n\n<p>All input must be sanitized. No input needs to be validated, so it&#39;s really up to you.</p>\n\n<p>CSRF protection has nothing to do with validation. All it does is prevent a user from making a request using your form from an external source because the only way to generate and see the token is to make a request to your site first.</p>\n", 
            "type": "Activities::Comment", 
            "id": 77688, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-23T11:41:33.766Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-23T11:41:33.766Z", 
            "actor": {
                "username": "prakharprasad", 
                "url": "/prakharprasad", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/885/77c298b91715e1f57b74d8b14de11e0ec914ad89_medium.png?1543067973"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uzbey", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugNotApplicable", 
            "id": 77696, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-23T12:05:33.051Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-23T12:05:33.051Z", 
            "actor": {
                "username": "anonymous_india", 
                "url": "/anonymous_india", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uzbey", 
            "message": "Do You Want To Suck My Dick You Dumb Ass Motherfucker.", 
            "markdown_message": "<p>Do You Want To Suck My Dick You Dumb Ass Motherfucker.</p>\n", 
            "type": "Activities::Comment", 
            "id": 77719, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-23T12:26:07.733Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-23T12:26:07.733Z", 
            "actor": {
                "username": "prakharprasad", 
                "url": "/prakharprasad", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/885/77c298b91715e1f57b74d8b14de11e0ec914ad89_medium.png?1543067973"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uzbey", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugReopened", 
            "id": 77742, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-23T12:26:29.520Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-23T12:26:29.520Z", 
            "actor": {
                "username": "prakharprasad", 
                "url": "/prakharprasad", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/885/77c298b91715e1f57b74d8b14de11e0ec914ad89_medium.png?1543067973"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uzbey", 
            "message": "-", 
            "markdown_message": "<p>-</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 77743, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-23T12:26:47.538Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-23T12:26:47.538Z", 
            "actor": {
                "username": "prakharprasad", 
                "url": "/prakharprasad", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/885/77c298b91715e1f57b74d8b14de11e0ec914ad89_medium.png?1543067973"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uzbey", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 77744, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-23T12:33:21.969Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-23T12:33:21.969Z", 
            "actor": {
                "username": "anonymous_india", 
                "url": "/anonymous_india", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uzbey", 
            "message": "\n\nYou Know prakharprasad Your Birth Certificate Is An Apology From The Condom Factory\n", 
            "markdown_message": "<p>You Know prakharprasad Your Birth Certificate Is An Apology From The Condom Factory</p>\n", 
            "type": "Activities::Comment", 
            "id": 77755, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-23T12:33:25.134Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-23T12:33:25.134Z", 
            "actor": {
                "username": "anonymous_india", 
                "url": "/anonymous_india", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uzbey", 
            "message": "\n\nYou Know prakharprasad Your Birth Certificate Is An Apology From The Condom Factory\n", 
            "markdown_message": "<p>You Know prakharprasad Your Birth Certificate Is An Apology From The Condom Factory</p>\n", 
            "type": "Activities::Comment", 
            "id": 77756, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-23T12:33:29.641Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-23T12:33:29.641Z", 
            "actor": {
                "username": "anonymous_india", 
                "url": "/anonymous_india", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uzbey", 
            "message": "\n\nYou Know prakharprasad Your Birth Certificate Is An Apology From The Condom Factory\n", 
            "markdown_message": "<p>You Know prakharprasad Your Birth Certificate Is An Apology From The Condom Factory</p>\n", 
            "type": "Activities::Comment", 
            "id": 77757, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-07-23T12:26:56.451Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-07-23T12:26:56.451Z", 
            "actor": {
                "url": "/uzbey", 
                "profile": {
                    "name": "Uzbey"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/230/f2033ac222410d1a234e27fe3318e86e3ccef213_medium.png?1402219598"
                }
            }, 
            "team_handle": "uzbey", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 94342, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "anonymous_india", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": true, 
        "url": "/anonymous_india", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -138019054.73556593, 
    "disclosed_at": "2014-07-23T12:26:56.434Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/17312", 
    "created_at": "2014-06-23T11:33:09.250Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>HTML Form Without CSRF Protection Vulnerability</p>\n\n<p>Respected Sir/Madam I Hope Your Cooperate With Me Cause It&#39;s Not Easy To Find Vulnerability On Your Official Website </p>\n\n<p>Vulnerability description</p>\n\n<p>Cross-site request forgery, also known as a one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.Myself  found a HTML form with no apparent CSRF protection implemented. Consult details for more information about the affected HTML form.</p>\n\n<p>Affected items</p>\n<pre class=\"highlight plaintext\"><code>/ (05021b83a694b8a6bcf20726b9e74a3e)\n/content/advertising\n/news-list\n/user/login\n/user/login (bbec132626041c12fd5a4c3464846698)\n/user/password\n/user/password (d36afa692532337cc8b2ed285e3b3f11)\n/user/register \n</code></pre>\n<p>The impact of this vulnerability</p>\n\n<p>An attacker may force the users of a web application to execute actions of the attacker&#39;s choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.</p>\n\n<p>How to fix this vulnerability</p>\n\n<p>Check if this form requires CSRF protection and implement CSRF countermeasures if necessary.</p>\n\n<p>Proof Of Concept<br>\nVulnerability description</p>\n\n<p>Cross-site request forgery, also known as a one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.Myself  found a HTML form with no apparent CSRF protection implemented. Consult details for more information about the affected HTML form.</p>\n\n<p>This vulnerability affects /user/register.<br>\nAttack details</p>\n\n<p>Form name: &lt;empty&gt;<br>\nForm action: <a title=\"https://staging.uzbey.com/user/register?destination=user/register\" href=\"/redirect?signature=1a66f6aac2d6b55cb196f8a6befe208416c43434&amp;url=https%3A%2F%2Fstaging.uzbey.com%2Fuser%2Fregister%3Fdestination%3Duser%2Fregister\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://staging.uzbey.com/user/register?destination=user/register</span><i class=\"icon-external-link\"></i></a><br>\nForm method: POST</p>\n\n<p>Form inputs:</p>\n<pre class=\"highlight plaintext\"><code>name [Text]\npass [Password]\nform_build_id [Hidden]\nform_id [Hidden]\nop [Submit]\n</code></pre>\n<p>Request Header<br>\nPragma: no-cache<br>\nCache-Control: no-cache<br>\nReferer: <a title=\"https://staging.uzbey.com/\" href=\"/redirect?signature=c12b9e572988c1dc580979c8376a0c5d27d4dcea&amp;url=https%3A%2F%2Fstaging.uzbey.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://staging.uzbey.com/</span><i class=\"icon-external-link\"></i></a><br>\nAcunetix-Aspect: enabled<br>\nAcunetix-Aspect-Password: 082119f75623eb7abd7bf357698ff66c<br>\nAcunetix-Aspect-Queries: filelist;aspectalerts<br>\nHost: staging.uzbey.com<br>\nConnection: Keep-alive<br>\nAccept-Encoding: gzip,deflate<br>\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.63 Safari/537.36<br>\nAccept: <em>/</em></p>\n\n<p>Respond Header</p>\n\n<p>HTTP/1.1 200 OK<br>\nDate: Mon, 23 Jun 2014 10:54:29 GMT<br>\nServer: Apache<br>\nExpires: Sun, 19 Nov 1978 05:00:00 GMT<br>\nLast-Modified: Mon, 23 Jun 2014 10:54:29 +0000<br>\nCache-Control: no-cache, must-revalidate, post-check=0, pre-check=0<br>\nETag: &quot;1403520869&quot;<br>\nContent-Language: en<br>\nVary: Accept-Encoding,User-Agent<br>\nContent-Length: 43094<br>\nConnection: close<br>\nContent-Type: text/html; charset=utf-8<br>\nOriginal-Content-Encoding: gzip</p>\n\n<p>The impact of this vulnerability<br>\nAn attacker may force the users of a web application to execute actions of the attacker&#39;s choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.</p>\n\n<p>How to fix this vulnerability</p>\n\n<p>Check if this form requires CSRF protection and implement CSRF countermeasures if necessary.</p>\n\n<p>Thankz For Reading My Message Have A Good Day Respected Sir/Madam Please Approved My Vulnerability Cause Of My Hard Work Which I Had Done It&#39;s Not Easy To Find Vulnerability On Your Official Website I Hope You Get My Point Of View.</p>\n", 
    "vulnerability_information": "HTML Form Without CSRF Protection Vulnerability\r\n\r\nRespected Sir/Madam I Hope Your Cooperate With Me Cause It's Not Easy To Find Vulnerability On Your Official Website \r\n\r\n\r\nVulnerability description\r\n\r\nCross-site request forgery, also known as a one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.Myself  found a HTML form with no apparent CSRF protection implemented. Consult details for more information about the affected HTML form.\r\n\r\nAffected items\r\n\r\n    / (05021b83a694b8a6bcf20726b9e74a3e)\r\n    /content/advertising\r\n    /news-list\r\n    /user/login\r\n    /user/login (bbec132626041c12fd5a4c3464846698)\r\n    /user/password\r\n    /user/password (d36afa692532337cc8b2ed285e3b3f11)\r\n    /user/register \r\n\r\nThe impact of this vulnerability\r\n\r\nAn attacker may force the users of a web application to execute actions of the attacker's choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.\r\n\r\nHow to fix this vulnerability\r\n\r\nCheck if this form requires CSRF protection and implement CSRF countermeasures if necessary.\r\n\r\nProof Of Concept\r\nVulnerability description\r\n\r\nCross-site request forgery, also known as a one-click attack or session riding and abbreviated as CSRF or XSRF, is a type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.Myself  found a HTML form with no apparent CSRF protection implemented. Consult details for more information about the affected HTML form.\r\n\r\nThis vulnerability affects /user/register.\r\nAttack details\r\n\r\nForm name: <empty>\r\nForm action: https://staging.uzbey.com/user/register?destination=user/register\r\nForm method: POST\r\n\r\nForm inputs:\r\n\r\n    name [Text]\r\n    pass [Password]\r\n    form_build_id [Hidden]\r\n    form_id [Hidden]\r\n    op [Submit]\r\n\r\nRequest Header\r\nPragma: no-cache\r\nCache-Control: no-cache\r\nReferer: https://staging.uzbey.com/\r\nAcunetix-Aspect: enabled\r\nAcunetix-Aspect-Password: 082119f75623eb7abd7bf357698ff66c\r\nAcunetix-Aspect-Queries: filelist;aspectalerts\r\nHost: staging.uzbey.com\r\nConnection: Keep-alive\r\nAccept-Encoding: gzip,deflate\r\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.63 Safari/537.36\r\nAccept: */*\r\n\r\nRespond Header\r\n\r\nHTTP/1.1 200 OK\r\nDate: Mon, 23 Jun 2014 10:54:29 GMT\r\nServer: Apache\r\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\r\nLast-Modified: Mon, 23 Jun 2014 10:54:29 +0000\r\nCache-Control: no-cache, must-revalidate, post-check=0, pre-check=0\r\nETag: \"1403520869\"\r\nContent-Language: en\r\nVary: Accept-Encoding,User-Agent\r\nContent-Length: 43094\r\nConnection: close\r\nContent-Type: text/html; charset=utf-8\r\nOriginal-Content-Encoding: gzip\r\n  \r\nThe impact of this vulnerability\r\nAn attacker may force the users of a web application to execute actions of the attacker's choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application.\r\n\r\nHow to fix this vulnerability\r\n\r\nCheck if this form requires CSRF protection and implement CSRF countermeasures if necessary.\r\n\r\nThankz For Reading My Message Have A Good Day Respected Sir/Madam Please Approved My Vulnerability Cause Of My Hard Work Which I Had Done It's Not Easy To Find Vulnerability On Your Official Website I Hope You Get My Point Of View.\r\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://staging.uzbey.com/", 
            "about": "The goal of Uzbey is to create the worlds largest selfie to be launched into space. test @jobert", 
            "twitter_handle": "", 
            "name": "Uzbey"
        }, 
        "handle": "uzbey", 
        "url": "https://hackerone.com/uzbey", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/230/48753fdb7bb218437f825053bb4a1653aad53d5c_small.png?1402219598", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/230/f2033ac222410d1a234e27fe3318e86e3ccef213_medium.png?1402219598"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 230, 
        "default_currency": "usd"
    }, 
    "is_published": false
}