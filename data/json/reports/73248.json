{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 73248, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2015-04-21T00:00:00.000Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Tokenizer crash when processing undecodable source code", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-06-30T11:42:29.247Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-30T11:42:29.247Z", 
            "actor": {
                "url": "/ibb-python", 
                "profile": {
                    "name": "Python (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/027/79e9602e5e25d02b7c34cdbc40438408f47e7cd7_medium.png?1383737131"
                }
            }, 
            "team_handle": "ibb-python", 
            "bounty_amount": "500.0", 
            "collaborator": {
                "username": "hugbounter", 
                "url": "/hugbounter"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 496258, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "hugbounter", 
                "url": "/hugbounter"
            }, 
            "created_at": "2015-06-30T11:42:29.247Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-15T13:29:46.246Z", 
            "actor": {
                "url": "/ibb-python", 
                "profile": {
                    "name": "Python (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/027/79e9602e5e25d02b7c34cdbc40438408f47e7cd7_medium.png?1383737131"
                }
            }, 
            "team_handle": "ibb-python", 
            "message": null, 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1196224, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "hugbounter", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/hugbounter", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2015-04-21T00:00:00.000Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/73248", 
    "created_at": "2015-04-21T00:00:00.000Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><a title=\"http://bugs.python.org/issue24022\" href=\"/redirect?signature=e7dbbc8150bcefb99f497a09f090e0ab489e1c83&amp;url=http%3A%2F%2Fbugs.python.org%2Fissue24022\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://bugs.python.org/issue24022</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Hello,</p>\n\n<p>I would like to report a heap corruption issue in Python/Parser/tokenizer.c:922, affecting latest Python 3.4.3 (from python.org) and also 2.7 ( tested 2.7.9-r1 on Gentoo ). The latest version available - 3.5.0a3 is also affected. It doesn&#39;t seem to affect 3.3 branch (tested with 3.3.5-r1 on Gentoo).<br>\nThe issue occurs when a malformed python script is executed by python binary, which results in a out-of-bound read access of heap and therefore a segmentation fault.<br>\nI couldn&#39;t confirm nor deny its exploitability, to my knowledge this would be more of a infoleak, if anything. Nevertheless, as Google Project Zero proved many times, no heap corruption issue should be treated lightheartedly. :-) Hence the reason why I&#39;m reporting it to <a title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\">security@python.org</a></p>\n\n<p>I tried to dig into the details of the bug and I have to admit the defeat - the Python Parser is quite a complex beast...<br>\nWhat I was able to determine was that given malformed script (attached), the infinite &#39;for&#39; loop defined in tokenizer.c:900 never reaches any of the exit conditions, which causes a infinite incrementation of *tok-&gt;cur and thus reading character by character of the heap, until the heap segment boundary is reached and segmentation fault occurrs.</p>\n\n<p>There seem to be a race condition involved as well, as the malformed script does not always result in crash sometimes producing the error below:</p>\n<pre class=\"highlight plaintext\"><code>./python ~/Fuzz/crashes/python_stuff/heap_pattern.py\n  File &quot;/home/user/Fuzz/crashes/python_stuff/heap_pattern.py&quot;, line 44\nSyntaxError: Non-UTF-8 code starting with &#39;\\x9e&#39; in file /home/user/Fuzz/crashes/python_stuff/heap_pattern.py on line 45, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\n</code></pre>\n<p>I acknowledge that attack scenario is somehow limited, because one has to be in a position to provide their own script for execution. Nevertheless, at the very least, a malicious user could crash python environment.</p>\n\n<p>Depending on the particular script, ASAN detects either as a &#39;heap-use-after-free&#39; or &#39;heap-buffer-overflow&#39;.</p>\n\n<p>HEAP-BUFFER-OVERFLOW according to asan:</p>\n<pre class=\"highlight plaintext\"><code>$ ./python ~/heap3.py\n=================================================================\n==23461==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62500001e0ff at pc 0xc90075 bp 0x7ffe53018fd0 sp 0x7ffe53018fc0\nREAD of size 1 at 0x62500001e0ff thread T0\n    #0 0xc90074 in tok_nextc Parser/tokenizer.c:1021\n    #1 0xc9a6ef in tok_get Parser/tokenizer.c:1341\n    #2 0xca0640 in PyTokenizer_Get Parser/tokenizer.c:1738\n    #3 0xc81109 in parsetok Parser/parsetok.c:208\n    #4 0xa0c449 in PyParser_ASTFromFileObject Python/pythonrun.c:2356\n    #5 0xa0c449 in PyRun_FileExFlags Python/pythonrun.c:2126\n    #6 0xa15f0b in PyRun_SimpleFileExFlags Python/pythonrun.c:1606\n    #7 0x43a1aa in run_file Modules/main.c:319\n    #8 0x43a1aa in Py_Main Modules/main.c:751\n    #9 0x4234d3 in main Modules/python.c:69\n    #10 0x7efcd1cf1f9f in __libc_start_main (/lib64/libc.so.6+0x1ff9f)\n    #11 0x426a7c (/home/user/Fuzz/targets/Python-3.4.3_ASAN/python+0x426a7c)\n\n0x62500001e0ff is located 1 bytes to the left of 8192-byte region [0x62500001e100,0x625000020100)\nallocated by thread T0 here:\n    #0 0x7efcd29eb7c7 in malloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x577c7)\n    #1 0xc9997a in PyTokenizer_FromFile Parser/tokenizer.c:852\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow Parser/tokenizer.c:1021 tok_nextc\nShadow bytes around the buggy address:\n  0x0c4a7fffbbc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbe0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=&gt;0x0c4a7fffbc10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa[fa]\n  0x0c4a7fffbc20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Contiguous container OOB:fc\n  ASan internal:           fe\n==23461==ABORTING\n</code></pre>\n<p>Below is an example of ASAN detecting a &#39;use-after-free&#39;:</p>\n<pre class=\"highlight plaintext\"><code>./python ~/heap4_asan.py\n=================================================================\n==23465==ERROR: AddressSanitizer: heap-use-after-free on address 0x62500001e101 at pc 0xc8f7c4 bp 0x7ffc35552000 sp 0x7ffc35551ff0\nREAD of size 1 at 0x62500001e101 thread T0\n    #0 0xc8f7c3 in tok_nextc Parser/tokenizer.c:902\n    #1 0xc9a96f in tok_get Parser/tokenizer.c:1429\n    #2 0xca0640 in PyTokenizer_Get Parser/tokenizer.c:1738\n    #3 0xc81109 in parsetok Parser/parsetok.c:208\n    #4 0xa0c449 in PyParser_ASTFromFileObject Python/pythonrun.c:2356\n    #5 0xa0c449 in PyRun_FileExFlags Python/pythonrun.c:2126\n    #6 0xa15f0b in PyRun_SimpleFileExFlags Python/pythonrun.c:1606\n    #7 0x43a1aa in run_file Modules/main.c:319\n    #8 0x43a1aa in Py_Main Modules/main.c:751\n    #9 0x4234d3 in main Modules/python.c:69\n    #10 0x7f71d129ef9f in __libc_start_main (/lib64/libc.so.6+0x1ff9f)\n    #11 0x426a7c (/home/user/Fuzz/targets/Python-3.4.3_ASAN/python+0x426a7c)\n\n0x62500001e101 is located 1 bytes inside of 8192-byte region [0x62500001e100,0x625000020100)\nfreed by thread T0 here:\n    #0 0x7f71d1f98aa6 in __interceptor_realloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x57aa6)\n    #1 0xc8edb1 in tok_nextc Parser/tokenizer.c:1041\n\npreviously allocated by thread T0 here:\n    #0 0x7f71d1f987c7 in malloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x577c7)\n    #1 0xc9997a in PyTokenizer_FromFile Parser/tokenizer.c:852\n\nSUMMARY: AddressSanitizer: heap-use-after-free Parser/tokenizer.c:902 tok_nextc\nShadow bytes around the buggy address:\n  0x0c4a7fffbbd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbe0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=&gt;0x0c4a7fffbc20:[fd]fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc30: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc40: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Contiguous container OOB:fc\n  ASan internal:           fe\n==23465==ABORTING\n</code></pre>\n<p>Without AddressSanitizer, this particular script does not crash, but causes one of two errors:</p>\n<pre class=\"highlight plaintext\"><code>File &quot;/home/user/heap4_asan.py&quot;, line 5\nSyntaxError: Non-UTF-8 code starting with &#39;\\x9e&#39; in file /home/user/heap4_asan.py on line 6, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\n</code></pre>\n<p>or:</p>\n<pre class=\"highlight plaintext\"><code>File &quot;/home/user/heap4_asan.py&quot;, line 5\nSyntaxError: unknown decode error\n</code></pre>\n<p>In all cases, the crash always occurs in Parser/tokenizer.c at line no. 922, where *tok-&gt;curr is incremented, regardless where it currently points. Eventually, it will reach heap boundary and the *tok-&gt;cur++ will cause python to crash.</p>\n<pre class=\"highlight plaintext\"><code>Program received signal SIGSEGV, Segmentation fault.\n0x0000000000573657 in tok_nextc (tok=tok@entry=0x8fb250) at Parser/tokenizer.c:922\n922                 return Py_CHARMASK(*tok-&gt;cur++);\n</code></pre>\n<p>Sample GDB session can be found below:</p>\n<pre class=\"highlight plaintext\"><code>$ gdb --args ./python ~/heap1.py\nGNU gdb (Gentoo 7.9 vanilla) 7.9\nCopyright (C) 2015 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;\nand &quot;show warranty&quot; for details.\nThis GDB was configured as &quot;x86_64-pc-linux-gnu&quot;.\nType &quot;show configuration&quot; for configuration details.\nFor bug reporting instructions, please see:\n&lt;http://bugs.gentoo.org/&gt;.\nFind the GDB manual and other documentation resources online at:\n&lt;http://www.gnu.org/software/gdb/documentation/&gt;.\nFor help, type &quot;help&quot;.\nType &quot;apropos word&quot; to search for commands related to &quot;word&quot;...\nReading symbols from ./python...done.\nwarning: File &quot;/home/user/Fuzz/targets/Python-3.4.3/python-gdb.py&quot; auto-loading has been declined by your `auto-load safe-path&#39; set to &quot;$debugdir:$datadir/auto-load&quot;.\nTo enable execution of this file add\n    add-auto-load-safe-path /home/user/Fuzz/targets/Python-3.4.3/python-gdb.py\nline to your configuration file &quot;/home/user/.gdbinit&quot;.\nTo completely disable this security protection add\n    set auto-load safe-path /\nline to your configuration file &quot;/home/user/.gdbinit&quot;.\nFor more information about this security protection see the\n&quot;Auto-loading safe path&quot; section in the GDB manual.  E.g., run from the shell:\n    info &quot;(gdb)Auto-loading safe path&quot;\ngdb-peda$ r\nStarting program: /home/user/Fuzz/targets/Python-3.4.3/python /home/user/heap1.py\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.\n\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x995001\nRBX: 0x963c40 --&gt; 0x0\nRCX: 0x0\nRDX: 0x27 (&quot;&#39;&quot;)\nRSI: 0x0\nRDI: 0x963c40 --&gt; 0x0\nRBP: 0x0\nRSP: 0x7fffffffdf40 --&gt; 0x7ffff6f14660 --&gt; 0x0\nRIP: 0x573657 (&lt;tok_nextc+1367&gt;:    movzx  eax,BYTE PTR [r12])\nR8 : 0x1bdf0\nR9 : 0x1bde0\nR10: 0x1bdd0\nR11: 0x4\nR12: 0x995000\nR13: 0x0\nR14: 0x7fffffffe010 --&gt; 0x0\nR15: 0x0\nEFLAGS: 0x10216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x57364a &lt;tok_nextc+1354&gt;:    mov    QWORD PTR [rbx+0x10],rax\n   0x57364e &lt;tok_nextc+1358&gt;:    lea    rax,[r12+0x1]\n   0x573653 &lt;tok_nextc+1363&gt;:    mov    QWORD PTR [rbx+0x8],rax\n=&gt; 0x573657 &lt;tok_nextc+1367&gt;:    movzx  eax,BYTE PTR [r12]\n   0x57365c &lt;tok_nextc+1372&gt;:    add    rsp,0x18\n   0x573660 &lt;tok_nextc+1376&gt;:    pop    rbx\n   0x573661 &lt;tok_nextc+1377&gt;:    pop    rbp\n   0x573662 &lt;tok_nextc+1378&gt;:    pop    r12\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffdf40 --&gt; 0x7ffff6f14660 --&gt; 0x0\n0008| 0x7fffffffdf48 --&gt; 0x57107e (&lt;PyNode_AddChild+318&gt;:    mov    rsi,rax)\n0016| 0x7fffffffdf50 --&gt; 0x7ffff6f14660 --&gt; 0x0\n0024| 0x7fffffffdf58 --&gt; 0x27 (&quot;&#39;&quot;)\n0032| 0x7fffffffdf60 --&gt; 0x963c40 --&gt; 0x0\n0040| 0x7fffffffdf68 --&gt; 0x3\n0048| 0x7fffffffdf70 --&gt; 0x0\n0056| 0x7fffffffdf78 --&gt; 0x7fffffffe010 --&gt; 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x0000000000573657 in tok_nextc (tok=tok@entry=0x963c40)\n    at Parser/tokenizer.c:922\n922                return Py_CHARMASK(*tok-&gt;cur++);\n</code></pre>\n<p>Thank you for reading this.<br>\nPlease let me know if you need more information.</p>\n", 
    "vulnerability_information": "http://bugs.python.org/issue24022\n\nHello,\n\nI would like to report a heap corruption issue in Python/Parser/tokenizer.c:922, affecting latest Python 3.4.3 (from python.org) and also 2.7 ( tested 2.7.9-r1 on Gentoo ). The latest version available - 3.5.0a3 is also affected. It doesn't seem to affect 3.3 branch (tested with 3.3.5-r1 on Gentoo).\nThe issue occurs when a malformed python script is executed by python binary, which results in a out-of-bound read access of heap and therefore a segmentation fault.\nI couldn't confirm nor deny its exploitability, to my knowledge this would be more of a infoleak, if anything. Nevertheless, as Google Project Zero proved many times, no heap corruption issue should be treated lightheartedly. :-) Hence the reason why I'm reporting it to security@python.org\n\nI tried to dig into the details of the bug and I have to admit the defeat - the Python Parser is quite a complex beast...\nWhat I was able to determine was that given malformed script (attached), the infinite 'for' loop defined in tokenizer.c:900 never reaches any of the exit conditions, which causes a infinite incrementation of *tok->cur and thus reading character by character of the heap, until the heap segment boundary is reached and segmentation fault occurrs.\n\nThere seem to be a race condition involved as well, as the malformed script does not always result in crash sometimes producing the error below:\n\n```\n./python ~/Fuzz/crashes/python_stuff/heap_pattern.py\n  File \"/home/user/Fuzz/crashes/python_stuff/heap_pattern.py\", line 44\nSyntaxError: Non-UTF-8 code starting with '\\x9e' in file /home/user/Fuzz/crashes/python_stuff/heap_pattern.py on line 45, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\n```\n\nI acknowledge that attack scenario is somehow limited, because one has to be in a position to provide their own script for execution. Nevertheless, at the very least, a malicious user could crash python environment.\n\n\nDepending on the particular script, ASAN detects either as a 'heap-use-after-free' or 'heap-buffer-overflow'.\n\nHEAP-BUFFER-OVERFLOW according to asan:\n\n```\n$ ./python ~/heap3.py\n=================================================================\n==23461==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62500001e0ff at pc 0xc90075 bp 0x7ffe53018fd0 sp 0x7ffe53018fc0\nREAD of size 1 at 0x62500001e0ff thread T0\n    #0 0xc90074 in tok_nextc Parser/tokenizer.c:1021\n    #1 0xc9a6ef in tok_get Parser/tokenizer.c:1341\n    #2 0xca0640 in PyTokenizer_Get Parser/tokenizer.c:1738\n    #3 0xc81109 in parsetok Parser/parsetok.c:208\n    #4 0xa0c449 in PyParser_ASTFromFileObject Python/pythonrun.c:2356\n    #5 0xa0c449 in PyRun_FileExFlags Python/pythonrun.c:2126\n    #6 0xa15f0b in PyRun_SimpleFileExFlags Python/pythonrun.c:1606\n    #7 0x43a1aa in run_file Modules/main.c:319\n    #8 0x43a1aa in Py_Main Modules/main.c:751\n    #9 0x4234d3 in main Modules/python.c:69\n    #10 0x7efcd1cf1f9f in __libc_start_main (/lib64/libc.so.6+0x1ff9f)\n    #11 0x426a7c (/home/user/Fuzz/targets/Python-3.4.3_ASAN/python+0x426a7c)\n\n0x62500001e0ff is located 1 bytes to the left of 8192-byte region [0x62500001e100,0x625000020100)\nallocated by thread T0 here:\n    #0 0x7efcd29eb7c7 in malloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x577c7)\n    #1 0xc9997a in PyTokenizer_FromFile Parser/tokenizer.c:852\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow Parser/tokenizer.c:1021 tok_nextc\nShadow bytes around the buggy address:\n  0x0c4a7fffbbc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbe0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=>0x0c4a7fffbc10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa[fa]\n  0x0c4a7fffbc20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Contiguous container OOB:fc\n  ASan internal:           fe\n==23461==ABORTING\n```\n\n\nBelow is an example of ASAN detecting a 'use-after-free':\n\n```\n./python ~/heap4_asan.py\n=================================================================\n==23465==ERROR: AddressSanitizer: heap-use-after-free on address 0x62500001e101 at pc 0xc8f7c4 bp 0x7ffc35552000 sp 0x7ffc35551ff0\nREAD of size 1 at 0x62500001e101 thread T0\n    #0 0xc8f7c3 in tok_nextc Parser/tokenizer.c:902\n    #1 0xc9a96f in tok_get Parser/tokenizer.c:1429\n    #2 0xca0640 in PyTokenizer_Get Parser/tokenizer.c:1738\n    #3 0xc81109 in parsetok Parser/parsetok.c:208\n    #4 0xa0c449 in PyParser_ASTFromFileObject Python/pythonrun.c:2356\n    #5 0xa0c449 in PyRun_FileExFlags Python/pythonrun.c:2126\n    #6 0xa15f0b in PyRun_SimpleFileExFlags Python/pythonrun.c:1606\n    #7 0x43a1aa in run_file Modules/main.c:319\n    #8 0x43a1aa in Py_Main Modules/main.c:751\n    #9 0x4234d3 in main Modules/python.c:69\n    #10 0x7f71d129ef9f in __libc_start_main (/lib64/libc.so.6+0x1ff9f)\n    #11 0x426a7c (/home/user/Fuzz/targets/Python-3.4.3_ASAN/python+0x426a7c)\n\n0x62500001e101 is located 1 bytes inside of 8192-byte region [0x62500001e100,0x625000020100)\nfreed by thread T0 here:\n    #0 0x7f71d1f98aa6 in __interceptor_realloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x57aa6)\n    #1 0xc8edb1 in tok_nextc Parser/tokenizer.c:1041\n\npreviously allocated by thread T0 here:\n    #0 0x7f71d1f987c7 in malloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x577c7)\n    #1 0xc9997a in PyTokenizer_FromFile Parser/tokenizer.c:852\n\nSUMMARY: AddressSanitizer: heap-use-after-free Parser/tokenizer.c:902 tok_nextc\nShadow bytes around the buggy address:\n  0x0c4a7fffbbd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbe0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=>0x0c4a7fffbc20:[fd]fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc30: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc40: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Contiguous container OOB:fc\n  ASan internal:           fe\n==23465==ABORTING\n```\n\nWithout AddressSanitizer, this particular script does not crash, but causes one of two errors:\n\n```\nFile \"/home/user/heap4_asan.py\", line 5\nSyntaxError: Non-UTF-8 code starting with '\\x9e' in file /home/user/heap4_asan.py on line 6, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\n```\n\nor:\n\n```\nFile \"/home/user/heap4_asan.py\", line 5\nSyntaxError: unknown decode error\n```\n\n\nIn all cases, the crash always occurs in Parser/tokenizer.c at line no. 922, where *tok->curr is incremented, regardless where it currently points. Eventually, it will reach heap boundary and the *tok->cur++ will cause python to crash.\n\n```\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000573657 in tok_nextc (tok=tok@entry=0x8fb250) at Parser/tokenizer.c:922\n922                 return Py_CHARMASK(*tok->cur++);\n```\n\n\nSample GDB session can be found below:\n\n```\n$ gdb --args ./python ~/heap1.py\nGNU gdb (Gentoo 7.9 vanilla) 7.9\nCopyright (C) 2015 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-pc-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://bugs.gentoo.org/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./python...done.\nwarning: File \"/home/user/Fuzz/targets/Python-3.4.3/python-gdb.py\" auto-loading has been declined by your `auto-load safe-path' set to \"$debugdir:$datadir/auto-load\".\nTo enable execution of this file add\n    add-auto-load-safe-path /home/user/Fuzz/targets/Python-3.4.3/python-gdb.py\nline to your configuration file \"/home/user/.gdbinit\".\nTo completely disable this security protection add\n    set auto-load safe-path /\nline to your configuration file \"/home/user/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n    info \"(gdb)Auto-loading safe path\"\ngdb-peda$ r\nStarting program: /home/user/Fuzz/targets/Python-3.4.3/python /home/user/heap1.py\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x995001\nRBX: 0x963c40 --> 0x0\nRCX: 0x0\nRDX: 0x27 (\"'\")\nRSI: 0x0\nRDI: 0x963c40 --> 0x0\nRBP: 0x0\nRSP: 0x7fffffffdf40 --> 0x7ffff6f14660 --> 0x0\nRIP: 0x573657 (<tok_nextc+1367>:    movzx  eax,BYTE PTR [r12])\nR8 : 0x1bdf0\nR9 : 0x1bde0\nR10: 0x1bdd0\nR11: 0x4\nR12: 0x995000\nR13: 0x0\nR14: 0x7fffffffe010 --> 0x0\nR15: 0x0\nEFLAGS: 0x10216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x57364a <tok_nextc+1354>:    mov    QWORD PTR [rbx+0x10],rax\n   0x57364e <tok_nextc+1358>:    lea    rax,[r12+0x1]\n   0x573653 <tok_nextc+1363>:    mov    QWORD PTR [rbx+0x8],rax\n=> 0x573657 <tok_nextc+1367>:    movzx  eax,BYTE PTR [r12]\n   0x57365c <tok_nextc+1372>:    add    rsp,0x18\n   0x573660 <tok_nextc+1376>:    pop    rbx\n   0x573661 <tok_nextc+1377>:    pop    rbp\n   0x573662 <tok_nextc+1378>:    pop    r12\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffdf40 --> 0x7ffff6f14660 --> 0x0\n0008| 0x7fffffffdf48 --> 0x57107e (<PyNode_AddChild+318>:    mov    rsi,rax)\n0016| 0x7fffffffdf50 --> 0x7ffff6f14660 --> 0x0\n0024| 0x7fffffffdf58 --> 0x27 (\"'\")\n0032| 0x7fffffffdf60 --> 0x963c40 --> 0x0\n0040| 0x7fffffffdf68 --> 0x3\n0048| 0x7fffffffdf70 --> 0x0\n0056| 0x7fffffffdf78 --> 0x7fffffffe010 --> 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x0000000000573657 in tok_nextc (tok=tok@entry=0x963c40)\n    at Parser/tokenizer.c:922\n922                return Py_CHARMASK(*tok->cur++);\n```\n\n\nThank you for reading this.\nPlease let me know if you need more information.\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.python.org/news/security", 
            "about": "", 
            "twitter_handle": "", 
            "name": "Python (IBB)"
        }, 
        "handle": "ibb-python", 
        "url": "https://hackerone.com/ibb-python", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/027/22df52945ba6933f27a1dbc92380fe19a4a1a93d_small.png?1383737131", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/027/79e9602e5e25d02b7c34cdbc40438408f47e7cd7_medium.png?1383737131"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 27, 
        "default_currency": "usd"
    }, 
    "is_published": false
}