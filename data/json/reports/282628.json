{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": "2017-10-31T17:29:29.000Z", 
    "voters": [
        "kapytein", 
        "lanepowell98"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 282628, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-11-02T23:55:51.596Z", 
    "vulnerability_information": "**Summary:** Twitter is vulnerable to CSV Injection. If an attacker can successfully exploit this, then they will compromise the PC of the user. The injection point is via a tweet (on the main twitter.com site) while the retrieval point is via the \u201cExport Data\u201d option on the analytics site.\n\n**Description:** No user would ever tweet their own payload surely? Well I have found an issue also with the \u201cShare this article\u201d intent (specifically the \u201ctext\u201d parameter). It handles URL encoded newline characters \u201c%0A\u201d. The default behaviours on some web browsers show the bottom line of text in the tweet only. Therefore, it is possible for an attacker to entice a user to tweet a malicious payload. \n\nIf that victim then exports their analytics, opens the \u201ccsv\u201d file in Excel and accepts a warning then their computer would be compromised. \n\nThis is Dynamic Data Injection (DDE) into a formula which is evaluated in Excel. \n\n## Steps To Reproduce:\n\nTo verify the injection point safely simply:\n\n  1. Tweet a benign payload: =1+55 \n  2. Goto the analytics page and ensure that tweet is within the date range before clicking \"export data\"\n  3. Open the exported CSV file within Excel\n\nThe most recent tweet should be at the top. Your first row will say 56 which is proof the addition worked.\n\nModifying the payload can convert this from an arithmetic formula to triggering Dynamic Data Exchange (DDE).\n\n  1. Modify the payload to: =cmd|' /C calc'!A0\n  2. Repeat the export and opening process.\n  3. This time Excel will warn users about the DDE. Accepting these warnings will trigger calc.exe to open.\n\nThese error messages are Microsoft's response to DDE code execution. It has been established that users do not necessarily understand these warnings and that they instead rely on their implicit trust of the service which generated the file.\n\nSo far how to replicate the injection has been shown. The second part of this is how to influence a user to post a tweet which would harm themselves? I located a flaw in the \"Share this article\" intent through the \"text\" parameter. The URL for this is:\n\nhttps://twitter.com/intent/tweet?text=[value]\n\nThe value allows URL encoded control characters such as: %0A\n\nThis is interpreted as a newline character and can be used to obfuscate the payload. The following URL includes a payload which can be used to replicate the issue:\n\nhttps://twitter.com/intent/tweet?text=%3DSUM(1%2B1)*cmd%7C%27%20%2FC%20calc%27!A0%0A%0D%0A%0D%0A%0D%0A%0Dbbb\n\nEssentially it begins with a DDE payload, injects several newlines and then writes \u201cbbb\u201d which could be the string the victim believes they are posting. By default FireFox (at least on Windows) was found to scroll down to the bottom of the text field meaning it displayed the string \"bbb\". There were over 100 characters remaining in which to replace that string with a reasonable message to entice the victim.\n\n## Impact: This matters if you want to ensure your users can invest their trust in Twitter. \n\nThe impact for Twitter is indirect. It is most likely going to affect trust in the service.\nThe impact for affected users is likely the full compromise of their computers. \n\nThe attack requires multiple (but trivial) steps. If an attacker controlled a website and was able to make an article on that site \"go viral\". Then they could exploit users via the \"Share this article\" feature. While the payload would be delivered instantly it is at a later date most likely when the victim would export their data to complete the attack. An attacker would require patience. For this reason I would say there is a high impact, low difficulty of exploitation, but a degree of patience is required on the attackers part. \n\nI would say the CVSS rating is honestly way too high given the hoops to jump through but using that calculator can be a mixed bag. Gimmie a choice I'd say \"high impact if exploited on the user side\", but \"probably not going to affect that many people\" so average out and finger in the air at \"medium\" risk. If I was consulting for Twitter I would raise it for discussion and even if it winds up as \"low\" on your risk criteria point out the universality and simplicity of the remediation.\n\nThe following shows how a list of modern web browsers (on Windows) behaved:\n\nFirefox 56.0.1\tYes - Vulnerable\nChrome 62.0.3202.62\tNo \u2013 less vulnerable\nInternet Explorer 11.674.15063.0\tNo \u2013 less vulnerable\nEdge 40.15063.674.0\tNo \u2013 less vulnerable\nOpera  48.0.2685.50\tNo \u2013 less vulnerable\n\nFireFox was the only one which scrolled the user to the bottom of the text field. All others are less vulnerable to exploitation.\n\n## Remediation\n\nModify the \u201cExport Data\u201d function on the analytics host to prefix:=, +, - and @ symbols with a '. The single quote escapes the dangerous characters and prevents code execution client side.\n\nSounds cheap to me? A 5 minute code change to fix a potentially interesting issue. What else can you get done in 5 minutes?\n\n## Supporting Material/References:\n\nI have uploaded the following PDF which includes the same discussion and has screenshots etc for more confirmation:\n\n  * F232489: Tweet_DDE_to_Me .pdf\n\n", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "medium", 
        "author_type": "User"
    }, 
    "title": "OS Command Execution on User's PC via CSV Injection", 
    "is_member_of_team?": null, 
    "vote_count": 2, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "*.twitter.com", 
        "max_severity": "critical", 
        "databaseId": 1062, 
        "asset_type": "URL"
    }, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Informative", 
    "public": true, 
    "attachments": [
        {
            "file_name": "Tweet_DDE_to_Me_.pdf", 
            "type": "application/pdf", 
            "id": 232489, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/232/489/0d83e0aaa36d4e05f67e379c850fa5d370817699/Tweet_DDE_to_Me_.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T223030Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8e063bbc5d0c6248e9cc11873135305ef2aa43e8a8422e512072bd1eaa3a067b"
        }
    ], 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-10-24T21:55:18.530Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-24T21:55:18.530Z", 
            "actor": {
                "username": "bugtriage-nicky", 
                "url": "/bugtriage-nicky", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Thank you for your report.\n\nWe do not consider this issue to pose enough of a security risk to warrant a priority fix at this time. We believe that the client software (e.g. Microsoft Excel) should be responsible for properly handling any data in a CSV file.\n\nThank you for thinking of Twitter security.", 
            "markdown_message": "<p>Thank you for your report.</p>\n\n<p>We do not consider this issue to pose enough of a security risk to warrant a priority fix at this time. We believe that the client software (e.g. Microsoft Excel) should be responsible for properly handling any data in a CSV file.</p>\n\n<p>Thank you for thinking of Twitter security.</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 2100403, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-25T07:20:29.391Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-25T07:20:29.391Z", 
            "actor": {
                "username": "cornerpirate", 
                "url": "/cornerpirate", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Hi Nicky,\n\nThanks for the response.\n\nAt this point DDE is all over the Internet as a goto exploit technique. If you feel that there is no risk I am free to blog about this then? It is an interesting case at least in my view.\n\nMicrosoft are not going to patch this as they have a long standing response that basically the warning messages are enough. That IS there response to this. Even with DDE via field codes in word making macroless payloads a goto phishing technique at the moment they are not going to resolve it.\n\nGiven the quickness and universality of the solution I would recommend addressing it even if not seen as a priority. \n\n", 
            "markdown_message": "<p>Hi Nicky,</p>\n\n<p>Thanks for the response.</p>\n\n<p>At this point DDE is all over the Internet as a goto exploit technique. If you feel that there is no risk I am free to blog about this then? It is an interesting case at least in my view.</p>\n\n<p>Microsoft are not going to patch this as they have a long standing response that basically the warning messages are enough. That IS there response to this. Even with DDE via field codes in word making macroless payloads a goto phishing technique at the moment they are not going to resolve it.</p>\n\n<p>Given the quickness and universality of the solution I would recommend addressing it even if not seen as a priority. </p>\n", 
            "type": "Activities::Comment", 
            "id": 2101195, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-27T06:54:22.988Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-27T06:54:22.988Z", 
            "actor": {
                "username": "cornerpirate", 
                "url": "/cornerpirate", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Hello,\n\nI am waiting on approval to be able to talk through this publicly as I have a blog post pending on DDE at the moment.\n\nRegards", 
            "markdown_message": "<p>Hello,</p>\n\n<p>I am waiting on approval to be able to talk through this publicly as I have a blog post pending on DDE at the moment.</p>\n\n<p>Regards</p>\n", 
            "type": "Activities::Comment", 
            "id": 2107591, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-30T16:46:41.948Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-30T16:46:41.948Z", 
            "actor": {
                "username": "petrilli", 
                "url": "/petrilli", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/157/270/bf908a4981688ee1ada05c3744ddcb18680c2029_medium.jpeg?1491431319"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "@cornerpirate  - Please request formal disclosure of the report and we will review, redact as necessary, and then approve disclosure.", 
            "markdown_message": "<p><a href=\"/cornerpirate\">@cornerpirate</a>  - Please request formal disclosure of the report and we will review, redact as necessary, and then approve disclosure.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2113792, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-31T17:29:29.040Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-31T17:29:29.040Z", 
            "actor": {
                "username": "cornerpirate", 
                "url": "/cornerpirate", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "first_to_agree": true, 
            "message": "Sorry as someone who doesn't use hackerone I thought asking in a comment would be enough.", 
            "markdown_message": "<p>Sorry as someone who doesn&#39;t use hackerone I thought asking in a comment would be enough.</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2118200, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-02T23:55:51.630Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-02T23:55:51.630Z", 
            "actor": {
                "username": "petrilli", 
                "url": "/petrilli", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/157/270/bf908a4981688ee1ada05c3744ddcb18680c2029_medium.jpeg?1491431319"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2130134, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-02T23:55:51.719Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-02T23:55:51.719Z", 
            "actor": {
                "username": "petrilli", 
                "url": "/petrilli", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/157/270/bf908a4981688ee1ada05c3744ddcb18680c2029_medium.jpeg?1491431319"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2130135, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "cornerpirate", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/cornerpirate", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 59, 
        "name": "OS Command Injection"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2017-11-02T23:55:51.672Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/282628", 
    "created_at": "2017-10-24T21:25:20.992Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><strong>Summary:</strong> Twitter is vulnerable to CSV Injection. If an attacker can successfully exploit this, then they will compromise the PC of the user. The injection point is via a tweet (on the main twitter.com site) while the retrieval point is via the \u201cExport Data\u201d option on the analytics site.</p>\n\n<p><strong>Description:</strong> No user would ever tweet their own payload surely? Well I have found an issue also with the \u201cShare this article\u201d intent (specifically the \u201ctext\u201d parameter). It handles URL encoded newline characters \u201c%0A\u201d. The default behaviours on some web browsers show the bottom line of text in the tweet only. Therefore, it is possible for an attacker to entice a user to tweet a malicious payload. </p>\n\n<p>If that victim then exports their analytics, opens the \u201ccsv\u201d file in Excel and accepts a warning then their computer would be compromised. </p>\n\n<p>This is Dynamic Data Injection (DDE) into a formula which is evaluated in Excel. </p>\n\n<h2 id=\"steps-to-reproduce\">Steps To Reproduce:</h2>\n\n<p>To verify the injection point safely simply:</p>\n\n<ol>\n<li>Tweet a benign payload: =1+55 </li>\n<li>Goto the analytics page and ensure that tweet is within the date range before clicking &quot;export data&quot;</li>\n<li>Open the exported CSV file within Excel</li>\n</ol>\n\n<p>The most recent tweet should be at the top. Your first row will say 56 which is proof the addition worked.</p>\n\n<p>Modifying the payload can convert this from an arithmetic formula to triggering Dynamic Data Exchange (DDE).</p>\n\n<ol>\n<li>Modify the payload to: =cmd|&#39; /C calc&#39;!A0</li>\n<li>Repeat the export and opening process.</li>\n<li>This time Excel will warn users about the DDE. Accepting these warnings will trigger calc.exe to open.</li>\n</ol>\n\n<p>These error messages are Microsoft&#39;s response to DDE code execution. It has been established that users do not necessarily understand these warnings and that they instead rely on their implicit trust of the service which generated the file.</p>\n\n<p>So far how to replicate the injection has been shown. The second part of this is how to influence a user to post a tweet which would harm themselves? I located a flaw in the &quot;Share this article&quot; intent through the &quot;text&quot; parameter. The URL for this is:</p>\n\n<p><a title=\"https://twitter.com/intent/tweet?text=%5Bvalue%5D\" href=\"/redirect?signature=66f8832ba0db0929e54bd12fd0b9f7f49ddd17d6&amp;url=https%3A%2F%2Ftwitter.com%2Fintent%2Ftweet%3Ftext%3D%255Bvalue%255D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://twitter.com/intent/tweet?text=%5Bvalue%5D</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>The value allows URL encoded control characters such as: %0A</p>\n\n<p>This is interpreted as a newline character and can be used to obfuscate the payload. The following URL includes a payload which can be used to replicate the issue:</p>\n\n<p><a title=\"https://twitter.com/intent/tweet?text=%3DSUM(1%2B1)*cmd%7C%27%20%2FC%20calc%27!A0%0A%0D%0A%0D%0A%0D%0A%0Dbbb\" href=\"/redirect?signature=98b6d576c10d1d4135d83bf00bd84b42061f325d&amp;url=https%3A%2F%2Ftwitter.com%2Fintent%2Ftweet%3Ftext%3D%253DSUM%281%252B1%29%2Acmd%257C%2527%2520%252FC%2520calc%2527%21A0%250A%250D%250A%250D%250A%250D%250A%250Dbbb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://twitter.com/intent/tweet?text=%3DSUM(1%2B1)*cmd%7C%27%20%2FC%20calc%27!A0%0A%0D%0A%0D%0A%0D%0A%0Dbbb</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Essentially it begins with a DDE payload, injects several newlines and then writes \u201cbbb\u201d which could be the string the victim believes they are posting. By default FireFox (at least on Windows) was found to scroll down to the bottom of the text field meaning it displayed the string &quot;bbb&quot;. There were over 100 characters remaining in which to replace that string with a reasonable message to entice the victim.</p>\n\n<h2 id=\"impact-this-matters-if-you-want-to-ensure-your-users-can-invest-their-trust-in-twitter\">Impact: This matters if you want to ensure your users can invest their trust in Twitter.</h2>\n\n<p>The impact for Twitter is indirect. It is most likely going to affect trust in the service.<br>\nThe impact for affected users is likely the full compromise of their computers. </p>\n\n<p>The attack requires multiple (but trivial) steps. If an attacker controlled a website and was able to make an article on that site &quot;go viral&quot;. Then they could exploit users via the &quot;Share this article&quot; feature. While the payload would be delivered instantly it is at a later date most likely when the victim would export their data to complete the attack. An attacker would require patience. For this reason I would say there is a high impact, low difficulty of exploitation, but a degree of patience is required on the attackers part. </p>\n\n<p>I would say the CVSS rating is honestly way too high given the hoops to jump through but using that calculator can be a mixed bag. Gimmie a choice I&#39;d say &quot;high impact if exploited on the user side&quot;, but &quot;probably not going to affect that many people&quot; so average out and finger in the air at &quot;medium&quot; risk. If I was consulting for Twitter I would raise it for discussion and even if it winds up as &quot;low&quot; on your risk criteria point out the universality and simplicity of the remediation.</p>\n\n<p>The following shows how a list of modern web browsers (on Windows) behaved:</p>\n\n<p>Firefox 56.0.1  Yes - Vulnerable<br>\nChrome 62.0.3202.62 No \u2013 less vulnerable<br>\nInternet Explorer 11.674.15063.0    No \u2013 less vulnerable<br>\nEdge 40.15063.674.0 No \u2013 less vulnerable<br>\nOpera  48.0.2685.50 No \u2013 less vulnerable</p>\n\n<p>FireFox was the only one which scrolled the user to the bottom of the text field. All others are less vulnerable to exploitation.</p>\n\n<h2 id=\"remediation\">Remediation</h2>\n\n<p>Modify the \u201cExport Data\u201d function on the analytics host to prefix:=, +, - and @ symbols with a &#39;. The single quote escapes the dangerous characters and prevents code execution client side.</p>\n\n<p>Sounds cheap to me? A 5 minute code change to fix a potentially interesting issue. What else can you get done in 5 minutes?</p>\n\n<h2 id=\"supporting-material-references\">Supporting Material/References:</h2>\n\n<p>I have uploaded the following PDF which includes the same discussion and has screenshots etc for more confirmation:</p>\n\n<ul>\n<li>\n<a href=\"#\" class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"Tweet_DDE_to_Me_.pdf\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/232/489/0d83e0aaa36d4e05f67e379c850fa5d370817699/Tweet_DDE_to_Me_.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T223030Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=8e063bbc5d0c6248e9cc11873135305ef2aa43e8a8422e512072bd1eaa3a067b\" data-attachment-type=\"application/pdf\">Tweet_DDE_to_Me_.pdf (F232489)</a>: Tweet_DDE_to_Me .pdf</li>\n</ul>\n", 
    "severity_rating": "medium", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://twitter.com", 
            "about": "Twitter helps you create and share ideas and information instantly, without barriers.", 
            "twitter_handle": "twittersecurity", 
            "name": "Twitter"
        }, 
        "handle": "twitter", 
        "url": "https://hackerone.com/twitter", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/061/4acfe72859c5e9cb48a152edb4e498e13fa28df2_small.?1439954730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 61, 
        "default_currency": "usd"
    }, 
    "is_published": false
}