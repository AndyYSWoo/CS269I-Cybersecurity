{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-03-02T11:10:57.464Z", 
    "voters": [
        "dyabla", 
        "pulnz"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "250.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 73491, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Buffer Overflow in PHP of the AirMax Products", 
    "is_member_of_team?": null, 
    "vote_count": 2, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-04-01T11:10:57.644Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$250", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-07-02T11:10:28.947Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-02T11:10:28.947Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "#Reproducing\nWith this command you will cause a segmentation fault in the cgi (PHP) and the webserver (lighttpd) will not return a empty body.\n`curl -F \"file=@anyfile;filename=\\12345678901234567890/12\" 'https://192.168.1.20/login.cgi' -H \"Expect:\" -k`\n\nSome times you need a bigger filename to trigger the buffer overflow. In My tests (NanoStation Loco M5, XM.v5.5.10)`filename=\\123456789012/12` don't works, but `filename=\\1234567890123/12` do, I think what happens in the first case is a \"variable overwrite\", some memory owned by the system is overwritten, and when added `3` he write out of that area. I will not create a way to exploit that, because I don't have the time to compile a GDB (or money to buy a IDA) and study the MIPS architecture.", 
            "markdown_message": "<h1 id=\"reproducing\">Reproducing</h1>\n\n<p>With this command you will cause a segmentation fault in the cgi (PHP) and the webserver (lighttpd) will not return a empty body.<br>\n<code>curl -F &quot;file=@anyfile;filename=\\12345678901234567890/12&quot; &#39;https://192.168.1.20/login.cgi&#39; -H &quot;Expect:&quot; -k</code></p>\n\n<p>Some times you need a bigger filename to trigger the buffer overflow. In My tests (NanoStation Loco M5, XM.v5.5.10)<code>filename=\\123456789012/12</code> don&#39;t works, but <code>filename=\\1234567890123/12</code> do, I think what happens in the first case is a &quot;variable overwrite&quot;, some memory owned by the system is overwritten, and when added <code>3</code> he write out of that area. I will not create a way to exploit that, because I don&#39;t have the time to compile a GDB (or money to buy a IDA) and study the MIPS architecture.</p>\n", 
            "type": "Activities::Comment", 
            "id": 498296, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-07-03T11:34:25.404Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-03T11:34:25.404Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "Lighttpd will return `(mod_cgi.c.1319) cleaning up CGI: process died with signal 11`, what means segmentation fault.", 
            "markdown_message": "<p>Lighttpd will return <code>(mod_cgi.c.1319) cleaning up CGI: process died with signal 11</code>, what means segmentation fault.</p>\n", 
            "type": "Activities::Comment", 
            "id": 499002, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-07-07T17:56:13.488Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-07T17:56:13.488Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "It remains vulnerable on v5.6.1.", 
            "markdown_message": "<p>It remains vulnerable on v5.6.1.</p>\n", 
            "type": "Activities::Comment", 
            "id": 502205, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-08-25T20:22:15.156Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-25T20:22:15.156Z", 
            "actor": {
                "username": "ubnt-james", 
                "url": "/ubnt-james", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "Hi there,\n\nThis should have been resolved with our fix for (https://hackerone.com/reports/73480 ).\n\nIf you find that 5.6.2 is still seeing this, please let us know.\n\nThanks for testing.\n\n", 
            "markdown_message": "<p>Hi there,</p>\n\n<p>This should have been resolved with our fix for (<a title=\"https://hackerone.com/reports/73480\" href=\"https://hackerone.com/reports/73480\">https://hackerone.com/reports/73480</a> ).</p>\n\n<p>If you find that 5.6.2 is still seeing this, please let us know.</p>\n\n<p>Thanks for testing.</p>\n", 
            "type": "Activities::Comment", 
            "id": 562940, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-08-25T20:39:19.545Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-25T20:39:19.545Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "It has been solved in the 5.6.2. You can close this report.", 
            "markdown_message": "<p>It has been solved in the 5.6.2. You can close this report.</p>\n", 
            "type": "Activities::Comment", 
            "id": 562969, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "93c08539", 
                "url": "/93c08539"
            }, 
            "created_at": "2015-08-25T20:40:14.712Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-25T20:40:14.712Z", 
            "actor": {
                "username": "ubnt-james", 
                "url": "/ubnt-james", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 562973, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-08-26T11:35:56.094Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-26T11:35:56.094Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "This is not qualified to receive bounty? :(\nBecause this vulnerability is not equal to #73840.", 
            "markdown_message": "<p>This is not qualified to receive bounty? :(<br>\nBecause this vulnerability is not equal to <a href=\"/reports/73840\">#73840</a>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 564003, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-08-26T15:55:58.786Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-26T15:55:58.786Z", 
            "actor": {
                "username": "ubnt-james", 
                "url": "/ubnt-james", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "Hi,\n\nLet me check on this, and I'll let you know.\n\nRegards,\nJames", 
            "markdown_message": "<p>Hi,</p>\n\n<p>Let me check on this, and I&#39;ll let you know.</p>\n\n<p>Regards,<br>\nJames</p>\n", 
            "type": "Activities::Comment", 
            "id": 564230, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-08-26T15:57:34.836Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-26T15:57:34.836Z", 
            "actor": {
                "username": "ubnt-james", 
                "url": "/ubnt-james", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "Hi there,\n\nI can't seem to access 73840.  Is that the correct report?\n\nThanks,\nJames", 
            "markdown_message": "<p>Hi there,</p>\n\n<p>I can&#39;t seem to access 73840.  Is that the correct report?</p>\n\n<p>Thanks,<br>\nJames</p>\n", 
            "type": "Activities::BugReopened", 
            "id": 564232, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-08-26T16:00:22.104Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-26T16:00:35.324Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "Sorry, is #73480", 
            "markdown_message": "<p>Sorry, is <a href=\"/reports/73480\">#73480</a></p>\n", 
            "type": "Activities::Comment", 
            "id": 564235, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-10-23T15:39:38.935Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-23T15:39:38.935Z", 
            "actor": {
                "url": "/ubnt", 
                "profile": {
                    "name": "Ubiquiti Networks"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/800/50186ca2136da762df66f3ba92606dc8b925816f_medium.png?1419364363"
                }
            }, 
            "team_handle": "ubnt", 
            "bounty_amount": "250.0", 
            "collaborator": {
                "username": "93c08539", 
                "url": "/93c08539"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 629646, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "93c08539", 
                "url": "/93c08539"
            }, 
            "created_at": "2015-10-23T15:39:45.786Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-23T15:39:45.786Z", 
            "actor": {
                "username": "ubnt-james", 
                "url": "/ubnt-james", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 629647, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-02T11:10:57.511Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-02T11:10:57.511Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 820532, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-01T11:11:16.628Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-01T11:11:16.628Z", 
            "actor": {
                "url": "/ubnt", 
                "profile": {
                    "name": "Ubiquiti Networks"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/800/50186ca2136da762df66f3ba92606dc8b925816f_medium.png?1419364363"
                }
            }, 
            "team_handle": "ubnt", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 882337, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "93c08539", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/93c08539", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/033/613/cf19d8cc729e17c9fd3dfa2bc561766ee0c83588_small.png?1536754955"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 2, 
        "name": "Memory Corruption - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -84627889.75959124, 
    "disclosed_at": "2016-04-01T11:11:16.597Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/73491", 
    "created_at": "2015-07-01T15:31:40.696Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"vulnerability\">Vulnerability</h1>\n\n<p>The function <code>static int ub_normalize_filename(char* filename)</code> (implemented by the patch <code>430-smart-post-upload.patch</code> in the file <code>uploadbuffer.c</code> on the <code>SDK.UBNT.v5.5</code>) have the following code:</p>\n<pre class=\"highlight plaintext\"><code>static int ub_normalize_filename(char* filename)\n{\n\n    char *fwd_slash;\n    char *back_slash;\n    size_t size;\n    /**\n     *  Some comments removed\n     */\n    if (filename == 0)\n    {\n        return -1;\n    }\n    size = strlen(filename);\n    fwd_slash = strrchr(filename, &#39;/&#39;);\n    back_slash = strrchr(filename, &#39;\\\\&#39;);\n    if ((fwd_slash == 0) ||\n    (back_slash == 0))\n    {\n        /* No slashes or backslashes */\n        return 0;\n    }\n    if ((back_slash - filename == size - 1) ||\n    (fwd_slash - filename == size - 1))\n    {\n        return -1; /* &#39;Empty filename ???&#39; */\n    }\n    /* Move file part from last backslash to last forwardslash,\n       Copy including ending string \\0 */\n    memmove(fwd_slash + 1, back_slash + 1, size - (back_slash - filename));\n    return 0;\n}\n</code></pre>\n<p>Manipulating the <code>filename</code> value of a HTTP POST (like in the report <a href=\"https://hackerone.com/reports/73480\">73480</a>), it&#39;s possible to cause a buffer overflow with the following value <code>filename=&quot;\\asdfasdfasdfasdfsdfgdsfg/a&quot;</code>. The Pointers will point to the following locations:</p>\n<pre class=\"highlight plaintext\"><code>\\asdfasdfasdfasdfsdfgdsfg/a\\0\n^                        ^  ^\n-back_slash              |  |\n                         |  -End of String\n                         |\n                         -fwd_slash\n</code></pre>\n<p>The <code>memmove</code> will write to <code>fwd_slash + 1</code> the content of <code>back_slash + 1</code> (until the end of the String), what will copy string off the bounds. </p>\n<pre class=\"highlight plaintext\"><code>\\asdfasdfasdfasdfsdfgdsfg/aasdfasdfasdfasdfsdfgdsfg/a\n^                          ^\n-Init                      |\n                           -End of String\n</code></pre>\n<h1 id=\"consequences\">Consequences</h1>\n\n<p>It&#39;s possible to cause a buffer overflow, but it&#39;s unlikely the vulnerability to result in a arbitrary code execution (but possible), once it&#39;s allocated in a the heap memory (function <code>ub_parse_disposition</code>, file <code>uploadbuffer.c</code>, I think).</p>\n", 
    "vulnerability_information": "#Vulnerability\r\nThe function `static int ub_normalize_filename(char* filename)` (implemented by the patch `430-smart-post-upload.patch` in the file `uploadbuffer.c` on the `SDK.UBNT.v5.5`) have the following code:\r\n```\r\nstatic int ub_normalize_filename(char* filename)\r\n{\r\n\r\n    char *fwd_slash;\r\n    char *back_slash;\r\n    size_t size;\r\n    /**\r\n     *  Some comments removed\r\n     */\r\n    if (filename == 0)\r\n    {\r\n        return -1;\r\n    }\r\n    size = strlen(filename);\r\n    fwd_slash = strrchr(filename, '/');\r\n    back_slash = strrchr(filename, '\\\\');\r\n    if ((fwd_slash == 0) ||\r\n\t(back_slash == 0))\r\n    {\r\n\t    /* No slashes or backslashes */\r\n        return 0;\r\n    }\r\n    if ((back_slash - filename == size - 1) ||\r\n\t(fwd_slash - filename == size - 1))\r\n    {\r\n        return -1; /* 'Empty filename ???' */\r\n    }\r\n    /* Move file part from last backslash to last forwardslash,\r\n       Copy including ending string \\0 */\r\n    memmove(fwd_slash + 1, back_slash + 1, size - (back_slash - filename));\r\n    return 0;\r\n}\r\n```\r\nManipulating the `filename` value of a HTTP POST (like in the report [73480](https://hackerone.com/reports/73480)), it's possible to cause a buffer overflow with the following value `filename=\"\\asdfasdfasdfasdfsdfgdsfg/a\"`. The Pointers will point to the following locations:\r\n```\r\n\\asdfasdfasdfasdfsdfgdsfg/a\\0\r\n^                        ^  ^\r\n-back_slash              |  |\r\n                         |  -End of String\r\n                         |\r\n                         -fwd_slash\r\n```\r\n\t\r\nThe `memmove` will write to `fwd_slash + 1` the content of `back_slash + 1` (until the end of the String), what will copy string off the bounds. \r\n\r\n```\r\n\\asdfasdfasdfasdfsdfgdsfg/aasdfasdfasdfasdfsdfgdsfg/a\r\n^                          ^\r\n-Init                      |\r\n                           -End of String\r\n```\r\n\r\n#Consequences\r\nIt's possible to cause a buffer overflow, but it's unlikely the vulnerability to result in a arbitrary code execution (but possible), once it's allocated in a the heap memory (function `ub_parse_disposition`, file `uploadbuffer.c`, I think).", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://ubnt.com", 
            "about": "", 
            "twitter_handle": "", 
            "name": "Ubiquiti Networks"
        }, 
        "handle": "ubnt", 
        "url": "https://hackerone.com/ubnt", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/800/19a040983c9b2494808c87f77337d30023b97ea7_small.png?1419364363", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/800/50186ca2136da762df66f3ba92606dc8b925816f_medium.png?1419364363"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 800, 
        "default_currency": "usd"
    }, 
    "is_published": false
}