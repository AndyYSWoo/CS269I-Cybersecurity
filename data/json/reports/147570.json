{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-07-20T00:17:37.057Z", 
    "voters": [
        "hunter", 
        "faisalahmed", 
        "dineshvicky", 
        "detroitsmash", 
        "paulos_", 
        "japz", 
        "rootxflood", 
        "hulskar1997", 
        "spetr0x", 
        "localhost1st", 
        "and 3 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 147570, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Local File Inclusion path bypass", 
    "is_member_of_team?": null, 
    "vote_count": 13, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-08-19T00:17:37.182Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": true, 
            "created_at": "2016-06-27T00:36:06.274Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-27T00:36:06.274Z", 
            "actor": {
                "url": "/concrete5", 
                "profile": {
                    "name": "concrete5"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/060/80201c838134b35b9b1acd99ad8a7a7c214aa374_medium.jpg?1393279055"
                }
            }, 
            "team_handle": "concrete5", 
            "message": "**This report has been automatically set to \"needs more info\"** because it does not adhere to the rules listed [on our project page](https://hackerone.com/concrete5). Please go over these rules and resubmit following the directions.\r\n\r\nIf you've read and complied with all of the rules, please email security@concrete5.org so that this issue may be reopened.", 
            "markdown_message": "<p><strong>This report has been automatically set to &quot;needs more info&quot;</strong> because it does not adhere to the rules listed <a href=\"https://hackerone.com/concrete5\">on our project page</a>. Please go over these rules and resubmit following the directions.</p>\n\n<p>If you&#39;ve read and complied with all of the rules, please email <a title=\"security@concrete5.org\" href=\"mailto:security@concrete5.org\" rel=\"nofollow noopener noreferrer\">security@concrete5.org</a> so that this issue may be reopened.</p>\n", 
            "type": "Activities::BugNeedsMoreInfo", 
            "id": 1039953, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-27T11:06:25.101Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-27T11:06:25.101Z", 
            "actor": {
                "username": "paulos_", 
                "url": "/paulos_", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/601/4588a51ca509a58d1c27bb823bebe9594409951c_medium.png?1502343645"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "@egix mentioned in his pdf report: *the vulnerability is mitigated by the fact that only .php files can be included, however this might be exploited to include otherwise restricted files within Concrete5 itself bypassing the authentication mechanism, thus leading to unauthorized access to certain features.*\n\nBut there is also a way around that. \n**Fact 1**: On PHP, it turns out that /etc/passwd/ also refers to the /etc/passwd file: trailing slashes are stripped off. This doesn't work on base Unix, so it is a bit surprising that PHP would\naccept such a filename, but it appears that PHP is itself stripping off trailing slashes before opening the file. You can append any number of trailing slashes: /etc/passwd//// is also OK.\n\nAnd, you can append ./ (as many times as you want). For instance, /etc/passwd/., /etc/passwd/./, and /etc/passwd/././. all refer to /etc/passwd. \n\n**Fact 2**: Long paths are truncated. On most PHP installations, if the filename is longer than 4096 bytes, it will be silently truncated and everything after the first 4096 bytes will be discarded. No error is triggered: the excess characters are simply thrown away and PHP\nhappily continues on.\n\n**The attack.** Now I am ready to describe the attack. I'll show you the vulnerable code, why standard LFI attacks don't work, and then how to build a more-clever attack that does work.\n\nWith the additional background facts I gave you earlier, maybe you can see how to come up with a more sophisticated attack that defeats this limitation.\n\nBasically, the attacker chooses a very long parameter value, so that the constructed filename is longer than 4096 bytes long. When the filename is truncated, the .php extension will get thrown away. And if the attacker can arrange for the resulting filename to refer to an existing file on the filesystem, the attacker is good.\n\nNow this might sound like a far-fetched attack. What are the odds that we can find a filename on the filesystem whose full path happens to be exactly 4096 bytes long? Maybe not so good?\n\nThis is where the background facts come into play. The attacker can send a request with ?param1=../../../../etc/passwd/./././././<...> (with the ./ pattern repeated many thousands of times). Now look at what filename gets included, after the prefix is prepended and the\n.php file extension is added: it will be something like includes/../../../../etc/passwd/./././././<...>.php. This filename will be longer than 4096 bytes, so it will get truncated. The truncation will drop the file extension and leave us with a filename of the form includes/../../../../etc/passwd/./././././<...>. And, thanks to the way PHP handles trailing slashes and trailing ./ sequences, all that stuff at the end will be ignored. In other words, this filename will be treated by PHP as equivalent to the path\nincludes/../../../../etc/passwd. So PHP will try to read from the password file, and when it finds PHP syntax errors there, it may dump the contents of the password file into an error page -- disclosing\nsecret information to an attacker.\n\nSo this is indeed exploitable to include files & *isn't mitigated by the fact that only .php files can be included*\n\nThanks,\nP", 
            "markdown_message": "<p><a href=\"/egix\">@egix</a> mentioned in his pdf report: <em>the vulnerability is mitigated by the fact that only .php files can be included, however this might be exploited to include otherwise restricted files within Concrete5 itself bypassing the authentication mechanism, thus leading to unauthorized access to certain features.</em></p>\n\n<p>But there is also a way around that. <br>\n<strong>Fact 1</strong>: On PHP, it turns out that /etc/passwd/ also refers to the /etc/passwd file: trailing slashes are stripped off. This doesn&#39;t work on base Unix, so it is a bit surprising that PHP would<br>\naccept such a filename, but it appears that PHP is itself stripping off trailing slashes before opening the file. You can append any number of trailing slashes: /etc/passwd//// is also OK.</p>\n\n<p>And, you can append ./ (as many times as you want). For instance, /etc/passwd/., /etc/passwd/./, and /etc/passwd/././. all refer to /etc/passwd. </p>\n\n<p><strong>Fact 2</strong>: Long paths are truncated. On most PHP installations, if the filename is longer than 4096 bytes, it will be silently truncated and everything after the first 4096 bytes will be discarded. No error is triggered: the excess characters are simply thrown away and PHP<br>\nhappily continues on.</p>\n\n<p><strong>The attack.</strong> Now I am ready to describe the attack. I&#39;ll show you the vulnerable code, why standard LFI attacks don&#39;t work, and then how to build a more-clever attack that does work.</p>\n\n<p>With the additional background facts I gave you earlier, maybe you can see how to come up with a more sophisticated attack that defeats this limitation.</p>\n\n<p>Basically, the attacker chooses a very long parameter value, so that the constructed filename is longer than 4096 bytes long. When the filename is truncated, the .php extension will get thrown away. And if the attacker can arrange for the resulting filename to refer to an existing file on the filesystem, the attacker is good.</p>\n\n<p>Now this might sound like a far-fetched attack. What are the odds that we can find a filename on the filesystem whose full path happens to be exactly 4096 bytes long? Maybe not so good?</p>\n\n<p>This is where the background facts come into play. The attacker can send a request with ?param1=../../../../etc/passwd/./././././&lt;...&gt; (with the ./ pattern repeated many thousands of times). Now look at what filename gets included, after the prefix is prepended and the<br>\n.php file extension is added: it will be something like includes/../../../../etc/passwd/./././././&lt;...&gt;.php. This filename will be longer than 4096 bytes, so it will get truncated. The truncation will drop the file extension and leave us with a filename of the form includes/../../../../etc/passwd/./././././&lt;...&gt;. And, thanks to the way PHP handles trailing slashes and trailing ./ sequences, all that stuff at the end will be ignored. In other words, this filename will be treated by PHP as equivalent to the path<br>\nincludes/../../../../etc/passwd. So PHP will try to read from the password file, and when it finds PHP syntax errors there, it may dump the contents of the password file into an error page -- disclosing<br>\nsecret information to an attacker.</p>\n\n<p>So this is indeed exploitable to include files &amp; <em>isn&#39;t mitigated by the fact that only .php files can be included</em></p>\n\n<p>Thanks,<br>\nP</p>\n", 
            "type": "Activities::BugNew", 
            "id": 1040489, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-27T18:37:02.726Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-27T18:37:02.726Z", 
            "actor": {
                "username": "paulos_", 
                "url": "/paulos_", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/601/4588a51ca509a58d1c27bb823bebe9594409951c_medium.png?1502343645"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "Also I think, the smartest fix around it would be doing :\n```javascript\nstr_replace(array('..', chr(0)), '', $path);\n```\ninstead of going through all that trouble with the slashes. :)", 
            "markdown_message": "<p>Also I think, the smartest fix around it would be doing :</p>\n<pre class=\"highlight javascript\"><code><span class=\"nx\">str_replace</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">(</span><span class=\"s1\">&#39;..&#39;</span><span class=\"p\">,</span> <span class=\"nx\">chr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)),</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"nx\">$path</span><span class=\"p\">);</span>\n</code></pre>\n<p>instead of going through all that trouble with the slashes. :)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1041374, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-12T17:40:44.849Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-12T17:40:44.849Z", 
            "actor": {
                "username": "korvin", 
                "url": "/korvin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/454/9a0e6f861d861e27945d02c73b3598bb6abb5bff_medium.jpg?1406656654"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "Hi Paulos,\nI opened a pull request to fix this here: https://github.com/concrete5/concrete5/pull/4020 If that merges I will apply it to version 7 as well.\n\nThanks,\nKorvin", 
            "markdown_message": "<p>Hi Paulos,<br>\nI opened a pull request to fix this here: <a title=\"https://github.com/concrete5/concrete5/pull/4020\" href=\"/redirect?signature=86ea115859624f20087c3c859267f56141f32dc7&amp;url=https%3A%2F%2Fgithub.com%2Fconcrete5%2Fconcrete5%2Fpull%2F4020\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/concrete5/concrete5/pull/4020</span><i class=\"icon-external-link\"></i></a> If that merges I will apply it to version 7 as well.</p>\n\n<p>Thanks,<br>\nKorvin</p>\n", 
            "type": "Activities::Comment", 
            "id": 1065520, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "paulos_", 
                "url": "/paulos_"
            }, 
            "created_at": "2016-07-20T00:09:27.043Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-20T00:09:27.043Z", 
            "actor": {
                "username": "korvin", 
                "url": "/korvin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/454/9a0e6f861d861e27945d02c73b3598bb6abb5bff_medium.jpg?1406656654"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "And here's the version 7 pull: https://github.com/concrete5/concrete5/pull/4029", 
            "markdown_message": "<p>And here&#39;s the version 7 pull: <a title=\"https://github.com/concrete5/concrete5/pull/4029\" href=\"/redirect?signature=ef7bc2cdc3a71965def9c0db03b2a08f4207a2d2&amp;url=https%3A%2F%2Fgithub.com%2Fconcrete5%2Fconcrete5%2Fpull%2F4029\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/concrete5/concrete5/pull/4029</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1077100, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-20T00:17:37.087Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-20T00:17:37.087Z", 
            "actor": {
                "username": "paulos_", 
                "url": "/paulos_", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/601/4588a51ca509a58d1c27bb823bebe9594409951c_medium.png?1502343645"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1077105, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-20T00:18:21.963Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-20T00:18:21.963Z", 
            "actor": {
                "username": "korvin", 
                "url": "/korvin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/454/9a0e6f861d861e27945d02c73b3598bb6abb5bff_medium.jpg?1406656654"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "I'd like to wait the full 30 days on this one in order to get a release out.\n\nThanks,\nKorvin", 
            "markdown_message": "<p>I&#39;d like to wait the full 30 days on this one in order to get a release out.</p>\n\n<p>Thanks,<br>\nKorvin</p>\n", 
            "type": "Activities::Comment", 
            "id": 1077107, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-20T00:19:28.113Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-20T00:19:41.995Z", 
            "actor": {
                "username": "paulos_", 
                "url": "/paulos_", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/601/4588a51ca509a58d1c27bb823bebe9594409951c_medium.png?1502343645"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "@korvin sure. np", 
            "markdown_message": "<p><a href=\"/korvin\">@korvin</a> sure. np</p>\n", 
            "type": "Activities::Comment", 
            "id": 1077108, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-08-19T00:17:46.778Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-08-19T00:17:46.778Z", 
            "actor": {
                "url": "/concrete5", 
                "profile": {
                    "name": "concrete5"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/060/80201c838134b35b9b1acd99ad8a7a7c214aa374_medium.jpg?1393279055"
                }
            }, 
            "team_handle": "concrete5", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1139159, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "paulos_", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/paulos_", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/008/601/c4386dbd803651038555e18d6df83bbc6fd22459_small.png?1502343645"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 57, 
        "name": "Violation of Secure Design Principles"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -72570756.42994237, 
    "disclosed_at": "2016-08-19T00:17:46.666Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/147570", 
    "created_at": "2016-06-27T00:36:05.950Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hey,</p>\n\n<p>After reading egix&#39;s report <a href=\"/reports/59665\">#59665</a> and seeing your fix at <a title=\"https://github.com/concrete5/concrete5/commit/19d0cc81c7cd485b856289ac71ebc0389ea7c3da\" href=\"/redirect?signature=666ee4117427601ac40ffc10a978912456a770d1&amp;url=https%3A%2F%2Fgithub.com%2Fconcrete5%2Fconcrete5%2Fcommit%2F19d0cc81c7cd485b856289ac71ebc0389ea7c3da\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/concrete5/concrete5/commit/19d0cc81c7cd485b856289ac71ebc0389ea7c3da</span><i class=\"icon-external-link\"></i></a> &amp; <a title=\"https://github.com/concrete5/concrete5/commit/c646dd0defcfa79ef119dca8ba1beba2c5bc91ea\" href=\"/redirect?signature=2165623925c9b282a4b7232c37ab2f7d968c2137&amp;url=https%3A%2F%2Fgithub.com%2Fconcrete5%2Fconcrete5%2Fcommit%2Fc646dd0defcfa79ef119dca8ba1beba2c5bc91ea\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/concrete5/concrete5/commit/c646dd0defcfa79ef119dca8ba1beba2c5bc91ea</span><i class=\"icon-external-link\"></i></a> I think the fixes are insufficient to stop lfi.</p>\n\n<p>If you are going to stick with the <code>strpos()</code> trick, you missed something. </p>\n<pre class=\"highlight php\"><code>$path = $request-&gt;getPathInfo();\n$path = rawurldecode($request-&gt;getPathInfo());\n if (substr($path, 0, 3) == &#39;../&#39; || substr($path, -3) == &#39;/..&#39; || strpos($path, &#39;/../&#39;) ||\n     substr($path, 0, 3) == &#39;..\\\\&#39; || substr($path, -3) == &#39;\\\\..&#39; || strpos($path, &#39;\\\\..\\\\&#39;)) {\n</code></pre>\n<p>while that is one way to go. you forgot about &quot;../\\&quot;, &quot; ..\\/&quot;, &quot;/..&quot; &amp; &quot;\\/..&quot; this works because some oses (unix like) parse the backslash to forward slash and proceed. add those and I think you should be fine. :)</p>\n\n<p>Thanks,<br>\nP</p>\n", 
    "vulnerability_information": "Hey,\n\nAfter reading egix's report #59665 and seeing your fix at https://github.com/concrete5/concrete5/commit/19d0cc81c7cd485b856289ac71ebc0389ea7c3da & https://github.com/concrete5/concrete5/commit/c646dd0defcfa79ef119dca8ba1beba2c5bc91ea I think the fixes are insufficient to stop lfi.\n\nIf you are going to stick with the `strpos()` trick, you missed something. \n```php\n$path = $request->getPathInfo();\n$path = rawurldecode($request->getPathInfo());\n if (substr($path, 0, 3) == '../' || substr($path, -3) == '/..' || strpos($path, '/../') ||\n     substr($path, 0, 3) == '..\\\\' || substr($path, -3) == '\\\\..' || strpos($path, '\\\\..\\\\')) {\n``` \nwhile that is one way to go. you forgot about \"../\\\", \" ..\\/\", \"/\\..\" & \"\\/..\" this works because some oses (unix like) parse the backslash to forward slash and proceed. add those and I think you should be fine. :)\n\nThanks,\nP", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.concrete5.org", 
            "about": "A simple and powerful content management system.", 
            "twitter_handle": "concrete5", 
            "name": "concrete5"
        }, 
        "handle": "concrete5", 
        "url": "https://hackerone.com/concrete5", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/060/622f9171a70969f5b0edaf2c826c92ea6e022fb3_small.jpg?1393279055", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/060/80201c838134b35b9b1acd99ad8a7a7c214aa374_medium.jpg?1393279055"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 60, 
        "default_currency": "usd"
    }, 
    "is_published": false
}