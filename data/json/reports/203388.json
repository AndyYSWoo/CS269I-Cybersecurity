{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-03-31T14:50:05.803Z", 
    "voters": [
        "delimitry", 
        "inhibitor181", 
        "edoverflow", 
        "eveeez", 
        "babayaga_", 
        "a0xnirudh", 
        "linkks", 
        "spetr0x", 
        "tastic-toaster"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 203388, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-03-29T17:36:37.638Z", 
    "vulnerability_information": "Hello team,\n\n## Introduction\n\nSince you mentioned in the rules that all libraries listed on your github repositories are in scope, I decided to take a look at http://gip.rocks\n\n## Problem:\n\nThe application reads an image file and convert it into smaller formats, zip it and let the users to download the updated file. But the problem here is the condition check before reading the file to the variable:\n\nFile: https://github.com/gratipay/gip.rocks/blob/master/www/v1.spt\n\n```python\nif int(request.headers['Content-Length']) > 256 * 1024:\n    raise Response(413)\n\nimage_type = request.headers['Content-Type']\nif image_type not in ('image/png', 'image/jpeg'):\n    raise Response(415)\n\n# Load the image.\nfp = StringIO(request.raw_body)\nfp.seek(0)\nimage = Image.open(fp)\n\n```\n\nHere you can see that you are calculating the length of the incoming file from the `content-length` HTTP header and if it is less than `256 * 1024`, you will accept the request. But this is not a correct way to check size of the incoming file.\n\n## POC:\n\n1) Initiate a system wide proxy with burp suite\n\n2) Try to send a curl request with a huge file and see the request in curl\n\n3) The content length will be obviously greater than the max value application accepts but modify the `content-length` header to a value which is less than `256 * 1024`.\n\n4) Forward the request and you can see that the server will read the files to a variable and if the file is large enough, this is more than enough to DOS the server.\n\nNow since this deals with DOS, I haven't actually tried out this attack but we can easily confirm this from the source code that this can be bypassed in the way I explained above. I also tried deploying locally but I had a hard time making the software run locally and I don't have enough free time to debug what is happening.\n\nBut I think the bug is very clear from the source code itself, which is why I really didn't test it but thought to report it.\n\n## Mitigation:\n\nPutting your trust on HTTP headers may not be a good idea. But I am not really sure what is a solid method to find the proper length of the string in this case.", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "none", 
            "privileges_required": "none", 
            "user_interaction": "none", 
            "attack_vector": "network", 
            "attack_complexity": "low", 
            "scope": "unchanged", 
            "integrity": "none", 
            "availability": "high"
        }, 
        "rating": "high", 
        "score": 7.5, 
        "author_type": "Team"
    }, 
    "title": "Content length restriction bypass can lead to DOS by reading large files on gip.rocks", 
    "is_member_of_team?": null, 
    "vote_count": 9, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-04-28T17:36:37.688Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": true, 
            "created_at": "2017-02-04T11:27:50.587Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-04T11:27:50.587Z", 
            "actor": {
                "url": "/gratipay", 
                "profile": {
                    "name": "Gratipay"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/868/d74b2c3d5d3975cb38a59a3176d952c3553a72f1_medium.jpg?1458214340"
                }
            }, 
            "team_handle": "gratipay", 
            "message": "Hi,\n\nThank you for your report, the receipt of which we herewith confirm. We are currently verifying the issue you reported.\n\nPlease expect additional feedback from us within the next couple of days. The \"INFORMATION SECURITY\" section of the following page has additional, useful information regarding our platform's security: http://inside.gratipay.com/howto/manage-risk\n\nWe appreciate your interest in securing our platform and look forward to working with you.\n\nYours sincerely,\nThe Gratipay Security Team", 
            "markdown_message": "<p>Hi,</p>\n\n<p>Thank you for your report, the receipt of which we herewith confirm. We are currently verifying the issue you reported.</p>\n\n<p>Please expect additional feedback from us within the next couple of days. The &quot;INFORMATION SECURITY&quot; section of the following page has additional, useful information regarding our platform&#39;s security: <a title=\"http://inside.gratipay.com/howto/manage-risk\" href=\"/redirect?signature=07ac30e85504acda37e3b100c87a61a058907aa9&amp;url=http%3A%2F%2Finside.gratipay.com%2Fhowto%2Fmanage-risk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://inside.gratipay.com/howto/manage-risk</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>We appreciate your interest in securing our platform and look forward to working with you.</p>\n\n<p>Yours sincerely,<br>\nThe Gratipay Security Team</p>\n", 
            "type": "Activities::Comment", 
            "id": 1462658, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-13T15:55:32.390Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-13T15:55:32.390Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Hi @a0xnirudh,\n\nThank you for reporting this to us. I need to discuss this issue with the rest of the team and will keep you updated.\n\nBest regards,\nEd", 
            "markdown_message": "<p>Hi <a href=\"/a0xnirudh\">@a0xnirudh</a>,</p>\n\n<p>Thank you for reporting this to us. I need to discuss this issue with the rest of the team and will keep you updated.</p>\n\n<p>Best regards,<br>\nEd</p>\n", 
            "type": "Activities::Comment", 
            "id": 1482453, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-13T16:42:58.101Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-13T16:42:58.101Z", 
            "actor": {
                "username": "a0xnirudh", 
                "url": "/a0xnirudh", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/035/891/58aa5b89200a11a67ab2e89061fe48a35dcf07bb_medium.png?1447915270"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Hey @edio ,\n\nOne possible suggestion I have is to restrict the size of reading `raw_body` (assuming raw_body is string) in to the variable like this:\n\n```python\n# Read the first 256 * 1024 bytes regardless of how much data is sent\n\nfp = StringIO(request.raw_body[:262144])   # 256 * 1024 = 262144\n```\n\nNow this will make sure that even if the attacker mess around with `content-length` header, only the recommended size (up to the maximum limit) is read to the variable. This will take care of the issue and if the data size is less than the recommended size, it will read it in full (tested out in python 2.7). ", 
            "markdown_message": "<p>Hey <a href=\"/edio\">@edio</a> ,</p>\n\n<p>One possible suggestion I have is to restrict the size of reading <code>raw_body</code> (assuming raw_body is string) in to the variable like this:</p>\n<pre class=\"highlight python\"><code><span class=\"c\"># Read the first 256 * 1024 bytes regardless of how much data is sent</span>\n\n<span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">raw_body</span><span class=\"p\">[:</span><span class=\"mi\">262144</span><span class=\"p\">])</span>   <span class=\"c\"># 256 * 1024 = 262144</span>\n</code></pre>\n<p>Now this will make sure that even if the attacker mess around with <code>content-length</code> header, only the recommended size (up to the maximum limit) is read to the variable. This will take care of the issue and if the data size is less than the recommended size, it will read it in full (tested out in python 2.7). </p>\n", 
            "type": "Activities::Comment", 
            "id": 1482644, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-16T21:33:04.420Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-16T21:33:04.420Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "So, this issue is valid, but it's a known issue with `gip.rocks`\u2014we haven't hardened that yet, and that's why it's not in scope (under \"domains\") on our [program](https://hackerone.com/gratipay).\n\nThat aside, I'd want to look at whether slicing `request.raw_body` does in fact prevent the full request body from being loaded into memory. Pretty sure we need to drop down into Aspen/Pando to fully address this.\n\nAm I addressing pertinent issues here? What's the open question?", 
            "markdown_message": "<p>So, this issue is valid, but it&#39;s a known issue with <code>gip.rocks</code>\u2014we haven&#39;t hardened that yet, and that&#39;s why it&#39;s not in scope (under &quot;domains&quot;) on our <a href=\"https://hackerone.com/gratipay\">program</a>.</p>\n\n<p>That aside, I&#39;d want to look at whether slicing <code>request.raw_body</code> does in fact prevent the full request body from being loaded into memory. Pretty sure we need to drop down into Aspen/Pando to fully address this.</p>\n\n<p>Am I addressing pertinent issues here? What&#39;s the open question?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1490132, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-17T04:44:41.781Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-17T04:44:41.781Z", 
            "actor": {
                "username": "a0xnirudh", 
                "url": "/a0xnirudh", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/035/891/58aa5b89200a11a67ab2e89061fe48a35dcf07bb_medium.png?1447915270"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Hello @whit537 \n\n>So, this issue is valid, but it's a known issue with gip.rocks\u2014we haven't hardened that yet, and that's why it's not in scope (under \"domains\") on our program.\n\n\nI have cross checked your program rules before submitting the report and the rules clearly state this: `Scope: 3. Any other software we publish (in Github)` and also in your domains section you have added this: `github.com/gratipay`. The above 2 rules means that the the domain `gip.rocks` is in the program (or atleast as a participant in your bug bounty program, that's what I understood).\n\n>That aside, I'd want to look at whether slicing request.raw_body does in fact prevent the full request body from being loaded into memory. Pretty sure we need to drop down into Aspen/Pando to fully address this.\n\nAlso like you said it seems slicing might not actually help in this case because I am not sure if the request body is loaded fully into memory first. In order for a proper fix, it has to deal with the underlying `Aspen/Pando`. \n\nBut don't you think this should be something that should be fixed ? I mean the issue should indeed gets fixed IMHO. I don't think closing this without having a solution for this is a good idea.\n\nAnother thing I thought about is that,  is there is a way we can restrict the memory usage by python to a maximum limit ? I haven't done something like this before myself but there exist some [StackOverflow](http://stackoverflow.com/questions/30269238/limit-memory-usage) questions on the same.  For a temporary protection of your server `gip.rocks` you can try to limit the process memory space for python ? (This was the only alternative I can think of so that the server can be protected without dealing deep into `aspen`).\n\nLet me know what your team thinks about this.", 
            "markdown_message": "<p>Hello <a href=\"/whit537\">@whit537</a> </p>\n\n<blockquote>\n<p>So, this issue is valid, but it&#39;s a known issue with gip.rocks\u2014we haven&#39;t hardened that yet, and that&#39;s why it&#39;s not in scope (under &quot;domains&quot;) on our program.</p>\n</blockquote>\n\n<p>I have cross checked your program rules before submitting the report and the rules clearly state this: <code>Scope: 3. Any other software we publish (in Github)</code> and also in your domains section you have added this: <code>github.com/gratipay</code>. The above 2 rules means that the the domain <code>gip.rocks</code> is in the program (or atleast as a participant in your bug bounty program, that&#39;s what I understood).</p>\n\n<blockquote>\n<p>That aside, I&#39;d want to look at whether slicing request.raw_body does in fact prevent the full request body from being loaded into memory. Pretty sure we need to drop down into Aspen/Pando to fully address this.</p>\n</blockquote>\n\n<p>Also like you said it seems slicing might not actually help in this case because I am not sure if the request body is loaded fully into memory first. In order for a proper fix, it has to deal with the underlying <code>Aspen/Pando</code>. </p>\n\n<p>But don&#39;t you think this should be something that should be fixed ? I mean the issue should indeed gets fixed IMHO. I don&#39;t think closing this without having a solution for this is a good idea.</p>\n\n<p>Another thing I thought about is that,  is there is a way we can restrict the memory usage by python to a maximum limit ? I haven&#39;t done something like this before myself but there exist some <a href=\"/redirect?signature=873fe1d137c64bba79f676156484d1b0ad1e201d&amp;url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F30269238%2Flimit-memory-usage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>StackOverflow</span><i class=\"icon-external-link\"></i></a> questions on the same.  For a temporary protection of your server <code>gip.rocks</code> you can try to limit the process memory space for python ? (This was the only alternative I can think of so that the server can be protected without dealing deep into <code>aspen</code>).</p>\n\n<p>Let me know what your team thinks about this.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1490671, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-17T12:32:11.515Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-17T12:32:11.515Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Hi @a0xnirudh,\n\nSorry for all the confusion! We have decided that this is a valid issue which we want to fix.\n\nBest regards,\nEd", 
            "markdown_message": "<p>Hi <a href=\"/a0xnirudh\">@a0xnirudh</a>,</p>\n\n<p>Sorry for all the confusion! We have decided that this is a valid issue which we want to fix.</p>\n\n<p>Best regards,<br>\nEd</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1491174, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-02-17T13:05:11.894Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-02-17T13:05:11.894Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "> The above 2 rules means that the the domain `gip.rocks` is in the program\n\nFair enough. As @edio and I discussed on Slack ([archive](http://gratipay.slackarchive.io/gratipay/-/1487272955.006802/1487334391.006938/1487332982006901/)), my thinking was muddled on our scope. I stand corrected! :)", 
            "markdown_message": "<blockquote>\n<p>The above 2 rules means that the the domain <code>gip.rocks</code> is in the program</p>\n</blockquote>\n\n<p>Fair enough. As <a href=\"/edio\">@edio</a> and I discussed on Slack (<a href=\"/redirect?signature=ad3c171e2bec827fab7823ddd3d819e4a089f91a&amp;url=http%3A%2F%2Fgratipay.slackarchive.io%2Fgratipay%2F-%2F1487272955.006802%2F1487334391.006938%2F1487332982006901%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>archive</span><i class=\"icon-external-link\"></i></a>), my thinking was muddled on our scope. I stand corrected! :)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1491239, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-10T10:15:03.825Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-10T10:15:03.825Z", 
            "actor": {
                "username": "a0xnirudh", 
                "url": "/a0xnirudh", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/035/891/58aa5b89200a11a67ab2e89061fe48a35dcf07bb_medium.png?1447915270"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "@whit537 I think the same should be done with report #203409 as at the time I was reporting, it was eligible. \n\nHope these bugs will get resolved soon !", 
            "markdown_message": "<p><a href=\"/whit537\">@whit537</a> I think the same should be done with report <a href=\"/reports/203409\">#203409</a> as at the time I was reporting, it was eligible. </p>\n\n<p>Hope these bugs will get resolved soon !</p>\n", 
            "type": "Activities::Comment", 
            "id": 1531893, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-13T17:45:46.343Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-13T17:45:46.343Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "Medium (5.3)", 
                "old_severity": "Medium"
            }, 
            "team_handle": "gratipay", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 1538191, 
            "genius_execution_id": null
        }, 
        {
            "attachments": [
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/168/835/67cb282571d496b65d24245d3f3aafbb91e62257/payload.pcd?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6DOF4BH7%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224109Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDAsIeiAo1xTw4kIWniK3AwV1z%2FDNuc2GpLi7AJOEJ0e4NWAql7yl6ReQj30YP2K5FBrc9xv0H8z3PZE4N7C099Z%2FTC7v7C1gzo54Jgi%2FX3cl%2B1K8PJ1QoShLHpAAjRjf5ciIakpyJZtfax9fUrlrfbg93561WLH%2BcAlYZYP%2FDoT4YEiEnKFoc6r1kz0vtgQeOMs4HdHNkjkFGMI77%2BHQkyTCbcJv5zS%2BkPk%2FmeIs5TPwLonNR3KC9vVtG8%2FxH87F2PEClO9BEdrskZjtMWY6P010JBQmt1CorTu4hj%2BXFqvR%2F690HP1hcC8CWJCyppmtZv0XEClGLMVyC6ib3jbvYHrbrPEHfmQP2RQi0FwMeueNkOH5qbyGqwmmxB4agSDiXM3XAl%2BTc87Wf5p1e%2Bc0zjzZ0xQeKM%2F%2B6b6TparaVSEWnYgYleztcjU3fPWHAZNwL16PwqewCVGh0Qp%2BPnUemfdihk3MmFQeIjHmE7sOQgXva7HlIEEEJ1hyrapkEutFP16gxCQzYqmfLGEsK0wbCxHgen0YqfDv81EZR726krPSisHScLMujI0SnwbcN8IyUwIYqnw663l%2FY9Dhpcje1uM19tGvbMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b3cbc4e978002a9d5effc83bad97bdb85e43496eb928d36c49b5e789e1dbc2d6", 
                    "type": "application/octet-stream", 
                    "id": 168835, 
                    "filename": "payload.pcd"
                }
            ], 
            "automated_response": false, 
            "created_at": "2017-03-14T15:58:56.008Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-14T15:58:56.008Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Hi @a0xnirudh,\n\nSo we are currently discussing the severity of this issue. I started playing around with this bypass and noticed that when combined with a new vulnerability that I just discovered this could be leveraged to do a bit more than DoS.\n\n# Summary\n---\n\nI noticed that gip.rocks was using an outdated version (2.9.0) of the Pillow framework which is vulnerable to heap overflows. The test playoad is 788480 bytes. So your bypass allowed me to pass the payload on to the vulnerable code.\n\n~~~python\n>>> import os\n>>> os.path.getsize('payload.pcd')\n788480L\n~~~\n\n# PoC\n---\n\nVulnerable code in `www/v1.st` summarised:\n\n~~~python\n>>> from PIL import Image\n>>> image = Image.open('foo.jpg')\n>>> image.resize((foo, bar))\n~~~\n\nSummarised exploit:\n\n~~~\n>>> from PIL import Image\n>>> image = Image.open('payload.pcd')\n>>> image.resize((128, 128))\n~~~\n\nExploit concept:\n\n~~~python\nimport requests\nr = requests.post(\t'http://gip.rocks/v1', \n\t\t\t\t\tdata = open('payload.pcd').read(), \n\t\t\t\t\theaders = {\t\n\t\t\t\t\t\t'Content-Type': 'image/jpeg',\n\t\t\t\t\t\t'Content-Length': ' ' # Insert a value smaller than 262144\n\t\t\t\t\t}\n\t\t\t\t  )\nprint(r.status_code, r.reason)\n~~~\n\n# Fix\n---\n\nI have submitted a PR to solve the issue with the outdated dependency: https://github.com/gratipay/gip.rocks/pull/5\n\nI believe we should consider this scenario when evaluating the severity of this issue. What do you think @whit537?\n\nBest regards,\nEd", 
            "markdown_message": "<p>Hi <a href=\"/a0xnirudh\">@a0xnirudh</a>,</p>\n\n<p>So we are currently discussing the severity of this issue. I started playing around with this bypass and noticed that when combined with a new vulnerability that I just discovered this could be leveraged to do a bit more than DoS.</p>\n\n<h1 id=\"summary\">Summary</h1>\n\n<hr>\n\n<p>I noticed that gip.rocks was using an outdated version (2.9.0) of the Pillow framework which is vulnerable to heap overflows. The test playoad is 788480 bytes. So your bypass allowed me to pass the payload on to the vulnerable code.</p>\n<pre class=\"highlight python\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">getsize</span><span class=\"p\">(</span><span class=\"s\">&#39;payload.pcd&#39;</span><span class=\"p\">)</span>\n<span class=\"il\">788480L</span>\n</code></pre>\n<h1 id=\"poc\">PoC</h1>\n\n<hr>\n\n<p>Vulnerable code in <code>www/v1.st</code> summarised:</p>\n<pre class=\"highlight python\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">&#39;foo.jpg&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">((</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">))</span>\n</code></pre>\n<p>Summarised exploit:</p>\n<pre class=\"highlight plaintext\"><code>&gt;&gt;&gt; from PIL import Image\n&gt;&gt;&gt; image = Image.open(&#39;payload.pcd&#39;)\n&gt;&gt;&gt; image.resize((128, 128))\n</code></pre>\n<p>Exploit concept:</p>\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span>  <span class=\"s\">&#39;http://gip.rocks/v1&#39;</span><span class=\"p\">,</span> \n                    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">&#39;payload.pcd&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> \n                    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span> \n                        <span class=\"s\">&#39;Content-Type&#39;</span><span class=\"p\">:</span> <span class=\"s\">&#39;image/jpeg&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s\">&#39;Content-Length&#39;</span><span class=\"p\">:</span> <span class=\"s\">&#39; &#39;</span> <span class=\"c\"># Insert a value smaller than 262144</span>\n                    <span class=\"p\">}</span>\n                  <span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">reason</span><span class=\"p\">)</span>\n</code></pre>\n<h1 id=\"fix\">Fix</h1>\n\n<hr>\n\n<p>I have submitted a PR to solve the issue with the outdated dependency: <a title=\"https://github.com/gratipay/gip.rocks/pull/5\" href=\"/redirect?signature=11b867e8d3018f8f09d2bccaf336f86f84dce1d0&amp;url=https%3A%2F%2Fgithub.com%2Fgratipay%2Fgip.rocks%2Fpull%2F5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/gratipay/gip.rocks/pull/5</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>I believe we should consider this scenario when evaluating the severity of this issue. What do you think <a href=\"/whit537\">@whit537</a>?</p>\n\n<p>Best regards,<br>\nEd</p>\n", 
            "type": "Activities::Comment", 
            "id": 1540444, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-14T19:06:55.171Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-14T19:06:55.171Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": ">  it's a known issue with `gip.rocks`\n\nThis present ticket is, in fact, a duplicate. Here's the prior [ticket](https://github.com/gratipay/gip.rocks/issues/2). \n\n> So your bypass allowed me to pass the payload on to the vulnerable code.\n\nWhat does the payload do? In what way can this vulnerability be exploited?", 
            "markdown_message": "<blockquote>\n<p>it&#39;s a known issue with <code>gip.rocks</code></p>\n</blockquote>\n\n<p>This present ticket is, in fact, a duplicate. Here&#39;s the prior <a href=\"/redirect?signature=19b60adfbedc74c2f2e0295b2f24d8580898e4a8&amp;url=https%3A%2F%2Fgithub.com%2Fgratipay%2Fgip.rocks%2Fissues%2F2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>ticket</span><i class=\"icon-external-link\"></i></a>. </p>\n\n<blockquote>\n<p>So your bypass allowed me to pass the payload on to the vulnerable code.</p>\n</blockquote>\n\n<p>What does the payload do? In what way can this vulnerability be exploited?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1541158, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-14T20:24:01.133Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-14T20:24:01.133Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "> This present ticket is, in fact, a duplicate. Here's the prior ticket.\n\nWhoops. I did not see that.\n\n> What does the payload do?\n\nThe harmless PCD payload causes a heap overflow in Pillow's PCD decoding.\n\n> In what way can this vulnerability be exploited?\n\nAn attacker could cause the Python process to crash, or, potentially, execute arbitrary code with the privileges of the Python script processing the image.", 
            "markdown_message": "<blockquote>\n<p>This present ticket is, in fact, a duplicate. Here&#39;s the prior ticket.</p>\n</blockquote>\n\n<p>Whoops. I did not see that.</p>\n\n<blockquote>\n<p>What does the payload do?</p>\n</blockquote>\n\n<p>The harmless PCD payload causes a heap overflow in Pillow&#39;s PCD decoding.</p>\n\n<blockquote>\n<p>In what way can this vulnerability be exploited?</p>\n</blockquote>\n\n<p>An attacker could cause the Python process to crash, or, potentially, execute arbitrary code with the privileges of the Python script processing the image.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1541490, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T05:48:54.084Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T05:48:54.084Z", 
            "actor": {
                "username": "a0xnirudh", 
                "url": "/a0xnirudh", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/035/891/58aa5b89200a11a67ab2e89061fe48a35dcf07bb_medium.png?1447915270"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Hey @edio \n\nGreat finding, but it is better if you guys itself test the bug because like you said the vulnerability is critical and I don't want to cause a DOS on your server. I do hope you consider this report as critical and will resolve it ASAP.\n\nThanks !", 
            "markdown_message": "<p>Hey <a href=\"/edio\">@edio</a> </p>\n\n<p>Great finding, but it is better if you guys itself test the bug because like you said the vulnerability is critical and I don&#39;t want to cause a DOS on your server. I do hope you consider this report as critical and will resolve it ASAP.</p>\n\n<p>Thanks !</p>\n", 
            "type": "Activities::Comment", 
            "id": 1542144, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T09:04:29.670Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T09:04:29.670Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "High (7.5)", 
                "old_severity": "Medium (5.3)"
            }, 
            "team_handle": "gratipay", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 1542377, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T11:01:43.216Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T11:03:03.230Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "> execute arbitrary code with the privileges of the Python script processing the image.\n\nThis isn't actually that bad, because of network segmentation. This process runs in its own dyno at Heroku and doesn't (e.g.) have access to the database or environment for `gratipay.com`. The worst case scenario I can see is preventing us from being able to resize images. Even being able to access images isn't a big deal since they're not private to begin with, and of course our source code is open so there's no loss there as well. I guess modifying images could be a possibility, but seems mostly annoying (perhaps a largely theoretical phishing/spoofing risk). Unless I am missing something ... ?\n\nHow should we proceed?\n\n1. Is it right to use this ticket for the Pillow overflow? Or should we close this as a dupe and open a new one for the overflow?\n1. How should we score this? `High` is too high in the overall context of our security program. Sure it's `High` relative to `gip.rocks`, but that's only a small part of our overall application. Not sure how to handle that w/ CVSS as our program is currently configured.", 
            "markdown_message": "<blockquote>\n<p>execute arbitrary code with the privileges of the Python script processing the image.</p>\n</blockquote>\n\n<p>This isn&#39;t actually that bad, because of network segmentation. This process runs in its own dyno at Heroku and doesn&#39;t (e.g.) have access to the database or environment for <code>gratipay.com</code>. The worst case scenario I can see is preventing us from being able to resize images. Even being able to access images isn&#39;t a big deal since they&#39;re not private to begin with, and of course our source code is open so there&#39;s no loss there as well. I guess modifying images could be a possibility, but seems mostly annoying (perhaps a largely theoretical phishing/spoofing risk). Unless I am missing something ... ?</p>\n\n<p>How should we proceed?</p>\n\n<ol>\n<li>Is it right to use this ticket for the Pillow overflow? Or should we close this as a dupe and open a new one for the overflow?</li>\n<li>How should we score this? <code>High</code> is too high in the overall context of our security program. Sure it&#39;s <code>High</code> relative to <code>gip.rocks</code>, but that&#39;s only a small part of our overall application. Not sure how to handle that w/ CVSS as our program is currently configured.</li>\n</ol>\n", 
            "type": "Activities::Comment", 
            "id": 1542545, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T11:31:56.732Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T11:31:56.732Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "> I guess modifying images could be a possibility, but seems mostly annoying (perhaps a largely theoretical phishing/spoofing risk).\n\nAren't gratipay.com's \"Team\" images loaded from `gip.rocks`?\n\nhttps://github.com/gratipay/gratipay.com/blob/master/gratipay/utils/images.py\n\n> 1. Is it right to use this ticket for the Pillow overflow? Or should we close this as a dupe and open a new one for the overflow?\n\nI will allow you to decide.\n\n> 2. How should we score this? `High` is too high in the overall context of our security program. Sure it's `High` relative to `gip.rocks`, but that's only a small part of our overall application. Not sure how to handle that w/ CVSS as our program is currently configured.\n\nI cannot give you a definitive answer until I have an answer to my first question.", 
            "markdown_message": "<blockquote>\n<p>I guess modifying images could be a possibility, but seems mostly annoying (perhaps a largely theoretical phishing/spoofing risk).</p>\n</blockquote>\n\n<p>Aren&#39;t gratipay.com&#39;s &quot;Team&quot; images loaded from <code>gip.rocks</code>?</p>\n\n<p><a title=\"https://github.com/gratipay/gratipay.com/blob/master/gratipay/utils/images.py\" href=\"/redirect?signature=be0125882f9ea0610318978ae32802b69afe0e17&amp;url=https%3A%2F%2Fgithub.com%2Fgratipay%2Fgratipay.com%2Fblob%2Fmaster%2Fgratipay%2Futils%2Fimages.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/gratipay/gratipay.com/blob/master/gratipay/utils/images.py</span><i class=\"icon-external-link\"></i></a></p>\n\n<blockquote>\n<ol>\n<li>Is it right to use this ticket for the Pillow overflow? Or should we close this as a dupe and open a new one for the overflow?</li>\n</ol>\n</blockquote>\n\n<p>I will allow you to decide.</p>\n\n<blockquote>\n<ol>\n<li>How should we score this? <code>High</code> is too high in the overall context of our security program. Sure it&#39;s <code>High</code> relative to <code>gip.rocks</code>, but that&#39;s only a small part of our overall application. Not sure how to handle that w/ CVSS as our program is currently configured.</li>\n</ol>\n</blockquote>\n\n<p>I cannot give you a definitive answer until I have an answer to my first question.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1542575, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T11:45:13.187Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T11:45:13.187Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "> Aren't gratipay.com's \"Team\" images loaded from `gip.rocks`?\n\nYes! What do you see as the implications of that?", 
            "markdown_message": "<blockquote>\n<p>Aren&#39;t gratipay.com&#39;s &quot;Team&quot; images loaded from <code>gip.rocks</code>?</p>\n</blockquote>\n\n<p>Yes! What do you see as the implications of that?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1542596, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T12:18:24.515Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T12:18:24.515Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "> Yes! What do you see as the implications of that?\n\nIf one can somehow craft a valid malicious POST request from gratipay.com then this might affect Gratipay too.\n\n> 1. How should we score this? `High` is too high in the overall context of our security program. Sure it's `High` relative to `gip.rocks`, but that's only a small part of our overall application. Not sure how to handle that w/ CVSS as our program is currently configured.\n\nAs you basically said it depends on the perspective. We can either look at how it affects `gip.rocks` or how it affects `gratipay.com`. What would you prefer to focus on?", 
            "markdown_message": "<blockquote>\n<p>Yes! What do you see as the implications of that?</p>\n</blockquote>\n\n<p>If one can somehow craft a valid malicious POST request from gratipay.com then this might affect Gratipay too.</p>\n\n<blockquote>\n<ol>\n<li>How should we score this? <code>High</code> is too high in the overall context of our security program. Sure it&#39;s <code>High</code> relative to <code>gip.rocks</code>, but that&#39;s only a small part of our overall application. Not sure how to handle that w/ CVSS as our program is currently configured.</li>\n</ol>\n</blockquote>\n\n<p>As you basically said it depends on the perspective. We can either look at how it affects <code>gip.rocks</code> or how it affects <code>gratipay.com</code>. What would you prefer to focus on?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1542654, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T12:33:26.795Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T12:33:26.795Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "> If one can somehow craft a valid malicious POST request from gratipay.com then this might affect Gratipay too.\n\nIn what way? By controlling what is sent *back* to Gratipay? Or ... ?", 
            "markdown_message": "<blockquote>\n<p>If one can somehow craft a valid malicious POST request from gratipay.com then this might affect Gratipay too.</p>\n</blockquote>\n\n<p>In what way? By controlling what is sent <em>back</em> to Gratipay? Or ... ?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1542675, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T13:32:07.466Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T13:32:07.466Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "OK, I had a look at the source code and it appears that this doesn't affect `gratipay.com` security wise. In terms of the CVSS score, what would you prefer to focus on (`gratipay.com` vs `gip.rocks`)?", 
            "markdown_message": "<p>OK, I had a look at the source code and it appears that this doesn&#39;t affect <code>gratipay.com</code> security wise. In terms of the CVSS score, what would you prefer to focus on (<code>gratipay.com</code> vs <code>gip.rocks</code>)?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1542850, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T14:33:09.877Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T14:33:09.877Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "I understand our security program to be focussed on Gratipay as an entire application (encompassing `gratipay.com`, `gip.rock`, `grtp.co`, etc.).", 
            "markdown_message": "<p>I understand our security program to be focussed on Gratipay as an entire application (encompassing <code>gratipay.com</code>, <code>gip.rock</code>, <code>grtp.co</code>, etc.).</p>\n", 
            "type": "Activities::Comment", 
            "id": 1542997, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T14:48:26.870Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T14:48:26.870Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "That's interesting, I personally believe the CVSS score should represent the impact the vulnerability has on the affected product (`gip.rocks`) rather than the vendor (`gratipay.com`, `gip.rocks`, `grtp.co`, etc.). Well let's decide now and stick to a method for all reports in the future.", 
            "markdown_message": "<p>That&#39;s interesting, I personally believe the CVSS score should represent the impact the vulnerability has on the affected product (<code>gip.rocks</code>) rather than the vendor (<code>gratipay.com</code>, <code>gip.rocks</code>, <code>grtp.co</code>, etc.). Well let&#39;s decide now and stick to a method for all reports in the future.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1543026, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-15T15:09:19.150Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-15T15:09:19.150Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "The way I see CVSS described in the HackerOne UI indicates that it wants to be scoped to individual components. The complication is that our bounty award function currently only takes into account severity, not component. I guess that's something to [discuss further here](https://github.com/gratipay/inside.gratipay.com/pull/1018).", 
            "markdown_message": "<p>The way I see CVSS described in the HackerOne UI indicates that it wants to be scoped to individual components. The complication is that our bounty award function currently only takes into account severity, not component. I guess that&#39;s something to <a href=\"/redirect?signature=e9028a6312dc2d3ebdfbc9f948a4f401c0234e25&amp;url=https%3A%2F%2Fgithub.com%2Fgratipay%2Finside.gratipay.com%2Fpull%2F1018\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>discuss further here</span><i class=\"icon-external-link\"></i></a>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1543076, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-18T12:31:49.073Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-18T12:42:03.996Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "After discussing in [slack](http://gratipay.slackarchive.io/gratipay/page-76/ts-1489825948637425), we've decided to triage this for now rather than closing as a duplicate, and to close as `resolved` once the heap overflow is resolved. This is to acknowledge the quality of your report, and the role it played in alerting us to the heap overflow (which we've reticketed as #214449).", 
            "markdown_message": "<p>After discussing in <a href=\"/redirect?signature=f5ce727becb0c3ab5ebf546f6c4432fa67a455a5&amp;url=http%3A%2F%2Fgratipay.slackarchive.io%2Fgratipay%2Fpage-76%2Fts-1489825948637425\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>slack</span><i class=\"icon-external-link\"></i></a>, we&#39;ve decided to triage this for now rather than closing as a duplicate, and to close as <code>resolved</code> once the heap overflow is resolved. This is to acknowledge the quality of your report, and the role it played in alerting us to the heap overflow (which we&#39;ve reticketed as <a href=\"/reports/214449\">#214449</a>).</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1549617, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "a0xnirudh", 
                "url": "/a0xnirudh"
            }, 
            "created_at": "2017-03-29T17:36:16.083Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-29T17:36:16.083Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Hi @a0xnirudh,\n\nThank you for your patience. #214449 has been resolved so we can close this report as resolved.\n\nBest regards,\nEd", 
            "markdown_message": "<p>Hi <a href=\"/a0xnirudh\">@a0xnirudh</a>,</p>\n\n<p>Thank you for your patience. <a href=\"/reports/214449\">#214449</a> has been resolved so we can close this report as resolved.</p>\n\n<p>Best regards,<br>\nEd</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1571077, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-29T17:36:37.659Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-29T17:36:37.659Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1571078, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-31T11:55:24.791Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-31T11:55:24.791Z", 
            "actor": {
                "username": "a0xnirudh", 
                "url": "/a0xnirudh", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/035/891/58aa5b89200a11a67ab2e89061fe48a35dcf07bb_medium.png?1447915270"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "@whit537 @edio Is this eligible for a Bounty ? According to your slack archives pointed above, report was eligible which is the reason why  I am asking this here.\n\nThanks !", 
            "markdown_message": "<p><a href=\"/whit537\">@whit537</a> <a href=\"/edio\">@edio</a> Is this eligible for a Bounty ? According to your slack archives pointed above, report was eligible which is the reason why  I am asking this here.</p>\n\n<p>Thanks !</p>\n", 
            "type": "Activities::Comment", 
            "id": 1574951, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-31T14:40:31.755Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-31T14:40:31.755Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Hi @a0xnirudh. The [conclusion](https://gratipay.slackarchive.io/gratipay/page-76/ts-1489834757049294) we reached on Slack was to resolve, but with no bounty. This ticket is a duplicate and I didn't intend for it to be in scope, so we're already stretching by resolving vs. closing as a dupe or n/a. Thanks for understanding, and happy hacking! :-)", 
            "markdown_message": "<p>Hi <a href=\"/a0xnirudh\">@a0xnirudh</a>. The <a href=\"/redirect?signature=e5ad80e9732c5f7e768d1ee4ae76373ac229663d&amp;url=https%3A%2F%2Fgratipay.slackarchive.io%2Fgratipay%2Fpage-76%2Fts-1489834757049294\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>conclusion</span><i class=\"icon-external-link\"></i></a> we reached on Slack was to resolve, but with no bounty. This ticket is a duplicate and I didn&#39;t intend for it to be in scope, so we&#39;re already stretching by resolving vs. closing as a dupe or n/a. Thanks for understanding, and happy hacking! :-)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1575224, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-31T14:50:05.846Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-31T14:50:05.846Z", 
            "actor": {
                "username": "a0xnirudh", 
                "url": "/a0xnirudh", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/035/891/58aa5b89200a11a67ab2e89061fe48a35dcf07bb_medium.png?1447915270"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1575234, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-31T14:50:05.962Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-31T14:50:05.962Z", 
            "actor": {
                "username": "a0xnirudh", 
                "url": "/a0xnirudh", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/035/891/58aa5b89200a11a67ab2e89061fe48a35dcf07bb_medium.png?1447915270"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1575235, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "a0xnirudh", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/a0xnirudh", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/035/891/01da860c3be51c6a93de33bd53874d7df3c50f58_small.png?1447915270"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 48, 
        "name": "Denial of Service"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -50735071.97276888, 
    "disclosed_at": "2017-03-31T14:50:05.910Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/203388", 
    "created_at": "2017-02-04T11:27:50.436Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hello team,</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>Since you mentioned in the rules that all libraries listed on your github repositories are in scope, I decided to take a look at <a title=\"http://gip.rocks\" href=\"/redirect?signature=170f0a59cb51ac1b64bf71df8d07807ab7a692cb&amp;url=http%3A%2F%2Fgip.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://gip.rocks</span><i class=\"icon-external-link\"></i></a></p>\n\n<h2 id=\"problem\">Problem:</h2>\n\n<p>The application reads an image file and convert it into smaller formats, zip it and let the users to download the updated file. But the problem here is the condition check before reading the file to the variable:</p>\n\n<p>File: <a title=\"https://github.com/gratipay/gip.rocks/blob/master/www/v1.spt\" href=\"/redirect?signature=6d108160b3bbc7211a71384b6013a775e1834b9c&amp;url=https%3A%2F%2Fgithub.com%2Fgratipay%2Fgip.rocks%2Fblob%2Fmaster%2Fwww%2Fv1.spt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/gratipay/gip.rocks/blob/master/www/v1.spt</span><i class=\"icon-external-link\"></i></a></p>\n<pre class=\"highlight python\"><code><span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s\">&#39;Content-Length&#39;</span><span class=\"p\">])</span> <span class=\"o\">&gt;</span> <span class=\"mi\">256</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"mi\">413</span><span class=\"p\">)</span>\n\n<span class=\"n\">image_type</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s\">&#39;Content-Type&#39;</span><span class=\"p\">]</span>\n<span class=\"k\">if</span> <span class=\"n\">image_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s\">&#39;image/png&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;image/jpeg&#39;</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"mi\">415</span><span class=\"p\">)</span>\n\n<span class=\"c\"># Load the image.</span>\n<span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">raw_body</span><span class=\"p\">)</span>\n<span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">)</span>\n\n</code></pre>\n<p>Here you can see that you are calculating the length of the incoming file from the <code>content-length</code> HTTP header and if it is less than <code>256 * 1024</code>, you will accept the request. But this is not a correct way to check size of the incoming file.</p>\n\n<h2 id=\"poc\">POC:</h2>\n\n<p>1) Initiate a system wide proxy with burp suite</p>\n\n<p>2) Try to send a curl request with a huge file and see the request in curl</p>\n\n<p>3) The content length will be obviously greater than the max value application accepts but modify the <code>content-length</code> header to a value which is less than <code>256 * 1024</code>.</p>\n\n<p>4) Forward the request and you can see that the server will read the files to a variable and if the file is large enough, this is more than enough to DOS the server.</p>\n\n<p>Now since this deals with DOS, I haven&#39;t actually tried out this attack but we can easily confirm this from the source code that this can be bypassed in the way I explained above. I also tried deploying locally but I had a hard time making the software run locally and I don&#39;t have enough free time to debug what is happening.</p>\n\n<p>But I think the bug is very clear from the source code itself, which is why I really didn&#39;t test it but thought to report it.</p>\n\n<h2 id=\"mitigation\">Mitigation:</h2>\n\n<p>Putting your trust on HTTP headers may not be a good idea. But I am not really sure what is a solid method to find the proper length of the string in this case.</p>\n", 
    "severity_rating": "high", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://gratipay.com/", 
            "about": "Gratitude? Gratipay! The easiest way for your company to pay for open source.", 
            "twitter_handle": "Gratipay", 
            "name": "Gratipay"
        }, 
        "handle": "gratipay", 
        "url": "https://hackerone.com/gratipay", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/868/5b2b5a44e2439cf6fe880b374cbbeaf38d740c6b_small.jpg?1458214340", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/001/868/d74b2c3d5d3975cb38a59a3176d952c3553a72f1_medium.jpg?1458214340"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 1868, 
        "default_currency": "usd"
    }, 
    "is_published": false
}