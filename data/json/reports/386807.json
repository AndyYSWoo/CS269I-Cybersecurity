{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2018-08-15T14:17:31.309Z", 
    "voters": [
        "jobert", 
        "eveeez", 
        "grampae", 
        "babayaga_", 
        "cryptographer", 
        "banna12345", 
        "becojo", 
        "knc"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 386807, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-08-15T05:43:03.249Z", 
    "vulnerability_information": "I would like to report a privilege escalation vulnerability in flintcms.\nIt allows to reset a known user password, extract its password reset token and reset its password to then access the account.\n\n# Module\n\n**module name:** flintcms\n**version:** v.1.1.9\n**npm page:** `https://www.npmjs.com/package/flintcms`\n\n## Module Description\n\nFlint is a CMS built to be easy to use and super flexible. Your content needs to fit into more layouts and environments than anyone but you can plan for, so Flint enables you to make the templates you need and fill it with your content. It's a CMS that is built for those who want to fully design the front-end of their website without wanting to deal with static site generators or older content management systems (that are slow and use outdated technology).\n\n## Module Stats\n\n7 downloads in the last week\n\n# Vulnerability\n\n## Vulnerability Description\n\nThe vulnerability is caused by the lack of user input sanitization in the route that verifies the password reset token. The value from the parameter is directly sent to the Mongoose API which allows a user to insert MongoDB query operators. These operators can be used to extract the value of the field _blindly_ in the same manner of a blind SQL injection. In this case, the `$regex` operator is used to guess each character of the token from the start.\n\nVulnerable code:\n\n```js\n  router.get('/verify', async (req, res) => {\n    const token = req.query.t\n\n    const user = await User.findOne({ token })\n\n    if (!user) {\n      res.redirect('/admin')\n      return\n    }\n\n    res.redirect(`/admin/sp/${token}`)\n  })\n```\nYou can tell the different behavior when visiting these pages (assuming one of the user has reset their password):\n- http://localhost:4000/admin/verify?t[$ne]=something redirects to http://localhost:4000/admin/sp/[object%20Object]\n- While http://localhost:4000/admin/verify?t[$eq]=something redirects to http://localhost:4000/admin/login?p=/admin/\n\nTo take over an account, the following are required:\n1. Reset the password of the targeted account (the email of the target user must be know)\n2. Use the password reset page to extract the token using the blind MongoDB injection\n3. Use the token to reset the password and log in \n\n---\n\nTo lift the requirements to know the email, it is also possible to find the emails of the users because the password reset form is also vulnerable to blind MongoDB injection. In the same manner as previously, each character of the email can be guessed using the `$regex` MongoDB operator.\n\nVulnerable code:\n```js\n  router.post('/forgotpassword', async (req, res) => {\n    const { email } = req.body\n    const user = await User.findOne({ email })\n\n    if (!user) {\n      res.status(400).end('There is no user with that email.')\n      return\n    }\n    // [...]\n```\n\n## Steps To Reproduce:\n\n1. Follow the install guide https://flintcms.co/docs/installation/\n2. Create the admin user at http://localhost:4000/admin/install\n3. Log out\n4. Proceed to reset the password of the admin. Let's say the email configured was `admin@localhost.com`\n5. Run the provided Python script\n6. Visit the reset URL that the script finds\n7. Reset the user password\n8. You are now logged in\n\n## Patch\nThe request parameters should be converted to string before being sent to the Mongoose API. Adding `.toString()` to the parameters should be enough to prevent objects being passed to Mongoose. For example:\n\n```js\n    const { email } = req.body\n    const user = await User.findOne({ email: email.toString() })\n```\n\n```js\n    const token = req.query.t.toString()\n```\n\nFurther sanitization should be added to other endpoints. \n\n## Supporting Material/References:\n\n- Ubuntu 16.04.3 LTS\n- v8.4.0\n- 5.3.0\n- For the script: Python 2.7.12 and the `requests` package\n\n# Wrap up\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N\n\n## Impact\n\nAn attacker could take over the website, delete data or server malicious content.", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "high", 
            "privileges_required": "none", 
            "user_interaction": "none", 
            "attack_vector": "network", 
            "attack_complexity": "high", 
            "scope": "changed", 
            "integrity": "high", 
            "availability": "high"
        }, 
        "rating": "critical", 
        "score": 9.0, 
        "author_type": "Team"
    }, 
    "title": "[flintcms] Account takeover due to blind MongoDB injection in password reset", 
    "is_member_of_team?": null, 
    "vote_count": 8, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "flintcms", 
        "max_severity": "critical", 
        "databaseId": 13485, 
        "asset_type": "SOURCE_CODE"
    }, 
    "allow_singular_disclosure_at": "2018-09-14T05:43:03.395Z", 
    "state": "Closed", 
    "cve_ids": [
        "CVE-2018-3783"
    ], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "attachments": [
        {
            "file_name": "exploit.py", 
            "type": "text/x-python", 
            "id": 324524, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/324/524/80452891166243d81821764d38b2e48cee510e48/exploit.py?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQSGAJTS7X%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221753Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDNv1JJkb2JCBJezLRSK3A3HLsRbM1N2dJQCs3cdkO9DdSlu97QyvuTWjB9TDM0zF0K5xYiGpDCZFKPrax%2BsFz5KI1WenrJdfAQhjK2VjV8ng750HOo6R9QtyoSkXqJSITk3z0sX6u%2BaGuR53DR1SgrXgU4%2BZj3kzVsOKKtd61G%2BDZP2N3q%2FR9lSxtCBWOIkOltAHyGZcqelOD%2BNHIXr08GPe3urs8MfpCWN12Uc98ELvbzHllGEdfFgQzzzB%2Fh03QvsfmUHldJCz%2F09ZO2mOXeVGvvhGa6P439ow0kmfHorCf2l49cQlp550RAVCceslQNRsIpjs%2FscvNzwUdv1wSWwe0IojrRDLG4nQFwiQ1K3a1GlpxXYzTv176jcnZhJdyzHXn0aNVd3n2yu6QXF1RyrednAqH6GTeLsY%2BmFdJvs1E%2FSPzNOEj5naR190ChZbKYdPEncIwhYy7S7R055CIUnAzUObhGpKBIz%2FL7hX57SOAVB8Fp6J9NWYxxkcT1Ux5M8TRdPzjlD4gsEW3VAWt2ylLrHUu11rkw%2BhgkA7Cbe4vsOk6sYBm%2BDSV9vvQVz42kWGtRMos%2BFMKzKt4FX3akfBm1nwEgIo656m4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d690ace558fb53a3e06910241e0ff51919b754019d2c67ea37f279860314ac8c"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2018-07-25T20:47:12.881Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-07-25T20:47:12.881Z", 
            "actor": {
                "username": "becojo", 
                "url": "/becojo", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/098/231/bab189fc2f29363f1dcb2449f16a61ef701fe51e_medium.jpg?1532551469"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_title": "[flintcms] Account takeover due to blind MongoDB injection in password reset", 
                "old_title": "Account takeover due to blind MongoDB injection in password reset "
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportTitleUpdated", 
            "id": 3098264, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": true, 
            "created_at": "2018-07-25T21:49:23.730Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-07-25T21:49:23.730Z", 
            "actor": {
                "username": "vdeturckheim_dev", 
                "url": "/vdeturckheim_dev", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Hello,\nThanks for reporting this to us. Someone will quickly look at this report and triage it.", 
            "markdown_message": "<p>Hello,<br>\nThanks for reporting this to us. Someone will quickly look at this report and triage it.</p>\n", 
            "type": "Activities::Comment", 
            "id": 3098743, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-07-27T10:35:27.565Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-07-27T10:35:27.565Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Hi @becojo,\n\nThanks for your report!\nI'll go ahead and invite the module author to join the discussion and evaluate the vulnerability with you.", 
            "markdown_message": "<p>Hi <a href=\"/becojo\">@becojo</a>,</p>\n\n<p>Thanks for your report!<br>\nI&#39;ll go ahead and invite the module author to join the discussion and evaluate the vulnerability with you.</p>\n", 
            "type": "Activities::Comment", 
            "id": 3105084, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-07-27T10:35:55.755Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-07-27T10:35:55.755Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "Critical (9.0)", 
                "old_severity": "High"
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 3105087, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-07-27T10:36:44.192Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-07-27T10:36:44.192Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 3105090, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-07T17:44:16.446Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-07T17:50:17.519Z", 
            "actor": {
                "username": "becojo", 
                "url": "/becojo", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/098/231/bab189fc2f29363f1dcb2449f16a61ef701fe51e_medium.jpg?1532551469"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Nevermind. I thought I found something easier to exploit the vulnerability but turns out you still need the original script.", 
            "markdown_message": "<p>Nevermind. I thought I found something easier to exploit the vulnerability but turns out you still need the original script.</p>\n", 
            "type": "Activities::Comment", 
            "id": 3156300, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-10T11:20:42.694Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-10T11:20:42.694Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Due to inactivity from the maintainer I opened an issue in the repository: https://github.com/JasonEtco/flintcms/issues/77", 
            "markdown_message": "<p>Due to inactivity from the maintainer I opened an issue in the repository: <a title=\"https://github.com/JasonEtco/flintcms/issues/77\" href=\"/redirect?signature=d66cefc4820231d725ba9111981578a05ea1ba62&amp;url=https%3A%2F%2Fgithub.com%2FJasonEtco%2Fflintcms%2Fissues%2F77\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/JasonEtco/flintcms/issues/77</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::Comment", 
            "id": 3172179, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-10T13:22:06.218Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-10T13:22:06.218Z", 
            "actor": {
                "username": "jasonetco", 
                "url": "/jasonetco", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/327/134/a54da37f5f85af1cb75e5e2d1e9bacc9d5c9e314_medium.png?1533909454"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ExternalUserJoined", 
            "id": 3172423, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-10T13:26:33.107Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-10T13:26:33.107Z", 
            "actor": {
                "username": "jasonetco", 
                "url": "/jasonetco", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/327/134/a54da37f5f85af1cb75e5e2d1e9bacc9d5c9e314_medium.png?1533909454"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Hey folks - thanks for opening the issue @lirantal, I hadn't seen this before, and thhans for reporting @becojo! I'll go ahead and convert to string as you've suggested, and cut a new release immediately.", 
            "markdown_message": "<p>Hey folks - thanks for opening the issue <a href=\"/lirantal\">@lirantal</a>, I hadn&#39;t seen this before, and thhans for reporting <a href=\"/becojo\">@becojo</a>! I&#39;ll go ahead and convert to string as you&#39;ve suggested, and cut a new release immediately.</p>\n", 
            "type": "Activities::Comment", 
            "id": 3172465, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-10T13:57:05.890Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-10T13:57:05.890Z", 
            "actor": {
                "username": "jasonetco", 
                "url": "/jasonetco", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/327/134/a54da37f5f85af1cb75e5e2d1e9bacc9d5c9e314_medium.png?1533909454"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "[Version 1.1.10 has been released](https://www.npmjs.com/package/flintcms/v/1.1.10) - I intentionally chose not to do this in a PR, but you can still [see the diff here](https://github.com/JasonEtco/flintcms/compare/49e4b6a49e8ba378313845162cd32ba06a2681d6...14dc0724a031f285e0cc057608937bfde8e39c90).", 
            "markdown_message": "<p><a href=\"/redirect?signature=00f8a68a7d6528c083dc01ba3c47634d428bcb37&amp;url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fflintcms%2Fv%2F1.1.10\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Version 1.1.10 has been released</span><i class=\"icon-external-link\"></i></a> - I intentionally chose not to do this in a PR, but you can still <a href=\"/redirect?signature=8d1b0c35686107199dd62cd2eec6369a7d171f29&amp;url=https%3A%2F%2Fgithub.com%2FJasonEtco%2Fflintcms%2Fcompare%2F49e4b6a49e8ba378313845162cd32ba06a2681d6...14dc0724a031f285e0cc057608937bfde8e39c90\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>see the diff here</span><i class=\"icon-external-link\"></i></a>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 3172572, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-11T08:47:10.525Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-11T08:47:10.525Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "@jasonetco great, thank you for the prompt reply!\n@becojo can you verify the fix please?", 
            "markdown_message": "<p><a href=\"/jasonetco\">@jasonetco</a> great, thank you for the prompt reply!<br>\n<a href=\"/becojo\">@becojo</a> can you verify the fix please?</p>\n", 
            "type": "Activities::Comment", 
            "id": 3176693, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-14T00:34:59.148Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-14T00:34:59.148Z", 
            "actor": {
                "username": "becojo", 
                "url": "/becojo", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/098/231/bab189fc2f29363f1dcb2449f16a61ef701fe51e_medium.jpg?1532551469"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Yes the fix works. Thank you @jasonetco ", 
            "markdown_message": "<p>Yes the fix works. Thank you <a href=\"/jasonetco\">@jasonetco</a> </p>\n", 
            "type": "Activities::Comment", 
            "id": 3189580, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-15T05:42:18.801Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-15T05:42:18.801Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Great work guys!\nI'll go ahead and fully disclose this report, let me know if you prefer otherwise to avoid it.", 
            "markdown_message": "<p>Great work guys!<br>\nI&#39;ll go ahead and fully disclose this report, let me know if you prefer otherwise to avoid it.</p>\n", 
            "type": "Activities::Comment", 
            "id": 3197321, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "becojo", 
                "url": "/becojo"
            }, 
            "created_at": "2018-08-15T05:42:50.149Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-15T05:42:50.149Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Resolved with version 1.1.10", 
            "markdown_message": "<p>Resolved with version 1.1.10</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 3197323, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-15T05:43:03.284Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-15T05:43:03.284Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 3197324, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-15T14:17:31.350Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-15T14:17:31.350Z", 
            "actor": {
                "username": "becojo", 
                "url": "/becojo", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/098/231/bab189fc2f29363f1dcb2449f16a61ef701fe51e_medium.jpg?1532551469"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 3199260, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-15T14:17:31.460Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-15T14:17:31.460Z", 
            "actor": {
                "username": "becojo", 
                "url": "/becojo", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/098/231/bab189fc2f29363f1dcb2449f16a61ef701fe51e_medium.jpg?1532551469"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 3199261, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "old_scope": "Other module", 
            "created_at": "2018-08-16T04:15:06.682Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-16T04:15:06.682Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "new_scope": "flintcms", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ChangedScope", 
            "id": 3201741, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "becojo", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/becojo", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/098/231/457497fb126925acff52c09bf719b49de2bd79d5_small.jpg?1532551469"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 75, 
        "name": "Privilege Escalation"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -7230890.219939406, 
    "disclosed_at": "2018-08-15T14:17:31.426Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/386807", 
    "created_at": "2018-07-25T20:41:49.826Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>I would like to report a privilege escalation vulnerability in flintcms.<br>\nIt allows to reset a known user password, extract its password reset token and reset its password to then access the account.</p>\n\n<h1 id=\"module\">Module</h1>\n\n<p><strong>module name:</strong> flintcms<br>\n<strong>version:</strong> v.1.1.9<br>\n<strong>npm page:</strong> <code>https://www.npmjs.com/package/flintcms</code></p>\n\n<h2 id=\"module-description\">Module Description</h2>\n\n<p>Flint is a CMS built to be easy to use and super flexible. Your content needs to fit into more layouts and environments than anyone but you can plan for, so Flint enables you to make the templates you need and fill it with your content. It&#39;s a CMS that is built for those who want to fully design the front-end of their website without wanting to deal with static site generators or older content management systems (that are slow and use outdated technology).</p>\n\n<h2 id=\"module-stats\">Module Stats</h2>\n\n<p>7 downloads in the last week</p>\n\n<h1 id=\"vulnerability\">Vulnerability</h1>\n\n<h2 id=\"vulnerability-description\">Vulnerability Description</h2>\n\n<p>The vulnerability is caused by the lack of user input sanitization in the route that verifies the password reset token. The value from the parameter is directly sent to the Mongoose API which allows a user to insert MongoDB query operators. These operators can be used to extract the value of the field <u>blindly</u> in the same manner of a blind SQL injection. In this case, the <code>$regex</code> operator is used to guess each character of the token from the start.</p>\n\n<p>Vulnerable code:</p>\n<pre class=\"highlight javascript\"><code>  <span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/verify&#39;</span><span class=\"p\">,</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">t</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">findOne</span><span class=\"p\">({</span> <span class=\"nx\">token</span> <span class=\"p\">})</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">redirect</span><span class=\"p\">(</span><span class=\"s1\">&#39;/admin&#39;</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">redirect</span><span class=\"p\">(</span><span class=\"s2\">`/admin/sp/</span><span class=\"p\">${</span><span class=\"nx\">token</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n</code></pre>\n<p>You can tell the different behavior when visiting these pages (assuming one of the user has reset their password):</p>\n\n<ul>\n<li>\n<a title=\"http://localhost:4000/admin/verify?t%5B$ne%5D=something\" href=\"/redirect?signature=0c04f76f18cf205f27b1a1fbfcbcf5d82c36813b&amp;url=http%3A%2F%2Flocalhost%3A4000%2Fadmin%2Fverify%3Ft%255B%24ne%255D%3Dsomething\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://localhost:4000/admin/verify?t%5B$ne%5D=something</span><i class=\"icon-external-link\"></i></a> redirects to <a title=\"http://localhost:4000/admin/sp/%5Bobject%20Object%5D\" href=\"/redirect?signature=8b81a4d466d1f2340a6d7b35621bd23dd7096b6e&amp;url=http%3A%2F%2Flocalhost%3A4000%2Fadmin%2Fsp%2F%255Bobject%2520Object%255D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://localhost:4000/admin/sp/%5Bobject%20Object%5D</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>While <a title=\"http://localhost:4000/admin/verify?t%5B$eq%5D=something\" href=\"/redirect?signature=8aa74b9c01110b3476dd1775b19b022ee217698e&amp;url=http%3A%2F%2Flocalhost%3A4000%2Fadmin%2Fverify%3Ft%255B%24eq%255D%3Dsomething\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://localhost:4000/admin/verify?t%5B$eq%5D=something</span><i class=\"icon-external-link\"></i></a> redirects to <a title=\"http://localhost:4000/admin/login?p=/admin/\" href=\"/redirect?signature=b32636d142cd00c34435c227b2b4af01b5629e68&amp;url=http%3A%2F%2Flocalhost%3A4000%2Fadmin%2Flogin%3Fp%3D%2Fadmin%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://localhost:4000/admin/login?p=/admin/</span><i class=\"icon-external-link\"></i></a>\n</li>\n</ul>\n\n<p>To take over an account, the following are required:</p>\n\n<ol>\n<li>Reset the password of the targeted account (the email of the target user must be know)</li>\n<li>Use the password reset page to extract the token using the blind MongoDB injection</li>\n<li>Use the token to reset the password and log in </li>\n</ol>\n\n<hr>\n\n<p>To lift the requirements to know the email, it is also possible to find the emails of the users because the password reset form is also vulnerable to blind MongoDB injection. In the same manner as previously, each character of the email can be guessed using the <code>$regex</code> MongoDB operator.</p>\n\n<p>Vulnerable code:</p>\n<pre class=\"highlight javascript\"><code>  <span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">&#39;/forgotpassword&#39;</span><span class=\"p\">,</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">email</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">findOne</span><span class=\"p\">({</span> <span class=\"nx\">email</span> <span class=\"p\">})</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">400</span><span class=\"p\">).</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"s1\">&#39;There is no user with that email.&#39;</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// [...]</span>\n</code></pre>\n<h2 id=\"steps-to-reproduce\">Steps To Reproduce:</h2>\n\n<ol>\n<li>Follow the install guide <a title=\"https://flintcms.co/docs/installation/\" href=\"/redirect?signature=d4ef57b92d8e7d6c3415e37c5b180f9594dce1b5&amp;url=https%3A%2F%2Fflintcms.co%2Fdocs%2Finstallation%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://flintcms.co/docs/installation/</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>Create the admin user at <a title=\"http://localhost:4000/admin/install\" href=\"/redirect?signature=da2b087028c7523c3827289859043b785081137d&amp;url=http%3A%2F%2Flocalhost%3A4000%2Fadmin%2Finstall\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://localhost:4000/admin/install</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>Log out</li>\n<li>Proceed to reset the password of the admin. Let&#39;s say the email configured was <code>admin@localhost.com</code>\n</li>\n<li>Run the provided Python script</li>\n<li>Visit the reset URL that the script finds</li>\n<li>Reset the user password</li>\n<li>You are now logged in</li>\n</ol>\n\n<h2 id=\"patch\">Patch</h2>\n\n<p>The request parameters should be converted to string before being sent to the Mongoose API. Adding <code>.toString()</code> to the parameters should be enough to prevent objects being passed to Mongoose. For example:</p>\n<pre class=\"highlight javascript\"><code>    <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">email</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">findOne</span><span class=\"p\">({</span> <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"nx\">email</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">()</span> <span class=\"p\">})</span>\n</code></pre><pre class=\"highlight javascript\"><code>    <span class=\"kr\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">()</span>\n</code></pre>\n<p>Further sanitization should be added to other endpoints. </p>\n\n<h2 id=\"supporting-material-references\">Supporting Material/References:</h2>\n\n<ul>\n<li>Ubuntu 16.04.3 LTS</li>\n<li>v8.4.0</li>\n<li>5.3.0</li>\n<li>For the script: Python 2.7.12 and the <code>requests</code> package</li>\n</ul>\n\n<h1 id=\"wrap-up\">Wrap up</h1>\n\n<ul>\n<li>I contacted the maintainer to let them know: N</li>\n<li>I opened an issue in the related repository: N</li>\n</ul>\n\n<h2 id=\"impact\">Impact</h2>\n\n<p>An attacker could take over the website, delete data or server malicious content.</p>\n", 
    "severity_rating": "critical", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://nodejs.org/en/security/", 
            "about": "This program is used to handle vulnerabilities in the Node.js ecosystem.", 
            "twitter_handle": "", 
            "name": "Node.js third-party modules"
        }, 
        "handle": "nodejs-ecosystem", 
        "url": "https://hackerone.com/nodejs-ecosystem", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/023/949/309112251b444244d95977d1299148aae6482789_small.?1508679627", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/023/949/c1f5f15ac094c1327c13dd19f55dbcb7411272bd_medium.?1508679627"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 23949, 
        "default_currency": "usd"
    }, 
    "is_published": false
}