{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2018-06-04T17:42:54.496Z", 
    "voters": [
        "europa", 
        "kapytein", 
        "emitrani", 
        "eveeez", 
        "grampae", 
        "an0nym0us", 
        "dz_samir", 
        "ifrahiman", 
        "apapedulimu", 
        "japz", 
        "and 5 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 361341, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-06-04T17:30:23.624Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Unsafe deserialization in Libera Pay allows to escalate a SQL injection to Remote Command Execution", 
    "is_member_of_team?": null, 
    "vote_count": 15, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 7614, 
            "content": "This issue is only exploitable in case of a SQL injection. In the first case, I thought that this was not exploitable due to the fact that there were certain username restrictions. I removed them, took a closer look, and later noticed that this was not exploitable because of other reasons, as further explained in my second comment on this report. (or maybe you actually find a way to exploit this? :D).\n\nI visualized my observations, which made me conclude that this is not exploitable.\n{F305081}", 
            "content_html": "<p>This issue is only exploitable in case of a SQL injection. In the first case, I thought that this was not exploitable due to the fact that there were certain username restrictions. I removed them, took a closer look, and later noticed that this was not exploitable because of other reasons, as further explained in my second comment on this report. (or maybe you actually find a way to exploit this? :D).</p>\n\n<p>I visualized my observations, which made me conclude that this is not exploitable.<br>\n<a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"IVIF3zD.jpg\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/305/081/ffbf0059440425d7f2c3b9efb0a9771cacc85d40/IVIF3zD.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ5B43OTPE%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T222312Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDCiDARkX3ArKGaO7%2ByK3A39tqjzyooRkX4qPdNM7MkAemep3r5%2Fh%2B11ZdH6KbZ8q2cgU%2FRMODKRq75fJ6sn%2FkR1fBrPaMFfKsP%2BSLpkSrkbyi968FqbmO6yo59Heb3d1kDMwzaNShj3ou%2Fq9qAc5NWgXlxJtABJqkgxPd5NovxMOsASin8kfBjU8OhOOEnonvd2t16oF509MVoA81P%2Frmr4njIb3UfHzYyccuDQNjHM0qV7B57bCKQeIuO%2FzLl7au%2FWR2v6R6bwK6fGUYVbcnAam9GqobWJnMl6NFbipNSdmUzB5%2BglRYaYeGXxbgxseM7SSFeehfzbywUoHEf4Ve61V1e90uyx3M0Krbm5QjS5gNgwErj0g2rC2mkrl2q%2B9ADfOzgMAX8fUODFalEv4gZf0ZKuLhpmAzEapJE5f%2BarcSkdn5b0ddy4Wa2vdsZ6lQ5NOez8qkcnaBEJZLnv3YGHyInLrIaUkqlq4iavZpr4f5Al5PueqIzLuItn5ztJjfvCu5dDIplWP0eo6r%2BIUCKsDwUNkRSgWCtJbCfl%2BPF3PKHjvnmVEBawLZlpXvaOGUvA%2FKYb2cGGXn89CPjYlwpWCj2J8Z%2B0okbim4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=a940040a8a0f0cc3cad970597201231e19380dd7720f9b9a2d74ccd640f04ac3\" data-attachment-type=\"image/jpeg\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/305/081/ffbf0059440425d7f2c3b9efb0a9771cacc85d40/IVIF3zD.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ5B43OTPE%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T222312Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDCiDARkX3ArKGaO7%2ByK3A39tqjzyooRkX4qPdNM7MkAemep3r5%2Fh%2B11ZdH6KbZ8q2cgU%2FRMODKRq75fJ6sn%2FkR1fBrPaMFfKsP%2BSLpkSrkbyi968FqbmO6yo59Heb3d1kDMwzaNShj3ou%2Fq9qAc5NWgXlxJtABJqkgxPd5NovxMOsASin8kfBjU8OhOOEnonvd2t16oF509MVoA81P%2Frmr4njIb3UfHzYyccuDQNjHM0qV7B57bCKQeIuO%2FzLl7au%2FWR2v6R6bwK6fGUYVbcnAam9GqobWJnMl6NFbipNSdmUzB5%2BglRYaYeGXxbgxseM7SSFeehfzbywUoHEf4Ve61V1e90uyx3M0Krbm5QjS5gNgwErj0g2rC2mkrl2q%2B9ADfOzgMAX8fUODFalEv4gZf0ZKuLhpmAzEapJE5f%2BarcSkdn5b0ddy4Wa2vdsZ6lQ5NOez8qkcnaBEJZLnv3YGHyInLrIaUkqlq4iavZpr4f5Al5PueqIzLuItn5ztJjfvCu5dDIplWP0eo6r%2BIUCKsDwUNkRSgWCtJbCfl%2BPF3PKHjvnmVEBawLZlpXvaOGUvA%2FKYb2cGGXn89CPjYlwpWCj2J8Z%2B0okbim4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=a940040a8a0f0cc3cad970597201231e19380dd7720f9b9a2d74ccd640f04ac3\" class=\"markdown-inline-image\"></a></p>\n"
        }
    ], 
    "structured_scope": {
        "asset_identifier": "https://github.com/liberapay/liberapay.com", 
        "max_severity": "critical", 
        "databaseId": 8927, 
        "asset_type": "SOURCE_CODE"
    }, 
    "allow_singular_disclosure_at": "2018-07-04T17:30:23.719Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2018-06-03T13:40:51.452Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-03T13:40:51.452Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "liberapay", 
            "message": "Thank you for your submission! I am currently reviewing your report.", 
            "markdown_message": "<p>Thank you for your submission! I am currently reviewing your report.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2835497, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-06-03T13:49:36.763Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-03T13:49:36.763Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "liberapay", 
            "message": "We are triaging this report to indicate that we have reviewed your report and are working on constructing a proof of concept locally.", 
            "markdown_message": "<p>We are triaging this report to indicate that we have reviewed your report and are working on constructing a proof of concept locally.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 2835516, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-06-04T09:59:49.517Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-04T09:59:49.517Z", 
            "actor": {
                "username": "changaco", 
                "url": "/changaco", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/057/214/cc8d435848b731655b95ddf182cb51f6bb70a856_medium.png?1506425096"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "liberapay", 
            "message": "This potential vulnerability, which we were already aware of, now has a ticket in our public issue tracker: <https://github.com/liberapay/liberapay.com/issues/1132>.", 
            "markdown_message": "<p>This potential vulnerability, which we were already aware of, now has a ticket in our public issue tracker: <a title=\"https://github.com/liberapay/liberapay.com/issues/1132\" href=\"/redirect?signature=5d9e6b54db13d66c0bc7ceaeb0c3b3bf0467fcd6&amp;url=https%3A%2F%2Fgithub.com%2Fliberapay%2Fliberapay.com%2Fissues%2F1132\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/liberapay/liberapay.com/issues/1132</span><i class=\"icon-external-link\"></i></a>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2838284, 
            "genius_execution_id": null
        }, 
        {
            "attachments": [
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/305/081/ffbf0059440425d7f2c3b9efb0a9771cacc85d40/IVIF3zD.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ5B43OTPE%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T222312Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDCiDARkX3ArKGaO7%2ByK3A39tqjzyooRkX4qPdNM7MkAemep3r5%2Fh%2B11ZdH6KbZ8q2cgU%2FRMODKRq75fJ6sn%2FkR1fBrPaMFfKsP%2BSLpkSrkbyi968FqbmO6yo59Heb3d1kDMwzaNShj3ou%2Fq9qAc5NWgXlxJtABJqkgxPd5NovxMOsASin8kfBjU8OhOOEnonvd2t16oF509MVoA81P%2Frmr4njIb3UfHzYyccuDQNjHM0qV7B57bCKQeIuO%2FzLl7au%2FWR2v6R6bwK6fGUYVbcnAam9GqobWJnMl6NFbipNSdmUzB5%2BglRYaYeGXxbgxseM7SSFeehfzbywUoHEf4Ve61V1e90uyx3M0Krbm5QjS5gNgwErj0g2rC2mkrl2q%2B9ADfOzgMAX8fUODFalEv4gZf0ZKuLhpmAzEapJE5f%2BarcSkdn5b0ddy4Wa2vdsZ6lQ5NOez8qkcnaBEJZLnv3YGHyInLrIaUkqlq4iavZpr4f5Al5PueqIzLuItn5ztJjfvCu5dDIplWP0eo6r%2BIUCKsDwUNkRSgWCtJbCfl%2BPF3PKHjvnmVEBawLZlpXvaOGUvA%2FKYb2cGGXn89CPjYlwpWCj2J8Z%2B0okbim4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a940040a8a0f0cc3cad970597201231e19380dd7720f9b9a2d74ccd640f04ac3", 
                    "type": "image/jpeg", 
                    "id": 305081, 
                    "filename": "IVIF3zD.jpg"
                }
            ], 
            "automated_response": false, 
            "created_at": "2018-06-04T11:36:40.828Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-04T11:43:46.543Z", 
            "actor": {
                "username": "kapytein", 
                "url": "/kapytein", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/193/843/c3ee82e4a5c3b606b17561edb1d106c30a41f652_medium.jpg?1539423526"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "liberapay", 
            "message": "Basically, what is happening currently, is the folllowing:\n\n{F305081}\n\n(Visualized to keep things simple, and clear)\n\nThis does not seem to be exploitable directly, even when you remove the name restrictions locally (my assumptions stated in the report were wrong). Given the fact that you `binascii.hexlify()` the data in the `serialize` function, the data stays a `bytes` object and thus will be loaded as a `bytes` object via pickle.\n\n**In which cases is this exploitable?**\n\n1. Calling the `deserialize` function directly on input which is not (verified to be) serialized before.\n2. A SQL injection.\n\nI haven't been able to find both potential issues in your code, making this unexploitable directly and thus more a theoretical risk. When an error is made, and non-verified serialized input is taken into, for example, the context field of the table notifications through the `notify` function, this will be immediate exploitable. However, I don't think that could happen too quickly. You are basically currently controlling what object is loaded by `pickle`, making it save unless errors are being made.\n\nIt was interesting to investigate this issue, and I've learnt a lot from it. As discussed with @edoverflow via Slack, I'd love to self-close this issue to avoid losing reputation/signal due to the informative/N/A report state (in order to self-close this report, I need you to re-open the report to the New or Needs More Info state).\n\nThank you!", 
            "markdown_message": "<p>Basically, what is happening currently, is the folllowing:</p>\n\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"IVIF3zD.jpg\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/305/081/ffbf0059440425d7f2c3b9efb0a9771cacc85d40/IVIF3zD.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ5B43OTPE%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T222312Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDCiDARkX3ArKGaO7%2ByK3A39tqjzyooRkX4qPdNM7MkAemep3r5%2Fh%2B11ZdH6KbZ8q2cgU%2FRMODKRq75fJ6sn%2FkR1fBrPaMFfKsP%2BSLpkSrkbyi968FqbmO6yo59Heb3d1kDMwzaNShj3ou%2Fq9qAc5NWgXlxJtABJqkgxPd5NovxMOsASin8kfBjU8OhOOEnonvd2t16oF509MVoA81P%2Frmr4njIb3UfHzYyccuDQNjHM0qV7B57bCKQeIuO%2FzLl7au%2FWR2v6R6bwK6fGUYVbcnAam9GqobWJnMl6NFbipNSdmUzB5%2BglRYaYeGXxbgxseM7SSFeehfzbywUoHEf4Ve61V1e90uyx3M0Krbm5QjS5gNgwErj0g2rC2mkrl2q%2B9ADfOzgMAX8fUODFalEv4gZf0ZKuLhpmAzEapJE5f%2BarcSkdn5b0ddy4Wa2vdsZ6lQ5NOez8qkcnaBEJZLnv3YGHyInLrIaUkqlq4iavZpr4f5Al5PueqIzLuItn5ztJjfvCu5dDIplWP0eo6r%2BIUCKsDwUNkRSgWCtJbCfl%2BPF3PKHjvnmVEBawLZlpXvaOGUvA%2FKYb2cGGXn89CPjYlwpWCj2J8Z%2B0okbim4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=a940040a8a0f0cc3cad970597201231e19380dd7720f9b9a2d74ccd640f04ac3\" data-attachment-type=\"image/jpeg\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/305/081/ffbf0059440425d7f2c3b9efb0a9771cacc85d40/IVIF3zD.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ5B43OTPE%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T222312Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDCiDARkX3ArKGaO7%2ByK3A39tqjzyooRkX4qPdNM7MkAemep3r5%2Fh%2B11ZdH6KbZ8q2cgU%2FRMODKRq75fJ6sn%2FkR1fBrPaMFfKsP%2BSLpkSrkbyi968FqbmO6yo59Heb3d1kDMwzaNShj3ou%2Fq9qAc5NWgXlxJtABJqkgxPd5NovxMOsASin8kfBjU8OhOOEnonvd2t16oF509MVoA81P%2Frmr4njIb3UfHzYyccuDQNjHM0qV7B57bCKQeIuO%2FzLl7au%2FWR2v6R6bwK6fGUYVbcnAam9GqobWJnMl6NFbipNSdmUzB5%2BglRYaYeGXxbgxseM7SSFeehfzbywUoHEf4Ve61V1e90uyx3M0Krbm5QjS5gNgwErj0g2rC2mkrl2q%2B9ADfOzgMAX8fUODFalEv4gZf0ZKuLhpmAzEapJE5f%2BarcSkdn5b0ddy4Wa2vdsZ6lQ5NOez8qkcnaBEJZLnv3YGHyInLrIaUkqlq4iavZpr4f5Al5PueqIzLuItn5ztJjfvCu5dDIplWP0eo6r%2BIUCKsDwUNkRSgWCtJbCfl%2BPF3PKHjvnmVEBawLZlpXvaOGUvA%2FKYb2cGGXn89CPjYlwpWCj2J8Z%2B0okbim4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=a940040a8a0f0cc3cad970597201231e19380dd7720f9b9a2d74ccd640f04ac3\" class=\"markdown-inline-image\"></a></p>\n\n<p>(Visualized to keep things simple, and clear)</p>\n\n<p>This does not seem to be exploitable directly, even when you remove the name restrictions locally (my assumptions stated in the report were wrong). Given the fact that you <code>binascii.hexlify()</code> the data in the <code>serialize</code> function, the data stays a <code>bytes</code> object and thus will be loaded as a <code>bytes</code> object via pickle.</p>\n\n<p><strong>In which cases is this exploitable?</strong></p>\n\n<ol>\n<li>Calling the <code>deserialize</code> function directly on input which is not (verified to be) serialized before.</li>\n<li>A SQL injection.</li>\n</ol>\n\n<p>I haven&#39;t been able to find both potential issues in your code, making this unexploitable directly and thus more a theoretical risk. When an error is made, and non-verified serialized input is taken into, for example, the context field of the table notifications through the <code>notify</code> function, this will be immediate exploitable. However, I don&#39;t think that could happen too quickly. You are basically currently controlling what object is loaded by <code>pickle</code>, making it save unless errors are being made.</p>\n\n<p>It was interesting to investigate this issue, and I&#39;ve learnt a lot from it. As discussed with <a href=\"/edoverflow\">@edoverflow</a> via Slack, I&#39;d love to self-close this issue to avoid losing reputation/signal due to the informative/N/A report state (in order to self-close this report, I need you to re-open the report to the New or Needs More Info state).</p>\n\n<p>Thank you!</p>\n", 
            "type": "Activities::Comment", 
            "id": 2838506, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "kapytein", 
                "url": "/kapytein"
            }, 
            "created_at": "2018-06-04T12:39:14.189Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-04T12:39:14.189Z", 
            "actor": {
                "username": "changaco", 
                "url": "/changaco", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/057/214/cc8d435848b731655b95ddf182cb51f6bb70a856_medium.png?1506425096"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "liberapay", 
            "message": "@kapytein In recognition of the quality of your report I am closing it as Resolved to reward you with reputation points. :-)", 
            "markdown_message": "<p><a href=\"/kapytein\">@kapytein</a> In recognition of the quality of your report I am closing it as Resolved to reward you with reputation points. :-)</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 2838673, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-06-04T17:29:53.943Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-04T17:29:53.943Z", 
            "actor": {
                "url": "/liberapay", 
                "profile": {
                    "name": "Liberapay"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/028/411/eb1bc1321b1b84c9057c721f5705b51a93438fe2_medium.?1524732576"
                }
            }, 
            "team_handle": "liberapay", 
            "message": "The vulnerability is not exploitable.", 
            "markdown_message": "<p>The vulnerability is not exploitable.</p>\n", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 2840084, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-06-04T17:30:23.667Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-04T17:30:23.667Z", 
            "actor": {
                "username": "changaco", 
                "url": "/changaco", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/057/214/cc8d435848b731655b95ddf182cb51f6bb70a856_medium.png?1506425096"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "liberapay", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2840086, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-06-04T17:42:54.530Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-04T17:42:54.530Z", 
            "actor": {
                "username": "kapytein", 
                "url": "/kapytein", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/193/843/c3ee82e4a5c3b606b17561edb1d106c30a41f652_medium.jpg?1539423526"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "liberapay", 
            "message": "Sure, let's go for disclosure. Totally agree that no bounty is awarded.", 
            "markdown_message": "<p>Sure, let&#39;s go for disclosure. Totally agree that no bounty is awarded.</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2840154, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-06-04T17:42:54.628Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-04T17:42:54.628Z", 
            "actor": {
                "username": "kapytein", 
                "url": "/kapytein", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/193/843/c3ee82e4a5c3b606b17561edb1d106c30a41f652_medium.jpg?1539423526"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "liberapay", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2840155, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "kapytein", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/kapytein", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/193/843/3661c0c23b292e7889e3e10710671e7d7ab03aa3_small.jpg?1539423526"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 52, 
        "name": "Deserialization of Untrusted Data"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -13409568.235109245, 
    "disclosed_at": "2018-06-04T17:42:54.585Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/361341", 
    "created_at": "2018-06-03T13:37:46.400Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hello.</p>\n\n<p>There isn&#39;t a direct vulnerability, however a SQL injection would easily be escalated to a Remote Code Execution. I can&#39;t directly exploit it due to the restriction on team names (it does not accept hexdecimal values). I, however, submit this issue in advance and will attempt to escalate this issue further, if possible together with you.</p>\n\n<p><strong>Vulnerability details</strong></p>\n\n<p>The vulnerability relies in the serializer &amp; deserializier used for notifications of users. It is using <a href=\"/redirect?signature=b616aac6f446a6d75aafe4a319fb5b847cd57bfd&amp;url=https%3A%2F%2Fgithub.com%2Fliberapay%2Fliberapay.com%2Fblob%2F8546e2212f08f0d0ad71008ccf679744c3e8fb81%2Fliberapay%2Futils%2F__init__.py%23L370\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>pickles</span><i class=\"icon-external-link\"></i></a>, which is known to be unsafe. You can basically craft any object, and pickles will happily execute the object. This allows unsafe deserialization, which could lead to Remote Code Execution.</p>\n\n<p>In this case, as far as I have seen, it is used for notifications. As far as I have seen, the deserializer is only used to render notifications, in <code>render_notifications</code>, as seen <a href=\"/redirect?signature=edc5a73728385dd6e18aa8fe4760b88f2dafdf38&amp;url=https%3A%2F%2Fgithub.com%2Fliberapay%2Fliberapay.com%2Fblob%2F8546e2212f08f0d0ad71008ccf679744c3e8fb81%2Fliberapay%2Fmodels%2Fparticipant.py%23L1083\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>here</span><i class=\"icon-external-link\"></i></a>. </p>\n<pre class=\"highlight python\"><code>  <span class=\"k\">for</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">notif_context</span><span class=\"p\">,</span> <span class=\"n\">is_new</span><span class=\"p\">,</span> <span class=\"n\">ts</span> <span class=\"ow\">in</span> <span class=\"n\">notifs</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">notif_context</span> <span class=\"o\">=</span> <span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">notif_context</span><span class=\"p\">)</span>\n</code></pre>\n<p>The <code>render_notifications</code> function is then used on the notifications template page, as seen here:</p>\n<pre class=\"highlight plaintext\"><code>\n# NOTE: don&#39;t factor the render_notifications() call here, it&#39;ll break escaping\n\n[---] application/json via json_dump\nparticipant.render_notifications(state)\n\n[---] text/html\n% extends &quot;templates/base.html&quot;\n</code></pre>\n<p>There is no other place where the deserializer is used, as far as I have seen. The serializer is used in the <code>notify</code> function, as seen <a href=\"/redirect?signature=caceacb4899a3aee17ddec1181b0a2d91cedcd58&amp;url=https%3A%2F%2Fgithub.com%2Fliberapay%2Fliberapay.com%2Fblob%2F9ad0dc79183b052df4e1ca5f23914450991f6888%2Fliberapay%2Fmodels%2Fparticipant.py%23L1010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>here</span><i class=\"icon-external-link\"></i></a>, thus, in the future, whenever unrestrictive input is taken from the user into this function, it will directly allow Remote Code Execution.</p>\n\n<p><strong>Proof of Concept</strong></p>\n\n<ol>\n<li>Invite an user into your team.</li>\n<li>Update the context of the notification in the table notifications, by running the SQL query:</li>\n</ol>\n\n<p>UPDATE notifications SET context = E&#39;\\x80027d710028580400000061736432710158030000006c6f6c71025801000000627103580500000033303030307104580100000063710563706f7369780a73797374656d0a7106580c000000736c656570203530303030307107857108527109752e&#39; WHERE id = 43;`</p>\n\n<ol>\n<li>Log in as the user who is invited to your team, browse to notifications and notices that the sleep command was used (basically, it will hang).</li>\n</ol>\n\n<h2 id=\"impact\">Impact</h2>\n\n<p>This could allow remote code execution if a SQL injection is escalated.</p>\n", 
    "vulnerability_information": "Hello.\n\nThere isn't a direct vulnerability, however a SQL injection would easily be escalated to a Remote Code Execution. I can't directly exploit it due to the restriction on team names (it does not accept hexdecimal values). I, however, submit this issue in advance and will attempt to escalate this issue further, if possible together with you.\n\n**Vulnerability details**\n\nThe vulnerability relies in the serializer & deserializier used for notifications of users. It is using [pickles](https://github.com/liberapay/liberapay.com/blob/8546e2212f08f0d0ad71008ccf679744c3e8fb81/liberapay/utils/__init__.py#L370), which is known to be unsafe. You can basically craft any object, and pickles will happily execute the object. This allows unsafe deserialization, which could lead to Remote Code Execution.\n\nIn this case, as far as I have seen, it is used for notifications. As far as I have seen, the deserializer is only used to render notifications, in `render_notifications`, as seen [here](https://github.com/liberapay/liberapay.com/blob/8546e2212f08f0d0ad71008ccf679744c3e8fb81/liberapay/models/participant.py#L1083). \n\n```python\n  for id, event, notif_context, is_new, ts in notifs:\n            try:\n                notif_context = deserialize(notif_context)\n```\nThe `render_notifications` function is then used on the notifications template page, as seen here:\n\n```\n\n# NOTE: don't factor the render_notifications() call here, it'll break escaping\n\n[---] application/json via json_dump\nparticipant.render_notifications(state)\n\n[---] text/html\n% extends \"templates/base.html\"\n```\n\nThere is no other place where the deserializer is used, as far as I have seen. The serializer is used in the `notify` function, as seen [here](https://github.com/liberapay/liberapay.com/blob/9ad0dc79183b052df4e1ca5f23914450991f6888/liberapay/models/participant.py#L1010), thus, in the future, whenever unrestrictive input is taken from the user into this function, it will directly allow Remote Code Execution.\n\n**Proof of Concept**\n1. Invite an user into your team.\n2. Update the context of the notification in the table notifications, by running the SQL query:\n\nUPDATE notifications SET context = E'\\\\x80027d710028580400000061736432710158030000006c6f6c71025801000000627103580500000033303030307104580100000063710563706f7369780a73797374656d0a7106580c000000736c656570203530303030307107857108527109752e' WHERE id = 43;`\n\n3. Log in as the user who is invited to your team, browse to notifications and notices that the sleep command was used (basically, it will hang).\n\n## Impact\n\nThis could allow remote code execution if a SQL injection is escalated.", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://liberapay.com", 
            "about": "An open source platform designed to facilitate recurrent donations.", 
            "twitter_handle": "liberapay", 
            "name": "Liberapay"
        }, 
        "handle": "liberapay", 
        "url": "https://hackerone.com/liberapay", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/028/411/0782331e0ae0dfac7617ae2c5cc5f275a4a84ebe_small.?1524732576", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/028/411/eb1bc1321b1b84c9057c721f5705b51a93438fe2_medium.?1524732576"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 28411, 
        "default_currency": "usd"
    }, 
    "is_published": false
}