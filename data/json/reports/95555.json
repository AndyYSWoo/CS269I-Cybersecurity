{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-03-12T03:26:50.532Z", 
    "voters": [
        "delimitry", 
        "adn", 
        "kapytein", 
        "hackerhero", 
        "jon_bottarini", 
        "ngalog", 
        "eveeez", 
        "khalidamin", 
        "axolotl", 
        "secgeek", 
        "and 24 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "280.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 95555, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "CSRF on cards API", 
    "is_member_of_team?": null, 
    "vote_count": 34, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 3536, 
            "content": "This report demonstrates a technique to bypass CSRF protection by removing the file extension.\n\nIn short, if posting to `/api/entity.json` doesn't work, try `/api/entity`.", 
            "content_html": "<p>This report demonstrates a technique to bypass CSRF protection by removing the file extension.</p>\n\n<p>In short, if posting to <code>/api/entity.json</code> doesn&#39;t work, try <code>/api/entity</code>.</p>\n"
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-04-11T03:26:50.559Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$280", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-10-27T18:18:16.182Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-27T18:18:16.182Z", 
            "actor": {
                "username": "apinter", 
                "url": "/apinter", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/021/688/9c8f5eee35569248c1d9e6f397d7252b44eeab83_medium.jpg?1431108083"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p>Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 634347, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "filedescriptor", 
                "url": "/filedescriptor"
            }, 
            "created_at": "2015-10-29T17:52:02.216Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-29T17:52:02.216Z", 
            "actor": {
                "username": "apinter", 
                "url": "/apinter", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/021/688/9c8f5eee35569248c1d9e6f397d7252b44eeab83_medium.jpg?1431108083"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "We consider this issue to be fixed now. Can you please confirm?\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p>We consider this issue to be fixed now. Can you please confirm?</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 637236, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-10-30T05:54:04.467Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-30T05:54:04.467Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "That was fast! And I can confirm it is fixed.", 
            "markdown_message": "<p>That was fast! And I can confirm it is fixed.</p>\n", 
            "type": "Activities::Comment", 
            "id": 638016, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-10-30T22:38:03.083Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-30T22:38:03.083Z", 
            "actor": {
                "url": "/twitter", 
                "profile": {
                    "name": "Twitter"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
                }
            }, 
            "team_handle": "twitter", 
            "bounty_amount": "280.0", 
            "collaborator": {
                "username": "filedescriptor", 
                "url": "/filedescriptor"
            }, 
            "message": "Thanks again for helping us keep Twitter safe and secure for our users!", 
            "markdown_message": "<p>Thanks again for helping us keep Twitter safe and secure for our users!</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 639261, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-03-12T03:26:50.546Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-03-12T03:26:50.546Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1535100, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-04-11T03:26:55.166Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-04-11T03:26:55.166Z", 
            "actor": {
                "url": "/twitter", 
                "profile": {
                    "name": "Twitter"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
                }
            }, 
            "team_handle": "twitter", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1603946, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "filedescriptor", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/filedescriptor", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -52254836.64638818, 
    "disclosed_at": "2017-04-11T03:26:55.147Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/95555", 
    "created_at": "2015-10-24T07:48:10.271Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hi,<br>\nI would like to report an CSRF issue on the cards API endpoint (/i/cards/api/v1.json).</p>\n\n<h2 id=\"detail\">Detail</h2>\n\n<p>Currently the endpoint is responsible for poll cards (maybe more to come). When a user votes, a request will be sent to this endpoint to record the user&#39;s selected choice. By default there&#39;s a CSRF protection in place which looks for <em>authenticity_token</em> in the query part of the URI. However, such check only appears for the exact path (<em>/i/cards/api/v1.json</em>). Given that the server seems to relax path extension, attackers can circumvent the protection by using the path <em>/i/cards/api/v1</em> (without .json) for the request.</p>\n\n<p>This is how a normal request looks like:</p>\n<pre class=\"highlight http\"><code><span class=\"nf\">POST</span> <span class=\"nn\">https://twitter.com/i/cards/api/v1.json?tweet_id=657629231309041664&amp;card_name=poll2choice_text_only&amp;forward=false&amp;capi_uri=capi%3A%2F%2Fpassthrough%2F1</span> <span class=\"k\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Host</span><span class=\"p\">:</span> <span class=\"s\">twitter.com</span>\n<span class=\"na\">Cookie</span><span class=\"p\">:</span> <span class=\"s\">foo=bar</span>\n\n{&quot;twitter:string:card_uri&quot;:&quot;card://657629230759415808&quot;,&quot;twitter:long:original_tweet_id&quot;:&quot;657629231309041664&quot;,&quot;twitter:string:selected_choice&quot;:&quot;2&quot;}\n</code></pre>\n<p>without providing a valid CSRF token, it will return a HTTP 403 error.<br>\nNow that we trim the extension part (<strong>v1.json</strong> to <strong>v1</strong>) and resend it:</p>\n<pre class=\"highlight http\"><code><span class=\"nf\">POST</span> <span class=\"nn\">https://twitter.com/i/cards/api/v1?tweet_id=657629231309041664&amp;card_name=poll2choice_text_only&amp;forward=false&amp;capi_uri=capi%3A%2F%2Fpassthrough%2F1</span> <span class=\"k\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"na\">Host</span><span class=\"p\">:</span> <span class=\"s\">twitter.com</span>\n<span class=\"na\">Cookie</span><span class=\"p\">:</span> <span class=\"s\">foo=bar</span>\n\n{&quot;twitter:string:card_uri&quot;:&quot;card://657629230759415808&quot;,&quot;twitter:long:original_tweet_id&quot;:&quot;657629231309041664&quot;,&quot;twitter:string:selected_choice&quot;:&quot;2&quot;}\n</code></pre>\n<p>it still lacks the CSRF token, but this time it returns HTTP 200 and the vote is successfully made.<br>\nAll in all, attackers can abuse it and make victims to vote without noticing.</p>\n\n<h1 id=\"poc\">PoC</h1>\n\n<p>Here&#39;s a handy tool to CSRF any poll. You may also just intercept the vote request to validate the issue.</p>\n\n<ol>\n<li>Go to <a title=\"http://innerht.ml/pocs/twitter-cards-csrf/\" href=\"/redirect?signature=8ebf22755287a49615f1286b49b616da4ac0ef4c&amp;url=http%3A%2F%2Finnerht.ml%2Fpocs%2Ftwitter-cards-csrf%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://innerht.ml/pocs/twitter-cards-csrf/</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>Fill in the poll card&#39;s information you want to CSRF (e.g. for <a title=\"https://twitter.com/Bugcrowd/status/657629231309041664\" href=\"/redirect?signature=87b26e71695e481259e41fedaa1281598607bed3&amp;url=https%3A%2F%2Ftwitter.com%2FBugcrowd%2Fstatus%2F657629231309041664\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://twitter.com/Bugcrowd/status/657629231309041664</span><i class=\"icon-external-link\"></i></a> the parameters are\ntweet_id: 657629231309041664, card_uri: card://657629230759415808, selected_choice: 2)</li>\n<li>Click the button to activate the attacke. Of course the whole process can be silent.</li>\n</ol>\n", 
    "vulnerability_information": "Hi,\nI would like to report an CSRF issue on the cards API endpoint (/i/cards/api/v1.json).\n\n##Detail\nCurrently the endpoint is responsible for poll cards (maybe more to come). When a user votes, a request will be sent to this endpoint to record the user's selected choice. By default there's a CSRF protection in place which looks for *authenticity_token* in the query part of the URI. However, such check only appears for the exact path (*/i/cards/api/v1.json*). Given that the server seems to relax path extension, attackers can circumvent the protection by using the path */i/cards/api/v1* (without .json) for the request.\n\nThis is how a normal request looks like:\n```http\nPOST https://twitter.com/i/cards/api/v1.json?tweet_id=657629231309041664&card_name=poll2choice_text_only&forward=false&capi_uri=capi%3A%2F%2Fpassthrough%2F1 HTTP/1.1\nHost: twitter.com\nCookie: foo=bar\n\n{\"twitter:string:card_uri\":\"card://657629230759415808\",\"twitter:long:original_tweet_id\":\"657629231309041664\",\"twitter:string:selected_choice\":\"2\"}\n```\n\nwithout providing a valid CSRF token, it will return a HTTP 403 error.\nNow that we trim the extension part (**v1.json** to **v1**) and resend it:\n```http\nPOST https://twitter.com/i/cards/api/v1?tweet_id=657629231309041664&card_name=poll2choice_text_only&forward=false&capi_uri=capi%3A%2F%2Fpassthrough%2F1 HTTP/1.1\nHost: twitter.com\nCookie: foo=bar\n\n{\"twitter:string:card_uri\":\"card://657629230759415808\",\"twitter:long:original_tweet_id\":\"657629231309041664\",\"twitter:string:selected_choice\":\"2\"}\n```\n\nit still lacks the CSRF token, but this time it returns HTTP 200 and the vote is successfully made.\nAll in all, attackers can abuse it and make victims to vote without noticing.\n\n#PoC\nHere's a handy tool to CSRF any poll. You may also just intercept the vote request to validate the issue.\n1. Go to http://innerht.ml/pocs/twitter-cards-csrf/\n2. Fill in the poll card's information you want to CSRF (e.g. for https://twitter.com/Bugcrowd/status/657629231309041664 the parameters are\ntweet_id: 657629231309041664, card_uri: card://657629230759415808, selected_choice: 2)\n3. Click the button to activate the attacke. Of course the whole process can be silent.", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://twitter.com", 
            "about": "Twitter helps you create and share ideas and information instantly, without barriers.", 
            "twitter_handle": "twittersecurity", 
            "name": "Twitter"
        }, 
        "handle": "twitter", 
        "url": "https://hackerone.com/twitter", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/061/4acfe72859c5e9cb48a152edb4e498e13fa28df2_small.?1439954730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 61, 
        "default_currency": "usd"
    }, 
    "is_published": false
}