{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "martijn", 
        "dyabla"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 150018, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-07-08T14:55:13.806Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Full Path Disclosure by removing CSRF token", 
    "is_member_of_team?": null, 
    "vote_count": 2, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Informative", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-07-08T14:55:08.237Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-08T14:55:08.237Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "There's definitely a bug here, which I will promptly fix, but not a vulnerability.\n\nTo clarify: I generally don't consider \"full path disclosure\" to be a *security vulnerability* in and of itself. They can be useful with a vulnerability (i.e. SQLi + FPD + `INTO OUTFILE` = reverse shell), but don't really give an attacker much that they couldn't infer from trial and error.\n\nI almost always use some variant of `/var/www/projectname/public_html` for document roots. In CSPR.NG's case, it's `/var/www/csprng/src/public`. Our company's website is in `/var/www/paragonie/public`. And so on)\n\nThis bug is only going to be triggered by debug mode being enabled (which it is, on CSPR.NG). Even without the existence of this bug, the full path disclosure is still going to happen from the debug mode stack trace caused by the exception being thrown.\n\nWhen debug mode is off, the exception isn't thrown. Instead, the `$this->post()` call simply returns false and the POST data is ignored completely.\n\nThanks for taking the time to poke around Airship.", 
            "markdown_message": "<p>There&#39;s definitely a bug here, which I will promptly fix, but not a vulnerability.</p>\n\n<p>To clarify: I generally don&#39;t consider &quot;full path disclosure&quot; to be a <em>security vulnerability</em> in and of itself. They can be useful with a vulnerability (i.e. SQLi + FPD + <code>INTO OUTFILE</code> = reverse shell), but don&#39;t really give an attacker much that they couldn&#39;t infer from trial and error.</p>\n\n<p>I almost always use some variant of <code>/var/www/projectname/public_html</code> for document roots. In CSPR.NG&#39;s case, it&#39;s <code>/var/www/csprng/src/public</code>. Our company&#39;s website is in <code>/var/www/paragonie/public</code>. And so on)</p>\n\n<p>This bug is only going to be triggered by debug mode being enabled (which it is, on CSPR.NG). Even without the existence of this bug, the full path disclosure is still going to happen from the debug mode stack trace caused by the exception being thrown.</p>\n\n<p>When debug mode is off, the exception isn&#39;t thrown. Instead, the <code>$this-&gt;post()</code> call simply returns false and the POST data is ignored completely.</p>\n\n<p>Thanks for taking the time to poke around Airship.</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 1059637, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-08T14:55:13.843Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-08T14:55:13.843Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1059638, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-08T15:13:02.109Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-08T15:13:02.109Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 1059686, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-08T15:27:14.590Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-08T15:27:14.590Z", 
            "actor": {
                "username": "velby", 
                "url": "/velby", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "Yup I agree, glad I could help, I'll poke around a bit more if I have the time", 
            "markdown_message": "<p>Yup I agree, glad I could help, I&#39;ll poke around a bit more if I have the time</p>\n", 
            "type": "Activities::Comment", 
            "id": 1059723, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "velby", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/velby", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 18, 
        "name": "Information Disclosure"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2016-07-08T15:13:02.182Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/150018", 
    "created_at": "2016-07-08T14:38:36.558Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hello, you can get an error and full path disclosure by following these steps:<br>\non any user generated POST request (such as during login, or changing user data) remove the CSRF token from the post request entirely. For example, on the login POST request,</p>\n\n<p>_CSRF_TOKEN=WqXB7vmysdM06gBarWZiNfnZ%3AOMznb0rVagzWr41P_h_N2Qj50LwPV2HZxKyJxR17lB6b&amp;username=zrgzrgzerg&amp;passphrase=sergsergsergrg&amp;two_factor=</p>\n\n<p>Becomes</p>\n\n<p>username=zrgzrgzerg&amp;passphrase=sergsergsergrg&amp;two_factor=</p>\n\n<p>We get the following error with a full path disclosure:</p>\n\n<p>&lt;br /&gt;<br>\n&lt;b&gt;Notice&lt;/b&gt;:  Undefined variable: ex in &lt;b&gt;/var/www/csprng/src/public/index.php&lt;/b&gt; on line &lt;b&gt;160&lt;/b&gt;&lt;br /&gt;<br>\n&lt;br /&gt;<br>\n&lt;b&gt;Fatal error&lt;/b&gt;:  Uncaught Error: Call to a member function getMessage() on null in /var/www/csprng/src/public/index.php:160<br>\nStack trace:<br>\n0 {main}<br>\n  thrown in &lt;b&gt;/var/www/csprng/src/public/index.php&lt;/b&gt; on line &lt;b&gt;160&lt;/b&gt;&lt;br /&gt;</p>\n", 
    "vulnerability_information": "Hello, you can get an error and full path disclosure by following these steps:\non any user generated POST request (such as during login, or changing user data) remove the CSRF token from the post request entirely. For example, on the login POST request,\n\n_CSRF_TOKEN=WqXB7vmysdM06gBarWZiNfnZ%3AOMznb0rVagzWr41P_h_N2Qj50LwPV2HZxKyJxR17lB6b&username=zrgzrgzerg&passphrase=sergsergsergrg&two_factor=\n\nBecomes\n\nusername=zrgzrgzerg&passphrase=sergsergsergrg&two_factor=\n\nWe get the following error with a full path disclosure:\n\n<br />\n<b>Notice</b>:  Undefined variable: ex in <b>/var/www/csprng/src/public/index.php</b> on line <b>160</b><br />\n<br />\n<b>Fatal error</b>:  Uncaught Error: Call to a member function getMessage() on null in /var/www/csprng/src/public/index.php:160\nStack trace:\n0 {main}\n  thrown in <b>/var/www/csprng/src/public/index.php</b> on line <b>160</b><br />\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://github.com/paragonie", 
            "about": "Cryptography and Application Security Consultants - We Produce Various Open Source Libraries", 
            "twitter_handle": "ParagonIE", 
            "name": "Paragon Initiative Enterprises"
        }, 
        "handle": "paragonie", 
        "url": "https://hackerone.com/paragonie", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/008/539/a041268a04bb7a5c3d3a88a9dccc6b5955eff4d7_small.?1453010804", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/008/539/17d54b48e116d815fd72bc29f2cd71df6b3659ad_medium.?1453010804"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 8539, 
        "default_currency": "usd"
    }, 
    "is_published": false
}