{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "lukasreschke", 
        "dyabla"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "350.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 108082, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-03-08T16:39:48.452Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Exploiting unauthenticated encryption mode", 
    "is_member_of_team?": null, 
    "vote_count": 2, 
    "summaries": [
        {
            "category": "team", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 1451, 
            "content": "Hanno B\u00f6ck reported a vulnerability within the optional encryption plugin used by ownCloud. This plugin can be enabled to encrypt the file contents with a per-user key.\n\nDue to the missing Authenticated Encryption a malicious storage administrator could tamper with the encrypted ciphertext. In case of binary files such as EXE files this may for example allow an attacker to inject arbitrary code into the encrypted files.\n\nAs an hardening measure to ownCloud 9.0 we have done the first step to mitigate this attack vector: We've introduced authenticated encryption. Due to this in a properly configured ownCloud server a storage administrator can't modify files anymore, if a file gets tampered it won't be downloadable anymore.\n\nWe're aware that the ownCloud Encryption module is not yet perfect and are constantly working on improving it. As a next step we're aiming at [encrypting file names](https://github.com/owncloud/core/issues/22105).\nWe were technically aware of this vulnerability and the report of @hanno has increased it's severity given his proof of concept for modifying binary files. This was also the reason why we didn't mention encryption as a measure to ensure integrity, in older ownCloud it simply guaranteed that a storage admin could not access the file content.\n\nWe recommend administrators using the ownCloud Encryption module to read [our documentation](https://doc.owncloud.org/server/9.0/admin_manual/configuration_files/encryption_configuration.html) with more information about the ownCloud encryption.\n\n------\n\nA [blog post by Hanno B\u00f6ck](https://blog.hboeck.de/archives/880-Pwncloud-bad-crypto-in-the-Owncloud-encryption-module.html) covering this issue is also available. ", 
            "content_html": "<p>Hanno B\u00f6ck reported a vulnerability within the optional encryption plugin used by ownCloud. This plugin can be enabled to encrypt the file contents with a per-user key.</p>\n\n<p>Due to the missing Authenticated Encryption a malicious storage administrator could tamper with the encrypted ciphertext. In case of binary files such as EXE files this may for example allow an attacker to inject arbitrary code into the encrypted files.</p>\n\n<p>As an hardening measure to ownCloud 9.0 we have done the first step to mitigate this attack vector: We&#39;ve introduced authenticated encryption. Due to this in a properly configured ownCloud server a storage administrator can&#39;t modify files anymore, if a file gets tampered it won&#39;t be downloadable anymore.</p>\n\n<p>We&#39;re aware that the ownCloud Encryption module is not yet perfect and are constantly working on improving it. As a next step we&#39;re aiming at <a href=\"/redirect?signature=99e991cadde3279399a2ab89e63b68076a714b76&amp;url=https%3A%2F%2Fgithub.com%2Fowncloud%2Fcore%2Fissues%2F22105\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>encrypting file names</span><i class=\"icon-external-link\"></i></a>.<br>\nWe were technically aware of this vulnerability and the report of <a href=\"/hanno\">@hanno</a> has increased it&#39;s severity given his proof of concept for modifying binary files. This was also the reason why we didn&#39;t mention encryption as a measure to ensure integrity, in older ownCloud it simply guaranteed that a storage admin could not access the file content.</p>\n\n<p>We recommend administrators using the ownCloud Encryption module to read <a href=\"/redirect?signature=f3164aa58b4a9800785bbdfc21e23ff0cedf45cc&amp;url=https%3A%2F%2Fdoc.owncloud.org%2Fserver%2F9.0%2Fadmin_manual%2Fconfiguration_files%2Fencryption_configuration.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>our documentation</span><i class=\"icon-external-link\"></i></a> with more information about the ownCloud encryption.</p>\n\n<hr>\n\n<p>A <a href=\"/redirect?signature=d1a650432ce348603ac511b8f2d4ba305cb1bf2a&amp;url=https%3A%2F%2Fblog.hboeck.de%2Farchives%2F880-Pwncloud-bad-crypto-in-the-Owncloud-encryption-module.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>blog post by Hanno B\u00f6ck</span><i class=\"icon-external-link\"></i></a> covering this issue is also available. </p>\n"
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-04-07T16:39:48.568Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$350", 
    "attachments": [
        {
            "file_name": "pwncloud.tar.xz", 
            "type": "application/x-xz", 
            "id": 67754, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/067/754/4cdfeeaac1926f5d162db2b13e18422fa0286acb/pwncloud.tar.xz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ3XJAUJU3%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T225544Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEBAaDFhsOVc%2BLBuZJpN2%2FSK3A3ZSLRshQ37cr%2FnNfrsDZBl9Q9MwEJMM1w9f3SvUV6XmoP9nE3PeRToIYvFP152VEnHi03BXq%2BWX7mrp9duCLiSGu%2BuVj85dqXhL9hy5iZ8Baa9Dz1PfTpOuhKCmbaYzCWIDNTGGHjLe%2FHfj5BNMi3SKneAl%2FX0h%2BZqSIdJKDz1SK5Y92eHwZBEL8GznF9GsT%2Fe6zDxKRumhz8Vkk3IGYi5pwUBa6qmtuvb0%2FFBueYSgxUsIbsmK0uIt1sxLJbfLOybgHUA18Z80yVa0KlQc%2BgoSsS484NaEhLTbRqdlZ%2BxywVi8oiNq8ePPGFix9FXwU3HcD5DsyS3oPWa%2BzB9%2FB%2Fj5i%2F%2B%2Fdj%2Fww%2BhTYa6J%2BrE25cJz8f7DhYt5rCg9X8q2TCUwBOYuOUl5A0l4eFCWneCTq2xxhRjl1g1J%2BaAUAShH%2BiAD7%2BKi%2B3APDa6E97UEIGwiReOW1M7p2dsYu%2BTRFAcWFkx%2FfdNcmK%2F1EAANP1i4cT%2FBf2l24Vc5LPZJjCm1RkrTRxc90qzl8fyslqz595eagGsI73K0uzaibH5HvlrUQwLfX4TmlW%2Foze1zEhFUOiAB5qs%2FM3wow8am4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=926b898678b527ad4fbd355036291704b521e867281cb03ca02f6622998711a2"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": true, 
            "created_at": "2016-01-04T14:29:23.647Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-04T14:29:23.647Z", 
            "actor": {
                "url": "/owncloud", 
                "profile": {
                    "name": "ownCloud"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/059/6af0ec24c370d0d2250fdf2ac3e937f4aab2692d_medium.png?1438786688"
                }
            }, 
            "team_handle": "owncloud", 
            "message": "Thanks a lot for reporting this potential issue back to us. We take security very seriously and would appreciate if you would not share any information about this bug until we have determined a potential patch.\r\n \r\nOur security team will take a look at this issue as soon as possible. We will reply to your report within 72 hours, usually much faster.", 
            "markdown_message": "<p>Thanks a lot for reporting this potential issue back to us. We take security very seriously and would appreciate if you would not share any information about this bug until we have determined a potential patch.</p>\n\n<p>Our security team will take a look at this issue as soon as possible. We will reply to your report within 72 hours, usually much faster.</p>\n", 
            "type": "Activities::Comment", 
            "id": 740502, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-04T15:42:27.414Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-04T15:42:27.414Z", 
            "actor": {
                "username": "lukasreschke", 
                "url": "/lukasreschke", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/891/0ddfc05411893988a0d2794cd70d5dc221729713_medium.png?1438782834"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "Thanks a lot, @hanno, for the high quality submission and nice to see you on here. I've filed a ticket internally and will let you know as soon as possible once we have further information on how we proceed on this one.", 
            "markdown_message": "<p>Thanks a lot, <a href=\"/hanno\">@hanno</a>, for the high quality submission and nice to see you on here. I&#39;ve filed a ticket internally and will let you know as soon as possible once we have further information on how we proceed on this one.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 740647, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-06T18:08:40.788Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-06T18:12:40.471Z", 
            "actor": {
                "username": "lukasreschke", 
                "url": "/lukasreschke", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/891/0ddfc05411893988a0d2794cd70d5dc221729713_medium.png?1438782834"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "We have meanwhile discussed this problem internally and are also actively working on a solution for our next major release, ownCloud 9.0, planned to be released in March 2016.\n\nWith ownCloud 9.0 the default encryption mode will be based on AES-256-CTR and we're verifying the integrity of the files using Encrypt-then-MAC using HMAC-SHA256. The not yet merged and not fully completed changeset can be seen at https://github.com/owncloud/core/tree/use-hmac-over-encryption at the moment. We've also done some other small changes to the encryption code such as actually using a 16 byte IV instead of stretching a 14 byte IV. \u2013 If you have some spare minutes left we'd appreciate if you could take a look at this. There are some changes on-going such as using a different key for the HMAC derived using HKDF which are not yet in the repository though.\n\nSwitching to a different cipher allows us to enforce the HMAC on files encrypted with AES-256-CTR (or AES-128-CTR). The small caveat of this solution is that only new or modified files will be encrypted using the new encryption logic. The old ones will not be touched. While this is not a perfect solution we're considering this trade-off acceptable considering that a bug in a migration routine would likely lead to a massive data loss, and while we encourage backups the truth is that many people don't have proper ones.\n\nFurthermore we're working on a clarifying the threat model in our documentation further as well as ensure secure defaults in combination with external storage, for example the file scanner needs to be configured to not run on external storages when encryption is enabled as otherwise it would scan unencrypted files and add them to the data store. While some user may consider this a wanted behaviour it is probably not for most and thus we're going to adjust the default on this one.\n\nConsidering the risk  that any change to a key component brings we are at the moment not considering a backport and will make sure to update the documentation on this one as well soon. The documentation for older releases will state clearly that there is no integrity protection provided.\n\nLet me use this opportunity again for thanking you to bring up this problem to us and this high quality submission of yours. We sincerely appreciate your report. I'll update this report again once we've merged a proposed solution into our development branch.\n\nWe'd like to ask you to not disclose any information about this bug until we've updated the documentation as well have a solution available. We will then request public disclosure via the HackerOne platform so that all communication here is publicly visible.", 
            "markdown_message": "<p>We have meanwhile discussed this problem internally and are also actively working on a solution for our next major release, ownCloud 9.0, planned to be released in March 2016.</p>\n\n<p>With ownCloud 9.0 the default encryption mode will be based on AES-256-CTR and we&#39;re verifying the integrity of the files using Encrypt-then-MAC using HMAC-SHA256. The not yet merged and not fully completed changeset can be seen at <a title=\"https://github.com/owncloud/core/tree/use-hmac-over-encryption\" href=\"/redirect?signature=2e7c858d63ef79cc34664065ffbb564b12601506&amp;url=https%3A%2F%2Fgithub.com%2Fowncloud%2Fcore%2Ftree%2Fuse-hmac-over-encryption\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/owncloud/core/tree/use-hmac-over-encryption</span><i class=\"icon-external-link\"></i></a> at the moment. We&#39;ve also done some other small changes to the encryption code such as actually using a 16 byte IV instead of stretching a 14 byte IV. \u2013 If you have some spare minutes left we&#39;d appreciate if you could take a look at this. There are some changes on-going such as using a different key for the HMAC derived using HKDF which are not yet in the repository though.</p>\n\n<p>Switching to a different cipher allows us to enforce the HMAC on files encrypted with AES-256-CTR (or AES-128-CTR). The small caveat of this solution is that only new or modified files will be encrypted using the new encryption logic. The old ones will not be touched. While this is not a perfect solution we&#39;re considering this trade-off acceptable considering that a bug in a migration routine would likely lead to a massive data loss, and while we encourage backups the truth is that many people don&#39;t have proper ones.</p>\n\n<p>Furthermore we&#39;re working on a clarifying the threat model in our documentation further as well as ensure secure defaults in combination with external storage, for example the file scanner needs to be configured to not run on external storages when encryption is enabled as otherwise it would scan unencrypted files and add them to the data store. While some user may consider this a wanted behaviour it is probably not for most and thus we&#39;re going to adjust the default on this one.</p>\n\n<p>Considering the risk  that any change to a key component brings we are at the moment not considering a backport and will make sure to update the documentation on this one as well soon. The documentation for older releases will state clearly that there is no integrity protection provided.</p>\n\n<p>Let me use this opportunity again for thanking you to bring up this problem to us and this high quality submission of yours. We sincerely appreciate your report. I&#39;ll update this report again once we&#39;ve merged a proposed solution into our development branch.</p>\n\n<p>We&#39;d like to ask you to not disclose any information about this bug until we&#39;ve updated the documentation as well have a solution available. We will then request public disclosure via the HackerOne platform so that all communication here is publicly visible.</p>\n", 
            "type": "Activities::Comment", 
            "id": 744476, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-01-06T18:09:36.495Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-06T18:16:14.159Z", 
            "actor": {
                "url": "/owncloud", 
                "profile": {
                    "name": "ownCloud"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/059/6af0ec24c370d0d2250fdf2ac3e937f4aab2692d_medium.png?1438786688"
                }
            }, 
            "team_handle": "owncloud", 
            "bounty_amount": "350.0", 
            "collaborator": {
                "username": "hanno", 
                "url": "/hanno"
            }, 
            "message": "Congratulations. The bug bounty panel has deemed this report to be eligible for a bounty of $350. We'd like to thank you again for reporting this submission to us and helping making the internet a bit more secure.\n\nWhile we technically consider this a medium severity report (those are capped to $250) we have increased this amount due to the high quality of your submission.", 
            "markdown_message": "<p>Congratulations. The bug bounty panel has deemed this report to be eligible for a bounty of $350. We&#39;d like to thank you again for reporting this submission to us and helping making the internet a bit more secure.</p>\n\n<p>While we technically consider this a medium severity report (those are capped to $250) we have increased this amount due to the high quality of your submission.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 744479, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-06T21:46:40.646Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-06T21:46:40.646Z", 
            "actor": {
                "username": "hanno", 
                "url": "/hanno", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/020/918/0cbb82765672dbb4db446f4f2bda31226dbc2076_medium.jpg?1535099750"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "Thanks for the bug bounty.\nHowever I have some issues with your way of handling this incident and I want to try to explain why: Since a while there is a kinda crypto \"boom\" with amateurish crypto apps popping up everywhere. I think this is irresponsible and dangerous. Crypto is hard. Designing a crypto storage concept is not something you just come up with because you learned some crypto basics. I'd argue designing crypto storage may be even harder than crypto transport protocols, because there's much less research on it. (For an overview of the potential pitfalls I recommend this talk by Adam Langley [1].)\n\nIn conclusion: I think if a crypto protocol doesn't have the involvement of an expert (and by \"expert\" I mean someone whose name I have read multiple times in the past on crypto papers or relevant bug reports) you can be almost certain that it will not be secure.\n\nI haven't seen any obvious flaws in your new design on a first look (though I wonder why you chose to bake your own CTR+HMAC solution instead of using an AEAD cipher). But I think if you want to handle this issue responsible you basically have two options: Either ditch the crypto functionality or redesign it in cooperation with a crypto implementation expert. Maybe your crypto will be strong enough to prevent me from finding a flaw in it, but that doesn't mean it's secure.\n\nRegarding your request for disclosure: I will of course wait for a reasonable timeframe. Once you have solved the issue with whatever measurements I plan to publish a blog post (and maybe publications on other platforms) and it will likely include the criticism I have outlined here.\n\n[1] https://news.yahoo.com/video/yahoo-trust-unconference-tls-adam-223046696.html", 
            "markdown_message": "<p>Thanks for the bug bounty.<br>\nHowever I have some issues with your way of handling this incident and I want to try to explain why: Since a while there is a kinda crypto &quot;boom&quot; with amateurish crypto apps popping up everywhere. I think this is irresponsible and dangerous. Crypto is hard. Designing a crypto storage concept is not something you just come up with because you learned some crypto basics. I&#39;d argue designing crypto storage may be even harder than crypto transport protocols, because there&#39;s much less research on it. (For an overview of the potential pitfalls I recommend this talk by Adam Langley [1].)</p>\n\n<p>In conclusion: I think if a crypto protocol doesn&#39;t have the involvement of an expert (and by &quot;expert&quot; I mean someone whose name I have read multiple times in the past on crypto papers or relevant bug reports) you can be almost certain that it will not be secure.</p>\n\n<p>I haven&#39;t seen any obvious flaws in your new design on a first look (though I wonder why you chose to bake your own CTR+HMAC solution instead of using an AEAD cipher). But I think if you want to handle this issue responsible you basically have two options: Either ditch the crypto functionality or redesign it in cooperation with a crypto implementation expert. Maybe your crypto will be strong enough to prevent me from finding a flaw in it, but that doesn&#39;t mean it&#39;s secure.</p>\n\n<p>Regarding your request for disclosure: I will of course wait for a reasonable timeframe. Once you have solved the issue with whatever measurements I plan to publish a blog post (and maybe publications on other platforms) and it will likely include the criticism I have outlined here.</p>\n\n<p>[1] <a title=\"https://news.yahoo.com/video/yahoo-trust-unconference-tls-adam-223046696.html\" href=\"/redirect?signature=ad93c2e27e46303061368ffaee574528c0930068&amp;url=https%3A%2F%2Fnews.yahoo.com%2Fvideo%2Fyahoo-trust-unconference-tls-adam-223046696.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://news.yahoo.com/video/yahoo-trust-unconference-tls-adam-223046696.html</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::Comment", 
            "id": 744970, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-07T13:59:23.394Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-07T13:59:23.394Z", 
            "actor": {
                "username": "lukasreschke", 
                "url": "/lukasreschke", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/891/0ddfc05411893988a0d2794cd70d5dc221729713_medium.png?1438782834"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "We don't disagree with you on this. As a matter of fact, we knew there was a problem in the area where you found this problem. We've had a number of audits done on the code by customers, one especially focused on the cryptographic components. Some of the problems have been addressed, others (like this) were being looked at. Your analysis helped us address this particular one faster and easier. If a clear exploit is discovered we immediately deal with it of course; but we know there are weaknesses which simply require some more research and effort.\n\nIn the future, we will not only continue address the weak areas already identified by previous audits, we want to get a more thorough analysis done. As to your suggestion to get a (known) cryptography expert involved, agreed, that would be a good move.\n\nThis is something which, practically speaking, isn't done overnight - we have to find an auditor which satisfies our various customers and other constraints (including availability of course). Until then, we very much welcome input and issue reports from anyone.\n\nI'm afraid we just won't be able to have that last part done in the next months, it will take more time. Until then we'll focus on improving the areas identified in previous audits (including your submission here) and whatever else comes up.\n\nOnce we're at a point where we are doing other major changes to the encryption app we will certainly get back to you and also work together in cooperation with you and other cryptography experts. We would certainly also be open to work together with people that you could recommend to us.\n\n> though I wonder why you chose to bake your own CTR+HMAC solution instead of using an AEAD cipher\n\nOn that note, while there is a GCM binding for OpenSSL and PHP [it's completely broken at the moment](https://bugs.php.net/bug.php?id=67304). There is [some work ongoing](https://github.com/php/php-src/compare/master...bukka:openssl_aead) to have it fixed for PHP 7.1 though. But at the moment there is no suitable native AEAD cipher available.", 
            "markdown_message": "<p>We don&#39;t disagree with you on this. As a matter of fact, we knew there was a problem in the area where you found this problem. We&#39;ve had a number of audits done on the code by customers, one especially focused on the cryptographic components. Some of the problems have been addressed, others (like this) were being looked at. Your analysis helped us address this particular one faster and easier. If a clear exploit is discovered we immediately deal with it of course; but we know there are weaknesses which simply require some more research and effort.</p>\n\n<p>In the future, we will not only continue address the weak areas already identified by previous audits, we want to get a more thorough analysis done. As to your suggestion to get a (known) cryptography expert involved, agreed, that would be a good move.</p>\n\n<p>This is something which, practically speaking, isn&#39;t done overnight - we have to find an auditor which satisfies our various customers and other constraints (including availability of course). Until then, we very much welcome input and issue reports from anyone.</p>\n\n<p>I&#39;m afraid we just won&#39;t be able to have that last part done in the next months, it will take more time. Until then we&#39;ll focus on improving the areas identified in previous audits (including your submission here) and whatever else comes up.</p>\n\n<p>Once we&#39;re at a point where we are doing other major changes to the encryption app we will certainly get back to you and also work together in cooperation with you and other cryptography experts. We would certainly also be open to work together with people that you could recommend to us.</p>\n\n<blockquote>\n<p>though I wonder why you chose to bake your own CTR+HMAC solution instead of using an AEAD cipher</p>\n</blockquote>\n\n<p>On that note, while there is a GCM binding for OpenSSL and PHP <a href=\"/redirect?signature=df0fd959fc5266ecc6073c114b3959cb948a1dc7&amp;url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D67304\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>it&#39;s completely broken at the moment</span><i class=\"icon-external-link\"></i></a>. There is <a href=\"/redirect?signature=e9591940bae744bb1ea2815d374ec6fd086fe205&amp;url=https%3A%2F%2Fgithub.com%2Fphp%2Fphp-src%2Fcompare%2Fmaster...bukka%3Aopenssl_aead\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>some work ongoing</span><i class=\"icon-external-link\"></i></a> to have it fixed for PHP 7.1 though. But at the moment there is no suitable native AEAD cipher available.</p>\n", 
            "type": "Activities::Comment", 
            "id": 746012, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-07T14:39:54.493Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-07T14:39:54.493Z", 
            "actor": {
                "username": "hanno", 
                "url": "/hanno", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/020/918/0cbb82765672dbb4db446f4f2bda31226dbc2076_medium.jpg?1535099750"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "One thing: I tried to test your git branch and have a look at the new scheme, but I can't get it to run:\n\nFatal error: Uncaught Error: Call to a member function getRequest() on null in /var/www/localhost/htdocs/o2/lib/private/response.php:77 Stack trace: #0 /var/www/localhost/htdocs/o2/lib/base.php(517): OC_Response::setStatus(503) #1 /var/www/localhost/htdocs/o2/lib/base.php(1101): OC::init() #2 /var/www/localhost/htdocs/o2/index.php(37): require_once('/var/www/localh...') #3 {main} thrown in /var/www/localhost/htdocs/o2/lib/private/response.php on line 77\n\nI think this is unrelated to the crypto changes. Is this a bug I should report elsewhere or is this a known issue?", 
            "markdown_message": "<p>One thing: I tried to test your git branch and have a look at the new scheme, but I can&#39;t get it to run:</p>\n\n<p>Fatal error: Uncaught Error: Call to a member function getRequest() on null in /var/www/localhost/htdocs/o2/lib/private/response.php:77 Stack trace: #0 /var/www/localhost/htdocs/o2/lib/base.php(517): OC_Response::setStatus(503) #1 /var/www/localhost/htdocs/o2/lib/base.php(1101): OC::init() #2 /var/www/localhost/htdocs/o2/index.php(37): require_once(&#39;/var/www/localh...&#39;) #3 {main} thrown in /var/www/localhost/htdocs/o2/lib/private/response.php on line 77</p>\n\n<p>I think this is unrelated to the crypto changes. Is this a bug I should report elsewhere or is this a known issue?</p>\n", 
            "type": "Activities::Comment", 
            "id": 746072, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-07T14:40:37.517Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-07T14:42:25.526Z", 
            "actor": {
                "username": "hanno", 
                "url": "/hanno", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/020/918/0cbb82765672dbb4db446f4f2bda31226dbc2076_medium.jpg?1535099750"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "[duplicate message removed]", 
            "markdown_message": "<p>[duplicate message removed]</p>\n", 
            "type": "Activities::Comment", 
            "id": 746073, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-07T14:45:12.167Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-07T14:45:12.167Z", 
            "actor": {
                "username": "lukasreschke", 
                "url": "/lukasreschke", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/891/0ddfc05411893988a0d2794cd70d5dc221729713_medium.png?1438782834"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "> I think this is unrelated to the crypto changes. Is this a bug I should report elsewhere or is this a known issue?\n\nThat looks like the submodule was not cloned, we use a Git submodule to keep the third-party repository and to clone the source code initially you need to use:\n\n```\ngit clone --recursive https://github.com/owncloud/core.git\n```\n\nAlternatively you can try to initialize the submodule on an existing repository:\n\n```\ngit submodule update --init --recursive\n```", 
            "markdown_message": "<blockquote>\n<p>I think this is unrelated to the crypto changes. Is this a bug I should report elsewhere or is this a known issue?</p>\n</blockquote>\n\n<p>That looks like the submodule was not cloned, we use a Git submodule to keep the third-party repository and to clone the source code initially you need to use:</p>\n<pre class=\"highlight plaintext\"><code>git clone --recursive https://github.com/owncloud/core.git\n</code></pre>\n<p>Alternatively you can try to initialize the submodule on an existing repository:</p>\n<pre class=\"highlight plaintext\"><code>git submodule update --init --recursive\n</code></pre>", 
            "type": "Activities::Comment", 
            "id": 746082, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-09T16:00:59.408Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-09T16:00:59.408Z", 
            "actor": {
                "username": "hanno", 
                "url": "/hanno", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/020/918/0cbb82765672dbb4db446f4f2bda31226dbc2076_medium.jpg?1535099750"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "Thanks. Having looked at the scheme now I must revise my earlier judgement. This scheme is still very problematic and it's quite easy to see.\nWhat you're doing now is you're using counter mode on fixed size blocks of a file. This means you have authenticity over blocks, but not on the order of the blocks.\nWhat an attacker can trivially do is shuffle around the encrypted blocks. This is pretty simple: The blocks are aligned to 8192 bytes, prepended by another block of 8192 bytes that contains the header.\nExample:\nsplit -b 8192 [encrypted_file]\ncat xaa xac xab > encrypted_file\n\nThese commands would move the second block of the file to the beginning, append the first block and discard the rest of the file. You end up with a valid file that owncloud will decrypt and the attacker has some limited amount of control over the output. While it is more difficult to find a practically exploitable scenario than in the first example, this still doesn't meet a reasonable definition of cryptographic security (in more formal words, it is not IND-CCA2 secure).\n\nI rest my case that designing an ad-hoc encryption scheme without proper review is dangerous and will almost certainly lead to more vulnerabilities.", 
            "markdown_message": "<p>Thanks. Having looked at the scheme now I must revise my earlier judgement. This scheme is still very problematic and it&#39;s quite easy to see.<br>\nWhat you&#39;re doing now is you&#39;re using counter mode on fixed size blocks of a file. This means you have authenticity over blocks, but not on the order of the blocks.<br>\nWhat an attacker can trivially do is shuffle around the encrypted blocks. This is pretty simple: The blocks are aligned to 8192 bytes, prepended by another block of 8192 bytes that contains the header.<br>\nExample:<br>\nsplit -b 8192 [encrypted_file]<br>\ncat xaa xac xab &gt; encrypted_file</p>\n\n<p>These commands would move the second block of the file to the beginning, append the first block and discard the rest of the file. You end up with a valid file that owncloud will decrypt and the attacker has some limited amount of control over the output. While it is more difficult to find a practically exploitable scenario than in the first example, this still doesn&#39;t meet a reasonable definition of cryptographic security (in more formal words, it is not IND-CCA2 secure).</p>\n\n<p>I rest my case that designing an ad-hoc encryption scheme without proper review is dangerous and will almost certainly lead to more vulnerabilities.</p>\n", 
            "type": "Activities::Comment", 
            "id": 750891, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-02-03T16:41:48.942Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-02-03T16:46:10.812Z", 
            "actor": {
                "username": "lukasreschke", 
                "url": "/lukasreschke", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/891/0ddfc05411893988a0d2794cd70d5dc221729713_medium.png?1438782834"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "Apologize for the late follow-up on this from our side. We have been internally working on some changes for the issue you pointed out and didn't want to provide an update until we have a proposed solution to these. Nice catch and thanks a lot for spending your time on helping us improving this situation.\n\nThe current approach we're targeting for our master branch is the following:\n\n1. We keep the version number in another file next to the keys. The version number is also included in the HMAC calculation. This change can be seen at [core/bfb39de9](https://github.com/owncloud/core/commit/bfb39de9e5f862fb4b9fe83d1ad12b6172bd16b1).\n2. Each encrypted chunk has an incrementing number that is also included in the HMAC calculation. We keep track of the amount of chunks so that it should not be possible to remove ending chunks of the file.  This change can be seen at [core/01a9bab6](https://github.com/owncloud/core/commit/01a9bab6f6adb791a0d800cd55d029138ee3118c).\n\nThose commits may change if the Pull Request gets rebased so the newest version can be found in the [use-hmac-over-encryption branch on GitHub](https://github.com/owncloud/core/commits/use-hmac-over-encryption). As discussed in-person at FOSDEM we're aiming to include this with ownCloud 9.0 which is scheduled to be released around 2016-03-08, the release date might shift a bit depending on QA testing but we'll keep you updated. We'd be happy to do a coordinated disclose once we have released 9.0. (we'll also make this whole issue public at this point)\n\nOn a related note with regard to the encryption of file names and the folder structure which you have brought up at FOSDEM as well,  [we are aiming to to address this with ownCloud 9.1](https://github.com/owncloud/core/issues/22105). Please note that this is a documented behaviour, as a first step for 9.0 we'll already make this and some more potential caveats more prominent within the ownCloud interface when enabling the encryption app.\n\nWe might adjust these approaches such as for example moving those two files into one, but you should get the overall picture.\n\nThanks a lot again for reporting this issue back to us and your spent efforts. We would very much appreciate if you could take a glimpse at the proposed patches by us and let us know if you see any problem with it.", 
            "markdown_message": "<p>Apologize for the late follow-up on this from our side. We have been internally working on some changes for the issue you pointed out and didn&#39;t want to provide an update until we have a proposed solution to these. Nice catch and thanks a lot for spending your time on helping us improving this situation.</p>\n\n<p>The current approach we&#39;re targeting for our master branch is the following:</p>\n\n<ol>\n<li>We keep the version number in another file next to the keys. The version number is also included in the HMAC calculation. This change can be seen at <a href=\"/redirect?signature=7f17a0dedbbafff72399c3a75f1b2a8218259f9f&amp;url=https%3A%2F%2Fgithub.com%2Fowncloud%2Fcore%2Fcommit%2Fbfb39de9e5f862fb4b9fe83d1ad12b6172bd16b1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>core/bfb39de9</span><i class=\"icon-external-link\"></i></a>.</li>\n<li>Each encrypted chunk has an incrementing number that is also included in the HMAC calculation. We keep track of the amount of chunks so that it should not be possible to remove ending chunks of the file.  This change can be seen at <a href=\"/redirect?signature=f7f1e6a965e2de7a716d014d0300d016a257c395&amp;url=https%3A%2F%2Fgithub.com%2Fowncloud%2Fcore%2Fcommit%2F01a9bab6f6adb791a0d800cd55d029138ee3118c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>core/01a9bab6</span><i class=\"icon-external-link\"></i></a>.</li>\n</ol>\n\n<p>Those commits may change if the Pull Request gets rebased so the newest version can be found in the <a href=\"/redirect?signature=2a50e48337360731edf6986a89991dc111e8fe4c&amp;url=https%3A%2F%2Fgithub.com%2Fowncloud%2Fcore%2Fcommits%2Fuse-hmac-over-encryption\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>use-hmac-over-encryption branch on GitHub</span><i class=\"icon-external-link\"></i></a>. As discussed in-person at FOSDEM we&#39;re aiming to include this with ownCloud 9.0 which is scheduled to be released around 2016-03-08, the release date might shift a bit depending on QA testing but we&#39;ll keep you updated. We&#39;d be happy to do a coordinated disclose once we have released 9.0. (we&#39;ll also make this whole issue public at this point)</p>\n\n<p>On a related note with regard to the encryption of file names and the folder structure which you have brought up at FOSDEM as well,  <a href=\"/redirect?signature=99e991cadde3279399a2ab89e63b68076a714b76&amp;url=https%3A%2F%2Fgithub.com%2Fowncloud%2Fcore%2Fissues%2F22105\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>we are aiming to to address this with ownCloud 9.1</span><i class=\"icon-external-link\"></i></a>. Please note that this is a documented behaviour, as a first step for 9.0 we&#39;ll already make this and some more potential caveats more prominent within the ownCloud interface when enabling the encryption app.</p>\n\n<p>We might adjust these approaches such as for example moving those two files into one, but you should get the overall picture.</p>\n\n<p>Thanks a lot again for reporting this issue back to us and your spent efforts. We would very much appreciate if you could take a glimpse at the proposed patches by us and let us know if you see any problem with it.</p>\n", 
            "type": "Activities::Comment", 
            "id": 783176, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-02-11T09:06:48.101Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-02-11T09:06:48.101Z", 
            "actor": {
                "username": "lukasreschke", 
                "url": "/lukasreschke", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/891/0ddfc05411893988a0d2794cd70d5dc221729713_medium.png?1438782834"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "We have today published beta1 of ownCloud 9.0.0 which will include these changes: http://download.owncloud.org/community/testing/owncloud-9.0beta1.tar.bz2\n\nWe are aiming for the announced 9.0.0 release date of 8 March. I'll keep you in the loop with regard to the release date.\n", 
            "markdown_message": "<p>We have today published beta1 of ownCloud 9.0.0 which will include these changes: <a title=\"http://download.owncloud.org/community/testing/owncloud-9.0beta1.tar.bz2\" href=\"/redirect?signature=fc3eebc61ffdae239f843981204c8950e872801e&amp;url=http%3A%2F%2Fdownload.owncloud.org%2Fcommunity%2Ftesting%2Fowncloud-9.0beta1.tar.bz2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://download.owncloud.org/community/testing/owncloud-9.0beta1.tar.bz2</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>We are aiming for the announced 9.0.0 release date of 8 March. I&#39;ll keep you in the loop with regard to the release date.</p>\n", 
            "type": "Activities::Comment", 
            "id": 793985, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "hanno", 
                "url": "/hanno"
            }, 
            "created_at": "2016-03-08T16:39:41.221Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-08T16:39:41.221Z", 
            "actor": {
                "username": "lukasreschke", 
                "url": "/lukasreschke", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/891/0ddfc05411893988a0d2794cd70d5dc221729713_medium.png?1438782834"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "We just have released ownCloud 9.0 which adds this. As described in the issue we're working on hardening the encryption module even more in the future.", 
            "markdown_message": "<p>We just have released ownCloud 9.0 which adds this. As described in the issue we&#39;re working on hardening the encryption module even more in the future.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 829240, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-08T16:39:48.501Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-08T16:41:46.857Z", 
            "actor": {
                "username": "lukasreschke", 
                "url": "/lukasreschke", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/891/0ddfc05411893988a0d2794cd70d5dc221729713_medium.png?1438782834"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "first_to_agree": true, 
            "message": "Thanks again for reporting this issue back to us. This is highly appreciated \ud83d\ude80", 
            "markdown_message": "<p>Thanks again for reporting this issue back to us. This is highly appreciated \ud83d\ude80</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 829241, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-04T13:18:46.035Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-04T13:18:46.035Z", 
            "actor": {
                "username": "lukasreschke", 
                "url": "/lukasreschke", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/891/0ddfc05411893988a0d2794cd70d5dc221729713_medium.png?1438782834"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "owncloud", 
            "message": "Disclosed prematurely due to the public interest on this issue.", 
            "markdown_message": "<p>Disclosed prematurely due to the public interest on this issue.</p>\n", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 887454, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "hanno", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/hanno", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/020/918/ed580739b51d8827b18489f2e816a263212abf57_small.jpg?1535099750"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 32, 
        "name": "Cryptographic Issues - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -84089755.8593669, 
    "disclosed_at": "2016-04-04T13:18:46.126Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/108082", 
    "created_at": "2016-01-04T14:29:23.501Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>The owncloud file storage encryption uses the AES encryption algorithm in CFB mode without any authentication. The encryption module is advertised as a way to use a potentially untrusted external storage [1].</p>\n\n<p>Let&#39;s assume someone uses owncloud with the encryption module and an untrusted storage and expects the data to be safe. A windows software application gets uploaded and shared in this owncloud instance. As an example we can use the putty.exe file [2].</p>\n\n<p>Most Windows EXE files have a very unique structure. By Xor-ing data one can manipulate that. CFB mode allows bitwise manipulations, but these will cause the next block to contain garbage data.</p>\n\n<p>The PoC attack I developed will:<br>\na) First flip a single bit in the third block of the file. This will cause the fourth block to contain garbage and thus the file will no longer be a valid PE file. Thereby Windows will execute the DOS part of that executable.<br>\nb) EXE files contain usually a DOS stub that is almost always the same. We can now Xor our own code over that DOS part and thus backdoor the Executable.</p>\n\n<p>This gives one 16 bytes of code execution. This is quite limited, but it can be extended by doing more manipulations on the file and jumping to other manipulated blocks. I haven&#39;t done that, but it&#39;s definitely doable. My PoC will create an EXE file that prints out the chars &quot;PWN&quot;.</p>\n\n<p>To mount the attack:</p>\n\n<ul>\n<li>Unpack the attched tarball</li>\n<li>run &quot;make&quot; in the pwncloud dir</li>\n<li>run &quot;pwncloud [file]&quot; with [file] being an exe file in an encrypted owncloud storage\nThe attach script itself is written in bash, it requires a small C tool to xor files and a small piece of assembly code that is compiled with nasm.</li>\n</ul>\n\n<p>This attack is made even easier by the fact that the filename is not hidden from the attacker. He can see which files are EXE files and backdoor them all. A variant of this attack could be executed if there are files in the storage with other file formats and content known to the attacker (e.g. a zip file or tarball from a popular application).</p>\n\n<p>The bottom line is: Using encryption without any authentication or signatures is dangerous. It should not be used in any circumstances. In its current form the owncloud encryption module should not be used and not be trusted.</p>\n\n<p>[1] <a title=\"https://owncloud.org/blog/how-owncloud-uses-encryption-to-protect-your-data/\" href=\"/redirect?signature=cbfc83cfdeca5e0b1e150506d2922e278ba3d042&amp;url=https%3A%2F%2Fowncloud.org%2Fblog%2Fhow-owncloud-uses-encryption-to-protect-your-data%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://owncloud.org/blog/how-owncloud-uses-encryption-to-protect-your-data/</span><i class=\"icon-external-link\"></i></a><br>\n[2] <a title=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\" href=\"/redirect?signature=f3f30dd0cec799cc420709abbd48e8625c5bc742&amp;url=http%3A%2F%2Fwww.chiark.greenend.org.uk%2F%7Esgtatham%2Fputty%2Fdownload.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html</span><i class=\"icon-external-link\"></i></a></p>\n", 
    "vulnerability_information": "The owncloud file storage encryption uses the AES encryption algorithm in CFB mode without any authentication. The encryption module is advertised as a way to use a potentially untrusted external storage [1].\n\nLet's assume someone uses owncloud with the encryption module and an untrusted storage and expects the data to be safe. A windows software application gets uploaded and shared in this owncloud instance. As an example we can use the putty.exe file [2].\n\nMost Windows EXE files have a very unique structure. By Xor-ing data one can manipulate that. CFB mode allows bitwise manipulations, but these will cause the next block to contain garbage data.\n\nThe PoC attack I developed will:\na) First flip a single bit in the third block of the file. This will cause the fourth block to contain garbage and thus the file will no longer be a valid PE file. Thereby Windows will execute the DOS part of that executable.\nb) EXE files contain usually a DOS stub that is almost always the same. We can now Xor our own code over that DOS part and thus backdoor the Executable.\n\nThis gives one 16 bytes of code execution. This is quite limited, but it can be extended by doing more manipulations on the file and jumping to other manipulated blocks. I haven't done that, but it's definitely doable. My PoC will create an EXE file that prints out the chars \"PWN\".\n\nTo mount the attack:\n* Unpack the attched tarball\n* run \"make\" in the pwncloud dir\n* run \"pwncloud [file]\" with [file] being an exe file in an encrypted owncloud storage\nThe attach script itself is written in bash, it requires a small C tool to xor files and a small piece of assembly code that is compiled with nasm.\n\nThis attack is made even easier by the fact that the filename is not hidden from the attacker. He can see which files are EXE files and backdoor them all. A variant of this attack could be executed if there are files in the storage with other file formats and content known to the attacker (e.g. a zip file or tarball from a popular application).\n\nThe bottom line is: Using encryption without any authentication or signatures is dangerous. It should not be used in any circumstances. In its current form the owncloud encryption module should not be used and not be trusted.\n\n\n[1] https://owncloud.org/blog/how-owncloud-uses-encryption-to-protect-your-data/\n[2] http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.owncloud.com", 
            "about": "ownCloud GmbH is the company behind the ownCloud Project - the most downloaded open source project for data and file sync, share and view.", 
            "twitter_handle": "ownCloud", 
            "name": "ownCloud"
        }, 
        "handle": "owncloud", 
        "url": "https://hackerone.com/owncloud", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/003/059/ef3f773944541857909a6662470c5452b3f94d88_small.png?1438786688", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/003/059/6af0ec24c370d0d2250fdf2ac3e937f4aab2692d_medium.png?1438786688"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 3059, 
        "default_currency": "usd"
    }, 
    "is_published": false
}