{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2018-05-14T13:56:16.370Z", 
    "voters": [
        "jokebookservice1", 
        "test0x00", 
        "mvc", 
        "sp1d3rs", 
        "bull", 
        "jobert", 
        "michiel", 
        "bl4de", 
        "spam404", 
        "europa", 
        "and 94 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "5040.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 85624, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-05-17T23:11:28.388Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Highly wormable clickjacking in player card", 
    "is_member_of_team?": null, 
    "vote_count": 104, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 7460, 
            "content": "https://blog.innerht.ml/google-yolo/", 
            "content_html": "<p><a title=\"https://blog.innerht.ml/google-yolo/\" href=\"/redirect?signature=a5c1ffa466a57d1ab62a4b495a2993ba54b61de5&amp;url=https%3A%2F%2Fblog.innerht.ml%2Fgoogle-yolo%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://blog.innerht.ml/google-yolo/</span><i class=\"icon-external-link\"></i></a></p>\n"
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2018-06-13T13:56:16.444Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$5,040", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-08-30T07:05:40.231Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-08-30T07:07:28.854Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "The fix is very tricky here considering the usage of Player Card. For example using the sandbox attribute will break all player cards because plugins are also disabled. One workaround is to insert a JS snippet in all twitter page to check the frame ancestors, but then attackers can still use the sandbox attribute to disable the JS. The ultimate fix would be to change the way Player Card behaves.\n\nOh by the way TweetDeck is also affected but the PoC may need adjustments.", 
            "markdown_message": "<p>The fix is very tricky here considering the usage of Player Card. For example using the sandbox attribute will break all player cards because plugins are also disabled. One workaround is to insert a JS snippet in all twitter page to check the frame ancestors, but then attackers can still use the sandbox attribute to disable the JS. The ultimate fix would be to change the way Player Card behaves.</p>\n\n<p>Oh by the way TweetDeck is also affected but the PoC may need adjustments.</p>\n", 
            "type": "Activities::Comment", 
            "id": 568346, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-09-03T16:12:53.330Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-09-03T16:14:00.435Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Here is a more delicate and stealthy PoC with maximum damage:\nhttps://twitter.com/AttackerCanvas/status/639465287629144064\nVideo demo: https://vimeo.com/138212863 (password: app)\n\nVictim will see it as a normal embedded YouTube video, and it can be interacted properly (click to play). Victims will definitely not notice anything. Behind the scene the victim is actually clicking on the Authorize button on a fake app with full read, write permission, so that attacker can gain long-term control over the victim. Besides it is easy to fake an legitimate app (like Twitter for iPhone), so even victims notice there is a new app that has access to his/her account he/she would not be able to distinguish it.", 
            "markdown_message": "<p>Here is a more delicate and stealthy PoC with maximum damage:<br>\n<a title=\"https://twitter.com/AttackerCanvas/status/639465287629144064\" href=\"/redirect?signature=5b38a5a0645bc66096d9aa6ad0fbd09166cea7ba&amp;url=https%3A%2F%2Ftwitter.com%2FAttackerCanvas%2Fstatus%2F639465287629144064\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://twitter.com/AttackerCanvas/status/639465287629144064</span><i class=\"icon-external-link\"></i></a><br>\nVideo demo: <a title=\"https://vimeo.com/138212863\" href=\"/redirect?signature=b1bdf8da3f576b680405c37f32fb20a35813fbaa&amp;url=https%3A%2F%2Fvimeo.com%2F138212863\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://vimeo.com/138212863</span><i class=\"icon-external-link\"></i></a> (password: app)</p>\n\n<p>Victim will see it as a normal embedded YouTube video, and it can be interacted properly (click to play). Victims will definitely not notice anything. Behind the scene the victim is actually clicking on the Authorize button on a fake app with full read, write permission, so that attacker can gain long-term control over the victim. Besides it is easy to fake an legitimate app (like Twitter for iPhone), so even victims notice there is a new app that has access to his/her account he/she would not be able to distinguish it.</p>\n", 
            "type": "Activities::Comment", 
            "id": 576050, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-09-03T17:17:27.097Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-09-03T17:17:27.097Z", 
            "actor": {
                "username": "bfd", 
                "url": "/bfd", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/639/6958ddee38cf9b6dfcb98bb2b029056b16824f4c_medium.jpg?1441215254"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p>Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 576176, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-09-11T17:35:14.315Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-09-11T17:35:14.315Z", 
            "actor": {
                "url": "/twitter", 
                "profile": {
                    "name": "Twitter"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
                }
            }, 
            "team_handle": "twitter", 
            "bounty_amount": "5040.0", 
            "collaborator": {
                "username": "filedescriptor", 
                "url": "/filedescriptor"
            }, 
            "message": "Thanks again. As mentioned we\u2019ll keep you updated as we investigate further. As a reminder, please remember to keep the details of this report private until we have fully investigated and addressed the issue.", 
            "markdown_message": "<p>Thanks again. As mentioned we\u2019ll keep you updated as we investigate further. As a reminder, please remember to keep the details of this report private until we have fully investigated and addressed the issue.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 585403, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "filedescriptor", 
                "url": "/filedescriptor"
            }, 
            "created_at": "2016-07-14T15:53:42.643Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-14T15:53:42.643Z", 
            "actor": {
                "username": "bfd", 
                "url": "/bfd", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/639/6958ddee38cf9b6dfcb98bb2b029056b16824f4c_medium.jpg?1441215254"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "We consider this issue to be fixed now. Can you please confirm?\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p>We consider this issue to be fixed now. Can you please confirm?</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1069018, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-18T19:42:18.427Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-18T19:42:18.427Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Here's what I observe:\n1. Player card now requires a click to open \n2. New applications for player cards now use iframe sandbox by default\n\nI wouldn't say the fix is perfect but given that it's a mitigation for the specifications this should be sufficient.", 
            "markdown_message": "<p>Here&#39;s what I observe:</p>\n\n<ol>\n<li>Player card now requires a click to open </li>\n<li>New applications for player cards now use iframe sandbox by default</li>\n</ol>\n\n<p>I wouldn&#39;t say the fix is perfect but given that it&#39;s a mitigation for the specifications this should be sufficient.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1074590, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-14T13:56:16.401Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-14T13:56:16.401Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2739512, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-17T23:11:28.416Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-17T23:11:28.416Z", 
            "actor": {
                "username": "aarun", 
                "url": "/aarun", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/166/486/4b2b4ffb694a311c8f71ceaffcde1eca9b8f891f_medium.png?1500922258"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Approved", 
            "markdown_message": "<p>Approved</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2759261, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-17T23:11:28.527Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-17T23:11:28.527Z", 
            "actor": {
                "username": "aarun", 
                "url": "/aarun", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/166/486/4b2b4ffb694a311c8f71ceaffcde1eca9b8f891f_medium.png?1500922258"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2759262, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "filedescriptor", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/filedescriptor", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 74, 
        "name": "UI Redressing (Clickjacking)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -15236857.801874844, 
    "disclosed_at": "2018-05-17T23:11:28.495Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/85624", 
    "created_at": "2015-08-30T06:43:37.878Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hi,<br>\nI would like to report an issue where player card is vulnerable to clickjacking in certain browsers. This may result in something similar to XSS worm and many other critical damages.</p>\n\n<h2 id=\"details\">Details</h2>\n\n<p>Twitter Player Card allows a website to embed a custom player(html) into an iframe in a tweet. There are currently 2-3 security features in place to defend clickjacking on Twitter:</p>\n\n<ol>\n<li>\n<code>X-Frame-Options: SAMEORIGIN</code> covering the whole twitter.com domain</li>\n<li>\n<code>Content-Security-Policy: frame-ancestors &#39;self&#39;</code> ditto</li>\n<li>JS-based frame-buster in some pages (but not all)</li>\n</ol>\n\n<p>For (1), SAMEORIGIN only checks if the embedded frame is on the same origin of the top window. For example, attacker can do something like twitter.com -&gt; attacker.com -&gt; twitter.com to evade it. More details can been seen from here: <a title=\"https://bugzilla.mozilla.org/show_bug.cgi?id=725490\" href=\"/redirect?signature=0ca757f1a5e12a2638f23409eb52815b2f659f38&amp;url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D725490\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://bugzilla.mozilla.org/show_bug.cgi?id=725490</span><i class=\"icon-external-link\"></i></a> <br>\nFor (2), this is the only way to correctly prevent framing from other websites (it performs the check against the ancestor list). However this is a CSP2 directive so not all browsers support it. For example, Safari and IE do not support it.<br>\nFor (3), using the sandbox attribute of iframe can disable JS of a frame, hence anti-frame-buster</p>\n\n<p>Since Player Card is shown on a Tweet (on twitter.com), attacker can embed an iframe which embeds a Twitter page so that attacker can overlay it with &quot;bait&quot; content to lure victims to click on it.</p>\n\n<p>The impact is huge because of the following facts:</p>\n\n<ul>\n<li>The card displays directly on the user&#39;s timeline, making the attack less suspicious to normal clickjacking</li>\n<li>The click is very subtle that victims cannot notice what&#39;s happened behind the scene</li>\n<li>Wormable because attacker can make victims tweet arbitrary content to spread it</li>\n<li>Can perform click-based critical actions, like follow, retweet, favorite... etc</li>\n<li>If sent as promoted tweet, it can target even more victims, also player is directly expanded</li>\n</ul>\n\n<h2 id=\"repo-step\">Repo step</h2>\n\n<ol>\n<li>Clone the Player Card started bundle here: <a title=\"https://github.com/twitterdev/cards\" href=\"/redirect?signature=774467f206e5856b27c38a85d54d93f8de38b9dc&amp;url=https%3A%2F%2Fgithub.com%2Ftwitterdev%2Fcards\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/twitterdev/cards</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>Change the card&#39;s property <em>twitter:player</em> to a custom HTML file</li>\n<li>In the HTML file, embed iframe to a Twitter page, e.g. <code>&lt;iframe src=&quot;//twitter.com&quot;&gt;&lt;/iframe&gt;</code>\n</li>\n<li>Post the link in a Tweet (make sure the domain is white-listed)</li>\n<li>Expand the tweet in Safari or IE, it will show that a Twitter page is embedded</li>\n</ol>\n\n<p>Documentation of Player Card: <a title=\"https://dev.twitter.com/cards/types/player\" href=\"/redirect?signature=6333d487eeb7773d916a0ec20e68be81146cfb6d&amp;url=https%3A%2F%2Fdev.twitter.com%2Fcards%2Ftypes%2Fplayer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://dev.twitter.com/cards/types/player</span><i class=\"icon-external-link\"></i></a></p>\n\n<h2 id=\"poc\">PoC</h2>\n\n<p><a title=\"https://twitter.com/AttackerCanvas/status/637859735501279232\" href=\"/redirect?signature=4fca09ea9d7301b37f541de78f542aa5fd074810&amp;url=https%3A%2F%2Ftwitter.com%2FAttackerCanvas%2Fstatus%2F637859735501279232\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://twitter.com/AttackerCanvas/status/637859735501279232</span><i class=\"icon-external-link\"></i></a> (<strong>Open with Safari or IE</strong>)</p>\n\n<p>Video demo: <a title=\"https://vimeo.com/137725491\" href=\"/redirect?signature=147f892574d9bece120cd41a5c4539e3fa8e8066&amp;url=https%3A%2F%2Fvimeo.com%2F137725491\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://vimeo.com/137725491</span><i class=\"icon-external-link\"></i></a> (password: click)</p>\n\n<p>The PoC demonstrates how the attack can be conducted. There will be a fake video to lure victims to click to play it. After clicking the victim will automatically post a tweet with content &quot;Pwn3d!&quot;.</p>\n", 
    "vulnerability_information": "Hi,\r\nI would like to report an issue where player card is vulnerable to clickjacking in certain browsers. This may result in something similar to XSS worm and many other critical damages.\r\n\r\n##Details\r\nTwitter Player Card allows a website to embed a custom player(html) into an iframe in a tweet. There are currently 2-3 security features in place to defend clickjacking on Twitter:\r\n1. ```X-Frame-Options: SAMEORIGIN``` covering the whole twitter.com domain\r\n2. ```Content-Security-Policy: frame-ancestors 'self'``` ditto\r\n3. JS-based frame-buster in some pages (but not all)\r\n\r\nFor (1), SAMEORIGIN only checks if the embedded frame is on the same origin of the top window. For example, attacker can do something like twitter.com -> attacker.com -> twitter.com to evade it. More details can been seen from here: https://bugzilla.mozilla.org/show_bug.cgi?id=725490 \r\nFor (2), this is the only way to correctly prevent framing from other websites (it performs the check against the ancestor list). However this is a CSP2 directive so not all browsers support it. For example, Safari and IE do not support it.\r\nFor (3), using the sandbox attribute of iframe can disable JS of a frame, hence anti-frame-buster\r\n\r\nSince Player Card is shown on a Tweet (on twitter.com), attacker can embed an iframe which embeds a Twitter page so that attacker can overlay it with \"bait\" content to lure victims to click on it.\r\n\r\nThe impact is huge because of the following facts:\r\n* The card displays directly on the user's timeline, making the attack less suspicious to normal clickjacking\r\n* The click is very subtle that victims cannot notice what's happened behind the scene\r\n* Wormable because attacker can make victims tweet arbitrary content to spread it\r\n* Can perform click-based critical actions, like follow, retweet, favorite... etc\r\n* If sent as promoted tweet, it can target even more victims, also player is directly expanded\r\n\r\n##Repo step\r\n1. Clone the Player Card started bundle here: https://github.com/twitterdev/cards\r\n2. Change the card's property *twitter:player* to a custom HTML file\r\n3. In the HTML file, embed iframe to a Twitter page, e.g. ```<iframe src=\"//twitter.com\"></iframe>```\r\n4. Post the link in a Tweet (make sure the domain is white-listed)\r\n5. Expand the tweet in Safari or IE, it will show that a Twitter page is embedded\r\n\r\nDocumentation of Player Card: https://dev.twitter.com/cards/types/player\r\n\r\n##PoC\r\n\r\nhttps://twitter.com/AttackerCanvas/status/637859735501279232 (**Open with Safari or IE**)\r\n\r\nVideo demo: https://vimeo.com/137725491 (password: click)\r\n\r\nThe PoC demonstrates how the attack can be conducted. There will be a fake video to lure victims to click to play it. After clicking the victim will automatically post a tweet with content \"Pwn3d!\".", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://twitter.com", 
            "about": "Twitter helps you create and share ideas and information instantly, without barriers.", 
            "twitter_handle": "twittersecurity", 
            "name": "Twitter"
        }, 
        "handle": "twitter", 
        "url": "https://hackerone.com/twitter", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/061/4acfe72859c5e9cb48a152edb4e498e13fa28df2_small.?1439954730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 61, 
        "default_currency": "usd"
    }, 
    "is_published": false
}