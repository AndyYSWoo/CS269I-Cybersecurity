{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "eveeez", 
        "smit", 
        "k_jagdish", 
        "spetr0x", 
        "vi3hnu"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "50.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 181210, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-11-13T00:35:42.848Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Incorrect detection of onion URLs", 
    "is_member_of_team?": null, 
    "vote_count": 5, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-12-13T00:35:42.886Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$50", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-11-09T23:50:59.333Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-09T23:50:59.333Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "Good catch! I'll get a patch out ASAP.", 
            "markdown_message": "<p>Good catch! I&#39;ll get a patch out ASAP.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1292467, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "e3amn2l", 
                "url": "/e3amn2l"
            }, 
            "created_at": "2016-11-13T00:02:42.906Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-13T00:02:42.906Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "Fixed in v1.x and master:\n\n* https://github.com/paragonie/airship/commit/528a554890262a826ed64c73428659e2d298144b\n* https://github.com/paragonie/airship/commit/2af98122c5dafa127e32e24ab47a945ef6326b67", 
            "markdown_message": "<p>Fixed in v1.x and master:</p>\n\n<ul>\n<li><a title=\"https://github.com/paragonie/airship/commit/528a554890262a826ed64c73428659e2d298144b\" href=\"/redirect?signature=18751b81eae8ccec3cf58d72b48d27111fe2f280&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fcommit%2F528a554890262a826ed64c73428659e2d298144b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/commit/528a554890262a826ed64c73428659e2d298144b</span><i class=\"icon-external-link\"></i></a></li>\n<li><a title=\"https://github.com/paragonie/airship/commit/2af98122c5dafa127e32e24ab47a945ef6326b67\" href=\"/redirect?signature=b114f233fbe72a9c9c6693c38c6c6f4fa10d78df&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fcommit%2F2af98122c5dafa127e32e24ab47a945ef6326b67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/commit/2af98122c5dafa127e32e24ab47a945ef6326b67</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n", 
            "type": "Activities::BugResolved", 
            "id": 1296698, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-13T00:35:42.865Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-13T00:35:42.865Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1296714, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-13T00:43:42.702Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-13T00:43:42.702Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 1296725, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2017-05-04T14:25:28.336Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-05-04T14:25:28.336Z", 
            "actor": {
                "url": "/paragonie", 
                "profile": {
                    "name": "Paragon Initiative Enterprises"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/539/17d54b48e116d815fd72bc29f2cd71df6b3659ad_medium.?1453010804"
                }
            }, 
            "team_handle": "paragonie", 
            "bonus_amount": "0.0", 
            "bounty_amount": "50.0", 
            "collaborator": {
                "username": "e3amn2l", 
                "url": "/e3amn2l"
            }, 
            "message": "Natively supporting Tor Hidden Services is a little complicated since they don't typically use HTTPS (since Tor provides transport-layer encryption). Allowing corner-cases that silently downgraded requests to use HTTP could result in sensitive data exposure in Airship extensions. Fixing this prevents that concern from biting anyone.", 
            "markdown_message": "<p>Natively supporting Tor Hidden Services is a little complicated since they don&#39;t typically use HTTPS (since Tor provides transport-layer encryption). Allowing corner-cases that silently downgraded requests to use HTTP could result in sensitive data exposure in Airship extensions. Fixing this prevents that concern from biting anyone.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 1653868, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "e3amn2l", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/e3amn2l", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -62546641.21009865, 
    "disclosed_at": "2016-11-13T00:43:42.723Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/181210", 
    "created_at": "2016-11-09T23:10:57.601Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Several places have incorrect code to detect if URL point to .onion domain (tor hidden server):</p>\n\n<p>The following regexes:</p>\n<pre class=\"highlight plaintext\"><code>1. #^https://([^/:]+)\\.onion:(?:([0-9]+))#\n2. #^https?://([^/]+)\\.onion#\n</code></pre>\n<p>which is used in:<br>\n<a title=\"https://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Hail.php#L223\" href=\"/redirect?signature=d0041415bb944f0585715d84c91742fe366bd0a3&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F0e9289553cdc538556d362faaee63be6cc534a0c%2Fsrc%2FEngine%2FHail.php%23L223\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Hail.php#L223</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Hail.php#L231\" href=\"/redirect?signature=5d0f316b17f2389c08df7be8b8d385094a24333c&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F0e9289553cdc538556d362faaee63be6cc534a0c%2Fsrc%2FEngine%2FHail.php%23L231\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Hail.php#L231</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>will pass for the following URLs which have example.com as domain and are valid for curl in php (was tested via curl_setopt($ch, CURLOPT_URL, $url))</p>\n<pre class=\"highlight plaintext\"><code>1 =&gt; https://example.com?.onion:443\n1 =&gt; https://example.com&amp;.onion:443\n2 =&gt; http://example.com?.onion\n2 -&gt; http://example.com&amp;.onion\n</code></pre>\n<p>which is problematic because:</p>\n\n<ol>\n<li>\n<p>The code in: will not force HTTPS if url passed the above regex. (thus incorrect check = HTTPS not forced for not .onion domain)<br>\n<a title=\"https://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Hail.php#L228-L229\" href=\"/redirect?signature=fcebe30c08c2c51e756878e7dd49a9b297ad32a0&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F0e9289553cdc538556d362faaee63be6cc534a0c%2Fsrc%2FEngine%2FHail.php%23L228-L229\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Hail.php#L228-L229</span><i class=\"icon-external-link\"></i></a></p>\n<pre class=\"highlight plaintext\"><code>            // Don&#39;t force HTTPS\n            unset($defaults[&#39;curl&#39;][CURLOPT_SSLVERSION]);\n</code></pre>\n</li>\n<li><p>the second regex allow http url (thus incorrect check = HTTP for not .onion domain is vulnerable to MITM)</p></li>\n<li><p>potential of code reuse by people who read the code and assume it&#39;s safe.</p></li>\n</ol>\n\n<p>The following code just search for .onion in $url, for example <a title=\"https://domain.onionweb.com/\" href=\"/redirect?signature=8a63c5a9baee8ec46d400e496ecdff0f9d9cf91b&amp;url=https%3A%2F%2Fdomain.onionweb.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://domain.onionweb.com/</span><i class=\"icon-external-link\"></i></a> will pass the check but isn&#39;t .onion website.</p>\n\n<p>in:<br>\n<a title=\"https://github.com/paragonie/airship/blob/58f96aa0e5002b60e74456502d9bfc9483d77b3d/src/Engine/Keyggdrasil/Peer.php#L50\" href=\"/redirect?signature=88158ad67b66fc21d427ccb9b7232668483621ff&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F58f96aa0e5002b60e74456502d9bfc9483d77b3d%2Fsrc%2FEngine%2FKeyggdrasil%2FPeer.php%23L50\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/58f96aa0e5002b60e74456502d9bfc9483d77b3d/src/Engine/Keyggdrasil/Peer.php#L50</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Continuum/Channel.php#L154\" href=\"/redirect?signature=aba9b86571527765c226f095180f4898b428ccac&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F0e9289553cdc538556d362faaee63be6cc534a0c%2Fsrc%2FEngine%2FContinuum%2FChannel.php%23L154\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Continuum/Channel.php#L154</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Continuum/Channel.php#L239\" href=\"/redirect?signature=003adf01543d7b4d86ed863125142445103dfbc5&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F0e9289553cdc538556d362faaee63be6cc534a0c%2Fsrc%2FEngine%2FContinuum%2FChannel.php%23L239\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Continuum/Channel.php#L239</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://github.com/paragonie/airship/blob/90a8317107ecfdf38be57f36e4a1a81e69280f24/src/Cabin/Bridge/Blueprint/ChannelUpdates.php#L117\" href=\"/redirect?signature=f8f96c5e4f05a877612013443c4573d0b42a19fb&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F90a8317107ecfdf38be57f36e4a1a81e69280f24%2Fsrc%2FCabin%2FBridge%2FBlueprint%2FChannelUpdates.php%23L117\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/90a8317107ecfdf38be57f36e4a1a81e69280f24/src/Cabin/Bridge/Blueprint/ChannelUpdates.php#L117</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://github.com/paragonie/airship/blob/58f96aa0e5002b60e74456502d9bfc9483d77b3d/src/Engine/Keyggdrasil/Peer.php#L82\" href=\"/redirect?signature=36be759d71feaf8df94a28e4d9425366c7339ed3&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F58f96aa0e5002b60e74456502d9bfc9483d77b3d%2Fsrc%2FEngine%2FKeyggdrasil%2FPeer.php%23L82\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/58f96aa0e5002b60e74456502d9bfc9483d77b3d/src/Engine/Keyggdrasil/Peer.php#L82</span><i class=\"icon-external-link\"></i></a></p>\n<pre class=\"highlight plaintext\"><code>            if (\\strpos($url, &#39;.onion&#39;) !== false) {\n</code></pre>\n<p>fix:<br>\n    1. implement and use across the codebase function such as isUrlOnion($url) which return true if url point to onion domain, and use secure implementation, for example:<br>\n        consider using something like:</p>\n<pre class=\"highlight plaintext\"><code>        function isUrlOnion($url) {\n            $host = parse_url($url, PHP_URL_HOST);\n            if($host != null) {\n                return substr_compare($url, &#39;.onion&#39;, -strlen(&#39;.onion&#39;)) === 0;\n            }\n            return false;\n        }\n</code></pre>", 
    "vulnerability_information": "Several places have incorrect code to detect if URL point to .onion domain (tor hidden server):\n\nThe following regexes:\n```\n1. #^https://([^/:]+)\\.onion:(?:([0-9]+))#\n2. #^https?://([^/]+)\\.onion#\n```\n\nwhich is used in:\nhttps://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Hail.php#L223\nhttps://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Hail.php#L231\n\nwill pass for the following URLs which have example.com as domain and are valid for curl in php (was tested via curl_setopt($ch, CURLOPT_URL, $url))\n```\n1 => https://example.com?.onion:443\n1 => https://example.com&.onion:443\n2 => http://example.com?.onion\n2 -> http://example.com&.onion\n```\n\nwhich is problematic because:\n1. The code in: will not force HTTPS if url passed the above regex. (thus incorrect check = HTTPS not forced for not .onion domain)\nhttps://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Hail.php#L228-L229\n```\n                // Don't force HTTPS\n                unset($defaults['curl'][CURLOPT_SSLVERSION]);\n```\n\n2. the second regex allow http url (thus incorrect check = HTTP for not .onion domain is vulnerable to MITM)\n3. potential of code reuse by people who read the code and assume it's safe.\n\nThe following code just search for .onion in $url, for example https://domain.onionweb.com/ will pass the check but isn't .onion website.\n\nin:\nhttps://github.com/paragonie/airship/blob/58f96aa0e5002b60e74456502d9bfc9483d77b3d/src/Engine/Keyggdrasil/Peer.php#L50\nhttps://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Continuum/Channel.php#L154\nhttps://github.com/paragonie/airship/blob/0e9289553cdc538556d362faaee63be6cc534a0c/src/Engine/Continuum/Channel.php#L239\nhttps://github.com/paragonie/airship/blob/90a8317107ecfdf38be57f36e4a1a81e69280f24/src/Cabin/Bridge/Blueprint/ChannelUpdates.php#L117\nhttps://github.com/paragonie/airship/blob/58f96aa0e5002b60e74456502d9bfc9483d77b3d/src/Engine/Keyggdrasil/Peer.php#L82\n\n```\n            if (\\strpos($url, '.onion') !== false) {\n```\n\nfix:\n\t1. implement and use across the codebase function such as isUrlOnion($url) which return true if url point to onion domain, and use secure implementation, for example:\n\t\tconsider using something like:\n```\n\t\tfunction isUrlOnion($url) {\n\t\t\t$host = parse_url($url, PHP_URL_HOST);\n\t\t\tif($host != null) {\n\t\t\t\treturn substr_compare($url, '.onion', -strlen('.onion')) === 0;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n```", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://github.com/paragonie", 
            "about": "Cryptography and Application Security Consultants - We Produce Various Open Source Libraries", 
            "twitter_handle": "ParagonIE", 
            "name": "Paragon Initiative Enterprises"
        }, 
        "handle": "paragonie", 
        "url": "https://hackerone.com/paragonie", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/008/539/a041268a04bb7a5c3d3a88a9dccc6b5955eff4d7_small.?1453010804", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/008/539/17d54b48e116d815fd72bc29f2cd71df6b3659ad_medium.?1453010804"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 8539, 
        "default_currency": "usd"
    }, 
    "is_published": false
}