{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "1000.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 43443, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2014-12-15T00:00:00.000Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "PyUnicode_FromFormatV crasher", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$1,000", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-01-12T06:14:46.724Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-01-12T06:14:46.724Z", 
            "actor": {
                "url": "/ibb-python", 
                "profile": {
                    "name": "Python (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/027/79e9602e5e25d02b7c34cdbc40438408f47e7cd7_medium.png?1383737131"
                }
            }, 
            "team_handle": "ibb-python", 
            "bounty_amount": "1000.0", 
            "collaborator": {
                "username": "guido", 
                "url": "/guido"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 308668, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "guido", 
                "url": "/guido"
            }, 
            "created_at": "2015-01-12T06:14:46.724Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-15T13:29:30.658Z", 
            "actor": {
                "url": "/ibb-python", 
                "profile": {
                    "name": "Python (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/027/79e9602e5e25d02b7c34cdbc40438408f47e7cd7_medium.png?1383737131"
                }
            }, 
            "team_handle": "ibb-python", 
            "message": null, 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1196182, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "guido", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/guido", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/002/983/bc1fffcbbb736a8fa94816a1961b7b76725881eb_small.jpg?1403536399"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2014-12-15T00:00:00.000Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/43443", 
    "created_at": "2014-12-15T00:00:00.000Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>IBB panel,</p>\n\n<p>Please note: this was initially sent (only) to <a title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\">security@python.org</a>. After a short conversation, Guido van Rossum sent me this:</p>\n\n<blockquote>\n<p>I created <a title=\"http://bugs.python.org/issue23055\" href=\"/redirect?signature=8e371ad8216182c6d8167a5fc27cbadd73208981&amp;url=http%3A%2F%2Fbugs.python.org%2Fissue23055\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://bugs.python.org/issue23055</span><i class=\"icon-external-link\"></i></a> for this. I don&#39;t believe there&#39;s much of a security risk in revealing this on the tracker. Someone pleas e review the code and the tests. (Guido, if you can suggest additional tests that would be great.)</p>\n</blockquote>\n\n<p>Meaning it&#39;s public now. Here is the original bug report. Please let me know whether this is eligible under the IBB&#39;s Python bounty program.</p>\n\n<hr>\n\n<p>Dear all,</p>\n\n<p>There&#39;s a bug in Python 2&#39;s C API function PyUnicode_FromFormatV() (and indirectly in its wrapper PyUnicode_FromFormat()) in Objects/unicodeobject.c which can lead to overflowing both a stack-based and a heap-based buffer.</p>\n\n<p>This happens because the code that ought to compute the size of two buffers, fails to execute. This is the size computation routine:</p>\n<pre class=\"highlight plaintext\"><code> 760     /* step 3: figure out how large a buffer we need */\n 761     for (f = format; *f; f++) {\n 762         if (*f == &#39;%&#39;) {\n 763             const char* p = f;\n 764             width = 0;\n 765             while (isdigit((unsigned)*f))\n 766                 width = (width*10) + *f++ - &#39;0&#39;;\n 767             while (*++f &amp;&amp; *f != &#39;%&#39; &amp;&amp; !isalpha((unsigned)*f))\n</code></pre>\n<p>The expressions on line 762 and line 765 can never both be true; if *f == &#39;%&#39;, isdigit((unsigned)%f) can not evaluate as true. Even if it would execute, there&#39;s still code that computes the precision component of the format specifier. Later on, in the loop that actually processes the individual format specifiers, the code is done right:</p>\n<pre class=\"highlight plaintext\"><code> 917             const char* p = f++;\n 918             int longflag = 0;\n 919             int size_tflag = 0;\n 920             zeropad = (*f == &#39;0&#39;);\n 921             /* parse the width.precision part */\n 922             width = 0;\n 923             while (isdigit((unsigned)*f))\n 924                 width = (width*10) + *f++ - &#39;0&#39;;\n 925             precision = 0;\n 926             if (*f == &#39;.&#39;) {\n 927                 f++;\n 928                 while (isdigit((unsigned)*f))\n 929                     precision = (precision*10) + *f++ - &#39;0&#39;;\n 930             }\n</code></pre>\n<p>The actual, current bug comes down to this: both types of padding parameters (width and precision) in the format specifier are ignored when computing the size of the buffers designated to hold sprintf&#39;s output, while in the actual calls to sprintf, these are accounted for.</p>\n<pre class=\"highlight plaintext\"><code> 947             case &#39;d&#39;:\n 948                 makefmt(fmt, longflag, size_tflag, zeropad, width, precision, &#39;d&#39;);\n 949                 if (longflag)\n 950                     sprintf(realbuffer, fmt, va_arg(vargs, long));\n 951                 else if (size_tflag)\n 952                     sprintf(realbuffer, fmt, va_arg(vargs, Py_ssize_t));\n 953                 else\n 954                     sprintf(realbuffer, fmt, va_arg(vargs, int));\n 955                 appendstring(realbuffer);\n 956                 break;\n 957             case &#39;u&#39;:\n 958                 makefmt(fmt, longflag, size_tflag, zeropad, width, precision, &#39;u&#39;);\n 959                 if (longflag)\n 960                     sprintf(realbuffer, fmt, va_arg(vargs, unsigned long));\n 961                 else if (size_tflag)\n 962                     sprintf(realbuffer, fmt, va_arg(vargs, size_t));\n 963                 else\n 964                     sprintf(realbuffer, fmt, va_arg(vargs, unsigned int));\n 965                 appendstring(realbuffer);\n 966                 break;\n 967             case &#39;i&#39;:\n 968                 makefmt(fmt, 0, 0, zeropad, width, precision, &#39;i&#39;);\n 969                 sprintf(realbuffer, fmt, va_arg(vargs, int));\n 970                 appendstring(realbuffer);\n 971                 break;\n 972             case &#39;x&#39;:\n 973                 makefmt(fmt, 0, 0, zeropad, width, precision, &#39;x&#39;);\n 974                 sprintf(realbuffer, fmt, va_arg(vargs, int));\n 975                 appendstring(realbuffer);\n 976                 break;\n</code></pre>\n<p>makefmt constructs a format specifier string based on width, precision and other parameters. Subsequently, this format specifier string is supplied to sprintf which will write a padded string to &#39;realbuffer&#39; as requested. Since realbuffer points to the stack-based &#39;char buffer[21]&#39;, this will cause a stack-based overwrite:</p>\n<pre class=\"highlight plaintext\"><code> 894     if (abuffersize &gt; 20) {\n 895         abuffer = PyObject_Malloc(abuffersize);\n 896         if (!abuffer) {\n 897             PyErr_NoMemory();\n 898             goto fail;\n 899         }\n 900         realbuffer = abuffer;\n 901     }\n 902     else\n 903         realbuffer = buffer;\n</code></pre>\n<p>The &#39;abuffersize &gt; 20&#39; condition can never be true, since &#39;abuffersize&#39; is defined earlier on as:</p>\n<pre class=\"highlight plaintext\"><code> 808                 if (width &lt; 20)\n 809                     width = 20;\n 810                 n += width;\n 811                 if (abuffersize &lt; width)\n 812                     abuffersize = width;\n</code></pre>\n<p>which will always cause abuffersize to be 20, since width is always 0, since the code that ought to compute &#39;width&#39; never runs.</p>\n\n<p>After the sprintf, which causes the stack-based buffer overflow, there&#39;s this:</p>\n<pre class=\"highlight plaintext\"><code> 955                 appendstring(realbuffer);\n\n 693 #define appendstring(string) \\\n 694     do { \\\n 695         for (copy = string;*copy; copy++) { \\\n 696             *s++ = (unsigned char)*copy; \\\n 697         } \\\n 698     } while (0)\n</code></pre>\n<p>&#39;s&#39; is space allocated based on &#39;n&#39;:</p>\n<pre class=\"highlight plaintext\"><code> 908     string = PyUnicode_FromUnicode(NULL, n);\n 909     if (!string)\n 910         goto fail;\n 911\n 912     s = PyUnicode_AS_UNICODE(string);\n 913     callresult = callresults;\n</code></pre>\n<p>and &#39;n&#39; never accounts for any width or precision parameters either, so &#39;s&#39; is always too small if width and optionally precision parameters are present. Thus, appendstring(realbuffer); results in a heap-based overflow.</p>\n\n<p>Here&#39;s a patch:</p>\n<pre class=\"highlight diff\"><code><span class=\"gh\">diff -r baa5258bef22 Objects/unicodeobject.c\n</span><span class=\"gd\">--- a/Objects/unicodeobject.c    Sat Dec 13 16:06:19 2014 -0500\n</span><span class=\"gi\">+++ b/Objects/unicodeobject.c    Sun Dec 14 22:14:39 2014 +0100\n</span><span class=\"gu\">@@ -760,12 +760,18 @@\n</span>     /* step 3: figure out how large a buffer we need */\n     for (f = format; *f; f++) {\n         if (*f == &#39;%&#39;) {\n<span class=\"gd\">-            const char* p = f;\n</span><span class=\"gi\">+            const char* p = f++;\n</span>             width = 0;\n<span class=\"gi\">+            precision = 0;\n</span>             while (isdigit((unsigned)*f))\n                 width = (width*10) + *f++ - &#39;0&#39;;\n<span class=\"gd\">-            while (*++f &amp;&amp; *f != &#39;%&#39; &amp;&amp; !isalpha((unsigned)*f))\n-                ;\n</span><span class=\"gi\">+            if (*f == &#39;.&#39;) {\n+                f++;\n+                while (isdigit((unsigned)*f))\n+                    precision = (precision*10) + *f++ - &#39;0&#39;;\n+            }\n+            while (*f &amp;&amp; *f != &#39;%&#39; &amp;&amp; !isalpha((unsigned)*f))\n+                f++;\n</span></code></pre><pre class=\"highlight plaintext\"><code>             /* skip the &#39;l&#39; or &#39;z&#39; in {%ld, %zd, %lu, %zu} since\n              * they don&#39;t affect the amount of space we reserve.\n@@ -805,11 +811,9 @@\n                    This isn&#39;t enough for octal.\n                    If a width is specified we need more\n                    (which we allocate later). */\n-                if (width &lt; 20)\n-                    width = 20;\n-                n += width;\n-                if (abuffersize &lt; width)\n-                    abuffersize = width;\n+                n += (width + precision) &lt; 20 ? 20 : (width + precision);\n+                if (abuffersize &lt; (width + precision) )\n+                    abuffersize = width + precision;\n                 break;\n             case &#39;s&#39;:\n             {\n</code></pre>\n<p>Aside from general memory corruption errors caused by this bug, there&#39;s the additional danger of code execution in instances where a user or entity can control the &#39;format&#39; parameter of the PyUnicode_FromFormat()/PyUnicode_FromFormatV functions, and of sidetracking audits of code that uses these functions because of the unexpected behavior it can entail.</p>\n", 
    "vulnerability_information": "IBB panel,\n\nPlease note: this was initially sent (only) to security@python.org. After a short conversation, Guido van Rossum sent me this:\n\n> I created http://bugs.python.org/issue23055 for this. I don't believe there's much of a security risk in revealing this on the tracker. Someone pleas e review the code and the tests. (Guido, if you can suggest additional tests that would be great.)\n\nMeaning it's public now. Here is the original bug report. Please let me know whether this is eligible under the IBB's Python bounty program.\n\n---------\nDear all,\n\nThere's a bug in Python 2's C API function PyUnicode_FromFormatV() (and indirectly in its wrapper PyUnicode_FromFormat()) in Objects/unicodeobject.c which can lead to overflowing both a stack-based and a heap-based buffer.\n\nThis happens because the code that ought to compute the size of two buffers, fails to execute. This is the size computation routine:\n\n```\n 760     /* step 3: figure out how large a buffer we need */\n 761     for (f = format; *f; f++) {\n 762         if (*f == '%') {\n 763             const char* p = f;\n 764             width = 0;\n 765             while (isdigit((unsigned)*f))\n 766                 width = (width*10) + *f++ - '0';\n 767             while (*++f && *f != '%' && !isalpha((unsigned)*f))\n```\n\nThe expressions on line 762 and line 765 can never both be true; if *f == '%', isdigit((unsigned)%f) can not evaluate as true. Even if it would execute, there's still code that computes the precision component of the format specifier. Later on, in the loop that actually processes the individual format specifiers, the code is done right:\n\n```\n 917             const char* p = f++;\n 918             int longflag = 0;\n 919             int size_tflag = 0;\n 920             zeropad = (*f == '0');\n 921             /* parse the width.precision part */\n 922             width = 0;\n 923             while (isdigit((unsigned)*f))\n 924                 width = (width*10) + *f++ - '0';\n 925             precision = 0;\n 926             if (*f == '.') {\n 927                 f++;\n 928                 while (isdigit((unsigned)*f))\n 929                     precision = (precision*10) + *f++ - '0';\n 930             }\n```\n\nThe actual, current bug comes down to this: both types of padding parameters (width and precision) in the format specifier are ignored when computing the size of the buffers designated to hold sprintf's output, while in the actual calls to sprintf, these are accounted for.\n\n```\n 947             case 'd':\n 948                 makefmt(fmt, longflag, size_tflag, zeropad, width, precision, 'd');\n 949                 if (longflag)\n 950                     sprintf(realbuffer, fmt, va_arg(vargs, long));\n 951                 else if (size_tflag)\n 952                     sprintf(realbuffer, fmt, va_arg(vargs, Py_ssize_t));\n 953                 else\n 954                     sprintf(realbuffer, fmt, va_arg(vargs, int));\n 955                 appendstring(realbuffer);\n 956                 break;\n 957             case 'u':\n 958                 makefmt(fmt, longflag, size_tflag, zeropad, width, precision, 'u');\n 959                 if (longflag)\n 960                     sprintf(realbuffer, fmt, va_arg(vargs, unsigned long));\n 961                 else if (size_tflag)\n 962                     sprintf(realbuffer, fmt, va_arg(vargs, size_t));\n 963                 else\n 964                     sprintf(realbuffer, fmt, va_arg(vargs, unsigned int));\n 965                 appendstring(realbuffer);\n 966                 break;\n 967             case 'i':\n 968                 makefmt(fmt, 0, 0, zeropad, width, precision, 'i');\n 969                 sprintf(realbuffer, fmt, va_arg(vargs, int));\n 970                 appendstring(realbuffer);\n 971                 break;\n 972             case 'x':\n 973                 makefmt(fmt, 0, 0, zeropad, width, precision, 'x');\n 974                 sprintf(realbuffer, fmt, va_arg(vargs, int));\n 975                 appendstring(realbuffer);\n 976                 break;\n```\n\nmakefmt constructs a format specifier string based on width, precision and other parameters. Subsequently, this format specifier string is supplied to sprintf which will write a padded string to 'realbuffer' as requested. Since realbuffer points to the stack-based 'char buffer[21]', this will cause a stack-based overwrite:\n\n```\n 894     if (abuffersize > 20) {\n 895         abuffer = PyObject_Malloc(abuffersize);\n 896         if (!abuffer) {\n 897             PyErr_NoMemory();\n 898             goto fail;\n 899         }\n 900         realbuffer = abuffer;\n 901     }\n 902     else\n 903         realbuffer = buffer;\n```\n\nThe 'abuffersize > 20' condition can never be true, since 'abuffersize' is defined earlier on as:\n\n```\n 808                 if (width < 20)\n 809                     width = 20;\n 810                 n += width;\n 811                 if (abuffersize < width)\n 812                     abuffersize = width;\n```\n\nwhich will always cause abuffersize to be 20, since width is always 0, since the code that ought to compute 'width' never runs.\n\nAfter the sprintf, which causes the stack-based buffer overflow, there's this:\n\n```\n 955                 appendstring(realbuffer);\n\n 693 #define appendstring(string) \\\n 694     do { \\\n 695         for (copy = string;*copy; copy++) { \\\n 696             *s++ = (unsigned char)*copy; \\\n 697         } \\\n 698     } while (0)\n```\n\n's' is space allocated based on 'n':\n\n```\n 908     string = PyUnicode_FromUnicode(NULL, n);\n 909     if (!string)\n 910         goto fail;\n 911\n 912     s = PyUnicode_AS_UNICODE(string);\n 913     callresult = callresults;\n```\n\nand 'n' never accounts for any width or precision parameters either, so 's' is always too small if width and optionally precision parameters are present. Thus, appendstring(realbuffer); results in a heap-based overflow.\n\nHere's a patch:\n\n```\ndiff -r baa5258bef22 Objects/unicodeobject.c\n--- a/Objects/unicodeobject.c    Sat Dec 13 16:06:19 2014 -0500\n+++ b/Objects/unicodeobject.c    Sun Dec 14 22:14:39 2014 +0100\n@@ -760,12 +760,18 @@\n     /* step 3: figure out how large a buffer we need */\n     for (f = format; *f; f++) {\n         if (*f == '%') {\n-            const char* p = f;\n+            const char* p = f++;\n             width = 0;\n+            precision = 0;\n             while (isdigit((unsigned)*f))\n                 width = (width*10) + *f++ - '0';\n-            while (*++f && *f != '%' && !isalpha((unsigned)*f))\n-                ;\n+            if (*f == '.') {\n+                f++;\n+                while (isdigit((unsigned)*f))\n+                    precision = (precision*10) + *f++ - '0';\n+            }\n+            while (*f && *f != '%' && !isalpha((unsigned)*f))\n+                f++;\n```\n \n```\n             /* skip the 'l' or 'z' in {%ld, %zd, %lu, %zu} since\n              * they don't affect the amount of space we reserve.\n@@ -805,11 +811,9 @@\n                    This isn't enough for octal.\n                    If a width is specified we need more\n                    (which we allocate later). */\n-                if (width < 20)\n-                    width = 20;\n-                n += width;\n-                if (abuffersize < width)\n-                    abuffersize = width;\n+                n += (width + precision) < 20 ? 20 : (width + precision);\n+                if (abuffersize < (width + precision) )\n+                    abuffersize = width + precision;\n                 break;\n             case 's':\n             {\n```\n\nAside from general memory corruption errors caused by this bug, there's the additional danger of code execution in instances where a user or entity can control the 'format' parameter of the PyUnicode_FromFormat()/PyUnicode_FromFormatV functions, and of sidetracking audits of code that uses these functions because of the unexpected behavior it can entail.\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.python.org/news/security", 
            "about": "", 
            "twitter_handle": "", 
            "name": "Python (IBB)"
        }, 
        "handle": "ibb-python", 
        "url": "https://hackerone.com/ibb-python", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/027/22df52945ba6933f27a1dbc92380fe19a4a1a93d_small.png?1383737131", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/027/79e9602e5e25d02b7c34cdbc40438408f47e7cd7_medium.png?1383737131"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 27, 
        "default_currency": "usd"
    }, 
    "is_published": false
}