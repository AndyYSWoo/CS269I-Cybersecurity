{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": true, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "princezar", 
        "jokebookservice1", 
        "tomdev", 
        "mvc", 
        "michiel", 
        "spam404", 
        "kapytein", 
        "cdl", 
        "hackerhero", 
        "mik317", 
        "and 49 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 398163, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "DOM based XSS on *.\u2588\u2588\u2588\u2588\u2588\u2588.com via document.domain sink in Safari", 
    "is_member_of_team?": null, 
    "vote_count": 59, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 9837, 
            "content": "\n\u2588\u2588\u2588\u2588\u2588\u2588 has a lot of services hosted on subdomains (e.g. mail.\u2588\u2588\u2588\u2588\u2588\u2588.com and news.\u2588\u2588\u2588\u2588\u2588\u2588.com). Naturally, SSO is used to centralize authentication. Because the authentication service is hosted on auth.\u2588\u2588\u2588\u2588\u2588\u2588.com, there needs to be a way for the session token to be passed to other subdomains due to SOP. One way to do cross origin messaging is `window.postMessage()`. While being supported in all modern browsers, it does not work well in Internet Explorer 9 and below. Since \u2588\u2588\u2588\u2588\u2588\u2588 also targets users using old browers, `document.domain` was used instead.\n\n`document.domain` is an old technique to loosen SOP. If two origins with the same \"superdomain\" want to communicate to each other (e.g. foo.example.com and bar.example.com), they can both do `document.domain = 'example.com`, and then they can access each other's DOM. This was exactly what \u2588\u2588\u2588\u2588\u2588\u2588 did.\n\nFile: [http://auth.\u2588\u2588\u2588\u2588\u2588\u2588.com/receiver.html](https://example.com)\n\nCode: \n```javascript\n        var q = location.hash.substr(1).split('&');\n\n        for (var i = 0, l = q.length; i < l; i++) {\n            var p = q[i].split('=');\n            params[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);\n        }\n        try {\n            if (params['domain']) {\n                document.domain = params['domain']; // document.domain assignment\n            }\n            var broker = window.opener.broker; // reference to opener's function to handle session token \n            if (params['status'] == 'ok') {\n                broker.onSuccess(params);\n            } else {\n                broker.onFailure(params);\n            }\n            window.close();\n        } catch (e) {\n            window.close();\n        }\n    };\n```\n\nThis page passes everything in URL fragment, including session token, to the opener. It accepts parameter `domain` and assigns it to `document.domain`. A service on *.\u2588\u2588\u2588\u2588\u2588\u2588.com looking to automatically authenticate users would do the following:\n\n1. Execute `document.domain = '\u2588\u2588\u2588\u2588\u2588\u2588.com`\n2. Open [https://auth.\u2588\u2588\u2588\u2588\u2588\u2588.com](https://example.com) which redirects to [https://auth.\u2588\u2588\u2588\u2588\u2588\u2588.com/receiver.html#domain=\u2588\u2588\u2588\u2588\u2588\u2588.com&token=...](https://example.com)\n4. `window.opener.broker.onSuccess` is now accessible to auth.\u2588\u2588\u2588\u2588\u2588\u2588.com\n\nThere is one thing not mentioned yet: what is a \"superdomain\"? It differs for diffrent browsers. Can foo.com and bar.com, sharing the \"superdomain\" `com`, both do `document.domain = 'com'` and communicate to each other? The answer is no, at least for most browsers. Websites can only set `document.domain` up to [eTLD+1](https://publicsuffix.org/). This is a security measure preventing lazy developers from over loosening SOP by making their website's DOM accessible universally. Assigning `document.domain` to something like `com`, or even `co.uk`, would result in an error:\n{F336596}\n\nHowever, Safari does not have such restrictions. `document.domain = 'com'` would not result in any error. If foo.com does `document.domain = 'com'`, evil.com can do the same and access its DOM. This is exactly the issue of \u2588\u2588\u2588\u2588\u2588\u2588's SSO apporach. \n{F336597}\n\nPoC (assuming hosted on https://evil.com and visited in Safari):\n```html\n<script>\ndocument.domain = 'com';\n</script>\n<iframe src=\"https://auth.\u2588\u2588\u2588\u2588\u2588\u2588.com/receiver.html#domain=com\"\nonload=\"contentWindow.alert(location)\"></iframe>\n```\n\nThe best part is, apparently every service that wants to use SSO needs to do `document.domain = '\u2588\u2588\u2588\u2588\u2588\u2588.com'`. Therefore, a XSS on any subdomain of \u2588\u2588\u2588\u2588\u2588\u2588 can access all other subdomain's DOM. In this particular issue for example, after getting DOM access on auth.\u2588\u2588\u2588\u2588\u2588\u2588.com, we can do  `document.domain = '\u2588\u2588\u2588\u2588\u2588\u2588.com'` and pop alerts on any subdomains.", 
            "content_html": "<p>\u2588\u2588\u2588\u2588\u2588\u2588 has a lot of services hosted on subdomains (e.g. mail.\u2588\u2588\u2588\u2588\u2588\u2588.com and news.\u2588\u2588\u2588\u2588\u2588\u2588.com). Naturally, SSO is used to centralize authentication. Because the authentication service is hosted on auth.\u2588\u2588\u2588\u2588\u2588\u2588.com, there needs to be a way for the session token to be passed to other subdomains due to SOP. One way to do cross origin messaging is <code>window.postMessage()</code>. While being supported in all modern browsers, it does not work well in Internet Explorer 9 and below. Since \u2588\u2588\u2588\u2588\u2588\u2588 also targets users using old browers, <code>document.domain</code> was used instead.</p>\n\n<p><code>document.domain</code> is an old technique to loosen SOP. If two origins with the same &quot;superdomain&quot; want to communicate to each other (e.g. foo.example.com and bar.example.com), they can both do <code>document.domain = &#39;example.com</code>, and then they can access each other&#39;s DOM. This was exactly what \u2588\u2588\u2588\u2588\u2588\u2588 did.</p>\n\n<p>File: <a href=\"/redirect?signature=c1090c16831405a5e6776a27873575899c1820d4&amp;url=https%3A%2F%2Fexample.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://auth.\u2588\u2588\u2588\u2588\u2588\u2588.com/receiver.html</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Code: </p>\n<pre class=\"highlight javascript\"><code>        <span class=\"kd\">var</span> <span class=\"nx\">q</span> <span class=\"o\">=</span> <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">hash</span><span class=\"p\">.</span><span class=\"nx\">substr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;&amp;&#39;</span><span class=\"p\">);</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">l</span> <span class=\"o\">=</span> <span class=\"nx\">q</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">l</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nx\">q</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;=&#39;</span><span class=\"p\">);</span>\n            <span class=\"nx\">params</span><span class=\"p\">[</span><span class=\"nb\">decodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span> <span class=\"o\">=</span> <span class=\"nb\">decodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;domain&#39;</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">domain</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;domain&#39;</span><span class=\"p\">];</span> <span class=\"c1\">// document.domain assignment</span>\n            <span class=\"p\">}</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">broker</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">opener</span><span class=\"p\">.</span><span class=\"nx\">broker</span><span class=\"p\">;</span> <span class=\"c1\">// reference to opener&#39;s function to handle session token </span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">[</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;ok&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">broker</span><span class=\"p\">.</span><span class=\"nx\">onSuccess</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"nx\">broker</span><span class=\"p\">.</span><span class=\"nx\">onFailure</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n</code></pre>\n<p>This page passes everything in URL fragment, including session token, to the opener. It accepts parameter <code>domain</code> and assigns it to <code>document.domain</code>. A service on *.\u2588\u2588\u2588\u2588\u2588\u2588.com looking to automatically authenticate users would do the following:</p>\n\n<ol>\n<li>Execute <code>document.domain = &#39;\u2588\u2588\u2588\u2588\u2588\u2588.com</code>\n</li>\n<li>Open <a href=\"/redirect?signature=c1090c16831405a5e6776a27873575899c1820d4&amp;url=https%3A%2F%2Fexample.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://auth.\u2588\u2588\u2588\u2588\u2588\u2588.com</span><i class=\"icon-external-link\"></i></a> which redirects to <a href=\"/redirect?signature=c1090c16831405a5e6776a27873575899c1820d4&amp;url=https%3A%2F%2Fexample.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://auth.\u2588\u2588\u2588\u2588\u2588\u2588.com/receiver.html#domain=\u2588\u2588\u2588\u2588\u2588\u2588.com&amp;token=...</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>\n<code>window.opener.broker.onSuccess</code> is now accessible to auth.\u2588\u2588\u2588\u2588\u2588\u2588.com</li>\n</ol>\n\n<p>There is one thing not mentioned yet: what is a &quot;superdomain&quot;? It differs for diffrent browsers. Can foo.com and bar.com, sharing the &quot;superdomain&quot; <code>com</code>, both do <code>document.domain = &#39;com&#39;</code> and communicate to each other? The answer is no, at least for most browsers. Websites can only set <code>document.domain</code> up to <a href=\"/redirect?signature=ce361ae23ef701a1d7b12e40f5792ebc7bedcd9b&amp;url=https%3A%2F%2Fpublicsuffix.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>eTLD+1</span><i class=\"icon-external-link\"></i></a>. This is a security measure preventing lazy developers from over loosening SOP by making their website&#39;s DOM accessible universally. Assigning <code>document.domain</code> to something like <code>com</code>, or even <code>co.uk</code>, would result in an error:<br>\n<a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"chrome.jpg\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/336/596/57636e96c09809604b6d1da8a34e14dabeb51849/chrome.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ2G5YP65E%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221737Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDBU1F5krpICaZ0NqsCK3A6VE3SvOEqtR6mTF0RGsq2RFtP%2BeCnscHc5QWUWgfaEy6uXh0YyE%2Bu%2FBf1bgQOuQySCtb1Z%2BZ6sLON3HRMq%2BgYmhgdN4si0rU1p4nOiBj6crMBDlPKrwCFw0SRWaa%2FeWJtScRo9HMxA318TQuy1cnz2RYUYCxaU0Jci%2BrDGNmR0becuinzwZxwbm9sdysqqkTqFq64D7gI7nTrej5s6rDW11vFWqHpUP2d1FhvBaFOAjy8GP523rvRQSSyFkXe9YJUVlNrSLtqEAenEAnsweq3B3e669G9C%2FHm8G06ThADW69XI9pnMKVDT3FsJRtvkiltR9fsPJGB94knGZqwwdAK33UZ6TzU7QFoNEMoH%2BuvrEkO7SW8nmlfngtoX7AqMEGVMNAktUrQgR3jBfz1AXbDyaVpNINObIwvcxkjAPeH%2BJ9fJANeefQc2S9wtnpHnZGI8bjrMu%2F%2BBZHNLud7642CzhDwWVt363%2B%2B45PABKA6apczYhBSmM6I6woOQCnxMCpcKiqGyhztmN1LCRqv7FY5wPxjrGQArJvuYDfVGrN5Q7QMy6qocAzCdmYXfTag83vWxBpO15sjYooKOm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=8ce2fc2595b2eafa6b69c34e57c1dcfa8c65b75089317f8dab1a68baa1a8266d\" data-attachment-type=\"image/jpeg\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/336/596/57636e96c09809604b6d1da8a34e14dabeb51849/chrome.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ2G5YP65E%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221737Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDBU1F5krpICaZ0NqsCK3A6VE3SvOEqtR6mTF0RGsq2RFtP%2BeCnscHc5QWUWgfaEy6uXh0YyE%2Bu%2FBf1bgQOuQySCtb1Z%2BZ6sLON3HRMq%2BgYmhgdN4si0rU1p4nOiBj6crMBDlPKrwCFw0SRWaa%2FeWJtScRo9HMxA318TQuy1cnz2RYUYCxaU0Jci%2BrDGNmR0becuinzwZxwbm9sdysqqkTqFq64D7gI7nTrej5s6rDW11vFWqHpUP2d1FhvBaFOAjy8GP523rvRQSSyFkXe9YJUVlNrSLtqEAenEAnsweq3B3e669G9C%2FHm8G06ThADW69XI9pnMKVDT3FsJRtvkiltR9fsPJGB94knGZqwwdAK33UZ6TzU7QFoNEMoH%2BuvrEkO7SW8nmlfngtoX7AqMEGVMNAktUrQgR3jBfz1AXbDyaVpNINObIwvcxkjAPeH%2BJ9fJANeefQc2S9wtnpHnZGI8bjrMu%2F%2BBZHNLud7642CzhDwWVt363%2B%2B45PABKA6apczYhBSmM6I6woOQCnxMCpcKiqGyhztmN1LCRqv7FY5wPxjrGQArJvuYDfVGrN5Q7QMy6qocAzCdmYXfTag83vWxBpO15sjYooKOm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=8ce2fc2595b2eafa6b69c34e57c1dcfa8c65b75089317f8dab1a68baa1a8266d\" class=\"markdown-inline-image\"></a></p>\n\n<p>However, Safari does not have such restrictions. <code>document.domain = &#39;com&#39;</code> would not result in any error. If foo.com does <code>document.domain = &#39;com&#39;</code>, evil.com can do the same and access its DOM. This is exactly the issue of \u2588\u2588\u2588\u2588\u2588\u2588&#39;s SSO apporach. <br>\n<a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"safari.jpg\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/336/597/0b304a67eb93db98488d0c815bb492d5d332fa6d/safari.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ2G5YP65E%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221737Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDBU1F5krpICaZ0NqsCK3A6VE3SvOEqtR6mTF0RGsq2RFtP%2BeCnscHc5QWUWgfaEy6uXh0YyE%2Bu%2FBf1bgQOuQySCtb1Z%2BZ6sLON3HRMq%2BgYmhgdN4si0rU1p4nOiBj6crMBDlPKrwCFw0SRWaa%2FeWJtScRo9HMxA318TQuy1cnz2RYUYCxaU0Jci%2BrDGNmR0becuinzwZxwbm9sdysqqkTqFq64D7gI7nTrej5s6rDW11vFWqHpUP2d1FhvBaFOAjy8GP523rvRQSSyFkXe9YJUVlNrSLtqEAenEAnsweq3B3e669G9C%2FHm8G06ThADW69XI9pnMKVDT3FsJRtvkiltR9fsPJGB94knGZqwwdAK33UZ6TzU7QFoNEMoH%2BuvrEkO7SW8nmlfngtoX7AqMEGVMNAktUrQgR3jBfz1AXbDyaVpNINObIwvcxkjAPeH%2BJ9fJANeefQc2S9wtnpHnZGI8bjrMu%2F%2BBZHNLud7642CzhDwWVt363%2B%2B45PABKA6apczYhBSmM6I6woOQCnxMCpcKiqGyhztmN1LCRqv7FY5wPxjrGQArJvuYDfVGrN5Q7QMy6qocAzCdmYXfTag83vWxBpO15sjYooKOm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=ba6f39a02e1b1c7181496d4c7e32cd52bfbff5890fa6a5d382be2d4e8c695da9\" data-attachment-type=\"image/jpeg\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/336/597/0b304a67eb93db98488d0c815bb492d5d332fa6d/safari.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ2G5YP65E%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T221737Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDBU1F5krpICaZ0NqsCK3A6VE3SvOEqtR6mTF0RGsq2RFtP%2BeCnscHc5QWUWgfaEy6uXh0YyE%2Bu%2FBf1bgQOuQySCtb1Z%2BZ6sLON3HRMq%2BgYmhgdN4si0rU1p4nOiBj6crMBDlPKrwCFw0SRWaa%2FeWJtScRo9HMxA318TQuy1cnz2RYUYCxaU0Jci%2BrDGNmR0becuinzwZxwbm9sdysqqkTqFq64D7gI7nTrej5s6rDW11vFWqHpUP2d1FhvBaFOAjy8GP523rvRQSSyFkXe9YJUVlNrSLtqEAenEAnsweq3B3e669G9C%2FHm8G06ThADW69XI9pnMKVDT3FsJRtvkiltR9fsPJGB94knGZqwwdAK33UZ6TzU7QFoNEMoH%2BuvrEkO7SW8nmlfngtoX7AqMEGVMNAktUrQgR3jBfz1AXbDyaVpNINObIwvcxkjAPeH%2BJ9fJANeefQc2S9wtnpHnZGI8bjrMu%2F%2BBZHNLud7642CzhDwWVt363%2B%2B45PABKA6apczYhBSmM6I6woOQCnxMCpcKiqGyhztmN1LCRqv7FY5wPxjrGQArJvuYDfVGrN5Q7QMy6qocAzCdmYXfTag83vWxBpO15sjYooKOm4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=ba6f39a02e1b1c7181496d4c7e32cd52bfbff5890fa6a5d382be2d4e8c695da9\" class=\"markdown-inline-image\"></a></p>\n\n<p>PoC (assuming hosted on <a title=\"https://evil.com\" href=\"/redirect?signature=7d1ccacbd0d7788e92e54fa6b3e39e990b117053&amp;url=https%3A%2F%2Fevil.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://evil.com</span><i class=\"icon-external-link\"></i></a> and visited in Safari):</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;script&gt;</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">domain</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;com&#39;</span><span class=\"p\">;</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;iframe</span> <span class=\"na\">src=</span><span class=\"s\">&quot;https://auth.\u2588\u2588\u2588\u2588\u2588\u2588.com/receiver.html#domain=com&quot;</span>\n<span class=\"na\">onload=</span><span class=\"s\">&quot;contentWindow.alert(location)&quot;</span><span class=\"nt\">&gt;&lt;/iframe&gt;</span>\n</code></pre>\n<p>The best part is, apparently every service that wants to use SSO needs to do <code>document.domain = &#39;\u2588\u2588\u2588\u2588\u2588\u2588.com&#39;</code>. Therefore, a XSS on any subdomain of \u2588\u2588\u2588\u2588\u2588\u2588 can access all other subdomain&#39;s DOM. In this particular issue for example, after getting DOM access on auth.\u2588\u2588\u2588\u2588\u2588\u2588.com, we can do  <code>document.domain = &#39;\u2588\u2588\u2588\u2588\u2588\u2588.com&#39;</code> and pop alerts on any subdomains.</p>\n"
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "attachments": [
        {
            "file_name": "chrome.jpg", 
            "type": "image/jpeg", 
            "id": 336596, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/336/596/57636e96c09809604b6d1da8a34e14dabeb51849/chrome.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2G5YP65E%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221737Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDBU1F5krpICaZ0NqsCK3A6VE3SvOEqtR6mTF0RGsq2RFtP%2BeCnscHc5QWUWgfaEy6uXh0YyE%2Bu%2FBf1bgQOuQySCtb1Z%2BZ6sLON3HRMq%2BgYmhgdN4si0rU1p4nOiBj6crMBDlPKrwCFw0SRWaa%2FeWJtScRo9HMxA318TQuy1cnz2RYUYCxaU0Jci%2BrDGNmR0becuinzwZxwbm9sdysqqkTqFq64D7gI7nTrej5s6rDW11vFWqHpUP2d1FhvBaFOAjy8GP523rvRQSSyFkXe9YJUVlNrSLtqEAenEAnsweq3B3e669G9C%2FHm8G06ThADW69XI9pnMKVDT3FsJRtvkiltR9fsPJGB94knGZqwwdAK33UZ6TzU7QFoNEMoH%2BuvrEkO7SW8nmlfngtoX7AqMEGVMNAktUrQgR3jBfz1AXbDyaVpNINObIwvcxkjAPeH%2BJ9fJANeefQc2S9wtnpHnZGI8bjrMu%2F%2BBZHNLud7642CzhDwWVt363%2B%2B45PABKA6apczYhBSmM6I6woOQCnxMCpcKiqGyhztmN1LCRqv7FY5wPxjrGQArJvuYDfVGrN5Q7QMy6qocAzCdmYXfTag83vWxBpO15sjYooKOm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8ce2fc2595b2eafa6b69c34e57c1dcfa8c65b75089317f8dab1a68baa1a8266d"
        }, 
        {
            "file_name": "safari.jpg", 
            "type": "image/jpeg", 
            "id": 336597, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/336/597/0b304a67eb93db98488d0c815bb492d5d332fa6d/safari.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2G5YP65E%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T221737Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDBU1F5krpICaZ0NqsCK3A6VE3SvOEqtR6mTF0RGsq2RFtP%2BeCnscHc5QWUWgfaEy6uXh0YyE%2Bu%2FBf1bgQOuQySCtb1Z%2BZ6sLON3HRMq%2BgYmhgdN4si0rU1p4nOiBj6crMBDlPKrwCFw0SRWaa%2FeWJtScRo9HMxA318TQuy1cnz2RYUYCxaU0Jci%2BrDGNmR0becuinzwZxwbm9sdysqqkTqFq64D7gI7nTrej5s6rDW11vFWqHpUP2d1FhvBaFOAjy8GP523rvRQSSyFkXe9YJUVlNrSLtqEAenEAnsweq3B3e669G9C%2FHm8G06ThADW69XI9pnMKVDT3FsJRtvkiltR9fsPJGB94knGZqwwdAK33UZ6TzU7QFoNEMoH%2BuvrEkO7SW8nmlfngtoX7AqMEGVMNAktUrQgR3jBfz1AXbDyaVpNINObIwvcxkjAPeH%2BJ9fJANeefQc2S9wtnpHnZGI8bjrMu%2F%2BBZHNLud7642CzhDwWVt363%2B%2B45PABKA6apczYhBSmM6I6woOQCnxMCpcKiqGyhztmN1LCRqv7FY5wPxjrGQArJvuYDfVGrN5Q7QMy6qocAzCdmYXfTag83vWxBpO15sjYooKOm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ba6f39a02e1b1c7181496d4c7e32cd52bfbff5890fa6a5d382be2d4e8c695da9"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "reporter": {
                "username": "filedescriptor", 
                "url": "/filedescriptor"
            }, 
            "created_at": "2017-11-30T16:40:08.000Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-30T16:40:08.000Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "redact", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 3231661, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-22T17:12:06.815Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-22T17:12:06.815Z", 
            "actor": {
                "username": "filedescriptor", 
                "url": "/filedescriptor", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "redact", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 3231698, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "filedescriptor", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/filedescriptor", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2018-08-22T17:12:06.764Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/398163", 
    "created_at": "2015-02-09T16:40:08.000Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588</p>\n", 
    "vulnerability_information": "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "", 
            "about": "\u2588\u2588\u2588\u2588\u2588\u2588 ", 
            "twitter_handle": "", 
            "name": "\u2588\u2588\u2588\u2588\u2588\u2588"
        }, 
        "handle": "redact", 
        "url": "https://hackerone.com/redact", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/031/807/95ebe78033c1c02be7d5e895da313a8a6fbb9074_small.jpg?1534322548", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/031/807/893b0d30cb5c5e9bc1b97743f8a7b122d8e7ecf7_medium.jpg?1534322548"
        }, 
        "id": 31807, 
        "permissions": []
    }, 
    "is_published": true
}