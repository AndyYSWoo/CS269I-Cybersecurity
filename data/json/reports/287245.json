{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-11-09T18:36:34.824Z", 
    "voters": [
        "sp1d3rs", 
        "michiel", 
        "bl4de", 
        "jensec", 
        "hunter", 
        "cdl", 
        "ysx", 
        "yumi", 
        "eveeez", 
        "gamliel", 
        "and 15 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 287245, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-11-09T18:36:16.271Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Blind SSRF in \"Integrations\" by abusing a bug in Ruby's native resolver.", 
    "is_member_of_team?": null, 
    "vote_count": 25, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "https://hackerone.com", 
        "max_severity": "critical", 
        "databaseId": 3, 
        "asset_type": "URL"
    }, 
    "allow_singular_disclosure_at": "2017-12-09T18:36:16.465Z", 
    "state": "Closed", 
    "cve_ids": [
        "CVE-2017-0904"
    ], 
    "readable_substate": "Resolved", 
    "public": true, 
    "attachments": [
        {
            "file_name": "private_address_check.rb.patch", 
            "type": "text/x-ruby", 
            "id": 236338, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/236/338/c4d5f99300f382c15f80045ba1ad2ef17315989e/private_address_check.rb.patch?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ5B43OTPE%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T223005Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDCiDARkX3ArKGaO7%2ByK3A39tqjzyooRkX4qPdNM7MkAemep3r5%2Fh%2B11ZdH6KbZ8q2cgU%2FRMODKRq75fJ6sn%2FkR1fBrPaMFfKsP%2BSLpkSrkbyi968FqbmO6yo59Heb3d1kDMwzaNShj3ou%2Fq9qAc5NWgXlxJtABJqkgxPd5NovxMOsASin8kfBjU8OhOOEnonvd2t16oF509MVoA81P%2Frmr4njIb3UfHzYyccuDQNjHM0qV7B57bCKQeIuO%2FzLl7au%2FWR2v6R6bwK6fGUYVbcnAam9GqobWJnMl6NFbipNSdmUzB5%2BglRYaYeGXxbgxseM7SSFeehfzbywUoHEf4Ve61V1e90uyx3M0Krbm5QjS5gNgwErj0g2rC2mkrl2q%2B9ADfOzgMAX8fUODFalEv4gZf0ZKuLhpmAzEapJE5f%2BarcSkdn5b0ddy4Wa2vdsZ6lQ5NOez8qkcnaBEJZLnv3YGHyInLrIaUkqlq4iavZpr4f5Al5PueqIzLuItn5ztJjfvCu5dDIplWP0eo6r%2BIUCKsDwUNkRSgWCtJbCfl%2BPF3PKHjvnmVEBawLZlpXvaOGUvA%2FKYb2cGGXn89CPjYlwpWCj2J8Z%2B0okbim4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1213b3b754d07cef6a4825bbd299d482dd95af3456b934cdb4ad54e4f2110826"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-11-06T19:07:59.283Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-06T19:07:59.283Z", 
            "actor": {
                "username": "coffeecup", 
                "url": "/coffeecup", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/163/756/f43e0dda96a575dcb496c1e3028dedc45a10a391_medium.png?1526279637"
                }, 
                "hackerone_triager": true
            }, 
            "team_handle": "security", 
            "message": "Hi @edio - We are investigating this now, thanks for your report. I'll have more information to share soon. Thanks! ", 
            "markdown_message": "<p>Hi <a href=\"/edio\">@edio</a> - We are investigating this now, thanks for your report. I&#39;ll have more information to share soon. Thanks! </p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 2137840, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-06T20:15:48.585Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-06T20:15:48.585Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "cve_ids": [
                "CVE-2017-0904"
            ], 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::CveIdAdded", 
            "id": 2138104, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "edoverflow", 
                "url": "/edoverflow"
            }, 
            "created_at": "2017-11-09T18:34:57.155Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-09T18:34:57.155Z", 
            "actor": {
                "username": "jobert", 
                "url": "/jobert", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/002/35cc46a21b3756f9df61d6269d287b9dc53d5b27_medium.png?1410255083"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 2147004, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-09T18:35:57.636Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-09T18:35:57.636Z", 
            "actor": {
                "url": "/security", 
                "profile": {
                    "name": "HackerOne"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/013/28af2ada2cc00aa9427504fc5a14f587362df84b_medium.png?1445331713"
                }
            }, 
            "team_handle": "security", 
            "message": "Hi @edio - thanks again for reporting this to us. Due to the lack of impact, this report isn't eligible for a monetary reward. Happy hacking!", 
            "markdown_message": "<p>Hi <a href=\"/edio\">@edio</a> - thanks again for reporting this to us. Due to the lack of impact, this report isn&#39;t eligible for a monetary reward. Happy hacking!</p>\n", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 2147007, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-09T18:36:16.354Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-09T18:36:16.354Z", 
            "actor": {
                "username": "jobert", 
                "url": "/jobert", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/002/35cc46a21b3756f9df61d6269d287b9dc53d5b27_medium.png?1410255083"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2147008, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-09T18:36:34.857Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-09T18:36:34.857Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2147012, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-09T18:36:34.969Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-09T18:36:34.969Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2147013, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "edoverflow", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/edoverflow", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/116/374/2e86e29173a7b27dc4e4c35ecaef804781110b9f_small.png?1527882436"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 68, 
        "name": "Server-Side Request Forgery (SSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -31290828.71641984, 
    "disclosed_at": "2017-11-09T18:36:34.928Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/287245", 
    "created_at": "2017-11-03T23:32:34.644Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"summary\">Summary</h1>\n\n<p>HackerOne allows bug bounty programs to integrate their reports queue with issue tracking tools such as Jira and Phabricator. By abusing a bug that I discovered in Ruby&#39;s native resolver, I am able to bypass the SSRF filter and could potentially scan your internal network.</p>\n\n<h1 id=\"vulnerability-details\">Vulnerability Details</h1>\n\n<p>HackerOne uses the <a href=\"/redirect?signature=cf9a2ba2fc7deac6642228a844a1c292363e3cda&amp;url=https%3A%2F%2Fgithub.com%2Fjtdowney%2Fprivate_address_check\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>private_address_check</span><i class=\"icon-external-link\"></i></a> gem to prevent SSRF on the &quot;Integrations&quot; panel: <a title=\"https://hackerone.com/%7BBBP%7D/integrations\" href=\"https://hackerone.com/%7BBBP%7D/integrations\">https://hackerone.com/%7BBBP%7D/integrations</a>. The actual filtering takes place in <a href=\"/redirect?signature=69c282f6106bd809d181e0ef91bb0d7f38268d57&amp;url=https%3A%2F%2Fgithub.com%2Fjtdowney%2Fprivate_address_check%2Fblob%2Fc95a538542d8d5bd8b969d9d8d95753e74fb7e52%2Flib%2Fprivate_address_check.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>lib/private_address_check.rb</span><i class=\"icon-external-link\"></i></a>. The process starts by attempting to resolve the user-supplied URL with <code>Resolv::getaddresses</code> and then compares the returned value with a the values in the blacklist. I discovered a bug in <code>Resolv::getaddresses</code> that allows me to return an empty value, which is not included in the blacklist and therefore completely bypasses any checks.</p>\n<pre class=\"highlight ruby\"><code><span class=\"k\">def</span> <span class=\"nf\">resolves_to_private_address?</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">)</span>\n    <span class=\"n\">ips</span> <span class=\"o\">=</span> <span class=\"no\">Resolv</span><span class=\"p\">.</span><span class=\"nf\">getaddresses</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">)</span>\n    <span class=\"n\">ips</span><span class=\"p\">.</span><span class=\"nf\">any?</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">ip</span><span class=\"o\">|</span> \n      <span class=\"n\">private_address?</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n<p>The bypass consists of providing encoded IP addresses that when forwarded on to the operating system in <code>lib/resolv.rb</code> return an empty value.</p>\n<pre class=\"highlight plaintext\"><code>http://0177.1:22/\nhttp://0x7f.1:22/\nhttp://127.000.001:22/\n</code></pre>\n<p>I discovered the bug in <code>Resolv::getaddresses</code> by running it on different Linux machines and noticing that the outputs vary. Until the Ruby Core come up with a better solution I suggest not relying on this library for any security-related features.</p>\n\n<p><strong>Machine 1</strong> returned the following:</p>\n<pre class=\"highlight plaintext\"><code>irb(main):001:0&gt; require &#39;resolv&#39;\nirb(main):002:0&gt; Resolv.getaddresses(&quot;127.000.000.1&quot;)\n=&gt; []\n</code></pre>\n<p>And <strong>Machine 2</strong> returned this:</p>\n<pre class=\"highlight plaintext\"><code>irb(main):001:0&gt; require &#39;resolv&#39;\nirb(main):002:0&gt; Resolv.getaddresses(&quot;127.000.000.1&quot;)\n=&gt; [&quot;127.0.0.1&quot;]\n</code></pre>\n<h1 id=\"exploit\">Exploit</h1>\n\n<p>Admittedly, I was unable to actually exploit this issue and I am still playing around to see if I can exfiltrate valuable data. The current issue only consists of a filter bypass.</p>\n\n<h1 id=\"mitigation\">Mitigation</h1>\n\n<p>I would suggest using <code>Socket.getaddrinfo()</code> as it is more reliable and is not affected by this bug. Something along the lines of this should work:</p>\n<pre class=\"highlight ruby\"><code><span class=\"nb\">require</span> <span class=\"s2\">&quot;socket&quot;</span>\n<span class=\"p\">.</span><span class=\"nf\">.</span><span class=\"p\">.</span>\n<span class=\"nf\">def</span> <span class=\"n\">resolves_to_private_address?</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">)</span>\n  <span class=\"n\">ips</span> <span class=\"o\">=</span> <span class=\"no\">Socket</span><span class=\"p\">.</span><span class=\"nf\">getaddrinfo</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">,</span> <span class=\"kp\">nil</span><span class=\"p\">).</span><span class=\"nf\">sample</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n  <span class=\"n\">ips</span><span class=\"p\">.</span><span class=\"nf\">any?</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">ip</span><span class=\"o\">|</span> \n    <span class=\"n\">private_address?</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n<p>My suggested patch can be found here: <a href=\"#\" class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"private_address_check.rb.patch\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/236/338/c4d5f99300f382c15f80045ba1ad2ef17315989e/private_address_check.rb.patch?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ5B43OTPE%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T223005Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA8aDCiDARkX3ArKGaO7%2ByK3A39tqjzyooRkX4qPdNM7MkAemep3r5%2Fh%2B11ZdH6KbZ8q2cgU%2FRMODKRq75fJ6sn%2FkR1fBrPaMFfKsP%2BSLpkSrkbyi968FqbmO6yo59Heb3d1kDMwzaNShj3ou%2Fq9qAc5NWgXlxJtABJqkgxPd5NovxMOsASin8kfBjU8OhOOEnonvd2t16oF509MVoA81P%2Frmr4njIb3UfHzYyccuDQNjHM0qV7B57bCKQeIuO%2FzLl7au%2FWR2v6R6bwK6fGUYVbcnAam9GqobWJnMl6NFbipNSdmUzB5%2BglRYaYeGXxbgxseM7SSFeehfzbywUoHEf4Ve61V1e90uyx3M0Krbm5QjS5gNgwErj0g2rC2mkrl2q%2B9ADfOzgMAX8fUODFalEv4gZf0ZKuLhpmAzEapJE5f%2BarcSkdn5b0ddy4Wa2vdsZ6lQ5NOez8qkcnaBEJZLnv3YGHyInLrIaUkqlq4iavZpr4f5Al5PueqIzLuItn5ztJjfvCu5dDIplWP0eo6r%2BIUCKsDwUNkRSgWCtJbCfl%2BPF3PKHjvnmVEBawLZlpXvaOGUvA%2FKYb2cGGXn89CPjYlwpWCj2J8Z%2B0okbim4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=1213b3b754d07cef6a4825bbd299d482dd95af3456b934cdb4ad54e4f2110826\" data-attachment-type=\"text/x-ruby\">private_address_check.rb.patch (F236338)</a>.</p>\n", 
    "vulnerability_information": "# Summary\n\nHackerOne allows bug bounty programs to integrate their reports queue with issue tracking tools such as Jira and Phabricator. By abusing a bug that I discovered in Ruby's native resolver, I am able to bypass the SSRF filter and could potentially scan your internal network.\n\n# Vulnerability Details\n\nHackerOne uses the [private_address_check](https://github.com/jtdowney/private_address_check) gem to prevent SSRF on the \"Integrations\" panel: https://hackerone.com/{BBP}/integrations. The actual filtering takes place in [lib/private_address_check.rb](https://github.com/jtdowney/private_address_check/blob/c95a538542d8d5bd8b969d9d8d95753e74fb7e52/lib/private_address_check.rb). The process starts by attempting to resolve the user-supplied URL with `Resolv::getaddresses` and then compares the returned value with a the values in the blacklist. I discovered a bug in `Resolv::getaddresses` that allows me to return an empty value, which is not included in the blacklist and therefore completely bypasses any checks.\n\n```ruby\ndef resolves_to_private_address?(hostname)\n    ips = Resolv.getaddresses(hostname)\n    ips.any? do |ip| \n      private_address?(ip)\n    end\nend\n```\n\nThe bypass consists of providing encoded IP addresses that when forwarded on to the operating system in `lib/resolv.rb` return an empty value.\n\n```\nhttp://0177.1:22/\nhttp://0x7f.1:22/\nhttp://127.000.001:22/\n```\n\nI discovered the bug in `Resolv::getaddresses` by running it on different Linux machines and noticing that the outputs vary. Until the Ruby Core come up with a better solution I suggest not relying on this library for any security-related features.\n\n**Machine 1** returned the following:\n\n```\nirb(main):001:0> require 'resolv'\nirb(main):002:0> Resolv.getaddresses(\"127.000.000.1\")\n=> []\n```\n\nAnd **Machine 2** returned this:\n\n```\nirb(main):001:0> require 'resolv'\nirb(main):002:0> Resolv.getaddresses(\"127.000.000.1\")\n=> [\"127.0.0.1\"]\n```\n\n# Exploit\n\nAdmittedly, I was unable to actually exploit this issue and I am still playing around to see if I can exfiltrate valuable data. The current issue only consists of a filter bypass.\n\n# Mitigation\n\nI would suggest using `Socket.getaddrinfo()` as it is more reliable and is not affected by this bug. Something along the lines of this should work:\n\n```ruby\nrequire \"socket\"\n...\ndef resolves_to_private_address?(hostname)\n  ips = Socket.getaddrinfo(hostname, nil).sample[3]\n  ips.any? do |ip| \n    private_address?(ip)\n  end\nend\n```\n\nMy suggested patch can be found here: {F236338}.", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://hackerone.com", 
            "about": "Vulnerability disclosure should be safe, transparent, and rewarding.", 
            "twitter_handle": "Hacker0x01", 
            "name": "HackerOne"
        }, 
        "handle": "security", 
        "url": "https://hackerone.com/security", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/013/68fea1fe00dc833f4109e015738af4b374727e56_small.png?1445331713", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/013/28af2ada2cc00aa9427504fc5a14f587362df84b_medium.png?1445331713"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 13, 
        "default_currency": "usd"
    }, 
    "is_published": false
}