{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": "2014-07-15T15:21:34.321Z", 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 5617, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "TLS1/SSLv3 Renegotiation Vulnerability", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2014-08-14T15:21:35.322Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Informative", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2014-04-03T18:23:15.051Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-04-03T18:23:15.051Z", 
            "actor": {
                "username": "iamcal", 
                "url": "/iamcal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/138/8791978ab70ce1b1e1b7a9c70e393fcd58ea85a0_medium.jpg?1393562983"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "message": "Thanks for the report.\n\nWe only support secure renegotiation. Client-side initiated renegotiation is currently enabled, but this is a Denial of Service threat. You can read more about it here: https://community.qualys.com/blogs/securitylabs/2011/10/31/tls-renegotiation-and-denial-of-service-attacks\n\nAs mentioned on our [team page](https://hackerone.com/slack), most Denial of Service issues are not eligible at this time and we don't recommend testing for them. We're going to close this issue but please submit any non-DoS issues that you find.", 
            "markdown_message": "<p>Thanks for the report.</p>\n\n<p>We only support secure renegotiation. Client-side initiated renegotiation is currently enabled, but this is a Denial of Service threat. You can read more about it here: <a title=\"https://community.qualys.com/blogs/securitylabs/2011/10/31/tls-renegotiation-and-denial-of-service-attacks\" href=\"/redirect?signature=8ed6b3952d638694b057a200924fb692e0b8bd27&amp;url=https%3A%2F%2Fcommunity.qualys.com%2Fblogs%2Fsecuritylabs%2F2011%2F10%2F31%2Ftls-renegotiation-and-denial-of-service-attacks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://community.qualys.com/blogs/securitylabs/2011/10/31/tls-renegotiation-and-denial-of-service-attacks</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>As mentioned on our <a href=\"https://hackerone.com/slack\">team page</a>, most Denial of Service issues are not eligible at this time and we don&#39;t recommend testing for them. We&#39;re going to close this issue but please submit any non-DoS issues that you find.</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 23304, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-07-15T15:21:34.339Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-07-15T15:21:34.339Z", 
            "actor": {
                "username": "ashesh", 
                "url": "/ashesh", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/791/3180a667bc170e5197cc0bb36a97c00208341e1b_medium.png?1437239918"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 89043, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-08-14T15:21:44.204Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-08-14T15:21:44.204Z", 
            "actor": {
                "url": "/slack", 
                "profile": {
                    "name": "Slack"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/069/50cfd8e05b18bade214847ec5f61dcb9e6c85fa9_medium.png?1449082084"
                }
            }, 
            "team_handle": "slack", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 107558, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "ashesh", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/ashesh", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/003/791/f4288565f5c5e17cb7d8ca1ab66a283c26254829_small.png?1437239918"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -136107739.17052656, 
    "disclosed_at": "2014-08-14T15:21:44.190Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/5617", 
    "created_at": "2014-04-02T13:01:00.669Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>URL: <a title=\"http://www.slack.com\" href=\"/redirect?signature=d50696058f3c5200e1417b0ce70049d29ccb06db&amp;url=http%3A%2F%2Fwww.slack.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.slack.com</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Vulnerability description<br>\nA flaw in the design of the TLS v. 1/SSL v. 3 (TLS/SSL) handshake process was discovered in 2009, and RFC 5746 (Feb. 2010) was released to update the protocol specification. Since then, most system manufacturers have released patches to fix this flaw. Still, as of June 2011 approximately half of the systems using TLS/SSL on the Internet have not implemented the patches needed to close this security hole. This vulnerability affects the secure transport of HTTP, IMAP, SMTP, and other protocols that rely on TLS/SSL. Industry representatives and security researchers who have looked into the problem note that sites with the TLS patch may still be vulnerable to this attack, known as the TLS renegotiation Man-In-The-Middle attack (TLS Renego MITM). DigiCert is taking a proactive approach to this problem by contacting its customers to advise them of this potential vulnerability in their systems. At some point in the future, connectivity problems may occur because of server non-compliance with RFC 5746.</p>\n\n<p>A vulnerability in the way SSL and TLS protocols allow renegotiation requests may allow an attacker to inject plaintext into an application protocol stream. This could result in a situation where the attacker may be able to issue commands to the server that appear to be coming from a legitimate source. This issue affects SSL version 3.0 and newer and TLS version 1.0 and newer.<br>\nThis vulnerability affects Web Server. <br>\nDiscovered by: TLS1_SSL3_Renegotiation. </p>\n\n<p>Attack details<br>\nJust to provide you with a brief overview, the typical TLS/SSL handshake process involves the following:</p>\n\n<p>client hello (highest TLS/SSL version supported, random number, suggested ciphers, suggested compression methods and, if the client is attempting renegotiation, previous session ID)<br>\nserver hello (TLS/SSL version, random number, cipher suite and compression chosen and, if server is attempting renegotiation, previous session ID)<br>\nserver sends TLS/SSL certificate<br>\nserver hello done</p>\n\n<p>client key exchange (preMasterSecret exchange and MasterSecret calculation)<br>\nclient change cipher spec<br>\nclient finished (hash and MAC of previous handshake messages)</p>\n\n<p>server change cipher spec<br>\nserver finished</p>\n\n<p>GET /secure HTTP/1.1\\r\\n...</p>\n\n<p>(For more information, see Wikipedia&#39;s article on TLS handshakes).</p>\n\n<p>Using the TLS Renego MITM vulnerability, an attacker can either form a TLS connection to the server first, before the client (for example, on a compromised machine in response to the client\u2019s attempt at connection) or can use session renegotiation to effectuate the attack. Even mutual certificate-based client authentication connections are vulnerable to the TLS Renego MITM attack. More details on how various attack scenarios play out are provided in RFC 5746 and related discussions provided here and here.</p>\n\n<p>The impact of this vulnerability<br>\nA remote, unauthenticated attacker may be able to inject an arbitrary amount of chosen plaintext into the beginning of the application protocol stream. This could allow and attacker to issue HTTP requests, or take action impersonating the user, among other consequences.</p>\n\n<p>How to fix this vulnerability</p>\n\n<p>The TLS/SSL specification in RFC 5746 applies to both full handshakes and session resumption handshakes. Because pre-existing TLS/SSL specifications required systems to ignore a ClientHello extension if they did not understand it, RFC 5746 specifies that the ClientHello either contain an empty \u201crenegotiation_info&quot; extension or a Signaling Cipher Suite Value (SCSV) as a pseudo cipher suite with the same semantics as an empty &quot;renegotiation_info&quot; extension. When a client receives the ServerHello, it must check to see if the server supports the &quot;renegotiation_info&quot; extension. Assuming that secure renegotiation is supported per RFC 5746, then for TLS renegotiation, the client can send the &quot;renegotiation_info&quot; extension. If the server does not respond in accordance with RFC 5746, the client MUST abort the renegotiation handshake. Similarly, if a client does not respond in accordance with RFC 5746, then the server MUST abort the renegotiation handshake.</p>\n\n<p>For backward compatibility, a compliant client will be configurable for either allowing insecure renegotiation or aborting an attempt to renegotiate. However, because some TLS servers do not support renegotiation at all there will be a transition period where problems will be encountered. From a server side, if the server does not receive the &quot;renegotiation_info&quot; extension or the SCSV, then RFC 5746 specifies that the \u201csecure_renegotiation\u201d flag be set to FALSE. Thereafter, if a ClientHello for renegotiation contains an empty \u201crenegotiation_info&quot; extension or the SCSV, then the server MUST abort the handshake.</p>\n\n<p>Web references<br>\nTLS1/SSLv3 Renegotiation Vulnerability <br>\nCVE-2009-3555 <br>\nVU#120541 </p>\n", 
    "vulnerability_information": "URL: http://www.slack.com\r\n\r\nVulnerability description\r\nA flaw in the design of the TLS v. 1/SSL v. 3 (TLS/SSL) handshake process was discovered in 2009, and RFC 5746 (Feb. 2010) was released to update the protocol specification. Since then, most system manufacturers have released patches to fix this flaw. Still, as of June 2011 approximately half of the systems using TLS/SSL on the Internet have not implemented the patches needed to close this security hole. This vulnerability affects the secure transport of HTTP, IMAP, SMTP, and other protocols that rely on TLS/SSL. Industry representatives and security researchers who have looked into the problem note that sites with the TLS patch may still be vulnerable to this attack, known as the TLS renegotiation Man-In-The-Middle attack (TLS Renego MITM). DigiCert is taking a proactive approach to this problem by contacting its customers to advise them of this potential vulnerability in their systems. At some point in the future, connectivity problems may occur because of server non-compliance with RFC 5746.\r\n\r\nA vulnerability in the way SSL and TLS protocols allow renegotiation requests may allow an attacker to inject plaintext into an application protocol stream. This could result in a situation where the attacker may be able to issue commands to the server that appear to be coming from a legitimate source. This issue affects SSL version 3.0 and newer and TLS version 1.0 and newer.\r\nThis vulnerability affects Web Server. \r\nDiscovered by: TLS1_SSL3_Renegotiation. \r\n\r\nAttack details\r\nJust to provide you with a brief overview, the typical TLS/SSL handshake process involves the following:\r\n\r\nclient hello (highest TLS/SSL version supported, random number, suggested ciphers, suggested compression methods and, if the client is attempting renegotiation, previous session ID)\r\nserver hello (TLS/SSL version, random number, cipher suite and compression chosen and, if server is attempting renegotiation, previous session ID)\r\nserver sends TLS/SSL certificate\r\nserver hello done\r\n\r\nclient key exchange (preMasterSecret exchange and MasterSecret calculation)\r\nclient change cipher spec\r\nclient finished (hash and MAC of previous handshake messages)\r\n\r\nserver change cipher spec\r\nserver finished\r\n\r\nGET /secure HTTP/1.1\\r\\n...\r\n\r\n(For more information, see Wikipedia's article on TLS handshakes).\r\n\r\nUsing the TLS Renego MITM vulnerability, an attacker can either form a TLS connection to the server first, before the client (for example, on a compromised machine in response to the client\u2019s attempt at connection) or can use session renegotiation to effectuate the attack. Even mutual certificate-based client authentication connections are vulnerable to the TLS Renego MITM attack. More details on how various attack scenarios play out are provided in RFC 5746 and related discussions provided here and here.\r\n\r\n\r\n\r\nThe impact of this vulnerability\r\nA remote, unauthenticated attacker may be able to inject an arbitrary amount of chosen plaintext into the beginning of the application protocol stream. This could allow and attacker to issue HTTP requests, or take action impersonating the user, among other consequences.\r\n\r\nHow to fix this vulnerability\r\n\r\nThe TLS/SSL specification in RFC 5746 applies to both full handshakes and session resumption handshakes. Because pre-existing TLS/SSL specifications required systems to ignore a ClientHello extension if they did not understand it, RFC 5746 specifies that the ClientHello either contain an empty \u201crenegotiation_info\" extension or a Signaling Cipher Suite Value (SCSV) as a pseudo cipher suite with the same semantics as an empty \"renegotiation_info\" extension. When a client receives the ServerHello, it must check to see if the server supports the \"renegotiation_info\" extension. Assuming that secure renegotiation is supported per RFC 5746, then for TLS renegotiation, the client can send the \"renegotiation_info\" extension. If the server does not respond in accordance with RFC 5746, the client MUST abort the renegotiation handshake. Similarly, if a client does not respond in accordance with RFC 5746, then the server MUST abort the renegotiation handshake.\r\n\r\nFor backward compatibility, a compliant client will be configurable for either allowing insecure renegotiation or aborting an attempt to renegotiate. However, because some TLS servers do not support renegotiation at all there will be a transition period where problems will be encountered. From a server side, if the server does not receive the \"renegotiation_info\" extension or the SCSV, then RFC 5746 specifies that the \u201csecure_renegotiation\u201d flag be set to FALSE. Thereafter, if a ClientHello for renegotiation contains an empty \u201crenegotiation_info\" extension or the SCSV, then the server MUST abort the handshake.\r\n\r\nWeb references\r\nTLS1/SSLv3 Renegotiation Vulnerability \r\nCVE-2009-3555 \r\nVU#120541 \r\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://slack.com", 
            "about": "All your team communication in one place, instantly searchable, and available wherever you go.", 
            "twitter_handle": "slackhq", 
            "name": "Slack"
        }, 
        "handle": "slack", 
        "url": "https://hackerone.com/slack", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/069/a44d7bfd843f514c723441a5a40daf5bac8e9e38_small.png?1449082084", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/069/50cfd8e05b18bade214847ec5f61dcb9e6c85fa9_medium.png?1449082084"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 69, 
        "default_currency": "usd"
    }, 
    "is_published": false
}