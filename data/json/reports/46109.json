{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": "2015-02-02T15:44:31.414Z", 
    "voters": [], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 46109, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2015-02-02T15:59:58.270Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Brute force on \"vimeo\" cookie", 
    "is_member_of_team?": null, 
    "vote_count": 0, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2015-03-04T15:44:32.176Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Informative", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2015-02-02T12:00:43.069Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-02T12:00:43.069Z", 
            "actor": {
                "username": "ba4fe4ca95021d367f8a574", 
                "url": "/ba4fe4ca95021d367f8a574", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "For example if we compare in base36 two values:\n1564967196145999019105609816789951113336151685719009724667\n1564967196145999019105609819409570154363830358873721264599\n\nI this is a good enough lead and some attacker can continue reducing the complexity\n", 
            "markdown_message": "<p>For example if we compare in base36 two values:<br>\n1564967196145999019105609816789951113336151685719009724667<br>\n1564967196145999019105609819409570154363830358873721264599</p>\n\n<p>I this is a good enough lead and some attacker can continue reducing the complexity</p>\n", 
            "type": "Activities::Comment", 
            "id": 322599, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-02-02T15:41:42.116Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-02T15:41:42.116Z", 
            "actor": {
                "username": "andrewp", 
                "url": "/andrewp", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/966/575f2fca2c5e6e8cf46f8e20150417f9b8b1e07e_medium.jpeg?1415663814"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "I like the work you put into this, but I'm afraid these aren't valid cookie values you've decoded too. For one thing, we encode more than just numbers in there.", 
            "markdown_message": "<p>I like the work you put into this, but I&#39;m afraid these aren&#39;t valid cookie values you&#39;ve decoded too. For one thing, we encode more than just numbers in there.</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 322656, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-02-02T15:44:31.457Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-02T15:44:31.457Z", 
            "actor": {
                "username": "ba4fe4ca95021d367f8a574", 
                "url": "/ba4fe4ca95021d367f8a574", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 322660, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-02-02T15:59:58.308Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-02T15:59:58.308Z", 
            "actor": {
                "username": "andrewp", 
                "url": "/andrewp", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/966/575f2fca2c5e6e8cf46f8e20150417f9b8b1e07e_medium.jpeg?1415663814"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 322675, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-02-02T15:59:59.304Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-02T15:59:59.304Z", 
            "actor": {
                "username": "andrewp", 
                "url": "/andrewp", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/966/575f2fca2c5e6e8cf46f8e20150417f9b8b1e07e_medium.jpeg?1415663814"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 322676, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2015-02-02T21:10:49.991Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-02-02T21:10:49.991Z", 
            "actor": {
                "username": "ba4fe4ca95021d367f8a574", 
                "url": "/ba4fe4ca95021d367f8a574", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "ok, I admit the values are different from what you initially constructed. but it doesn't need to be the actual value. it needs to be a range with a variation low enough to cause a brute force attack. ", 
            "markdown_message": "<p>ok, I admit the values are different from what you initially constructed. but it doesn&#39;t need to be the actual value. it needs to be a range with a variation low enough to cause a brute force attack. </p>\n", 
            "type": "Activities::Comment", 
            "id": 323000, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "ba4fe4ca95021d367f8a574", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": true, 
        "url": "/ba4fe4ca95021d367f8a574", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 27, 
        "name": "Improper Authentication - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -118653461.69868211, 
    "disclosed_at": "2015-02-02T15:59:59.267Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/46109", 
    "created_at": "2015-02-02T11:55:32.777Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>I took at &quot;vimeo&quot; cookie (&quot;Vimeo authentication token&quot; <a title=\"https://vimeo.com/cookie_list\" href=\"/redirect?signature=60991d28759f9b27cb9658692d5e82b548b3a615&amp;url=https%3A%2F%2Fvimeo.com%2Fcookie_list\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://vimeo.com/cookie_list</span><i class=\"icon-external-link\"></i></a>)</p>\n\n<p>And to show approximately my thought process I did :</p>\n\n<ol>\n<li>compare two generate values from two different sessions of mine</li>\n</ol>\n\n<p>epk9rrdskc70pcdxxmrdmdx7jpcdxxmrdmdx7%2Cpv222v2mfw90w5dcv5wtkmsfffxfsxc2tdruxmcrt<br>\nepk9rrdskc70pcdxxttcrmc7jpcdxxttcrmc7%2C5jjylb%2C_fqq%2C_%2Cf85wpDanqvnh7%2Cpvds5tt9ds9trcvv2mdsf25tx02kc5kkuw9mcf2cs</p>\n\n<p>both started with &quot;epk9rrdskc70pcdxx&quot; </p>\n\n<ol>\n<li><p>I have Googled part of this common string and found <a title=\"http://www.integernumber.com/305334256\" href=\"/redirect?signature=ded1fe20878f99ae503c14a2095a6f3c54c05bbc&amp;url=http%3A%2F%2Fwww.integernumber.com%2F305334256\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.integernumber.com/305334256</span><i class=\"icon-external-link\"></i></a> <br>\nIt had &quot;epk9rd&quot; as 305334256 in base 29</p></li>\n<li><p>I have played a little and saw that I can create similar strings, but not quite the one as in the cookie value</p></li>\n<li><p>So I decided to take the entire string (separated by &quot;.&quot;) and make a python script that tries if it can transform from any base (2,3,4,5,6 .100) to base 10 </p></li>\n</ol>\n\n<p>def to(s, b):<br>\n    &quot;&quot;&quot;<br>\n    Converts given number s, from base b to base 10</p>\n<pre class=\"highlight plaintext\"><code>s -- string representation of number\nb -- base of given number\n&quot;&quot;&quot;\nassert(1 &lt; b &lt; 37)\nreturn int(s, b)\n</code></pre>\n<p>for i in range(2,200):<br>\n        try:<br>\n                print to(&quot;pv222v2mfw90w5dcv5wtkmsfffxfsxc2tdruxmcrt&quot;,i),i<br>\n        except:<br>\n                pass</p>\n\n<p>(the script tries to change base, if not tries the next value)</p>\n\n<ol>\n<li>Results: for two different values of &quot;vimeo&quot; cookie, I got this: (value,base)</li>\n</ol>\n\n<p>mirko@pc:~/Downloads$ python temp.py <br>\n200501114734436429736082032703861533263520506562424919919 34<br>\n568430180925165599882998275863273891667173461682477733127 35<br>\n1564967196145999019105609819409570154363830358873721264599 36<br>\nmirko@pc:~/Downloads$ vi temp.py<br>\nmirko@pc:~/Downloads$ python temp.py <br>\n200501114734436429736082031819180459224932196425002801149 34<br>\n568430180925165599882998274329084292808031730523265871587 35<br>\n1564967196145999019105609816789951113336151685719009724667 36</p>\n\n<ol>\n<li><p>So the &quot;vimeo&quot; cookie can be considered encoded in base 34,35 or 36 and the decoded value is similar to other values from my other sessions</p></li>\n<li><p>This means that the cookie value can be guessed and an attack can go like this:</p></li>\n</ol>\n\n<p>Attacker generates for months cookie values (1 per second I don&#39;t think triggers any firewall for example) and finally gets to some account. (the other substring of the vimeo cookie is generated the same)</p>\n", 
    "vulnerability_information": "I took at \"vimeo\" cookie (\"Vimeo authentication token\" https://vimeo.com/cookie_list)\r\n\r\nAnd to show approximately my thought process I did :\r\n1. compare two generate values from two different sessions of mine\r\n\r\nepk9rrdskc70pcdxxmrdmdx7jpcdxxmrdmdx7%2Cpv222v2mfw90w5dcv5wtkmsfffxfsxc2tdruxmcrt\r\nepk9rrdskc70pcdxxttcrmc7jpcdxxttcrmc7%2C5jjylb%2C_fqq%2C_%2Cf85wpDanqvnh7%2Cpvds5tt9ds9trcvv2mdsf25tx02kc5kkuw9mcf2cs\r\n\r\nboth started with \"epk9rrdskc70pcdxx\" \r\n\r\n2. I have Googled part of this common string and found http://www.integernumber.com/305334256 \r\nIt had \"epk9rd\" as 305334256 in base 29\r\n\r\n3. I have played a little and saw that I can create similar strings, but not quite the one as in the cookie value\r\n\r\n4. So I decided to take the entire string (separated by \".\") and make a python script that tries if it can transform from any base (2,3,4,5,6 .100) to base 10 \r\n\r\ndef to(s, b):\r\n    \"\"\"\r\n    Converts given number s, from base b to base 10\r\n\r\n    s -- string representation of number\r\n    b -- base of given number\r\n    \"\"\"\r\n    assert(1 < b < 37)\r\n    return int(s, b)\r\n\r\nfor i in range(2,200):\r\n        try:\r\n                print to(\"pv222v2mfw90w5dcv5wtkmsfffxfsxc2tdruxmcrt\",i),i\r\n        except:\r\n                pass\r\n\r\n(the script tries to change base, if not tries the next value)\r\n\r\n5. Results: for two different values of \"vimeo\" cookie, I got this: (value,base)\r\n\r\nmirko@pc:~/Downloads$ python temp.py \r\n200501114734436429736082032703861533263520506562424919919 34\r\n568430180925165599882998275863273891667173461682477733127 35\r\n1564967196145999019105609819409570154363830358873721264599 36\r\nmirko@pc:~/Downloads$ vi temp.py\r\nmirko@pc:~/Downloads$ python temp.py \r\n200501114734436429736082031819180459224932196425002801149 34\r\n568430180925165599882998274329084292808031730523265871587 35\r\n1564967196145999019105609816789951113336151685719009724667 36\r\n\r\n\r\n6. So the \"vimeo\" cookie can be considered encoded in base 34,35 or 36 and the decoded value is similar to other values from my other sessions\r\n\r\n7. This means that the cookie value can be guessed and an attack can go like this:\r\n\r\nAttacker generates for months cookie values (1 per second I don't think triggers any firewall for example) and finally gets to some account. (the other substring of the vimeo cookie is generated the same)\r\n\r\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://vimeo.com", 
            "about": "Make life worth watching", 
            "twitter_handle": "vimeo", 
            "name": "Vimeo"
        }, 
        "handle": "vimeo", 
        "url": "https://hackerone.com/vimeo", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/056/28a1c2f9f94f142a175c4a2370dad85a194797e3_small.png?1393009870", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/056/5cb7c3ee4ca70b64963e311c6f5cd8fb4a1daed9_medium.png?1393009870"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 56, 
        "default_currency": "usd"
    }, 
    "is_published": false
}