{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-12-16T21:42:33.435Z", 
    "voters": [
        "dkasak", 
        "eveeez", 
        "spetr0x"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "10000.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 181828, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-12-16T19:49:16.674Z", 
    "vulnerability_information": "Introduction\n============\n\nCertain valid Ruby programs are able to cause a segmentation fault in mruby through a null pointer derefence, which in turn leads to a crash in mruby_engine and the parent MRI Ruby process.\n\nProof of concept\n================\n\ncrash.rb:\n---------\n\n    def method\n        yield\n    end\n\n    method(&a &&= 0)\n\n1. Save the above code as crash.rb\n2. Run either:\n   a) mruby crash.rb\n   b) sandbox crash.rb\n3. Both cause a segmentation fault.\n\nDiscussion\n==========\n\nEverything below assumes the latest master of the mruby repository as of Nov 12th, which is commit `88604e39ac9c25ffdad2e3f03be26516fe866038`.\n\nThe null pointer dereference itself for the above POC happens in `ext/mruby_engine/mruby/src/vm.c`, line 1266:\n\n        regs[0] = m->env->stack[0];\n\nThe `env` member of is a null pointer since `m` refers to a `RProc *` of a non-closure lambda.\n\nThe underlying cause of the bug is an unsafe peephole optimization during code generation which isn't a valid transformation in certain contexts. Let's examine the debug information generated by running `mruby -v crash.rb`:\n\n    00001 NODE_SCOPE:\n    00005   local variables:\n    00005     a\n    00001   NODE_BEGIN:\n    00001     NODE_DEF:\n    00003       method\n    00002       NODE_BEGIN:\n    00002         NODE_YIELD:\n    00005     NODE_CALL:\n    00005       NODE_SELF\n    00005       method='method' (665)\n    00005       args:\n    00005       block:\n    00005         NODE_BLOCK_ARG:\n    00005           NODE_OP_ASGN:\n    00005             lhs:\n    00005               NODE_LVAR a\n    00005             op='&&' (666)\n    00005             NODE_INT 0 base 10\n    irep 0x10d5920 nregs=4 nlocals=2 pools=0 syms=1 reps=1\n    file: crash.rb\n        1 000 OP_TCLASS R2\n        1 001 OP_LAMBDA R3      I(+1)   1\n        1 002 OP_METHOD R2      :method\n        5 003 OP_LOADSELF       R2\n        5 004 OP_JMPNOT R1      007\n        5 005 OP_LOADI  R3      0\n        5 006 OP_MOVE   R1      R3              ; R1:a\n        5 007 OP_SENDB  R2      :method 0\n        5 008 OP_STOP\n\n    irep 0x10db740 nregs=3 nlocals=2 pools=0 syms=1 reps=0\n    file: crash.rb\n        1 000 OP_ENTER  0:0:0:0:0:0:0\n        2 001 OP_BLKPUSH        R2      0:0:0:0\n        2 002 OP_SEND   R2      :call   0\n        2 003 OP_RETURN R2      return\n\nFrom the above, it can be seen that R3 is set to a lambda representing the method `method` but then never re-set again in the true branch of the `JMPNOT`. Furthermore, the condition of `JMPNOT` will always be true in this particular case since `a` was never defined so the use of the &&= assignment operator causes it to be set to `nil`.\n\nSince a method called through `SENDB A B C` expects the passed block to be located in the register A+C+1, which is R3 in the caller's context, it is obvious the method will instead receive the lambda representing `method` instead. Since lambdas are represented as `(RProc *)`, just as blocks are, this won't cause a type error. However, this particular lambda is not a closure so its `(RProc *)` doesn't contain an `env` member and it is a null pointer.\n\nNote that the problem isn't limited to methods with blocks, as can be seen from this slightly modified example which also causes a segfault:\n\nmodified_crash.rb:\n------------------\n\n    def method(x)\n        x.call\n    end\n\n    method(a &&= 0)\n\nWe then investigated further to check why the code generator was producing faulty bytecode, only to find that it in fact emits a correct `MOVE R3 R1` instruction immediately after the `LOADSELF`. However, since it is then followed by an appropriately \"shaped\" `JMPNOT`, it triggers the following peephole reduction rule which elides the `MOVE`:\n\n    MOVE   R3   R1\n    JMPNOT R3    0\n    --------------\n    JMPNOT R1    0\n\nThe rule in question is located in `ext/mruby_engine/mruby/mrbgems/mruby-compiler/core/codegen.c`, line 350. In another related example where the operation `a &&= 0` is done outside the argument list, the bytecode is almost exactly the same, just shuffled around. However, this shuffling prevents the `MOVE` and `JMPNOT` in being adjacent, which prevents the peephole rule from triggering and results in an ordinary mruby exception:\n\nnon_crash.rb:\n-------------\n\n    def method\n        yield\n    end\n\n    a &&= 0\n\n    method(&a)\n\nThis yields the following AST and bytecode:\n\n    00001 NODE_SCOPE:\n    00005   local variables:\n    00005     a\n    00001   NODE_BEGIN:\n    00001     NODE_DEF:\n    00003       method\n    00002       NODE_BEGIN:\n    00002         NODE_YIELD:\n    00005     NODE_OP_ASGN:\n    00005       lhs:\n    00005         NODE_LVAR a\n    00005       op='&&' (666)\n    00005       NODE_INT 0 base 10\n    00007     NODE_CALL:\n    00007       NODE_SELF\n    00007       method='method' (665)\n    00007       args:\n    00007       block:\n    00007         NODE_BLOCK_ARG:\n    00007           NODE_LVAR a\n    irep 0x2468920 nregs=4 nlocals=2 pools=0 syms=1 reps=1\n    file: a-new-kind-of-crash.7\n        1 000 OP_TCLASS R2\n        1 001 OP_LAMBDA R3      I(+1)   1\n        1 002 OP_METHOD R2      :method\n        5 003 OP_JMPNOT R1      005\n        5 004 OP_LOADI  R1      0               ; R1:a\n        7 005 OP_LOADSELF       R2\n        7 006 OP_MOVE   R3      R1              ; R1:a   <<<the MOVE isn't elided>>>\n        7 007 OP_SENDB  R2      :method 0\n        7 008 OP_STOP\n\n    irep 0x246e740 nregs=3 nlocals=2 pools=0 syms=1 reps=0\n    file: a-new-kind-of-crash.7\n        1 000 OP_ENTER  0:0:0:0:0:0:0\n        2 001 OP_BLKPUSH        R2      0:0:0:0\n        2 002 OP_SEND   R2      :call   0\n        2 003 OP_RETURN R2      return\n\n    trace:\n            [1] a-new-kind-of-crash.7:2:in Object.method\n            [0] a-new-kind-of-crash.7:7\n    LocalJumpError: unexpected yield\n\nSolution\n========\n\nWe investigated several possible solutions, but ultimately the peephole optimization in question seems very precarious. As best as we could tell, the triggering factor seems to be an AST with a `NODE_OP_ASGN` nested inside a `NODE_CALL` (not necessarily as an immediate child). Since most of the work is done in the function `codegen` which is called recursively, there is no simple way to detect this special case without examining the AST. Therefore, presumably a flag should be set when the code generator enters a `NODE_CALL` so the peepholer knows not to make this optimization if inside it.\n\nSince with our limited knowledge of the codebase it's not obvious that this is the right solution, we decided to simply disable the optimization for now since it is relatively low impact. We supply the following patch:\n\n    diff --git a/mrbgems/mruby-compiler/core/codegen.c b/mrbgems/mruby-compiler/core/codegen.c\n    index 9b064b8..6539ed4 100644\n    --- a/mrbgems/mruby-compiler/core/codegen.c\n    +++ b/mrbgems/mruby-compiler/core/codegen.c\n    @@ -346,13 +346,6 @@ genop_peep(codegen_scope *s, mrb_code i, int val)\n            }\n        }\n        break;\n    -    case OP_JMPIF:\n    -    case OP_JMPNOT:\n    -      if (c0 == OP_MOVE && GETARG_A(i) == GETARG_A(i0)) {\n    -        s->iseq[s->pc-1] = MKOP_AsBx(c1, GETARG_B(i0), GETARG_sBx(i));\n    -        return s->pc-1;\n    -      }\n    -      break;\n        default:\n        break;\n        }\n\nWith the optimization disabled, the segfault no longer happens and the code passes all tests. If the mruby developers insist that this optimization should remain, we are willing to work with them to develop a fix.\n\n-- \nDenis Kasak\nDamir Jeli\u0107", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "none", 
            "privileges_required": "none", 
            "user_interaction": "none", 
            "attack_vector": "network", 
            "attack_complexity": "low", 
            "scope": "changed", 
            "integrity": "none", 
            "availability": "high"
        }, 
        "rating": "high", 
        "score": 8.6, 
        "author_type": "User"
    }, 
    "title": "Segfault in mruby, mruby_engine and the parent MRI Ruby due to null pointer dereference", 
    "is_member_of_team?": null, 
    "vote_count": 3, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-01-15T19:49:16.711Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$10,000", 
    "attachments": [
        {
            "file_name": "crash.rb", 
            "type": "text/plain", 
            "id": 134371, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/134/371/38f1f3d1ba3438a653caecffc265292cbe5de8da/crash.rb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224551Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=cd831a938afea63833314ef18b46a239dea9e29336d9c1e7af9c96aface1ce90"
        }, 
        {
            "file_name": "modified_crash.rb", 
            "type": "text/plain", 
            "id": 134372, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/134/372/bf23b4d14eefab771278d93c17aeb191084830f1/modified_crash.rb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224551Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b32f654e1e1d5d10d6b6a7c68f6d196272584ed26292788a0f20d9fe5aabd236"
        }, 
        {
            "file_name": "non_crash.rb", 
            "type": "text/plain", 
            "id": 134373, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/134/373/3b4933693d0c30ad504f4863c3ffca20472677d4/non_crash.rb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224551Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=6ec87ae4757ae6e8abb1410bda4f6460ba272626d287d0da1a1ce1deef4359c6"
        }, 
        {
            "file_name": "segfault.patch", 
            "type": "text/x-diff", 
            "id": 134374, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/134/374/e8345f181f4aa7b080a5a59bb0145f22b5e5b955/segfault.patch?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224551Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d910c932b33637c16a094cd51d8fc3340dad07de62a6e20008ac2f5c49607c3c"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "attachments": [
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/134/621/4f700617acd43c97e7ab27ee6f51f706038b47ab/peephole-segfault-test.patch?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224551Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d56664b29487d5eca3f8f11873dd396464d412fabc5599406ee2784f83b7a3fd", 
                    "type": "text/x-diff", 
                    "id": 134621, 
                    "filename": "peephole-segfault-test.patch"
                }, 
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/134/620/fac9b7ea4b5e61be514f7b5e19cc4c2ed2a48057/peephole-segfault-fix.patch?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224551Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fcc2dcd03de8646d7bc914e1ab1ff342dccc9976d145be51854f5ed38c0ef354", 
                    "type": "text/x-diff", 
                    "id": 134620, 
                    "filename": "peephole-segfault-fix.patch"
                }
            ], 
            "automated_response": false, 
            "created_at": "2016-11-14T15:03:11.499Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-14T15:03:11.499Z", 
            "actor": {
                "username": "dkasak", 
                "url": "/dkasak", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/122/858/741782c4a124d498cf0070511e4c112f6ef73e5d_medium.png?1481406790"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify-scripts", 
            "message": "Attached is a possible fix for the segfault which doesn't necessitate removing the optimisation altogether. Note that we can't guarantee there aren't other cases where this particular optimisation is unsafe, but the fix works for all the test cases we've managed to produce so far. \n\nThe fix works by tracking whether we are inside a function call parameter list while doing the optimisation (i.e. whether `gen_call` is an ancestor of the current `genop_peep` call in the function call graph). This is tracked in an `int` instead of a boolean so nested function calls are handled appropriately. This may introduce the possibility of `int` overflow if the call stack is not otherwise limited.\n\nWe also attempted to add a test case (also attached) for this into mruby's test suite:\n\n    diff --git a/test/t/bs_block.rb b/test/t/bs_block.rb\n    index 04a4a15..ad4aec8 100644\n    --- a/test/t/bs_block.rb\n    +++ b/test/t/bs_block.rb\n    @@ -519,3 +519,15 @@ assert('BS Block 38') do\n    \n    assert_equal [1,2,3,4,5], iter{|a,b,c=:c,d,e| [a,b,c,d,e]}\n    end\n    +\n    +assert('BS Block 39') do\n    +  module TestYieldNilFromAssignToUndefined\n    +    def m\n    +      yield\n    +    end\n    +  end\n    +\n    +  assert_raise(LocalJumpError) do\n    +    TestYieldNilFromAssignToUndefined.m(&z &&= 0)\n    +  end\n    +end\n\nHowever, the test doesn't crash mruby, presumably because the presence of the test suite context changes the order/composition of the opcodes, preventing the optimization from getting triggered. This serves well to point out the relative flakiness of the optimisation.", 
            "markdown_message": "<p>Attached is a possible fix for the segfault which doesn&#39;t necessitate removing the optimisation altogether. Note that we can&#39;t guarantee there aren&#39;t other cases where this particular optimisation is unsafe, but the fix works for all the test cases we&#39;ve managed to produce so far. </p>\n\n<p>The fix works by tracking whether we are inside a function call parameter list while doing the optimisation (i.e. whether <code>gen_call</code> is an ancestor of the current <code>genop_peep</code> call in the function call graph). This is tracked in an <code>int</code> instead of a boolean so nested function calls are handled appropriately. This may introduce the possibility of <code>int</code> overflow if the call stack is not otherwise limited.</p>\n\n<p>We also attempted to add a test case (also attached) for this into mruby&#39;s test suite:</p>\n<pre class=\"highlight diff\"><code><span class=\"gh\">diff --git a/test/t/bs_block.rb b/test/t/bs_block.rb\nindex 04a4a15..ad4aec8 100644\n</span><span class=\"gd\">--- a/test/t/bs_block.rb\n</span><span class=\"gi\">+++ b/test/t/bs_block.rb\n</span><span class=\"gu\">@@ -519,3 +519,15 @@ assert(&#39;BS Block 38&#39;) do\n</span>\nassert_equal [1,2,3,4,5], iter{|a,b,c=:c,d,e| [a,b,c,d,e]}\nend\n<span class=\"gi\">+\n+assert(&#39;BS Block 39&#39;) do\n+  module TestYieldNilFromAssignToUndefined\n+    def m\n+      yield\n+    end\n+  end\n+\n+  assert_raise(LocalJumpError) do\n+    TestYieldNilFromAssignToUndefined.m(&amp;z &amp;&amp;= 0)\n+  end\n+end\n</span></code></pre>\n<p>However, the test doesn&#39;t crash mruby, presumably because the presence of the test suite context changes the order/composition of the opcodes, preventing the optimization from getting triggered. This serves well to point out the relative flakiness of the optimisation.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1298353, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-14T22:26:46.346Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-14T22:26:46.346Z", 
            "actor": {
                "username": "clayton", 
                "url": "/clayton", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/166/6d366b567e9fef1c476c1505c0016e3031a74a34_medium.jpg?1493127129"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify-scripts", 
            "message": "Thank you for your report! We've reproduced the issue, and our engineering team is investigating.", 
            "markdown_message": "<p>Thank you for your report! We&#39;ve reproduced the issue, and our engineering team is investigating.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1299415, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "dkasak", 
                "url": "/dkasak"
            }, 
            "created_at": "2016-11-18T20:43:47.463Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-18T20:43:47.463Z", 
            "actor": {
                "username": "francoischagnon", 
                "url": "/francoischagnon", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/168/3b5130025fbf90eaeb1c9234baa340dfead68f44_medium.jpg?1429126005"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify-scripts", 
            "message": "Hi @dkasak, thank you for your report and the patch! We've deployed a fix for this in our production environment as of earlier today.\n\nI'm marking this issue as resolved now but we still need to fix this bug upstream before we can assess the impact & determine a final bounty amount. This may take a few weeks since we received a large number of valid issues and we want to calibrate our payouts across all of them.", 
            "markdown_message": "<p>Hi <a href=\"/dkasak\">@dkasak</a>, thank you for your report and the patch! We&#39;ve deployed a fix for this in our production environment as of earlier today.</p>\n\n<p>I&#39;m marking this issue as resolved now but we still need to fix this bug upstream before we can assess the impact &amp; determine a final bounty amount. This may take a few weeks since we received a large number of valid issues and we want to calibrate our payouts across all of them.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1307412, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-25T15:40:47.839Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-25T15:40:47.839Z", 
            "actor": {
                "username": "francoischagnon", 
                "url": "/francoischagnon", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/168/3b5130025fbf90eaeb1c9234baa340dfead68f44_medium.jpg?1429126005"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify-scripts", 
            "message": "The fix for this issue has ben merged upstream: https://github.com/Shopify/mruby-internal/pull/49/files", 
            "markdown_message": "<p>The fix for this issue has ben merged upstream: <a title=\"https://github.com/Shopify/mruby-internal/pull/49/files\" href=\"/redirect?signature=290342183d54c4c9b14fb89569d03a77603d018f&amp;url=https%3A%2F%2Fgithub.com%2FShopify%2Fmruby-internal%2Fpull%2F49%2Ffiles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/Shopify/mruby-internal/pull/49/files</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::Comment", 
            "id": 1319220, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-12-16T19:49:10.424Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-16T19:49:10.424Z", 
            "actor": {
                "url": "/shopify-scripts", 
                "profile": {
                    "name": "shopify-scripts"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/668/b50db49e93f656e202ae6f94b4c0821d1184134b_medium.jpg?1475592254"
                }
            }, 
            "team_handle": "shopify-scripts", 
            "bounty_amount": "10000.0", 
            "collaborator": {
                "username": "dkasak", 
                "url": "/dkasak"
            }, 
            "message": "Thanks for helping improve the security of Shopify Scripts and the mruby project!", 
            "markdown_message": "<p>Thanks for helping improve the security of Shopify Scripts and the mruby project!</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 1370019, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-16T19:49:16.689Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-16T19:49:16.689Z", 
            "actor": {
                "username": "andrewdunbar", 
                "url": "/andrewdunbar", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/164/cd46f5270ea41c5f0da3bea93e2eca7a95858caf_medium.jpg?1427927985"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify-scripts", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1370020, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-16T21:42:33.452Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-16T21:42:33.452Z", 
            "actor": {
                "username": "dkasak", 
                "url": "/dkasak", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/122/858/741782c4a124d498cf0070511e4c112f6ef73e5d_medium.png?1481406790"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify-scripts", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1370370, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-16T21:42:33.483Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-16T21:42:33.483Z", 
            "actor": {
                "username": "dkasak", 
                "url": "/dkasak", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/122/858/741782c4a124d498cf0070511e4c112f6ef73e5d_medium.png?1481406790"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify-scripts", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1370371, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "dkasak", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/dkasak", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/122/858/9cb96e9ee0a0a51253abc1d38190bed32bcb7087_small.png?1481406790"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 48, 
        "name": "Denial of Service"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -59626594.53284226, 
    "disclosed_at": "2016-12-16T21:42:33.468Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/181828", 
    "created_at": "2016-11-12T20:25:31.821Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"introduction\">Introduction</h1>\n\n<p>Certain valid Ruby programs are able to cause a segmentation fault in mruby through a null pointer derefence, which in turn leads to a crash in mruby_engine and the parent MRI Ruby process.</p>\n\n<h1 id=\"proof-of-concept\">Proof of concept</h1>\n\n<h2 id=\"crash-rb\">crash.rb:</h2>\n<pre class=\"highlight plaintext\"><code>def method\n    yield\nend\n\nmethod(&amp;a &amp;&amp;= 0)\n</code></pre>\n<ol>\n<li>Save the above code as crash.rb</li>\n<li>Run either:\na) mruby crash.rb\nb) sandbox crash.rb</li>\n<li>Both cause a segmentation fault.</li>\n</ol>\n\n<h1 id=\"discussion\">Discussion</h1>\n\n<p>Everything below assumes the latest master of the mruby repository as of Nov 12th, which is commit <code>88604e39ac9c25ffdad2e3f03be26516fe866038</code>.</p>\n\n<p>The null pointer dereference itself for the above POC happens in <code>ext/mruby_engine/mruby/src/vm.c</code>, line 1266:</p>\n<pre class=\"highlight plaintext\"><code>    regs[0] = m-&gt;env-&gt;stack[0];\n</code></pre>\n<p>The <code>env</code> member of is a null pointer since <code>m</code> refers to a <code>RProc *</code> of a non-closure lambda.</p>\n\n<p>The underlying cause of the bug is an unsafe peephole optimization during code generation which isn&#39;t a valid transformation in certain contexts. Let&#39;s examine the debug information generated by running <code>mruby -v crash.rb</code>:</p>\n<pre class=\"highlight plaintext\"><code>00001 NODE_SCOPE:\n00005   local variables:\n00005     a\n00001   NODE_BEGIN:\n00001     NODE_DEF:\n00003       method\n00002       NODE_BEGIN:\n00002         NODE_YIELD:\n00005     NODE_CALL:\n00005       NODE_SELF\n00005       method=&#39;method&#39; (665)\n00005       args:\n00005       block:\n00005         NODE_BLOCK_ARG:\n00005           NODE_OP_ASGN:\n00005             lhs:\n00005               NODE_LVAR a\n00005             op=&#39;&amp;&amp;&#39; (666)\n00005             NODE_INT 0 base 10\nirep 0x10d5920 nregs=4 nlocals=2 pools=0 syms=1 reps=1\nfile: crash.rb\n    1 000 OP_TCLASS R2\n    1 001 OP_LAMBDA R3      I(+1)   1\n    1 002 OP_METHOD R2      :method\n    5 003 OP_LOADSELF       R2\n    5 004 OP_JMPNOT R1      007\n    5 005 OP_LOADI  R3      0\n    5 006 OP_MOVE   R1      R3              ; R1:a\n    5 007 OP_SENDB  R2      :method 0\n    5 008 OP_STOP\n\nirep 0x10db740 nregs=3 nlocals=2 pools=0 syms=1 reps=0\nfile: crash.rb\n    1 000 OP_ENTER  0:0:0:0:0:0:0\n    2 001 OP_BLKPUSH        R2      0:0:0:0\n    2 002 OP_SEND   R2      :call   0\n    2 003 OP_RETURN R2      return\n</code></pre>\n<p>From the above, it can be seen that R3 is set to a lambda representing the method <code>method</code> but then never re-set again in the true branch of the <code>JMPNOT</code>. Furthermore, the condition of <code>JMPNOT</code> will always be true in this particular case since <code>a</code> was never defined so the use of the &amp;&amp;= assignment operator causes it to be set to <code>nil</code>.</p>\n\n<p>Since a method called through <code>SENDB A B C</code> expects the passed block to be located in the register A+C+1, which is R3 in the caller&#39;s context, it is obvious the method will instead receive the lambda representing <code>method</code> instead. Since lambdas are represented as <code>(RProc *)</code>, just as blocks are, this won&#39;t cause a type error. However, this particular lambda is not a closure so its <code>(RProc *)</code> doesn&#39;t contain an <code>env</code> member and it is a null pointer.</p>\n\n<p>Note that the problem isn&#39;t limited to methods with blocks, as can be seen from this slightly modified example which also causes a segfault:</p>\n\n<h2 id=\"modified_crash-rb\">modified_crash.rb:</h2>\n<pre class=\"highlight plaintext\"><code>def method(x)\n    x.call\nend\n\nmethod(a &amp;&amp;= 0)\n</code></pre>\n<p>We then investigated further to check why the code generator was producing faulty bytecode, only to find that it in fact emits a correct <code>MOVE R3 R1</code> instruction immediately after the <code>LOADSELF</code>. However, since it is then followed by an appropriately &quot;shaped&quot; <code>JMPNOT</code>, it triggers the following peephole reduction rule which elides the <code>MOVE</code>:</p>\n<pre class=\"highlight plaintext\"><code>MOVE   R3   R1\nJMPNOT R3    0\n--------------\nJMPNOT R1    0\n</code></pre>\n<p>The rule in question is located in <code>ext/mruby_engine/mruby/mrbgems/mruby-compiler/core/codegen.c</code>, line 350. In another related example where the operation <code>a &amp;&amp;= 0</code> is done outside the argument list, the bytecode is almost exactly the same, just shuffled around. However, this shuffling prevents the <code>MOVE</code> and <code>JMPNOT</code> in being adjacent, which prevents the peephole rule from triggering and results in an ordinary mruby exception:</p>\n\n<h2 id=\"non_crash-rb\">non_crash.rb:</h2>\n<pre class=\"highlight plaintext\"><code>def method\n    yield\nend\n\na &amp;&amp;= 0\n\nmethod(&amp;a)\n</code></pre>\n<p>This yields the following AST and bytecode:</p>\n<pre class=\"highlight plaintext\"><code>00001 NODE_SCOPE:\n00005   local variables:\n00005     a\n00001   NODE_BEGIN:\n00001     NODE_DEF:\n00003       method\n00002       NODE_BEGIN:\n00002         NODE_YIELD:\n00005     NODE_OP_ASGN:\n00005       lhs:\n00005         NODE_LVAR a\n00005       op=&#39;&amp;&amp;&#39; (666)\n00005       NODE_INT 0 base 10\n00007     NODE_CALL:\n00007       NODE_SELF\n00007       method=&#39;method&#39; (665)\n00007       args:\n00007       block:\n00007         NODE_BLOCK_ARG:\n00007           NODE_LVAR a\nirep 0x2468920 nregs=4 nlocals=2 pools=0 syms=1 reps=1\nfile: a-new-kind-of-crash.7\n    1 000 OP_TCLASS R2\n    1 001 OP_LAMBDA R3      I(+1)   1\n    1 002 OP_METHOD R2      :method\n    5 003 OP_JMPNOT R1      005\n    5 004 OP_LOADI  R1      0               ; R1:a\n    7 005 OP_LOADSELF       R2\n    7 006 OP_MOVE   R3      R1              ; R1:a   &lt;&lt;&lt;the MOVE isn&#39;t elided&gt;&gt;&gt;\n    7 007 OP_SENDB  R2      :method 0\n    7 008 OP_STOP\n\nirep 0x246e740 nregs=3 nlocals=2 pools=0 syms=1 reps=0\nfile: a-new-kind-of-crash.7\n    1 000 OP_ENTER  0:0:0:0:0:0:0\n    2 001 OP_BLKPUSH        R2      0:0:0:0\n    2 002 OP_SEND   R2      :call   0\n    2 003 OP_RETURN R2      return\n\ntrace:\n        [1] a-new-kind-of-crash.7:2:in Object.method\n        [0] a-new-kind-of-crash.7:7\nLocalJumpError: unexpected yield\n</code></pre>\n<h1 id=\"solution\">Solution</h1>\n\n<p>We investigated several possible solutions, but ultimately the peephole optimization in question seems very precarious. As best as we could tell, the triggering factor seems to be an AST with a <code>NODE_OP_ASGN</code> nested inside a <code>NODE_CALL</code> (not necessarily as an immediate child). Since most of the work is done in the function <code>codegen</code> which is called recursively, there is no simple way to detect this special case without examining the AST. Therefore, presumably a flag should be set when the code generator enters a <code>NODE_CALL</code> so the peepholer knows not to make this optimization if inside it.</p>\n\n<p>Since with our limited knowledge of the codebase it&#39;s not obvious that this is the right solution, we decided to simply disable the optimization for now since it is relatively low impact. We supply the following patch:</p>\n<pre class=\"highlight diff\"><code><span class=\"gh\">diff --git a/mrbgems/mruby-compiler/core/codegen.c b/mrbgems/mruby-compiler/core/codegen.c\nindex 9b064b8..6539ed4 100644\n</span><span class=\"gd\">--- a/mrbgems/mruby-compiler/core/codegen.c\n</span><span class=\"gi\">+++ b/mrbgems/mruby-compiler/core/codegen.c\n</span><span class=\"gu\">@@ -346,13 +346,6 @@ genop_peep(codegen_scope *s, mrb_code i, int val)\n</span>        }\n    }\n    break;\n<span class=\"gd\">-    case OP_JMPIF:\n-    case OP_JMPNOT:\n-      if (c0 == OP_MOVE &amp;&amp; GETARG_A(i) == GETARG_A(i0)) {\n-        s-&gt;iseq[s-&gt;pc-1] = MKOP_AsBx(c1, GETARG_B(i0), GETARG_sBx(i));\n-        return s-&gt;pc-1;\n-      }\n-      break;\n</span>    default:\n    break;\n    }\n</code></pre>\n<p>With the optimization disabled, the segfault no longer happens and the code passes all tests. If the mruby developers insist that this optimization should remain, we are willing to work with them to develop a fix.</p>\n\n<p>-- <br>\nDenis Kasak<br>\nDamir Jeli\u0107</p>\n", 
    "severity_rating": "high", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.mruby.science", 
            "about": "", 
            "twitter_handle": "", 
            "name": "shopify-scripts"
        }, 
        "handle": "shopify-scripts", 
        "url": "https://hackerone.com/shopify-scripts", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/015/668/9f47d94cbd9e4311b57f1ab05f67fb5c26fd2e78_small.jpg?1475592254", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/015/668/b50db49e93f656e202ae6f94b4c0821d1184134b_medium.jpg?1475592254"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 15668, 
        "default_currency": "usd"
    }, 
    "is_published": false
}