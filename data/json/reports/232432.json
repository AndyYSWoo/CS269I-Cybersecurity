{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-06-26T15:46:44.312Z", 
    "voters": [
        "bl4de", 
        "danila_xawdxawdx", 
        "spam404", 
        "ras-it", 
        "tk0", 
        "inhibitor181", 
        "xyodh", 
        "eveeez", 
        "gamliel", 
        "axolotl", 
        "and 12 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 232432, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "vulnerability_information": "## Description\n\nThe Keybase Chrome extension makes heavy use of the insecure `innerHTML` DOM API, resulting in Universal Cross-Site Scripting on all Keybase-supported social networking websites.\n\n## Steps to reproduce the issue\n\n1. Install the [Keybase Chrome extension](https://chrome.google.com/webstore/detail/keybase/ognfafcpbkogffpmmdglhbjboeojlefj)\n2. Navigate to the following URL address: `https://news.ycombinator.com/user?id=jupenur&id=%22%3E%3Ciframe%20src%3D%22javascript:alert(document.domain)%22`\n3. Click on the **Keybase Chat** button\n4. You should see a JavaScript `alert` dialog with the domain name of the affected social networking site (`news.ycombinator.com`) in it\n\nThis example targets an HN profile page, but it should be equally possible to trigger the same vulnerability on any other supported website. The websites potentially affected are\n\n* reddit.com\n* twitter.com\n* facebook.com\n* github.com\n* news.ycombinator.com\n* keybase.io\n* keybase.pub\n\nIt may also be possible to exploit the vulnerability without requiring the user to click a button.\n\n## Suggested fix\n\nThe vulnerable code exploited in the example above is in the file `content.js`\n\n```JavaScript\n// Render the Keybase chat reply widget\nfunction renderChat(parent, user, nudgeSupported, closeCallback) {\n  const oobNudgeHTML = `\n      <p>\n        You will need to let <a target=\"_blank\" href=\"${user.href()}\" class=\"external-user\">${user.display()}</a> know that they have a Keybase message waiting for them.\n      </p>\n      <p>\n        Share this handy link: <span class=\"keybase-copy\">https://keybase.io/docs/extension</span>\n      </p>\n  `;\n```\n\nThe functions `user.href()` and `user.display()` return strings parsed from the URL. These values are used directly in HTML markup (via `innerHTML`) at multiple points in the code.\n\n**It is recommended to avoid the use of `innerHTML` entirely.** Standard DOM methods like `createElement` should be used instead. The code also contains a function, `safeHTML`, which could be used to escape all untrusted input, but this is much more error prone.\n", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "low", 
            "privileges_required": "none", 
            "user_interaction": "required", 
            "attack_vector": "network", 
            "attack_complexity": "low", 
            "scope": "changed", 
            "integrity": "low", 
            "availability": "none"
        }, 
        "rating": "medium", 
        "score": 6.1, 
        "author_type": "User"
    }, 
    "title": "Universal Cross-Site Scripting in Keybase Chrome extension", 
    "is_member_of_team?": null, 
    "vote_count": 22, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-07-26T15:46:44.380Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$500", 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-05-27T22:21:14.375Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-05-27T22:21:14.375Z", 
            "actor": {
                "username": "maxtaco", 
                "url": "/maxtaco", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "keybase", 
            "message": "Thanks for the great report. Our extension dev just published a workaround. Can you comment on whether it's been fixed? Many thanks for the great research.", 
            "markdown_message": "<p>Thanks for the great report. Our extension dev just published a workaround. Can you comment on whether it&#39;s been fixed? Many thanks for the great research.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1705576, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-05-28T08:19:01.316Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-05-28T08:19:12.772Z", 
            "actor": {
                "username": "jupenur", 
                "url": "/jupenur", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "keybase", 
            "message": "The `safeHTML` function now gets called in `matchService`, essentially escaping all usernames at the parsing stage. That should definitely do it. In the long term I would recommend migrating away from the use of `innerHTML`, though.", 
            "markdown_message": "<p>The <code>safeHTML</code> function now gets called in <code>matchService</code>, essentially escaping all usernames at the parsing stage. That should definitely do it. In the long term I would recommend migrating away from the use of <code>innerHTML</code>, though.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1705900, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "jupenur", 
                "url": "/jupenur"
            }, 
            "created_at": "2017-05-30T12:23:17.902Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-05-30T12:23:17.902Z", 
            "actor": {
                "username": "maxtaco", 
                "url": "/maxtaco", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "keybase", 
            "message": "There was some reason our extension developer decided against that approach, though he agrees it's better in theory.", 
            "markdown_message": "<p>There was some reason our extension developer decided against that approach, though he agrees it&#39;s better in theory.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1709339, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2017-05-30T12:23:37.601Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-05-30T12:23:37.601Z", 
            "actor": {
                "url": "/keybase", 
                "profile": {
                    "name": "Keybase"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/809/872679ab560cdc6d9ad694486a2606a5ad240113_medium.png?1520024913"
                }
            }, 
            "team_handle": "keybase", 
            "bonus_amount": "0.0", 
            "bounty_amount": "500.0", 
            "collaborator": {
                "username": "jupenur", 
                "url": "/jupenur"
            }, 
            "message": "thanks for the great research and report.", 
            "markdown_message": "<p>thanks for the great research and report.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 1709340, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-05-30T12:40:21.378Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-05-30T12:40:21.378Z", 
            "actor": {
                "username": "jupenur", 
                "url": "/jupenur", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "keybase", 
            "message": "Public disclosure ok?", 
            "markdown_message": "<p>Public disclosure ok?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1709382, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-26T15:46:44.334Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-26T15:46:44.334Z", 
            "actor": {
                "username": "jupenur", 
                "url": "/jupenur", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "keybase", 
            "first_to_agree": true, 
            "message": "I'm pretty sure I already requested public disclosure. What happened?", 
            "markdown_message": "<p>I&#39;m pretty sure I already requested public disclosure. What happened?</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1781013, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-26T16:52:10.078Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-26T16:52:10.078Z", 
            "actor": {
                "username": "maxtaco", 
                "url": "/maxtaco", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "keybase", 
            "message": "We don't want disclosure.", 
            "markdown_message": "<p>We don&#39;t want disclosure.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1781335, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-26T17:10:11.612Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-26T17:10:11.612Z", 
            "actor": {
                "username": "jupenur", 
                "url": "/jupenur", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "keybase", 
            "message": "Ah, ok. I was confused because the disclosure request just vanished; no indication that it was your doing.", 
            "markdown_message": "<p>Ah, ok. I was confused because the disclosure request just vanished; no indication that it was your doing.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1781425, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-07-26T15:46:45.403Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-07-26T15:46:45.403Z", 
            "actor": {
                "url": "/keybase", 
                "profile": {
                    "name": "Keybase"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/809/872679ab560cdc6d9ad694486a2606a5ad240113_medium.png?1520024913"
                }
            }, 
            "team_handle": "keybase", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1868341, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "jupenur", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/jupenur", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 63, 
        "name": "Cross-site Scripting (XSS) - DOM"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -43051710.22931757, 
    "disclosed_at": "2017-07-26T15:46:45.361Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/232432", 
    "created_at": "2017-05-27T12:50:11.868Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h2 id=\"description\">Description</h2>\n\n<p>The Keybase Chrome extension makes heavy use of the insecure <code>innerHTML</code> DOM API, resulting in Universal Cross-Site Scripting on all Keybase-supported social networking websites.</p>\n\n<h2 id=\"steps-to-reproduce-the-issue\">Steps to reproduce the issue</h2>\n\n<ol>\n<li>Install the <a href=\"/redirect?signature=817891b2af966074d1fe231d5047edb4678a85d4&amp;url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fkeybase%2Fognfafcpbkogffpmmdglhbjboeojlefj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Keybase Chrome extension</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>Navigate to the following URL address: <code>https://news.ycombinator.com/user?id=jupenur&amp;id=%22%3E%3Ciframe%20src%3D%22javascript:alert(document.domain)%22</code>\n</li>\n<li>Click on the <strong>Keybase Chat</strong> button</li>\n<li>You should see a JavaScript <code>alert</code> dialog with the domain name of the affected social networking site (<code>news.ycombinator.com</code>) in it</li>\n</ol>\n\n<p>This example targets an HN profile page, but it should be equally possible to trigger the same vulnerability on any other supported website. The websites potentially affected are</p>\n\n<ul>\n<li>reddit.com</li>\n<li>twitter.com</li>\n<li>facebook.com</li>\n<li>github.com</li>\n<li>news.ycombinator.com</li>\n<li>keybase.io</li>\n<li>keybase.pub</li>\n</ul>\n\n<p>It may also be possible to exploit the vulnerability without requiring the user to click a button.</p>\n\n<h2 id=\"suggested-fix\">Suggested fix</h2>\n\n<p>The vulnerable code exploited in the example above is in the file <code>content.js</code></p>\n<pre class=\"highlight plaintext\"><code>// Render the Keybase chat reply widget\nfunction renderChat(parent, user, nudgeSupported, closeCallback) {\n  const oobNudgeHTML = `\n      &lt;p&gt;\n        You will need to let &lt;a target=&quot;_blank&quot; href=&quot;${user.href()}&quot; class=&quot;external-user&quot;&gt;${user.display()}&lt;/a&gt; know that they have a Keybase message waiting for them.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Share this handy link: &lt;span class=&quot;keybase-copy&quot;&gt;https://keybase.io/docs/extension&lt;/span&gt;\n      &lt;/p&gt;\n  `;\n</code></pre>\n<p>The functions <code>user.href()</code> and <code>user.display()</code> return strings parsed from the URL. These values are used directly in HTML markup (via <code>innerHTML</code>) at multiple points in the code.</p>\n\n<p><strong>It is recommended to avoid the use of <code>innerHTML</code> entirely.</strong> Standard DOM methods like <code>createElement</code> should be used instead. The code also contains a function, <code>safeHTML</code>, which could be used to escape all untrusted input, but this is much more error prone.</p>\n", 
    "severity_rating": "medium", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://keybase.io", 
            "about": "", 
            "twitter_handle": "keybaseio", 
            "name": "Keybase"
        }, 
        "handle": "keybase", 
        "url": "https://hackerone.com/keybase", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/002/809/fcc92571d148f9b2ecb0b2b47df37b489e748191_small.png?1520024913", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/002/809/872679ab560cdc6d9ad694486a2606a5ad240113_medium.png?1520024913"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 2809, 
        "default_currency": "usd"
    }, 
    "is_published": false
}