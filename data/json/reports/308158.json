{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "bl4de", 
        "eveeez", 
        "ranjit_p", 
        "whitesector", 
        "craxerbikash", 
        "japz", 
        "newatia123", 
        "sts"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 308158, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-02-05T17:53:55.433Z", 
    "vulnerability_information": "**Module:**\n\nName: [html-janitor](https://www.npmjs.com/package/html-janitor)\nVersion: 2.0.2\n\n**Summary:**\n\nArbitrary HTML can pass the sanitization process, which can be unexpected and dangerous (XSS) in case user-controlled input is passed to the clean function.\n\n**Description:**\n\nProof of concept:\n\n```javascript\nvar myJanitor = new HTMLJanitor({tags:{p:{}}});\nvar cleanHtml = myJanitor.clean(\"<form><object onmouseover=alert(document.domain) name=_sanitized></object></form>\")\nconsole.log(cleanHtml) // logs: <form><object onmouseover=alert(document.domain) name=_sanitized></object></form>\n```\nThe following check can be leveraged to bypass the whole sanitization process:\n\n```javascript\ndo {\n  // Ignore nodes that have already been sanitized\n  if (node._sanitized) {\n      continue;\n  }\n...\n```\n\nAs `node` is the first child in the created tree walker (i.e. in this case the `<form>` tag) `node._sanitized` will point to the inner `<object>` and the check passes.\n\nTo learn more about DOM clobbering see: https://www.youtube.com/watch?v=5W-zGBKvLxk (by Mario Heiderich)\n\n**Recommendation:**\n\nIt should be enough to set `node._sanitized` to `false` every time a new node is being processed. \n\n*Note that I previously reported this issue at https://github.com/guardian/html-janitor/issues/35*\n\n## Impact\n\nGiven the module's description I would assume it should be used to prevent XSS vulnerabilities. This is currently a very dangerous assumption given that the whole sanitization process can be bypassed.\n\nNote that the author might have never intended to feed untrusted data into the clean() function. In that case this is *just* a regular issue. Furthermore, the fact that untrusted data is unexpected should be at least mentioned in the documentation, because other developers most certainly will use the package in such scenarios.", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "high", 
            "privileges_required": "low", 
            "user_interaction": "none", 
            "attack_vector": "network", 
            "attack_complexity": "low", 
            "scope": "unchanged", 
            "integrity": "high", 
            "availability": "none"
        }, 
        "rating": "high", 
        "score": 8.8, 
        "author_type": "Team"
    }, 
    "title": "[html-janitor] Bypassing sanitization using DOM clobbering", 
    "is_member_of_team?": null, 
    "vote_count": 8, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "html-janitor", 
        "max_severity": "critical", 
        "databaseId": 5495, 
        "asset_type": "SOURCE_CODE"
    }, 
    "allow_singular_disclosure_at": "2018-03-07T17:53:55.516Z", 
    "state": "Closed", 
    "cve_ids": [
        "CVE-2017-0928"
    ], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2018-01-23T13:33:25.431Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-23T13:33:25.431Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Hi Martin,\n\nThanks for reporting this.\nI will follow-up on your input about the vulnerability to confirm it and we'll take it from there.", 
            "markdown_message": "<p>Hi Martin,</p>\n\n<p>Thanks for reporting this.<br>\nI will follow-up on your input about the vulnerability to confirm it and we&#39;ll take it from there.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2309945, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "old_scope": "Other module", 
            "created_at": "2018-01-23T13:41:44.588Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-23T13:41:44.588Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "new_scope": "html-janitor", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ChangedScope", 
            "id": 2309964, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-23T17:15:30.647Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-23T17:15:30.647Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "I looked into it and definitely agree Martin. That poc is indeed valid, and agree with your comment regarding putting some disclaimer even if the author never intended for untrusted input to go in. \n\nI invited Oliver here, who worked on the repo, and hopefully he will be able to help out.\nWill also try to reach out to people at The Guardian organization just-incase.", 
            "markdown_message": "<p>I looked into it and definitely agree Martin. That poc is indeed valid, and agree with your comment regarding putting some disclaimer even if the author never intended for untrusted input to go in. </p>\n\n<p>I invited Oliver here, who worked on the repo, and hopefully he will be able to help out.<br>\nWill also try to reach out to people at The Guardian organization just-incase.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2310672, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-23T17:20:17.405Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-23T17:20:17.405Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "High (8.8)", 
                "old_severity": "High"
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 2310680, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-23T17:30:25.235Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-23T17:30:25.235Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 2310714, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-25T20:11:54.681Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-25T20:11:54.681Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "cve_ids": [
                "CVE-2017-0928"
            ], 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::CveIdAdded", 
            "id": 2318038, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-30T23:12:20.039Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-30T23:12:20.039Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "We didn't receive any feedback for a week now on this report, and also the security issue was already reported publicly in the git repository for several months now without attention.\n\nIf by weekend we won't get any response on the report I'll go ahead with a public disclosure of both security issues reported around this package.", 
            "markdown_message": "<p>We didn&#39;t receive any feedback for a week now on this report, and also the security issue was already reported publicly in the git repository for several months now without attention.</p>\n\n<p>If by weekend we won&#39;t get any response on the report I&#39;ll go ahead with a public disclosure of both security issues reported around this package.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2336599, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-31T06:23:43.309Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-31T06:23:43.309Z", 
            "actor": {
                "username": "bayotop", 
                "url": "/bayotop", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/036/633/4e73458fffdb16796d3b91f672104fa30a4722ad_medium.jpg?1544039858"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Sounds good. ", 
            "markdown_message": "<p>Sounds good. </p>\n", 
            "type": "Activities::Comment", 
            "id": 2337156, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-31T22:06:12.530Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-31T22:06:12.530Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "High (8.8)", 
                "old_severity": "High (8.8)"
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 2340393, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "bayotop", 
                "url": "/bayotop"
            }, 
            "created_at": "2018-02-05T17:53:42.231Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-05T17:53:42.231Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 2352942, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-05T17:53:55.465Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-05T17:53:55.465Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2352943, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-05T17:54:24.350Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-05T17:54:24.350Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 2352948, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "bayotop", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/bayotop", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/036/633/e331da5b8e3a380324eb7c0cefdf97fe1901b5be_small.jpg?1544039858"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 65, 
        "name": "Business Logic Errors"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -23690006.551218227, 
    "disclosed_at": "2018-02-05T17:54:24.558Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/308158", 
    "created_at": "2018-01-23T12:47:54.192Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><strong>Module:</strong></p>\n\n<p>Name: <a href=\"/redirect?signature=343a01e01864149beb5ef31736cb48f5f3d11cf8&amp;url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-janitor\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>html-janitor</span><i class=\"icon-external-link\"></i></a><br>\nVersion: 2.0.2</p>\n\n<p><strong>Summary:</strong></p>\n\n<p>Arbitrary HTML can pass the sanitization process, which can be unexpected and dangerous (XSS) in case user-controlled input is passed to the clean function.</p>\n\n<p><strong>Description:</strong></p>\n\n<p>Proof of concept:</p>\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">myJanitor</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">HTMLJanitor</span><span class=\"p\">({</span><span class=\"na\">tags</span><span class=\"p\">:{</span><span class=\"na\">p</span><span class=\"p\">:{}}});</span>\n<span class=\"kd\">var</span> <span class=\"nx\">cleanHtml</span> <span class=\"o\">=</span> <span class=\"nx\">myJanitor</span><span class=\"p\">.</span><span class=\"nx\">clean</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;form&gt;&lt;object onmouseover=alert(document.domain) name=_sanitized&gt;&lt;/object&gt;&lt;/form&gt;&quot;</span><span class=\"p\">)</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">cleanHtml</span><span class=\"p\">)</span> <span class=\"c1\">// logs: &lt;form&gt;&lt;object onmouseover=alert(document.domain) name=_sanitized&gt;&lt;/object&gt;&lt;/form&gt;</span>\n</code></pre>\n<p>The following check can be leveraged to bypass the whole sanitization process:</p>\n<pre class=\"highlight javascript\"><code><span class=\"k\">do</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Ignore nodes that have already been sanitized</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">_sanitized</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">continue</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">...</span>\n</code></pre>\n<p>As <code>node</code> is the first child in the created tree walker (i.e. in this case the <code>&lt;form&gt;</code> tag) <code>node._sanitized</code> will point to the inner <code>&lt;object&gt;</code> and the check passes.</p>\n\n<p>To learn more about DOM clobbering see: <a title=\"https://www.youtube.com/watch?v=5W-zGBKvLxk\" href=\"/redirect?signature=ebcfd5a9f2a84f43ca19b032d6561d8de153670e&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D5W-zGBKvLxk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.youtube.com/watch?v=5W-zGBKvLxk</span><i class=\"icon-external-link\"></i></a> (by Mario Heiderich)</p>\n\n<p><strong>Recommendation:</strong></p>\n\n<p>It should be enough to set <code>node._sanitized</code> to <code>false</code> every time a new node is being processed. </p>\n\n<p><em>Note that I previously reported this issue at <a title=\"https://github.com/guardian/html-janitor/issues/35\" href=\"/redirect?signature=1f0d9d3782514d4341ce15341826947427abdded&amp;url=https%3A%2F%2Fgithub.com%2Fguardian%2Fhtml-janitor%2Fissues%2F35\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/guardian/html-janitor/issues/35</span><i class=\"icon-external-link\"></i></a></em></p>\n\n<h2 id=\"impact\">Impact</h2>\n\n<p>Given the module&#39;s description I would assume it should be used to prevent XSS vulnerabilities. This is currently a very dangerous assumption given that the whole sanitization process can be bypassed.</p>\n\n<p>Note that the author might have never intended to feed untrusted data into the clean() function. In that case this is <em>just</em> a regular issue. Furthermore, the fact that untrusted data is unexpected should be at least mentioned in the documentation, because other developers most certainly will use the package in such scenarios.</p>\n", 
    "severity_rating": "high", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://nodejs.org/en/security/", 
            "about": "This program is used to handle vulnerabilities in the Node.js ecosystem.", 
            "twitter_handle": "", 
            "name": "Node.js third-party modules"
        }, 
        "handle": "nodejs-ecosystem", 
        "url": "https://hackerone.com/nodejs-ecosystem", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/023/949/309112251b444244d95977d1299148aae6482789_small.?1508679627", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/023/949/c1f5f15ac094c1327c13dd19f55dbcb7411272bd_medium.?1508679627"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 23949, 
        "default_currency": "usd"
    }, 
    "is_published": false
}