{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-10-27T05:01:49.074Z", 
    "voters": [
        "spam404", 
        "whhackersbr", 
        "bogdantcaciuc", 
        "bugdiscloseguys", 
        "eveeez", 
        "madrobot", 
        "muhammad_uwais", 
        "xsam", 
        "gamliel", 
        "axolotl", 
        "and 27 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 171398, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-10-19T01:01:32.521Z", 
    "vulnerability_information": "###Summary:###\n\nLogin CSRF, Open Redirect, and Self-XSS Possible Exploitation through HackerOne SSO-SAML\n\n###PoC###\n\n- Go to \u2588\u2588\u2588\u2588\u2588;\n\nUse a browser window with clear cookies.\n\nSource-code:\n\n```\n<html>\n<body>\n\t<iframe id=\"login_csrf_frame\" src=\"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\" style=\"width:0;height:0;border:0;border:none;\"></iframe>\n\t<script>\n\t\tsetTimeout(function(){document.location.href = \"https://hackerone.com/users/saml/sign_in?email=\u2588\u2588\u2588\u2588&remember_me=true\";}, 5000);\n\t</script>\n</body>\n</html>\n```\n\n###Impact:###\n\n1) Information Leak\n\nAn attacker can use Logout CSRF + Login CSRF against a victim to steal all information sent by the victim to the HackerOne website while using the malicious session, including confidential bug reports.\n\n2) Open Redirect\n\nSince the SSO-SAML l\u200bogin flow can be started automatically (`GET https://hackerone.com/users/saml/sign_in?email=\u2588\u2588\u2588`) by an attacker and it redirects to external URLs, the attacker can redirect the user to anywhere.\n\n3) Self-XSS Possible Exploitation\u200b\n\nSome stored Self-XSS's (internal areas accessed just by the victim, etc.) can be exploited through Login CSRF.\n\n```\nMalicious page -> HackerOne Login CSRF -> Self-XSS triggers -> Logout -> Wait user actions\n```\n\nIf the user interacts with the page (sign in with his account, etc.), the attacker can exploit the Self-XSS.\n\nP.S.:\n\nAn attacker can add extra dots to the SAML Email Domain in the config dialog.\nI didn't test all the implications, but registering a very similar domain could be a bad thing, like `hackerone..com`, `hackerone.com.`, `.hackerone.com` or even `gmail..com` because of typing mistakes (`victim@hackerone..com would redirect the victim to the attacker external login flow`).", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "low", 
        "author_type": "Team"
    }, 
    "title": "(HackerOne SSO-SAML) Login CSRF, Open Redirect, and Self-XSS Possible Exploitation", 
    "is_member_of_team?": null, 
    "vote_count": 37, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-11-18T01:01:32.572Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-09-23T17:40:53.834Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-27T00:01:07.712Z", 
            "actor": {
                "username": "bencode", 
                "url": "/bencode", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/117/d813c9668b163216f808ea44fe97d138069498fb_medium.jpg?1536189740"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hi @whhackersbr, thanks for your submission, we appreciate it! While investigating your submission, we couldn't figure out what the `iframe` element does exactly. Consider this: if Uber has SAML enabled through \u2588\u2588\u2588\u2588\u2588\u2588\u2588, would any Uber employee be able to pull this off? Or do you need your own IDP or have really low security settings? Please elaborate how it works and we'll take another look. Thanks again!", 
            "markdown_message": "<p>Hi <a href=\"/whhackersbr\">@whhackersbr</a>, thanks for your submission, we appreciate it! While investigating your submission, we couldn&#39;t figure out what the <code>iframe</code> element does exactly. Consider this: if Uber has SAML enabled through \u2588\u2588\u2588\u2588\u2588\u2588\u2588, would any Uber employee be able to pull this off? Or do you need your own IDP or have really low security settings? Please elaborate how it works and we&#39;ll take another look. Thanks again!</p>\n", 
            "type": "Activities::BugNeedsMoreInfo", 
            "id": 1213007, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-23T23:46:35.984Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-27T00:01:07.698Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey @bencode,\n\n> (...) if Uber has SAML enabled through \u2588\u2588\u2588\u2588\u2588, would any Uber employee be able to pull this off?\n\nNo, just employees with privileges to change the Uber SAML IDP settings.\n\n> (...) Please elaborate how it works and we'll take another look.\n\n```\n\nHackerOne starts SAML login flow without CSRF protection (opens \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588)\n\u2588\u2588\u2588\u2588\u2588 starts another SAML login flow for corporate accounts (\u2588\u2588\u2588\u2588\u2588\u2588) without CSRF protection (opens \u2588\u2588\u2588\u2588)\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588 automatically signs in any user without password (returns to \u2588\u2588\u2588\u2588\u2588\u2588)\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 Login CSRF (returns to HackerOne)\nHackerOne Login CSRF\n\n```", 
            "markdown_message": "<p>Hey <a href=\"/bencode\">@bencode</a>,</p>\n\n<blockquote>\n<p>(...) if Uber has SAML enabled through \u2588\u2588\u2588\u2588\u2588, would any Uber employee be able to pull this off?</p>\n</blockquote>\n\n<p>No, just employees with privileges to change the Uber SAML IDP settings.</p>\n\n<blockquote>\n<p>(...) Please elaborate how it works and we&#39;ll take another look.</p>\n</blockquote>\n<pre class=\"highlight plaintext\"><code>\nHackerOne starts SAML login flow without CSRF protection (opens \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588)\n\u2588\u2588\u2588\u2588\u2588 starts another SAML login flow for corporate accounts (\u2588\u2588\u2588\u2588\u2588\u2588) without CSRF protection (opens \u2588\u2588\u2588\u2588)\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588 automatically signs in any user without password (returns to \u2588\u2588\u2588\u2588\u2588\u2588)\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 Login CSRF (returns to HackerOne)\nHackerOne Login CSRF\n\n</code></pre>", 
            "type": "Activities::BugNew", 
            "id": 1213566, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-25T20:52:06.011Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-25T20:56:14.272Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey @bencode @reed @dirk @security,\n\nPlease tell me once you have been able to reproduce.\nAnyone can sign in with my HackerOne account without password and I need to lock it again ASAP, just in case.\n;-)", 
            "markdown_message": "<p>Hey <a href=\"/bencode\">@bencode</a> <a href=\"/reed\">@reed</a> <a href=\"/dirk\">@dirk</a> <a href=\"/security\">@security</a>,</p>\n\n<p>Please tell me once you have been able to reproduce.<br>\nAnyone can sign in with my HackerOne account without password and I need to lock it again ASAP, just in case.<br>\n;-)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1215188, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-25T23:18:38.386Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-25T23:18:38.386Z", 
            "actor": {
                "username": "bencode", 
                "url": "/bencode", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/117/d813c9668b163216f808ea44fe97d138069498fb_medium.jpg?1536189740"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey @whhackersbr,\n\nYes we were able to reproduce, you can set a password back on your account again-thanks!", 
            "markdown_message": "<p>Hey <a href=\"/whhackersbr\">@whhackersbr</a>,</p>\n\n<p>Yes we were able to reproduce, you can set a password back on your account again-thanks!</p>\n", 
            "type": "Activities::Comment", 
            "id": 1215284, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-26T20:59:03.167Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-26T20:59:03.167Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "@reed,\n\nI saw that we need to pass through a review every time we change the config of the SSO-SAML.\nWhat is done/considered in this review?\nDepending on the answer I can or can not have more issues to report.", 
            "markdown_message": "<p><a href=\"/reed\">@reed</a>,</p>\n\n<p>I saw that we need to pass through a review every time we change the config of the SSO-SAML.<br>\nWhat is done/considered in this review?<br>\nDepending on the answer I can or can not have more issues to report.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1217327, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-27T01:28:44.817Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-27T01:28:44.817Z", 
            "actor": {
                "username": "bencode", 
                "url": "/bencode", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/117/d813c9668b163216f808ea44fe97d138069498fb_medium.jpg?1536189740"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey @whhackersbr,\n\nI want to make sure I answered all your questions, let me know if I missed any!\n\n> 1) Information Leak & 3) Self-XSS Possible Exploitation\n\nWe were unaware that you could create an account that has no password and that would auto-login without requiring user intervention, which does make it possible to achieve the CSRF. However, it seems that this isn't a great password strategy for a company to use. The reason we accept this risk is for the convenience of [IdP initiated SSO](https://docs.pingidentity.com/bundle/pf_sm_browserBasedSso_topic/page/task/idpInitiatedSsoPOST.html) as defined in the standard.\n\n> 2) Open Redirect & PS extra dots in SAML email domain\n\nThe SAML URL and extra dots in the email domain is mitigated by (currently) a manual approval process. Our team verifies the SAML URLs before approving.\n\n> What is done/considered in this review?\n\nWe do a few manual checks: \n\n**Domain** verification to ensure that the domain is valid and one that would only be controlled by the team.\n\n**URL** checks that it's a recognized public service (ones [we support](https://support.hackerone.com/hc/en-us/articles/205587379)) or if it's an internal instance-for a team we trust, \n\n**Certificates** are looked at for expiration, ownership, etc.\n", 
            "markdown_message": "<p>Hey <a href=\"/whhackersbr\">@whhackersbr</a>,</p>\n\n<p>I want to make sure I answered all your questions, let me know if I missed any!</p>\n\n<blockquote>\n<p>1) Information Leak &amp; 3) Self-XSS Possible Exploitation</p>\n</blockquote>\n\n<p>We were unaware that you could create an account that has no password and that would auto-login without requiring user intervention, which does make it possible to achieve the CSRF. However, it seems that this isn&#39;t a great password strategy for a company to use. The reason we accept this risk is for the convenience of <a href=\"/redirect?signature=d0fbe357a7fe40b44ebb4a25258552f816b15245&amp;url=https%3A%2F%2Fdocs.pingidentity.com%2Fbundle%2Fpf_sm_browserBasedSso_topic%2Fpage%2Ftask%2FidpInitiatedSsoPOST.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>IdP initiated SSO</span><i class=\"icon-external-link\"></i></a> as defined in the standard.</p>\n\n<blockquote>\n<p>2) Open Redirect &amp; PS extra dots in SAML email domain</p>\n</blockquote>\n\n<p>The SAML URL and extra dots in the email domain is mitigated by (currently) a manual approval process. Our team verifies the SAML URLs before approving.</p>\n\n<blockquote>\n<p>What is done/considered in this review?</p>\n</blockquote>\n\n<p>We do a few manual checks: </p>\n\n<p><strong>Domain</strong> verification to ensure that the domain is valid and one that would only be controlled by the team.</p>\n\n<p><strong>URL</strong> checks that it&#39;s a recognized public service (ones <a href=\"/redirect?signature=ae1e0957a7aa67a5b065a36cf7e120f9b09bdf1a&amp;url=https%3A%2F%2Fsupport.hackerone.com%2Fhc%2Fen-us%2Farticles%2F205587379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>we support</span><i class=\"icon-external-link\"></i></a>) or if it&#39;s an internal instance-for a team we trust, </p>\n\n<p><strong>Certificates</strong> are looked at for expiration, ownership, etc.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1217885, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-27T02:30:55.724Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-27T00:01:07.672Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "@bencode @reed @security\n\nHey @bencode,\n\n> I want to make sure I answered all your questions, let me know if I missed any!\n\nNo, you didn't miss anything.\nThanks.\n=)\n\n> 1) Information Leak & 3) Self-XSS Possible Exploitation\n> (...) However, it seems that this isn't a great password strategy for a company to use. (...)\n\nI agree, but this is a great strategy for an attacker, exactly to achieve the Info Leak and/or Self-XSS exploitation.\n\n> (...) The reason we accept this risk is for the convenience of IdP initiated SSO as defined in the standard. (...)\n\nBut you can protect the users against the Login CSRF without breaking the feature.\n\n> 2) Open Redirect & PS extra dots in SAML email domain\n> The SAML URL and extra dots in the email domain is mitigated by (currently) a manual approval process. Our team verifies the SAML URLs before approving.\n\nPerfect, the extra dots stuff are not exploitable.\n\nI disagree about the Open Redirect mitigation since the review team would not know about it.\n\n```\n1) The attacker creates the following flow:\nhackerone.com --(redirect)--> \u2588\u2588\u2588\u2588 --(redirect)--> corp.attacker.com asks for the password \n--(redirect)--> \u2588\u2588\u2588\u2588\u2588\u2588 --(redirect)--> HackerOne\n\n2) The attacker submits the application for approval.\n\n3) The review team accepts the application.\n\n4) The attacker changes the flow to:\nhackerone.com --(redirect)--> \u2588\u2588\u2588\u2588\u2588\u2588 --(redirect)--> corp.attacker.com --(redirect)--> Any Site\n```\n\nAll the consequences of this Login CSRF (Info Leak, Open Redirect, and Self-XSS Exploitation) could be mitigated with CSRF protections, without breaking the SSO feature.\n\n> We do a few manual checks:\nDomain verification to ensure that the domain is valid and one that would only be controlled by the team.\n\nHow do you decide if a domain is only controlled by a team?\nThis is very important to me.\n\nThank you very much.", 
            "markdown_message": "<p><a href=\"/bencode\">@bencode</a> <a href=\"/reed\">@reed</a> <a href=\"/security\">@security</a></p>\n\n<p>Hey <a href=\"/bencode\">@bencode</a>,</p>\n\n<blockquote>\n<p>I want to make sure I answered all your questions, let me know if I missed any!</p>\n</blockquote>\n\n<p>No, you didn&#39;t miss anything.<br>\nThanks.<br>\n=)</p>\n\n<blockquote>\n<p>1) Information Leak &amp; 3) Self-XSS Possible Exploitation<br>\n(...) However, it seems that this isn&#39;t a great password strategy for a company to use. (...)</p>\n</blockquote>\n\n<p>I agree, but this is a great strategy for an attacker, exactly to achieve the Info Leak and/or Self-XSS exploitation.</p>\n\n<blockquote>\n<p>(...) The reason we accept this risk is for the convenience of IdP initiated SSO as defined in the standard. (...)</p>\n</blockquote>\n\n<p>But you can protect the users against the Login CSRF without breaking the feature.</p>\n\n<blockquote>\n<p>2) Open Redirect &amp; PS extra dots in SAML email domain<br>\nThe SAML URL and extra dots in the email domain is mitigated by (currently) a manual approval process. Our team verifies the SAML URLs before approving.</p>\n</blockquote>\n\n<p>Perfect, the extra dots stuff are not exploitable.</p>\n\n<p>I disagree about the Open Redirect mitigation since the review team would not know about it.</p>\n<pre class=\"highlight plaintext\"><code>1) The attacker creates the following flow:\nhackerone.com --(redirect)--&gt; \u2588\u2588\u2588\u2588 --(redirect)--&gt; corp.attacker.com asks for the password \n--(redirect)--&gt; \u2588\u2588\u2588\u2588\u2588\u2588 --(redirect)--&gt; HackerOne\n\n2) The attacker submits the application for approval.\n\n3) The review team accepts the application.\n\n4) The attacker changes the flow to:\nhackerone.com --(redirect)--&gt; \u2588\u2588\u2588\u2588\u2588\u2588 --(redirect)--&gt; corp.attacker.com --(redirect)--&gt; Any Site\n</code></pre>\n<p>All the consequences of this Login CSRF (Info Leak, Open Redirect, and Self-XSS Exploitation) could be mitigated with CSRF protections, without breaking the SSO feature.</p>\n\n<blockquote>\n<p>We do a few manual checks:<br>\nDomain verification to ensure that the domain is valid and one that would only be controlled by the team.</p>\n</blockquote>\n\n<p>How do you decide if a domain is only controlled by a team?<br>\nThis is very important to me.</p>\n\n<p>Thank you very much.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1217903, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-28T23:01:11.761Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-28T23:01:11.761Z", 
            "actor": {
                "username": "bencode", 
                "url": "/bencode", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/117/d813c9668b163216f808ea44fe97d138069498fb_medium.jpg?1536189740"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey @whhackersbr,\n\nWe've discussed have some questions:\n\n - How do you propose we protect against the login CSRF without breaking IdP initiated SSO?\n - How would we validate that an IdP (malicious or not) doesn't change to a malicious redirect?\n\n> How do you decide if a domain is only controlled by a team?\n\nWe use a mixture of OSINT, e-mail validation, domain validation and website validation.\n\nThanks,\n@bencode", 
            "markdown_message": "<p>Hey <a href=\"/whhackersbr\">@whhackersbr</a>,</p>\n\n<p>We&#39;ve discussed have some questions:</p>\n\n<ul>\n<li>How do you propose we protect against the login CSRF without breaking IdP initiated SSO?</li>\n<li>How would we validate that an IdP (malicious or not) doesn&#39;t change to a malicious redirect?</li>\n</ul>\n\n<blockquote>\n<p>How do you decide if a domain is only controlled by a team?</p>\n</blockquote>\n\n<p>We use a mixture of OSINT, e-mail validation, domain validation and website validation.</p>\n\n<p>Thanks,<br>\n<a href=\"/bencode\">@bencode</a></p>\n", 
            "type": "Activities::BugNeedsMoreInfo", 
            "id": 1222713, 
            "genius_execution_id": null
        }, 
        {
            "attachments": [
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/123/760/4c1292d4034de1a52f8af65319e7f9306209c454/hackerone.com.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ74T23ZH2%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224728Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDKP8gtonlolbwRCFkSK3A8zRiM4XrfrPxhuRQyPzGewY%2F8%2BrZubJgueFivdcxl7%2F3iKHqTcriXEfjKl%2BSTmdTrFI3DombVHMKOYwlG1hM21jXAfSh72gDN%2BHds5TF5Hko27v6DRiCzuemhdgF47giYHnyCL3NCtcZ280H43hMDk8jiMZIUa5jSGS%2FYM0UQD2eITjNKscKu9Fg3jnQOs%2FtI0LbTq4ZOYkHzJsx3Gx5wmY15OB78PVb%2FoanvGsdZ1G6JLoOvoTJtP%2BBGbZSfLbuJ1WmFVnDe95bwaZBXmmNFIwMDxV%2BIfpWj4A6egpifpz3xxmRRWcE1dqWPIhLKaatOintqSYA20U00rLoCNdGd9IKmu0qa6%2B8Nt35qrWRxLjUKFoVkfzI8plSmUmq%2B7hZ71fbl9wB5sUhWpjZP521spZTb6QY8FJEa8S3BRJSDNUSr0ecK5GZt3wvmq5ONCWAeZbidiSFNHoYpY72e9tiuClRIfQzkSOa7JE0OSN9ATAt8rjzLAGibK5D8CP7%2F23wI%2Fce9%2BQ7jYxhSDeUleT1ird2slt6z2voHzFGPzgGkupeiNthV4QvkyXxyIQFGYYyeRDJ%2FnjD%2Boo666m4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=02ebfa15152f3b0710663894327edc441fe9fb2409b7fa114efad1e6dc68b36e", 
                    "type": "application/zip", 
                    "id": 123760, 
                    "filename": "hackerone.com.zip"
                }
            ], 
            "automated_response": false, 
            "created_at": "2016-09-29T06:52:13.335Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-26T23:52:46.522Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey @bencode,\n\nI will provide a protection, but I am sorry because I am not a developer, so I will probably commit a lot of conceptual mistakes.\n=(\n\nPlease guide me to the correct approach (security vs. usability).\n\n###PoC Video###\n\n * https://youtu.be/\u2588\u2588\u2588\u2588\n\n###SCENARIO 1###\n\n1) User inserts his corporate email in the HackerOne login form and clicks on \"Sign in\";\n\n2) HackerOne performs a POST request with CSRF protection;\n\n3) If everything is right, HackerOne sets a\u200b SAML SSO short life cookie with the user's email and redirects him to `/users/saml/sign_in?email=user@domain.com`;\n\n4) `/users/saml/sign_in?email=user@domain.com` tests the cookie and the user's email, and if they are right, the user will be redirected to the regular SAML SSO flow, but \u200bif the cookie is missing or is wrong, user gets an error;\n\n5) After the SAML SSO flow inside user's corporate network, he ends in `/users/saml/auth`;\n\n6) `/users/saml/auth` tests the cookie, the user's email, and the SAML SSO credentials:\n\n * If everything is right, login successful (no friction);\n * If the credentials are right but cookie and email, a warning screen is shown asking if he wants to sign in with that email, and the login is performed through a POST with CSRF protection after the user's consent/click (small friction);\n * If nothing is right, the \u200buser gets an error (nothing changes).\n\n###SCENARIO 2###\n\n1) User goes to a malicious website;\n2) The attacker sends a direct request to `/users/saml/sign_in?email=attacker@domain.com`;\n3) `/users/saml/sign_in` returns an error because the SAML SSO cookie is missing or wrong\u200b;\n\n###SCENARIO 3###\n\n1) User starts the SAML SSO flow outside the HackerOne platform;\n2) User ends in `/users/saml/auth`;\n3) The SAML SSO cookie is missing, so a warning screen is shown asking if he really wants to sign in with that email, and the login is performed through a POST with CSRF protection after the user's consent/click (small friction);\n\nThanks and sorry in anticipation for all the conceptual mistakes.\nI know it is easy to find bugs but hard to fix accordingly.\n\nPoC source code attached.\u200b", 
            "markdown_message": "<p>Hey <a href=\"/bencode\">@bencode</a>,</p>\n\n<p>I will provide a protection, but I am sorry because I am not a developer, so I will probably commit a lot of conceptual mistakes.<br>\n=(</p>\n\n<p>Please guide me to the correct approach (security vs. usability).</p>\n\n<h3 id=\"poc-video\">PoC Video</h3>\n\n<ul>\n<li><a title=\"https://youtu.be/%E2%96%88%E2%96%88%E2%96%88%E2%96%88\" href=\"/redirect?signature=5ad1e688d3d4634b01d3058a11cae101bb873c18&amp;url=https%3A%2F%2Fyoutu.be%2F%25E2%2596%2588%25E2%2596%2588%25E2%2596%2588%25E2%2596%2588\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://youtu.be/%E2%96%88%E2%96%88%E2%96%88%E2%96%88</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n\n<h3 id=\"scenario-1\">SCENARIO 1</h3>\n\n<p>1) User inserts his corporate email in the HackerOne login form and clicks on &quot;Sign in&quot;;</p>\n\n<p>2) HackerOne performs a POST request with CSRF protection;</p>\n\n<p>3) If everything is right, HackerOne sets a\u200b SAML SSO short life cookie with the user&#39;s email and redirects him to <code>/users/saml/sign_in?email=user@domain.com</code>;</p>\n\n<p>4) <code>/users/saml/sign_in?email=user@domain.com</code> tests the cookie and the user&#39;s email, and if they are right, the user will be redirected to the regular SAML SSO flow, but \u200bif the cookie is missing or is wrong, user gets an error;</p>\n\n<p>5) After the SAML SSO flow inside user&#39;s corporate network, he ends in <code>/users/saml/auth</code>;</p>\n\n<p>6) <code>/users/saml/auth</code> tests the cookie, the user&#39;s email, and the SAML SSO credentials:</p>\n\n<ul>\n<li>If everything is right, login successful (no friction);</li>\n<li>If the credentials are right but cookie and email, a warning screen is shown asking if he wants to sign in with that email, and the login is performed through a POST with CSRF protection after the user&#39;s consent/click (small friction);</li>\n<li>If nothing is right, the \u200buser gets an error (nothing changes).</li>\n</ul>\n\n<h3 id=\"scenario-2\">SCENARIO 2</h3>\n\n<p>1) User goes to a malicious website;<br>\n2) The attacker sends a direct request to <code>/users/saml/sign_in?email=attacker@domain.com</code>;<br>\n3) <code>/users/saml/sign_in</code> returns an error because the SAML SSO cookie is missing or wrong\u200b;</p>\n\n<h3 id=\"scenario-3\">SCENARIO 3</h3>\n\n<p>1) User starts the SAML SSO flow outside the HackerOne platform;<br>\n2) User ends in <code>/users/saml/auth</code>;<br>\n3) The SAML SSO cookie is missing, so a warning screen is shown asking if he really wants to sign in with that email, and the login is performed through a POST with CSRF protection after the user&#39;s consent/click (small friction);</p>\n\n<p>Thanks and sorry in anticipation for all the conceptual mistakes.<br>\nI know it is easy to find bugs but hard to fix accordingly.</p>\n\n<p>PoC source code attached.\u200b</p>\n", 
            "type": "Activities::BugNew", 
            "id": 1223092, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-09-29T19:33:19.478Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-29T19:33:19.478Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "P.S.: For the \"warning screen\", you can create a `Remember me for X months` option to reduce the friction, using a cookie to know all accepted emails on that computer.", 
            "markdown_message": "<p>P.S.: For the &quot;warning screen&quot;, you can create a <code>Remember me for X months</code> option to reduce the friction, using a cookie to know all accepted emails on that computer.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1224341, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-05T11:32:48.887Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-05T11:32:48.887Z", 
            "actor": {
                "username": "asuka", 
                "url": "/asuka", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/111/923/c73a42c0f9ea47ce5554fbab2411978f2bb985f8_medium.jpg?1474068574"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey @whhackersbr,\n\nWe've discussed this again internally and have decided this is a not fix and we're happy to accept the risk. However, we were impressed by your reporting and PoC so we've decided we are going to award you some swag! Make sure your address is up to date in HackerOne so you receive it :)\n\nCheers,\n@asuka", 
            "markdown_message": "<p>Hey <a href=\"/whhackersbr\">@whhackersbr</a>,</p>\n\n<p>We&#39;ve discussed this again internally and have decided this is a not fix and we&#39;re happy to accept the risk. However, we were impressed by your reporting and PoC so we&#39;ve decided we are going to award you some swag! Make sure your address is up to date in HackerOne so you receive it :)</p>\n\n<p>Cheers,<br>\n<a href=\"/asuka\">@asuka</a></p>\n", 
            "type": "Activities::BugInformative", 
            "id": 1233032, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "whhackersbr", 
                "url": "/whhackersbr"
            }, 
            "created_at": "2016-10-05T11:32:57.954Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-05T11:32:57.954Z", 
            "actor": {
                "url": "/security", 
                "profile": {
                    "name": "HackerOne"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/013/28af2ada2cc00aa9427504fc5a14f587362df84b_medium.png?1445331713"
                }
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::SwagAwarded", 
            "id": 1233033, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-05T18:41:29.506Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-05T18:41:39.966Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hello @asuka,\n\nSince you changed something after this report, can you please close it as resolved at least?\n\nNow I can not set SAML with a test team anymore:\n\n> SAML is not available until launch.\n\nThanks.", 
            "markdown_message": "<p>Hello <a href=\"/asuka\">@asuka</a>,</p>\n\n<p>Since you changed something after this report, can you please close it as resolved at least?</p>\n\n<p>Now I can not set SAML with a test team anymore:</p>\n\n<blockquote>\n<p>SAML is not available until launch.</p>\n</blockquote>\n\n<p>Thanks.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1233872, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-13T08:07:14.294Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-13T08:08:25.591Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "@security,\n\nP.S.:\n\nJust keep in mind that with the Open Redirector, an attacker can bypass the `External Link Warning`, you could fix at least this bad behavior for now.\n;-)\n\n[External Link Warning](https://google.com)\n\n[External Link Warning Bypass](https://hackerone.com/users/saml/sign_in?email=teste@snapchat.com&remember_me=true)", 
            "markdown_message": "<p><a href=\"/security\">@security</a>,</p>\n\n<p>P.S.:</p>\n\n<p>Just keep in mind that with the Open Redirector, an attacker can bypass the <code>External Link Warning</code>, you could fix at least this bad behavior for now.<br>\n;-)</p>\n\n<p><a href=\"/redirect?signature=fe88e2a1b331aeedb3dffd0de51c8e3322970447&amp;url=https%3A%2F%2Fgoogle.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>External Link Warning</span><i class=\"icon-external-link\"></i></a></p>\n\n<p><a href=\"/redirect?signature=1c6df903a88ffb0a3989dd502a17f98827175ec3&amp;url=https%3A%2F%2Fhackerone.com%2Fusers%2Fsaml%2Fsign_in%3Femail%3Dteste%40snapchat.com%26remember_me%3Dtrue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>External Link Warning Bypass</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::Comment", 
            "id": 1245405, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-13T09:08:29.867Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-13T09:08:29.867Z", 
            "actor": {
                "username": "asuka", 
                "url": "/asuka", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/111/923/c73a42c0f9ea47ce5554fbab2411978f2bb985f8_medium.jpg?1474068574"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey @whhackersbr,\n\nI'm not sure that was changed as a direct result of your report, but we'll investigate and get back to you. The open redirect is mitigated against because we check all SAML links before launching a programme. \n\nCheers\n-@asuka", 
            "markdown_message": "<p>Hey <a href=\"/whhackersbr\">@whhackersbr</a>,</p>\n\n<p>I&#39;m not sure that was changed as a direct result of your report, but we&#39;ll investigate and get back to you. The open redirect is mitigated against because we check all SAML links before launching a programme. </p>\n\n<p>Cheers<br>\n-@asuka</p>\n", 
            "type": "Activities::Comment", 
            "id": 1245479, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-13T18:42:17.543Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-27T00:01:07.631Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey @asuka,\n\n> I'm not sure that was changed as a direct result of your report, but we'll investigate and get back to you.\n\nOk, thanks.\n\n> The open redirect is mitigated against because we check all SAML links before launching a programme.\n\nLike I said before:\n\n>I disagree about the Open Redirect mitigation since the review team would not know about it.\n\n```\n1) The attacker creates the following flow:\nhackerone.com --(redirect)--> \u2588\u2588\u2588\u2588 --(redirect)--> corp.attacker.com asks for the password \n--(redirect)--> \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 --(redirect)--> HackerOne\n\n2) The attacker submits the application for approval.\n\n3) The review team accepts the application.\n\n4) The attacker changes the flow to:\nhackerone.com --(redirect)--> \u2588\u2588\u2588\u2588\u2588\u2588\u2588 --(redirect)--> corp.attacker.com --(redirect)--> Any Site\n```\n\n;-)", 
            "markdown_message": "<p>Hey <a href=\"/asuka\">@asuka</a>,</p>\n\n<blockquote>\n<p>I&#39;m not sure that was changed as a direct result of your report, but we&#39;ll investigate and get back to you.</p>\n</blockquote>\n\n<p>Ok, thanks.</p>\n\n<blockquote>\n<p>The open redirect is mitigated against because we check all SAML links before launching a programme.</p>\n</blockquote>\n\n<p>Like I said before:</p>\n\n<blockquote>\n<p>I disagree about the Open Redirect mitigation since the review team would not know about it.</p>\n</blockquote>\n<pre class=\"highlight plaintext\"><code>1) The attacker creates the following flow:\nhackerone.com --(redirect)--&gt; \u2588\u2588\u2588\u2588 --(redirect)--&gt; corp.attacker.com asks for the password \n--(redirect)--&gt; \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 --(redirect)--&gt; HackerOne\n\n2) The attacker submits the application for approval.\n\n3) The review team accepts the application.\n\n4) The attacker changes the flow to:\nhackerone.com --(redirect)--&gt; \u2588\u2588\u2588\u2588\u2588\u2588\u2588 --(redirect)--&gt; corp.attacker.com --(redirect)--&gt; Any Site\n</code></pre>\n<p>;-)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1246495, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-13T19:06:42.624Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-13T19:06:42.624Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "@whhackersbr,\n\nJust to follow-up, we changed the SAML sign-up flow unrelated to your issues, as we're currently improving how we handle product edition changes, and SAML set-up was changed as a result of that work.\n\nSecondly, we accept the risk of that for open redirect, as we require a company to sign-up and pay for Profesional edition or above before they can sign-up for SAML. How would we fix this issue anyway? We cannot control the third-party IdP.", 
            "markdown_message": "<p><a href=\"/whhackersbr\">@whhackersbr</a>,</p>\n\n<p>Just to follow-up, we changed the SAML sign-up flow unrelated to your issues, as we&#39;re currently improving how we handle product edition changes, and SAML set-up was changed as a result of that work.</p>\n\n<p>Secondly, we accept the risk of that for open redirect, as we require a company to sign-up and pay for Profesional edition or above before they can sign-up for SAML. How would we fix this issue anyway? We cannot control the third-party IdP.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1246557, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-14T02:30:50.571Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-14T02:30:50.571Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "@reed @security,\n\n> Just to follow-up, we changed the SAML sign-up flow unrelated to your issues, as we're currently improving how we handle product edition changes, and SAML set-up was changed as a result of that work.\n\nOh, understood.\n;-)\n\n> How would we fix this issue anyway? We cannot control the third-party IdP.\n\nThis specific\u200b behavior can be fixed if you send `https://hackerone.com/users/saml/*` through the `External Link Warning`, currently, this URL bypasses the warning. You will still have the Open Redirector bug, but reports inside the H1 platform would not have URLs to malicious code that bypasses the warning.\n\n> (...) this is a not fix (...)\n\nCan you please tell me why my fix (Anti Login CSRF for SAML Login) doesn't work?\nSometimes I can fix the problem, who knows, hehehe.\n=)", 
            "markdown_message": "<p><a href=\"/reed\">@reed</a> <a href=\"/security\">@security</a>,</p>\n\n<blockquote>\n<p>Just to follow-up, we changed the SAML sign-up flow unrelated to your issues, as we&#39;re currently improving how we handle product edition changes, and SAML set-up was changed as a result of that work.</p>\n</blockquote>\n\n<p>Oh, understood.<br>\n;-)</p>\n\n<blockquote>\n<p>How would we fix this issue anyway? We cannot control the third-party IdP.</p>\n</blockquote>\n\n<p>This specific\u200b behavior can be fixed if you send <code>https://hackerone.com/users/saml/*</code> through the <code>External Link Warning</code>, currently, this URL bypasses the warning. You will still have the Open Redirector bug, but reports inside the H1 platform would not have URLs to malicious code that bypasses the warning.</p>\n\n<blockquote>\n<p>(...) this is a not fix (...)</p>\n</blockquote>\n\n<p>Can you please tell me why my fix (Anti Login CSRF for SAML Login) doesn&#39;t work?<br>\nSometimes I can fix the problem, who knows, hehehe.<br>\n=)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1247078, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-18T19:49:14.491Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-18T19:49:14.491Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugReopened", 
            "id": 1253991, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-18T19:55:04.383Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-18T19:55:04.383Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "Low", 
                "old_severity": null
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 1254007, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "whhackersbr", 
                "url": "/whhackersbr"
            }, 
            "created_at": "2016-10-18T20:12:49.668Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-18T20:12:49.668Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hi @whhackersbr,\n\nWhile we feel the risk of the open redirect being abused in URL comments is minimal at best, we do strive to go above and beyond and fix issues that could possibly be used in the future to chain exploits together (defense-in-depth strategy). We've ensured all auth-related endpoints are no longer exempt from the external link warning interstitial, as per your last comment, which should alleviate this concern.\n\nWe also discussed the Login CSRF inherit in IdP-initiated sessions with several other companies, and we continue to feel that bypassing CSRF checks is an accepted risk for the user experience of SSO via SAML. This may change in the future if this begins to be exploited somehow.\n\nI think this covers everything you've mentioned, so let me know if I've missed something.", 
            "markdown_message": "<p>Hi <a href=\"/whhackersbr\">@whhackersbr</a>,</p>\n\n<p>While we feel the risk of the open redirect being abused in URL comments is minimal at best, we do strive to go above and beyond and fix issues that could possibly be used in the future to chain exploits together (defense-in-depth strategy). We&#39;ve ensured all auth-related endpoints are no longer exempt from the external link warning interstitial, as per your last comment, which should alleviate this concern.</p>\n\n<p>We also discussed the Login CSRF inherit in IdP-initiated sessions with several other companies, and we continue to feel that bypassing CSRF checks is an accepted risk for the user experience of SSO via SAML. This may change in the future if this begins to be exploited somehow.</p>\n\n<p>I think this covers everything you&#39;ve mentioned, so let me know if I&#39;ve missed something.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1254070, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-18T23:38:11.832Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-18T23:38:11.832Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "Hey @reed,\n\n> While we feel the risk of the open redirect being abused in URL comments is minimal at best, we do strive to go above and beyond and fix issues that could possibly be used in the future to chain exploits together (defense-in-depth strategy). We've ensured all auth-related endpoints are no longer exempt from the external link warning interstitial, as per your last comment, which should alleviate this concern.\n\nNice strategy, I am happy with the result.\n\n> We also discussed the Login CSRF inherit in IdP-initiated sessions with several other companies, and we continue to feel that bypassing CSRF checks is an accepted risk for the user experience of SSO via SAML. This may change in the future if this begins to be exploited somehow.\n\nUnderstood.\n\nThank you very much as always, I am here to help.\n;-)", 
            "markdown_message": "<p>Hey <a href=\"/reed\">@reed</a>,</p>\n\n<blockquote>\n<p>While we feel the risk of the open redirect being abused in URL comments is minimal at best, we do strive to go above and beyond and fix issues that could possibly be used in the future to chain exploits together (defense-in-depth strategy). We&#39;ve ensured all auth-related endpoints are no longer exempt from the external link warning interstitial, as per your last comment, which should alleviate this concern.</p>\n</blockquote>\n\n<p>Nice strategy, I am happy with the result.</p>\n\n<blockquote>\n<p>We also discussed the Login CSRF inherit in IdP-initiated sessions with several other companies, and we continue to feel that bypassing CSRF checks is an accepted risk for the user experience of SSO via SAML. This may change in the future if this begins to be exploited somehow.</p>\n</blockquote>\n\n<p>Understood.</p>\n\n<p>Thank you very much as always, I am here to help.<br>\n;-)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1254440, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-19T01:01:32.539Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-19T01:01:32.539Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "first_to_agree": true, 
            "message": "Thank you for poking around at this code! We really appreciate it. I'm requesting public disclosure. Let me know if anything in your PoCs you want censored/removed, since I know it includes some of your personal accounts.", 
            "markdown_message": "<p>Thank you for poking around at this code! We really appreciate it. I&#39;m requesting public disclosure. Let me know if anything in your PoCs you want censored/removed, since I know it includes some of your personal accounts.</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1254845, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-19T06:03:02.503Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-27T00:01:07.596Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "@reed @security,\n\nI don't want to bother you even more with this subject, but the fix is incomplete:\n\n[Working](https://hackerone.com/users/saml/sign_in?email=teste@hackerone.com)\n[Working](https://hackerone.com/./users/saml/sign_in?email=teste@hackerone.com)\n[Working](https://hackerone.com/blaaah/../users/saml/sign_in?email=teste@hackerone.com)\n[Not Working](https://hackerone.com/%2E/users/saml/sign_in?email=teste@hackerone.com)\n[Not Working](https://hackerone.com/blaaah/.%2E/users/saml/sign_in?email=teste@hackerone.com)\n\nJust let me know your decision of fixing\u200b it or not, so I will know if I need to wait or not to accept the public disclosure.\u200b\n\n> Let me know if anything in your PoCs you want censored/removed, since I know it includes some of your personal accounts.\n\nPlease remove\u200b the following strings:\n\n```\n\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\nhttps://youtu.be/\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n```", 
            "markdown_message": "<p><a href=\"/reed\">@reed</a> <a href=\"/security\">@security</a>,</p>\n\n<p>I don&#39;t want to bother you even more with this subject, but the fix is incomplete:</p>\n\n<p><a href=\"/redirect?signature=78a648f7681138d991837f6c3f5bdf1993b832d6&amp;url=https%3A%2F%2Fhackerone.com%2Fusers%2Fsaml%2Fsign_in%3Femail%3Dteste%40hackerone.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Working</span><i class=\"icon-external-link\"></i></a><br>\n<a href=\"/redirect?signature=78a648f7681138d991837f6c3f5bdf1993b832d6&amp;url=https%3A%2F%2Fhackerone.com%2Fusers%2Fsaml%2Fsign_in%3Femail%3Dteste%40hackerone.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Working</span><i class=\"icon-external-link\"></i></a><br>\n<a href=\"/redirect?signature=78a648f7681138d991837f6c3f5bdf1993b832d6&amp;url=https%3A%2F%2Fhackerone.com%2Fusers%2Fsaml%2Fsign_in%3Femail%3Dteste%40hackerone.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Working</span><i class=\"icon-external-link\"></i></a><br>\n<a href=\"/redirect?signature=32d66093cb3a782216d047a4b0b462d974887da0&amp;url=https%3A%2F%2Fhackerone.com%2F%252E%2Fusers%2Fsaml%2Fsign_in%3Femail%3Dteste%40hackerone.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Not Working</span><i class=\"icon-external-link\"></i></a><br>\n<a href=\"/redirect?signature=7502325d434d7d9c0df888b25f5f669459b7ebaf&amp;url=https%3A%2F%2Fhackerone.com%2Fblaaah%2F.%252E%2Fusers%2Fsaml%2Fsign_in%3Femail%3Dteste%40hackerone.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Not Working</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Just let me know your decision of fixing\u200b it or not, so I will know if I need to wait or not to accept the public disclosure.\u200b</p>\n\n<blockquote>\n<p>Let me know if anything in your PoCs you want censored/removed, since I know it includes some of your personal accounts.</p>\n</blockquote>\n\n<p>Please remove\u200b the following strings:</p>\n<pre class=\"highlight plaintext\"><code>\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\nhttps://youtu.be/\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n</code></pre>", 
            "type": "Activities::Comment", 
            "id": 1255080, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-27T00:01:26.066Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-27T00:01:26.066Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "@whhackersbr, took a little longer than I would have liked, but fixed the other cases you mentioned as well.\n\nI've also redacted all the strings you mentioned. Anything else you've noticed before disclosure?", 
            "markdown_message": "<p><a href=\"/whhackersbr\">@whhackersbr</a>, took a little longer than I would have liked, but fixed the other cases you mentioned as well.</p>\n\n<p>I&#39;ve also redacted all the strings you mentioned. Anything else you&#39;ve noticed before disclosure?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1270159, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-27T05:01:49.096Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-27T05:01:49.096Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "@reed,\n\n> Anything else you've noticed before disclosure?\n\nNo.\nThanks.\n=)", 
            "markdown_message": "<p><a href=\"/reed\">@reed</a>,</p>\n\n<blockquote>\n<p>Anything else you&#39;ve noticed before disclosure?</p>\n</blockquote>\n\n<p>No.<br>\nThanks.<br>\n=)</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1270326, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-27T05:01:49.176Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-27T05:01:49.176Z", 
            "actor": {
                "username": "whhackersbr", 
                "url": "/whhackersbr", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/529/5007a34f7c314adc61fb9664cd543e71d38af685_medium.png?1473027497"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1270327, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-10-27T05:04:39.617Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-10-27T05:04:39.617Z", 
            "actor": {
                "url": "/security", 
                "profile": {
                    "name": "HackerOne"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/013/28af2ada2cc00aa9427504fc5a14f587362df84b_medium.png?1445331713"
                }
            }, 
            "team_handle": "security", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 1270329, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "whhackersbr", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/whhackersbr", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/013/529/69fd99d4ac77f0a5fd122b9e3f691802fb967665_small.png?1473027497"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 60, 
        "name": "Cross-site Scripting (XSS) - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -64705555.34483609, 
    "disclosed_at": "2016-10-27T05:01:49.129Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/171398", 
    "created_at": "2016-09-23T09:17:18.019Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h3 id=\"summary\">Summary:</h3>\n\n<p>Login CSRF, Open Redirect, and Self-XSS Possible Exploitation through HackerOne SSO-SAML</p>\n\n<h3 id=\"poc\">PoC</h3>\n\n<ul>\n<li>Go to \u2588\u2588\u2588\u2588\u2588;</li>\n</ul>\n\n<p>Use a browser window with clear cookies.</p>\n\n<p>Source-code:</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;iframe</span> <span class=\"na\">id=</span><span class=\"s\">&quot;login_csrf_frame&quot;</span> <span class=\"na\">src=</span><span class=\"s\">&quot;\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588&quot;</span> <span class=\"na\">style=</span><span class=\"s\">&quot;width:0;height:0;border:0;border:none;&quot;</span><span class=\"nt\">&gt;&lt;/iframe&gt;</span>\n    <span class=\"nt\">&lt;script&gt;</span>\n        <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">href</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;https://hackerone.com/users/saml/sign_in?email=\u2588\u2588\u2588\u2588&amp;remember_me=true&quot;</span><span class=\"p\">;},</span> <span class=\"mi\">5000</span><span class=\"p\">);</span>\n    <span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<h3 id=\"impact\">Impact:</h3>\n\n<p>1) Information Leak</p>\n\n<p>An attacker can use Logout CSRF + Login CSRF against a victim to steal all information sent by the victim to the HackerOne website while using the malicious session, including confidential bug reports.</p>\n\n<p>2) Open Redirect</p>\n\n<p>Since the SSO-SAML l\u200bogin flow can be started automatically (<code>GET https://hackerone.com/users/saml/sign_in?email=\u2588\u2588\u2588</code>) by an attacker and it redirects to external URLs, the attacker can redirect the user to anywhere.</p>\n\n<p>3) Self-XSS Possible Exploitation\u200b</p>\n\n<p>Some stored Self-XSS&#39;s (internal areas accessed just by the victim, etc.) can be exploited through Login CSRF.</p>\n<pre class=\"highlight plaintext\"><code>Malicious page -&gt; HackerOne Login CSRF -&gt; Self-XSS triggers -&gt; Logout -&gt; Wait user actions\n</code></pre>\n<p>If the user interacts with the page (sign in with his account, etc.), the attacker can exploit the Self-XSS.</p>\n\n<p>P.S.:</p>\n\n<p>An attacker can add extra dots to the SAML Email Domain in the config dialog.<br>\nI didn&#39;t test all the implications, but registering a very similar domain could be a bad thing, like <code>hackerone..com</code>, <code>hackerone.com.</code>, <code>.hackerone.com</code> or even <code>gmail..com</code> because of typing mistakes (<code>victim@hackerone..com would redirect the victim to the attacker external login flow</code>).</p>\n", 
    "severity_rating": "low", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://hackerone.com", 
            "about": "Vulnerability disclosure should be safe, transparent, and rewarding.", 
            "twitter_handle": "Hacker0x01", 
            "name": "HackerOne"
        }, 
        "handle": "security", 
        "url": "https://hackerone.com/security", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/013/68fea1fe00dc833f4109e015738af4b374727e56_small.png?1445331713", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/013/28af2ada2cc00aa9427504fc5a14f587362df84b_medium.png?1445331713"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 13, 
        "default_currency": "usd"
    }, 
    "is_published": false
}