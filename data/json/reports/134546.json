{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "d1m0ck", 
        "konqi", 
        "michiel", 
        "bobrov", 
        "harisec", 
        "spam404", 
        "hunter", 
        "wkcaj", 
        "yaworsk", 
        "nahamsec", 
        "and 52 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "1337.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 134546, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-06-10T12:51:04.174Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "WordPress Flash XSS in *flashmediaelement.swf*", 
    "is_member_of_team?": null, 
    "vote_count": 62, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-07-10T12:51:04.430Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$1,337", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-04-26T07:34:19.539Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T07:34:19.539Z", 
            "actor": {
                "username": "vortfu", 
                "url": "/vortfu", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/004/982/b80411c54ee08b9579811d3427a54368f8d03d09_medium.png?1422255349"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Nice, thanks for the report.\nThe WordPress security team has been notified and will get back to you shortly.", 
            "markdown_message": "<p>Nice, thanks for the report.<br>\nThe WordPress security team has been notified and will get back to you shortly.</p>\n", 
            "type": "Activities::Comment", 
            "id": 927809, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T10:08:38.560Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T10:08:48.262Z", 
            "actor": {
                "username": "cure53", 
                "url": "/cure53", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/072/123/ea9a3a2997957ff4b79fa092972dd96a1d18aaff_medium.png?1461652555"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Also, as for possible mitigation advice, we are fairly sure that this will do (via .htaccess where applicable):\n\n```\n<FilesMatch \"\\.(swf)$\">\nHeader set Content-Disposition attachment\n</FilesMatch>\n```", 
            "markdown_message": "<p>Also, as for possible mitigation advice, we are fairly sure that this will do (via .htaccess where applicable):</p>\n<pre class=\"highlight plaintext\"><code>&lt;FilesMatch &quot;\\.(swf)$&quot;&gt;\nHeader set Content-Disposition attachment\n&lt;/FilesMatch&gt;\n</code></pre>", 
            "type": "Activities::Comment", 
            "id": 928390, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T14:14:17.140Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T14:14:17.140Z", 
            "actor": {
                "username": "nikolayb", 
                "url": "/nikolayb", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/838/bdb9f3990471ad2eda2fe4178ea5e0903205b548_medium.jpg?1440552943"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Hey Mario,\n\nThanks again for the detailed and well-researched report, great maneuvering around the various SWF protections.\n\nHave you also contacted the authors of the `mediaelement`? We may be able to fix it ourselves, but there is a great chance the authors will be better/faster at it and it would be great to coordinate any releases and announcements.\n\nThanks,\nNikolay.", 
            "markdown_message": "<p>Hey Mario,</p>\n\n<p>Thanks again for the detailed and well-researched report, great maneuvering around the various SWF protections.</p>\n\n<p>Have you also contacted the authors of the <code>mediaelement</code>? We may be able to fix it ourselves, but there is a great chance the authors will be better/faster at it and it would be great to coordinate any releases and announcements.</p>\n\n<p>Thanks,<br>\nNikolay.</p>\n", 
            "type": "Activities::Comment", 
            "id": 928657, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T14:19:49.626Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T14:19:49.626Z", 
            "actor": {
                "username": "cure53", 
                "url": "/cure53", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/072/123/ea9a3a2997957ff4b79fa092972dd96a1d18aaff_medium.png?1461652555"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Hi Nikolay,\n\nThanks :) And nope, we haven't contacted them yet. They only offer public GitHub tickets for bug reports and have no security contact. Given the impact, we decided to go this way instead. As far as I can see, WP is the largest project using this library.\n\nCheers,\n.mario", 
            "markdown_message": "<p>Hi Nikolay,</p>\n\n<p>Thanks :) And nope, we haven&#39;t contacted them yet. They only offer public GitHub tickets for bug reports and have no security contact. Given the impact, we decided to go this way instead. As far as I can see, WP is the largest project using this library.</p>\n\n<p>Cheers,<br>\n.mario</p>\n", 
            "type": "Activities::Comment", 
            "id": 928669, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T14:22:58.241Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T14:22:58.241Z", 
            "actor": {
                "username": "nikolayb", 
                "url": "/nikolayb", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/838/bdb9f3990471ad2eda2fe4178ea5e0903205b548_medium.jpg?1440552943"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "OK, thanks, Mario. We will ping the author and will see if he has a better fix.\n\nWe will keep you posted about the timeline.\n\nNikolay.", 
            "markdown_message": "<p>OK, thanks, Mario. We will ping the author and will see if he has a better fix.</p>\n\n<p>We will keep you posted about the timeline.</p>\n\n<p>Nikolay.</p>\n", 
            "type": "Activities::Comment", 
            "id": 928675, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T14:30:27.598Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T14:30:27.598Z", 
            "actor": {
                "username": "cure53", 
                "url": "/cure53", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/072/123/ea9a3a2997957ff4b79fa092972dd96a1d18aaff_medium.png?1461652555"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Sounds good! And happy to engage in the discussion / re-tests if it helps. We believe the fix is not exactly easy, as the author presumably doesn't want to be too aggressive with the GET-parameter scrubbing - but also doesn't want to have other niche cases slip through after the fix. ", 
            "markdown_message": "<p>Sounds good! And happy to engage in the discussion / re-tests if it helps. We believe the fix is not exactly easy, as the author presumably doesn&#39;t want to be too aggressive with the GET-parameter scrubbing - but also doesn&#39;t want to have other niche cases slip through after the fix. </p>\n", 
            "type": "Activities::Comment", 
            "id": 928679, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-26T14:49:06.874Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-26T14:49:06.874Z", 
            "actor": {
                "username": "nikolayb", 
                "url": "/nikolayb", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/838/bdb9f3990471ad2eda2fe4178ea5e0903205b548_medium.jpg?1440552943"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Agreed that the fix is not trivial \u2013 it will have to cover the first two problems pretty well \u2013 maybe replicate the player\u2019s GET arguments permissiveness and also add some extra characters to test for.\n\nThank you so much for the offer to re-test when we have a fix, I am sure you will find more fun ways to break it :-)", 
            "markdown_message": "<p>Agreed that the fix is not trivial \u2013 it will have to cover the first two problems pretty well \u2013 maybe replicate the player\u2019s GET arguments permissiveness and also add some extra characters to test for.</p>\n\n<p>Thank you so much for the offer to re-test when we have a fix, I am sure you will find more fun ways to break it :-)</p>\n", 
            "type": "Activities::Comment", 
            "id": 928707, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-01T14:00:46.420Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-01T14:00:46.420Z", 
            "actor": {
                "username": "nikolayb", 
                "url": "/nikolayb", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/838/bdb9f3990471ad2eda2fe4178ea5e0903205b548_medium.jpg?1440552943"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Mario, just an update\u2014we're working closely with the authors of both media elements and plupload on a fix. We don't have specific ETA, just yet, but there is progress.\n\nIt would be great if you\u2019d like to join us in the conversation that's happening on WordPress.org Slack. It takes a minute to set it up here:\n\nhttps://make.wordpress.org/chat/\n\nJust let me know your username when done.\n\nThanks again,\nNikolay.", 
            "markdown_message": "<p>Mario, just an update\u2014we&#39;re working closely with the authors of both media elements and plupload on a fix. We don&#39;t have specific ETA, just yet, but there is progress.</p>\n\n<p>It would be great if you\u2019d like to join us in the conversation that&#39;s happening on WordPress.org Slack. It takes a minute to set it up here:</p>\n\n<p><a title=\"https://make.wordpress.org/chat/\" href=\"/redirect?signature=d724b4d2b5fca15ec8c3c51786ad721fad73cc32&amp;url=https%3A%2F%2Fmake.wordpress.org%2Fchat%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://make.wordpress.org/chat/</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Just let me know your username when done.</p>\n\n<p>Thanks again,<br>\nNikolay.</p>\n", 
            "type": "Activities::Comment", 
            "id": 935351, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-01T14:08:59.589Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-01T14:08:59.589Z", 
            "actor": {
                "username": "cure53", 
                "url": "/cure53", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/072/123/ea9a3a2997957ff4b79fa092972dd96a1d18aaff_medium.png?1461652555"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Aye, username is `cure53`", 
            "markdown_message": "<p>Aye, username is <code>cure53</code></p>\n", 
            "type": "Activities::Comment", 
            "id": 935354, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-02T14:57:12.131Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-02T14:57:12.131Z", 
            "actor": {
                "username": "cure53", 
                "url": "/cure53", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/072/123/ea9a3a2997957ff4b79fa092972dd96a1d18aaff_medium.png?1461652555"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Hi all. So far nothing came in. Is there a schedule for a discussion / plans for the fix?", 
            "markdown_message": "<p>Hi all. So far nothing came in. Is there a schedule for a discussion / plans for the fix?</p>\n", 
            "type": "Activities::Comment", 
            "id": 936575, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-03T08:46:22.242Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-03T08:46:22.242Z", 
            "actor": {
                "username": "nikolayb", 
                "url": "/nikolayb", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/006/838/bdb9f3990471ad2eda2fe4178ea5e0903205b548_medium.jpg?1440552943"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Just for the record, there is some progress in the Slack channel. Currently leaning towards not supporting arbitrary query arguments in those two Flash projects, just whitelisting the cache-busters.", 
            "markdown_message": "<p>Just for the record, there is some progress in the Slack channel. Currently leaning towards not supporting arbitrary query arguments in those two Flash projects, just whitelisting the cache-busters.</p>\n", 
            "type": "Activities::Comment", 
            "id": 938167, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-10T13:52:17.322Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-10T13:52:17.322Z", 
            "actor": {
                "username": "cure53", 
                "url": "/cure53", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/072/123/ea9a3a2997957ff4b79fa092972dd96a1d18aaff_medium.png?1461652555"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Hi all! \n\nSince the bug has been fixed and the new version is out, what's the status here?\nWe are planning, as discussed on slack, to release  our write-up on Friday, 1pm CEST.", 
            "markdown_message": "<p>Hi all! </p>\n\n<p>Since the bug has been fixed and the new version is out, what&#39;s the status here?<br>\nWe are planning, as discussed on slack, to release  our write-up on Friday, 1pm CEST.</p>\n", 
            "type": "Activities::Comment", 
            "id": 948779, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "cure53", 
                "url": "/cure53"
            }, 
            "created_at": "2016-05-26T16:36:50.232Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-26T16:36:50.232Z", 
            "actor": {
                "username": "vortfu", 
                "url": "/vortfu", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/004/982/b80411c54ee08b9579811d3427a54368f8d03d09_medium.png?1422255349"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 985388, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-05T08:23:24.132Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-05T08:23:24.132Z", 
            "actor": {
                "username": "cure53", 
                "url": "/cure53", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/072/123/ea9a3a2997957ff4b79fa092972dd96a1d18aaff_medium.png?1461652555"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Hi all, two questions - is there any plans for a bug bounty on this one, and will the ticket be opened for public access anytime soon?", 
            "markdown_message": "<p>Hi all, two questions - is there any plans for a bug bounty on this one, and will the ticket be opened for public access anytime soon?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1000168, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-06-10T12:50:34.298Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-10T12:50:34.298Z", 
            "actor": {
                "url": "/automattic", 
                "profile": {
                    "name": "Automattic"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/111/23288d0462873e4b825f725d8480e850c7c47549_medium.png?1396031864"
                }
            }, 
            "team_handle": "automattic", 
            "bounty_amount": "1337.0", 
            "collaborator": {
                "username": "cure53", 
                "url": "/cure53"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 1007901, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-10T12:51:04.356Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-10T12:51:04.356Z", 
            "actor": {
                "username": "vortfu", 
                "url": "/vortfu", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/004/982/b80411c54ee08b9579811d3427a54368f8d03d09_medium.png?1422255349"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1007903, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-10T13:14:26.937Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-10T13:14:26.937Z", 
            "actor": {
                "username": "cure53", 
                "url": "/cure53", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/072/123/ea9a3a2997957ff4b79fa092972dd96a1d18aaff_medium.png?1461652555"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "automattic", 
            "message": "Cool, thanks :)", 
            "markdown_message": "<p>Cool, thanks :)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1007925, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-10T12:51:12.854Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-10T12:51:12.854Z", 
            "actor": {
                "url": "/automattic", 
                "profile": {
                    "name": "Automattic"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/111/23288d0462873e4b825f725d8480e850c7c47549_medium.png?1396031864"
                }
            }, 
            "team_handle": "automattic", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1061482, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "cure53", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/cure53", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/072/123/36dc608fb89cae1b13c11f3c24a306a1dec8c8c1_small.png?1461652555"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 60, 
        "name": "Cross-site Scripting (XSS) - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -75981654.03608899, 
    "disclosed_at": "2016-07-10T12:51:12.764Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/134546", 
    "created_at": "2016-04-26T06:34:20.780Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"intro\">Intro</h1>\n\n<p>WordPress is vulnerable against a reflected XSS that stems from an insecure URL sanitization problem performed in the file <em>flashmediaelement.swf</em>. The code in the file attempts to remove <em>flashVars</em> <a href=\"/redirect?signature=ca6d31f354fde55a9f65b59a035833114d547998&amp;url=https%3A%2F%2Fhelpx.adobe.com%2Fflash%2Fkb%2Fpass-variables-swfs-flashvars.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>\u00b9</span><i class=\"icon-external-link\"></i></a> in case they have been set GET parameters but fails to do so, enabling XSS via <em>ExternalInterface</em> <a href=\"/redirect?signature=cf7a8e7ee12ed6a0c70cf254402a91b547d8e212&amp;url=http%3A%2F%2Fhelp.adobe.com%2Fen_US%2FFlashPlatform%2Freference%2Factionscript%2F3%2Fflash%2Fexternal%2FExternalInterface.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>\u00b2</span><i class=\"icon-external-link\"></i></a>.</p>\n\n<p>The attack technique was first described by Soroush Dalili in 2013 <a href=\"/redirect?signature=45e2b99b7fbdedd995f5df9b2ac06aed712838e4&amp;url=https%3A%2F%2Fsoroush.secproject.com%2Fblog%2F2013%2F10%2Fcatch-up-on-flash-xss-exploitation-bypassing-the-guardians-part-1%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>\u00b3</span><i class=\"icon-external-link\"></i></a>. The vulnerability in <em>flashmediaelement.swf</em> was discovered in April 2016, first identified as SOME<a href=\"/redirect?signature=c22116b5c70d71642a5d2dec9654aa2011a0d0d8&amp;url=http%3A%2F%2Fwww.benhayak.com%2F2015%2F06%2Fsame-origin-method-execution-some.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>\u2074</span><i class=\"icon-external-link\"></i></a> bug by Kinugawa. Then, after a team review, the XSS potential was discovered and analyzed by Heiderich, Kinugawa and Inf\u00fchr. Finally, it was discovered, that this file comes packaged with latest WordPress and the issue was reported here by Heiderich et al. </p>\n\n<p><strong>PoC:</strong><br>\n<a title=\"https://example.com/wp-includes/js/mediaelement/flashmediaelement.swf?%#jsinitfunctio%gn=alert%601%60\" href=\"/redirect?signature=478bb54f08081c2a82889cbad636bb4428552c88&amp;url=https%3A%2F%2Fexample.com%2Fwp-includes%2Fjs%2Fmediaelement%2Fflashmediaelement.swf%3F%25%23jsinitfunctio%25gn%3Dalert%25601%2560\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://example.com/wp-includes/js/mediaelement/flashmediaelement.swf?%#jsinitfunctio%gn=alert%601%60</span><i class=\"icon-external-link\"></i></a></p>\n\n<h1 id=\"background\">Background</h1>\n\n<p>In the browser-world, a Flash file can be fed with parameters in multiple ways.</p>\n\n<p><strong>Way One:</strong> <em>flashVars</em></p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;embed</span> <span class=\"na\">src=</span><span class=\"s\">&quot;myFlashMovie.swf&quot;</span>\n    <span class=\"na\">quality=</span><span class=\"s\">&quot;high&quot;</span>\n    <span class=\"na\">bgcolor=</span><span class=\"s\">&quot;#ffffff&quot;</span>\n    <span class=\"na\">width=</span><span class=\"s\">&quot;550&quot;</span>\n    <span class=\"na\">height=</span><span class=\"s\">&quot;400&quot;</span>\n    <span class=\"na\">name=</span><span class=\"s\">&quot;myFlashMovie&quot;</span>     \n    <span class=\"na\">FlashVars=</span><span class=\"s\">&quot;myVariable=Hello%20World&amp;mySecondVariable=Goodbye&quot;</span>\n    <span class=\"na\">align=</span><span class=\"s\">&quot;middle&quot;</span>\n    <span class=\"na\">allowScriptAccess=</span><span class=\"s\">&quot;sameDomain&quot;</span>\n    <span class=\"na\">allowFullScreen=</span><span class=\"s\">&quot;false&quot;</span>\n    <span class=\"na\">type=</span><span class=\"s\">&quot;application/x-shockwave-flash&quot;</span>\n    <span class=\"na\">pluginspage=</span><span class=\"s\">&quot;http://www.adobe.com/go/getflash&quot;</span>\n<span class=\"nt\">/&gt;</span>\n</code></pre>\n<p><strong>Way Two:</strong> GET parameters</p>\n<pre class=\"highlight plaintext\"><code>myFlashMovie.swf?myVariable=Hello%20World&amp;mySecondVariable=Goodbye\n</code></pre>\n<p>Quite obviously, <em>flashVars</em> via GET give an attacker more leverage, especially in case the Flash file can be opened directly in the browser. No need to embed it, just attach the <em>flashVars</em> via GET and the fun begins. </p>\n\n<p>Not unlike many other Flash files, <em>flashmediaelement.swf</em> attempts to protect itself from <em>flashVars</em> being set via GET.</p>\n\n<p>Attackers often abuse <em>flashVars</em> to exploit Flash XSS bugs originating from insecure handling of <code>navigateToURL</code><a href=\"/redirect?signature=b51ca1f6a3e328daeaec6f63c8371cc60a3519c1&amp;url=http%3A%2F%2Fhelp.adobe.com%2Fen_US%2FFlashPlatform%2Freference%2Factionscript%2F3%2Fflash%2Fnet%2Fpackage.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>\u2075</span><i class=\"icon-external-link\"></i></a>, <code>ExternalInterface.call</code><a href=\"/redirect?signature=f7dab40f23224c8f5a3e9c53cb7147f1edc6c387&amp;url=http%3A%2F%2Fhelp.adobe.com%2Fen_US%2FFlashPlatform%2Freference%2Factionscript%2F3%2Fflash%2Fexternal%2FExternalInterface.html%23call%2528%2529\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>\u2076</span><i class=\"icon-external-link\"></i></a> and other risky methods. So, why not get rid of GET parameters in the first place:</p>\n<pre class=\"highlight actionscript\"><code><span class=\"c1\">// get parameters</span>\n<span class=\"c1\">// Use only FlashVars, ignore QueryString</span>\n<span class=\"kd\">var</span> <span class=\"nx\">params</span><span class=\"o\">:</span><span class=\"nb\">Object</span><span class=\"p\">,</span> <span class=\"nx\">pos</span><span class=\"o\">:</span><span class=\"nx\">int</span><span class=\"p\">,</span> <span class=\"nx\">query</span><span class=\"o\">:</span><span class=\"nb\">Object</span><span class=\"o\">;</span>\n\n<span class=\"nx\">params</span> <span class=\"o\">=</span> <span class=\"nx\">LoaderInfo</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nx\">loaderInfo</span><span class=\"p\">).</span><span class=\"nx\">parameters</span><span class=\"o\">;</span>\n<span class=\"nx\">pos</span> <span class=\"o\">=</span> <span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nx\">loaderInfo</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"s1\">&#39;?&#39;</span><span class=\"p\">)</span><span class=\"o\">;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">pos</span> <span class=\"o\">!==</span> <span class=\"mi\">-1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"nx\">parseStr</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nx\">loaderInfo</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">substr</span><span class=\"p\">(</span><span class=\"nx\">pos</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">key</span><span class=\"o\">:</span><span class=\"nx\">String</span> <span class=\"k\">in</span> <span class=\"nx\">params</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n            <span class=\"k\">delete</span> <span class=\"nx\">params</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span><span class=\"o\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">[...]</span>\n\n<span class=\"kr\">private</span> <span class=\"kr\">static</span> <span class=\"kd\">function</span> <span class=\"nx\">parseStr</span> <span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"o\">:</span><span class=\"nx\">String</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"nb\">Object</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">hash</span><span class=\"o\">:</span><span class=\"nb\">Object</span> <span class=\"o\">=</span> <span class=\"p\">{},</span>\n        <span class=\"nx\">arr1</span><span class=\"o\">:</span><span class=\"nx\">Array</span><span class=\"p\">,</span> <span class=\"nx\">arr2</span><span class=\"o\">:</span><span class=\"nx\">Array</span><span class=\"o\">;</span>\n\n    <span class=\"nx\">str</span> <span class=\"o\">=</span> <span class=\"nx\">unescape</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">).</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/</span><span class=\"se\">\\+</span><span class=\"sr\">/g</span><span class=\"p\">,</span> <span class=\"s2\">&quot; &quot;</span><span class=\"p\">)</span><span class=\"o\">;</span>\n\n    <span class=\"nx\">arr1</span> <span class=\"o\">=</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;&amp;&#39;</span><span class=\"p\">)</span><span class=\"o\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">arr1</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span><span class=\"o\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">:</span><span class=\"nx\">uint</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"o\">:</span><span class=\"nx\">uint</span> <span class=\"o\">=</span> <span class=\"nx\">arr1</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"o\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">length</span><span class=\"o\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">arr2</span> <span class=\"o\">=</span> <span class=\"nx\">arr1</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;=&#39;</span><span class=\"p\">)</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">arr2</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"o\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">hash</span><span class=\"p\">[</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">arr2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span> <span class=\"o\">=</span> <span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">arr2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">hash</span><span class=\"o\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<p>From: <a title=\"https://github.com/johndyer/mediaelement/blob/master/src/flash/FlashMediaElement.as\" href=\"/redirect?signature=ca677e04dbfbe2e8782a743afdd028468c56316b&amp;url=https%3A%2F%2Fgithub.com%2Fjohndyer%2Fmediaelement%2Fblob%2Fmaster%2Fsrc%2Fflash%2FFlashMediaElement.as\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/johndyer/mediaelement/blob/master/src/flash/FlashMediaElement.as</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>The code shown above parses the URL query string and checks, if the GET parameter names spotted in there are also present among the flashVars (or vice versa). If a parameter name appears in both URL and the <em>flashVars</em> array, then the parameter must have been set via GET. If not, all is fine - and the parameter must have been set via <em>flashVars</em>. </p>\n\n<p>Let&#39;s call this code &quot;The GET Killer&quot;!</p>\n\n<p>This way of &quot;scrubbing&quot; <em>flashVars</em> and making sure that no GET parameters can be used is fairly common and assumed to work well. But it can be bypassed using a dirty trick: invalid characters in the name of the GET parameters. Let&#39;s have a quick look at our PoC again:  </p>\n\n<p><strong>PoC:</strong><br>\n<a title=\"https://example.com/wp-includes/js/mediaelement/flashmediaelement.swf?%#jsinitfunctio%gn=alert%601%60\" href=\"/redirect?signature=478bb54f08081c2a82889cbad636bb4428552c88&amp;url=https%3A%2F%2Fexample.com%2Fwp-includes%2Fjs%2Fmediaelement%2Fflashmediaelement.swf%3F%25%23jsinitfunctio%25gn%3Dalert%25601%2560\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://example.com/wp-includes/js/mediaelement/flashmediaelement.swf?%#jsinitfunctio%gn=alert%601%60</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Notice something? We obfuscate the name of our GET parameter a bit.</p>\n<pre class=\"highlight plaintext\"><code>jsinitfunctio%gn &lt; see the %g?\n</code></pre>\n<p>The Flash player is very tolerant when handling input via GET. Invalid URL escapes for example will simply be stripped! This means, that despite us calling the GET parameter <code>jsinitfunctio%gn</code>, the parameter that really arrived in the Flash file is again called <code>jsinitfunction</code> because the invalid parts are stripped.</p>\n\n<p>That of course messes up the &quot;The GET Killer&quot;. Because now, the label it checks for based on the parsed URL string contains the <code>%g</code> but the actual flashVar does not! No match, no scrub. We can submit data by using GET again. </p>\n\n<p>Just like this: <code>({&#39;jsinitfunctio%gn&#39;:&#39;&#39;}).hasOwnProperty(&#39;jsinitfunction&#39;) // false</code></p>\n\n<p>But that&#39;s not all. The file <em>flashmediaelement.swf</em> ships more defensive mechanisms. One of them if for example a black-list that checks, that the parameter values paired with risky methods don&#39;t contain characters like parenthesis. Because that would indicate, that someone tries to smuggle in some executable code, like an <code>alert(1)</code> instead of just providing a callback, like <code>alert</code>.</p>\n<pre class=\"highlight actionscript\"><code><span class=\"kr\">private</span> <span class=\"kd\">function</span> <span class=\"nx\">isIllegalChar</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"o\">:</span><span class=\"nx\">String</span><span class=\"p\">,</span> <span class=\"nx\">isUrl</span><span class=\"o\">:</span><span class=\"nx\">Boolean</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"nx\">Boolean</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">illegals</span><span class=\"o\">:</span><span class=\"nx\">String</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&#39; \\&quot; ( ) { } * + \\\\ &lt; &gt;&quot;</span><span class=\"o\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isUrl</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">illegals</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;\\&quot; { } \\\\ &lt; &gt;&quot;</span><span class=\"o\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">Boolean</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"c1\">// Otherwise exception if parameter null.</span>\n        <span class=\"k\">for</span> <span class=\"nx\">each</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">illegal</span><span class=\"o\">:</span><span class=\"nx\">String</span> <span class=\"k\">in</span> <span class=\"nx\">illegals</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">illegal</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span> <span class=\"c1\">// Illegal char found</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<p>From: <a title=\"https://github.com/johndyer/mediaelement/blob/master/src/flash/FlashMediaElement.as\" href=\"/redirect?signature=ca677e04dbfbe2e8782a743afdd028468c56316b&amp;url=https%3A%2F%2Fgithub.com%2Fjohndyer%2Fmediaelement%2Fblob%2Fmaster%2Fsrc%2Fflash%2FFlashMediaElement.as\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/johndyer/mediaelement/blob/master/src/flash/FlashMediaElement.as</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>As you can see, the method shown above checks the input for malicious characters that indicate executable JavaScript. Parenthesis, curlies, operators and all the nasty characters. From the ECMAScript 5 world. </p>\n\n<p>What is missing? The new ways of executing code offered by ECMAScript 6 by using back-ticks<a href=\"/redirect?signature=bb62c2133a4bef12943385dd4b2e5c9a91637478&amp;url=https%3A%2F%2Fdeveloper.mozilla.org%2Fde%2Fdocs%2FWeb%2FJavaScript%2FReference%2Ftemplate_strings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>\u2077</span><i class=\"icon-external-link\"></i></a>. Let&#39;s have a look at the PoC again:</p>\n\n<p><strong>PoC:</strong><br>\n<a title=\"https://example.com/wp-includes/js/mediaelement/flashmediaelement.swf?%#jsinitfunctio%gn=alert%601%60\" href=\"/redirect?signature=478bb54f08081c2a82889cbad636bb4428552c88&amp;url=https%3A%2F%2Fexample.com%2Fwp-includes%2Fjs%2Fmediaelement%2Fflashmediaelement.swf%3F%25%23jsinitfunctio%25gn%3Dalert%25601%2560\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://example.com/wp-includes/js/mediaelement/flashmediaelement.swf?%#jsinitfunctio%gn=alert%601%60</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Notice something? We don&#39;t use parenthesis to execute the alert. We use back-ticks instead. And they are not blacklisted of course.</p>\n\n<p>But we are still not finished, there is yet another security mechanism installed by <em>flashmediaelement.swf</em> to make the attacker&#39;s life harder. And this is a check for the <code>ExternalInterface.objectID</code><a href=\"/redirect?signature=c2c299eb5f2efcf12b09b99a422618da9be13193&amp;url=http%3A%2F%2Fhelp.adobe.com%2Fen_US%2FFlashPlatform%2Freference%2Factionscript%2F3%2Fflash%2Fexternal%2FExternalInterface.html%23objectID\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>\u2078</span><i class=\"icon-external-link\"></i></a>. This particular member is only present, in case the embedding HTML element (<code>&lt;embed&gt;</code> or <code>&lt;object&gt;</code>) is applied with an &quot;ID&quot; attribute. Here is the important bit of code:</p>\n<pre class=\"highlight actionscript\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">_output</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">_output</span><span class=\"p\">.</span><span class=\"nx\">appendText</span><span class=\"p\">(</span><span class=\"nx\">txt</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;\\n&quot;</span><span class=\"p\">)</span><span class=\"o\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">ExternalInterface</span><span class=\"p\">.</span><span class=\"nx\">objectID</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">ExternalInterface</span><span class=\"p\">.</span><span class=\"nx\">objectID</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">pattern</span><span class=\"o\">:</span><span class=\"nb\">RegExp</span> <span class=\"o\">=</span> <span class=\"sr\">/&#39;/g</span><span class=\"o\">;</span> <span class=\"c1\">//&#39;</span>\n        <span class=\"nx\">ExternalInterface</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"s2\">&quot;setTimeout&quot;</span><span class=\"p\">,</span> <span class=\"nx\">_jsCallbackFunction</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;(&#39;&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">ExternalInterface</span><span class=\"p\">.</span><span class=\"nx\">objectID</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&#39;,&#39;message&#39;,&#39;&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">txt</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">pattern</span><span class=\"p\">,</span> <span class=\"s2\">&quot;\u2019&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&#39;)&quot;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span> \n</code></pre>\n<p>From: <a title=\"https://github.com/johndyer/mediaelement/blob/master/src/flash/FlashMediaElement.as\" href=\"/redirect?signature=ca677e04dbfbe2e8782a743afdd028468c56316b&amp;url=https%3A%2F%2Fgithub.com%2Fjohndyer%2Fmediaelement%2Fblob%2Fmaster%2Fsrc%2Fflash%2FFlashMediaElement.as\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/johndyer/mediaelement/blob/master/src/flash/FlashMediaElement.as</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>So, again. If the Flash file wasn&#39;t properly embedded but opened directly, the whole thing will not work.</p>\n\n<p>Now, let&#39;s have a look how browsers actually embed Flash files when they are supposed to open them &quot;directly&quot; (by requesting the Flash/SWF file from the affected server). Because browers generate quite a bit of markup when opening an SWF directly.</p>\n\n<p><strong>Firefox does this:</strong></p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;&lt;head&gt;&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">&quot;viewport&quot;</span> <span class=\"na\">content=</span><span class=\"s\">&quot;width=device-width; height=device-height;&quot;</span><span class=\"nt\">&gt;&lt;/head&gt;&lt;body</span> <span class=\"na\">marginwidth=</span><span class=\"s\">&quot;0&quot;</span> <span class=\"na\">marginheight=</span><span class=\"s\">&quot;0&quot;</span><span class=\"nt\">&gt;&lt;embed</span> <span class=\"na\">height=</span><span class=\"s\">&quot;100%&quot;</span> <span class=\"na\">width=</span><span class=\"s\">&quot;100%&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;plugin&quot;</span> <span class=\"na\">src=</span><span class=\"s\">&quot;test.swf&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;application/x-shockwave-flash&quot;</span><span class=\"nt\">&gt;&lt;/body&gt;&lt;/html&gt;</span>\n</code></pre>\n<p><strong>MSIE does this:</strong></p>\n<pre class=\"highlight html\"><code>&quot;<span class=\"nt\">&lt;html&gt;&lt;head&gt;&lt;style&gt;</span><span class=\"k\">@-ms-viewport</span> <span class=\"p\">{</span><span class=\"nl\">width</span><span class=\"p\">:</span><span class=\"n\">device-width</span><span class=\"p\">;}</span><span class=\"nt\">html</span><span class=\"o\">,</span> <span class=\"nt\">body</span> <span class=\"p\">{</span><span class=\"nl\">margin</span><span class=\"p\">:</span><span class=\"m\">0</span><span class=\"p\">;</span><span class=\"nl\">padding</span><span class=\"p\">:</span><span class=\"m\">0</span><span class=\"p\">;</span><span class=\"nl\">width</span><span class=\"p\">:</span><span class=\"m\">100%</span><span class=\"p\">;</span><span class=\"nl\">height</span><span class=\"p\">:</span><span class=\"m\">100%</span><span class=\"p\">;</span><span class=\"nl\">overflow</span><span class=\"p\">:</span><span class=\"nb\">hidden</span><span class=\"p\">;}</span><span class=\"nt\">&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;embed</span> <span class=\"na\">width=</span><span class=\"s\">&quot;100%&quot;</span> <span class=\"na\">height=</span><span class=\"s\">&quot;100%&quot;</span> <span class=\"na\">src=</span><span class=\"s\">&quot;test.swf&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;application/x-shockwave-flash&quot;</span> <span class=\"na\">fullscreen=</span><span class=\"s\">&quot;yes&quot;</span><span class=\"nt\">&gt;&lt;/body&gt;&lt;/html&gt;</span>&quot;\n</code></pre>\n<p><strong>Chrome however dies this:</strong></p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;&lt;body</span> <span class=\"na\">style=</span><span class=\"s\">&quot;background-color: rgb(38,38,38); height: 100%; width: 100%; overflow: hidden; margin: 0&quot;</span><span class=\"nt\">&gt;&lt;embed</span> <span class=\"na\">width=</span><span class=\"s\">&quot;100%&quot;</span> <span class=\"na\">height=</span><span class=\"s\">&quot;100%&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;plugin&quot;</span> <span class=\"na\">id=</span><span class=\"s\">&quot;plugin&quot;</span> <span class=\"na\">src=</span><span class=\"s\">&quot;test.swf&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;application/x-shockwave-flash&quot;</span><span class=\"nt\">&gt;&lt;/body&gt;&lt;/html&gt;</span>\n</code></pre>\n<p>The embed code generated by MSIE and Firefox contains no <code>id</code> attribute. But Chrome&#39;s does! That means, that without any actual effort from the attacker, Chrome automatically &quot;bypasses&quot; the third layer of protection.</p>\n\n<p>And that makes the attack work. Let&#39;s reiterate:</p>\n\n<ol>\n<li>We bypass &quot;The GET Killer&quot; using invalid URL escapes</li>\n<li>We bypass the blacklist using ES6 backticks</li>\n<li>Chrome &quot;bypasses&quot; the check for the <code>ExternalInterface.objectID</code>\n</li>\n</ol>\n\n<p>And that is it. </p>\n\n<p>Well, not exactly. Maybe also have a look at the other SWF files WordPress ships. They are buggy too. But it&#39;s not as bad a s this issue. So we will talk about these later. </p>\n\n<h1 id=\"affected-systems\">Affected Systems</h1>\n\n<p>All WordPress instances that allow to directly call this file. That should be the absolute majority. Google finds a couple of 100k of them but we assume it is actually significantly more<a href=\"/redirect?signature=6f96dac20487d306e4954277b4c00aa2a6e220d2&amp;url=https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3Dinurl%3A%2Fwp-includes%2Fjs%2Fmediaelement%2Fflashmediaelement.swf%2Bext%3Aswf%26channel%3Dfs%26start%3D10\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>\u2079</span><i class=\"icon-external-link\"></i></a>.</p>\n\n<p>Here is some numbers that other people guesstimate:</p>\n\n<ul>\n<li><a title=\"https://managewp.com/14-surprising-statistics-about-wordpress-usage\" href=\"/redirect?signature=bee8cb60bf1de750d8026e0dd43e8e98acfba9d5&amp;url=https%3A%2F%2Fmanagewp.com%2F14-surprising-statistics-about-wordpress-usage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://managewp.com/14-surprising-statistics-about-wordpress-usage</span><i class=\"icon-external-link\"></i></a></li>\n<li><a title=\"https://www.quora.com/How-many-websites-are-built-on-Wordpress\" href=\"/redirect?signature=cb8aa15e3c22f36bd399a35a7b34156fab37247e&amp;url=https%3A%2F%2Fwww.quora.com%2FHow-many-websites-are-built-on-Wordpress\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.quora.com/How-many-websites-are-built-on-Wordpress</span><i class=\"icon-external-link\"></i></a></li>\n<li><a title=\"https://wordpress.com/activity/\" href=\"/redirect?signature=e3a98cd140f87fc7b7f9f0c2cb77dbbe74bb5ef9&amp;url=https%3A%2F%2Fwordpress.com%2Factivity%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://wordpress.com/activity/</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n\n<p>Further note, browser-based XSS filters will not detect the attack and hence not protect here.</p>\n\n<h1 id=\"mitigation\">Mitigation</h1>\n\n<ul>\n<li>Prevent direct access to all Flash files in the WordPress folder (<code>Content-Disposition</code> headers might help)</li>\n<li>Configure your WAF to block direct access to this file</li>\n<li>Wait for the fix and update Wordpress</li>\n</ul>\n", 
    "vulnerability_information": "Intro\n==\n\nWordPress is vulnerable against a reflected XSS that stems from an insecure URL sanitization problem performed in the file *flashmediaelement.swf*. The code in the file attempts to remove *flashVars* [\u00b9](https://helpx.adobe.com/flash/kb/pass-variables-swfs-flashvars.html) in case they have been set GET parameters but fails to do so, enabling XSS via *ExternalInterface* [\u00b2](http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/external/ExternalInterface.html).\n\nThe attack technique was first described by Soroush Dalili in 2013 [\u00b3](https://soroush.secproject.com/blog/2013/10/catch-up-on-flash-xss-exploitation-bypassing-the-guardians-part-1/). The vulnerability in *flashmediaelement.swf* was discovered in April 2016, first identified as SOME[\u2074](http://www.benhayak.com/2015/06/same-origin-method-execution-some.html) bug by Kinugawa. Then, after a team review, the XSS potential was discovered and analyzed by Heiderich, Kinugawa and Inf\u00fchr. Finally, it was discovered, that this file comes packaged with latest WordPress and the issue was reported here by Heiderich et al. \n\n**PoC:**\nhttps://example.com/wp-includes/js/mediaelement/flashmediaelement.swf?%#jsinitfunctio%gn=alert`1`\n\nBackground\n==\n\nIn the browser-world, a Flash file can be fed with parameters in multiple ways.\n\n**Way One:** *flashVars*\n\n```html\n<embed src=\"myFlashMovie.swf\"\n    quality=\"high\"\n    bgcolor=\"#ffffff\"\n    width=\"550\"\n    height=\"400\"\n    name=\"myFlashMovie\"     \n    FlashVars=\"myVariable=Hello%20World&mySecondVariable=Goodbye\"\n    align=\"middle\"\n    allowScriptAccess=\"sameDomain\"\n    allowFullScreen=\"false\"\n    type=\"application/x-shockwave-flash\"\n    pluginspage=\"http://www.adobe.com/go/getflash\"\n/>\n```\n\n**Way Two:** GET parameters\n\n```\nmyFlashMovie.swf?myVariable=Hello%20World&mySecondVariable=Goodbye\n```\n\nQuite obviously, *flashVars* via GET give an attacker more leverage, especially in case the Flash file can be opened directly in the browser. No need to embed it, just attach the *flashVars* via GET and the fun begins. \n\nNot unlike many other Flash files, *flashmediaelement.swf* attempts to protect itself from *flashVars* being set via GET.\n\nAttackers often abuse *flashVars* to exploit Flash XSS bugs originating from insecure handling of `navigateToURL`[\u2075](http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/net/package.html), `ExternalInterface.call`[\u2076](http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/external/ExternalInterface.html#call%28%29) and other risky methods. So, why not get rid of GET parameters in the first place:\n\n```actionscript\n// get parameters\n// Use only FlashVars, ignore QueryString\nvar params:Object, pos:int, query:Object;\n\nparams = LoaderInfo(this.root.loaderInfo).parameters;\npos = root.loaderInfo.url.indexOf('?');\nif (pos !== -1) {\n\tquery = parseStr(root.loaderInfo.url.substr(pos + 1));\n\n\tfor (var key:String in params) {\n\t\tif (query.hasOwnProperty(trim(key))) {\n\t\t\tdelete params[key];\n\t\t}\n\t}\n}\n\n[...]\n\nprivate static function parseStr (str:String) : Object {\n\tvar hash:Object = {},\n\t\tarr1:Array, arr2:Array;\n\n\tstr = unescape(str).replace(/\\+/g, \" \");\n\n\tarr1 = str.split('&');\n\tif (!arr1.length) {\n\t\treturn {};\n\t}\n\n\tfor (var i:uint = 0, length:uint = arr1.length; i < length; i++) {\n\t\tarr2 = arr1[i].split('=');\n\t\tif (!arr2.length) {\n\t\t\tcontinue;\n\t\t}\n\t\thash[trim(arr2[0])] = trim(arr2[1]);\n\t}\n\treturn hash;\n}\n```\n\nFrom: https://github.com/johndyer/mediaelement/blob/master/src/flash/FlashMediaElement.as\n\nThe code shown above parses the URL query string and checks, if the GET parameter names spotted in there are also present among the flashVars (or vice versa). If a parameter name appears in both URL and the *flashVars* array, then the parameter must have been set via GET. If not, all is fine - and the parameter must have been set via *flashVars*. \n\nLet's call this code \"The GET Killer\"!\n\nThis way of \"scrubbing\" *flashVars* and making sure that no GET parameters can be used is fairly common and assumed to work well. But it can be bypassed using a dirty trick: invalid characters in the name of the GET parameters. Let's have a quick look at our PoC again:  \n\n**PoC:**\nhttps://example.com/wp-includes/js/mediaelement/flashmediaelement.swf?%#jsinitfunctio%gn=alert`1`\n\nNotice something? We obfuscate the name of our GET parameter a bit.\n\n```\njsinitfunctio%gn < see the %g?\n```\n\nThe Flash player is very tolerant when handling input via GET. Invalid URL escapes for example will simply be stripped! This means, that despite us calling the GET parameter `jsinitfunctio%gn`, the parameter that really arrived in the Flash file is again called `jsinitfunction` because the invalid parts are stripped.\n\nThat of course messes up the \"The GET Killer\". Because now, the label it checks for based on the parsed URL string contains the `%g` but the actual flashVar does not! No match, no scrub. We can submit data by using GET again. \n\nJust like this: `({'jsinitfunctio%gn':''}).hasOwnProperty('jsinitfunction') // false`\n\nBut that's not all. The file *flashmediaelement.swf* ships more defensive mechanisms. One of them if for example a black-list that checks, that the parameter values paired with risky methods don't contain characters like parenthesis. Because that would indicate, that someone tries to smuggle in some executable code, like an `alert(1)` instead of just providing a callback, like `alert`.\n\n```actionscript\nprivate function isIllegalChar(s:String, isUrl:Boolean):Boolean {\n\tvar illegals:String = \"' \\\" ( ) { } * + \\\\ < >\";\n\tif (isUrl) {\n\t\tillegals = \"\\\" { } \\\\ < >\";\n\t}\n\tif (Boolean(s)) { // Otherwise exception if parameter null.\n\t\tfor each (var illegal:String in illegals.split(' ')) {\n\t\t\tif (s.indexOf(illegal) >= 0) {\n\t\t\t\treturn true; // Illegal char found\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n```\n\nFrom: https://github.com/johndyer/mediaelement/blob/master/src/flash/FlashMediaElement.as\n\nAs you can see, the method shown above checks the input for malicious characters that indicate executable JavaScript. Parenthesis, curlies, operators and all the nasty characters. From the ECMAScript 5 world. \n\nWhat is missing? The new ways of executing code offered by ECMAScript 6 by using back-ticks[\u2077](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/template_strings). Let's have a look at the PoC again:\n\n**PoC:**\nhttps://example.com/wp-includes/js/mediaelement/flashmediaelement.swf?%#jsinitfunctio%gn=alert`1`\n\nNotice something? We don't use parenthesis to execute the alert. We use back-ticks instead. And they are not blacklisted of course.\n\nBut we are still not finished, there is yet another security mechanism installed by *flashmediaelement.swf* to make the attacker's life harder. And this is a check for the `ExternalInterface.objectID`[\u2078](http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/external/ExternalInterface.html#objectID). This particular member is only present, in case the embedding HTML element (`<embed>` or `<object>`) is applied with an \"ID\" attribute. Here is the important bit of code:\n\n\n```actionscript\nif (_output != null) {\n\t_output.appendText(txt + \"\\n\");\n\tif (ExternalInterface.objectID != null && ExternalInterface.objectID.toString() != \"\") {\n\t\tvar pattern:RegExp = /'/g; //'\n\t\tExternalInterface.call(\"setTimeout\", _jsCallbackFunction + \"('\" + ExternalInterface.objectID + \"','message','\" + txt.replace(pattern, \"\u2019\") + \"')\", 0);\n\t}\n} \n```\n\nFrom: https://github.com/johndyer/mediaelement/blob/master/src/flash/FlashMediaElement.as\n\nSo, again. If the Flash file wasn't properly embedded but opened directly, the whole thing will not work.\n\nNow, let's have a look how browsers actually embed Flash files when they are supposed to open them \"directly\" (by requesting the Flash/SWF file from the affected server). Because browers generate quite a bit of markup when opening an SWF directly.\n\n**Firefox does this:**\n```html\n<html><head><meta name=\"viewport\" content=\"width=device-width; height=device-height;\"></head><body marginwidth=\"0\" marginheight=\"0\"><embed height=\"100%\" width=\"100%\" name=\"plugin\" src=\"test.swf\" type=\"application/x-shockwave-flash\"></body></html>\n```\n\n**MSIE does this:**\n```html\n\"<html><head><style>@-ms-viewport {width:device-width;}html, body {margin:0;padding:0;width:100%;height:100%;overflow:hidden;}</style></head><body><embed width=\"100%\" height=\"100%\" src=\"test.swf\" type=\"application/x-shockwave-flash\" fullscreen=\"yes\"></body></html>\"\n```\n\n**Chrome however dies this:**\n```html\n<html><body style=\"background-color: rgb(38,38,38); height: 100%; width: 100%; overflow: hidden; margin: 0\"><embed width=\"100%\" height=\"100%\" name=\"plugin\" id=\"plugin\" src=\"test.swf\" type=\"application/x-shockwave-flash\"></body></html>\n```\n\nThe embed code generated by MSIE and Firefox contains no `id` attribute. But Chrome's does! That means, that without any actual effort from the attacker, Chrome automatically \"bypasses\" the third layer of protection.\n\nAnd that makes the attack work. Let's reiterate:\n\n1. We bypass \"The GET Killer\" using invalid URL escapes\n1. We bypass the blacklist using ES6 backticks\n1. Chrome \"bypasses\" the check for the `ExternalInterface.objectID`\n\nAnd that is it. \n\nWell, not exactly. Maybe also have a look at the other SWF files WordPress ships. They are buggy too. But it's not as bad a s this issue. So we will talk about these later. \n\nAffected Systems\n==\n\nAll WordPress instances that allow to directly call this file. That should be the absolute majority. Google finds a couple of 100k of them but we assume it is actually significantly more[\u2079](https://www.google.com/search?q=inurl:/wp-includes/js/mediaelement/flashmediaelement.swf+ext:swf&channel=fs&start=10).\n\nHere is some numbers that other people guesstimate:\n * https://managewp.com/14-surprising-statistics-about-wordpress-usage\n * https://www.quora.com/How-many-websites-are-built-on-Wordpress\n * https://wordpress.com/activity/\n\nFurther note, browser-based XSS filters will not detect the attack and hence not protect here.\n\nMitigation\n==\n\n* Prevent direct access to all Flash files in the WordPress folder (`Content-Disposition` headers might help)\n* Configure your WAF to block direct access to this file\n* Wait for the fix and update Wordpress", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://automattic.com", 
            "about": "WordPress.com, VaultPress, Akismet, Gravatar, Cloudup, WooCommerce, Polldaddy and more!", 
            "twitter_handle": "", 
            "name": "Automattic"
        }, 
        "handle": "automattic", 
        "url": "https://hackerone.com/automattic", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/111/6b5147b71079b286c99869a85682f609f6c617c6_small.png?1396031864", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/111/23288d0462873e4b825f725d8480e850c7c47549_medium.png?1396031864"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 111, 
        "default_currency": "usd"
    }, 
    "is_published": false
}