{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-09-18T09:39:25.205Z", 
    "voters": [
        "jin", 
        "nirvana-msu", 
        "sp1d3rs", 
        "spam404", 
        "bogdantcaciuc", 
        "flashdisk", 
        "ysx", 
        "mishre", 
        "gamliel", 
        "axolotl", 
        "and 16 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "1000.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 136582, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "OAuth 2 Authorization Bypass via CSRF and Cross Site Flashing", 
    "is_member_of_team?": null, 
    "vote_count": 26, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-10-18T09:39:25.247Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$1,000", 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": true, 
            "created_at": "2016-05-05T18:07:47.302Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-05T18:07:47.302Z", 
            "actor": {
                "url": "/vimeo", 
                "profile": {
                    "name": "Vimeo"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/056/5cb7c3ee4ca70b64963e311c6f5cd8fb4a1daed9_medium.png?1393009870"
                }
            }, 
            "team_handle": "vimeo", 
            "message": "We don't believe this to be a vulnerability. Our root crossdomain.xml file contains the following directive:\r\n\r\n```\r\n<site-control permitted-cross-domain-policies=\"by-content-type\"/>\r\n```\r\n\r\nPer Adobe this means that requesting SWFs much check for additional crossdomain.xml policies at each subdirectory. So for example to access https://vimeo.com/settings a SWF much validate the cross domain policy against https://vimeo.com/settings/crossdomain.xml, which has the most restrictive policy:\r\n\r\n```\r\n<cross-domain-policy>\r\n    <allow-access-from domain=\"none\" secure=\"false\"/>\r\n    <allow-http-request-headers-from domain=\"none\" headers=\"*\"/>\r\n</cross-domain-policy>\r\n```\r\n\r\nWe use the \"meta-policy\" style because there are a handful of url paths that we make accessible to SWFs, we deny all other requests via the restrictive crossdomain.xml you see above.\r\n\r\nThe relevant Adobe docs are here: http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#meta-vs-master-policies\r\n\r\nThis is the PoC that we use to validate this is not a vulnerability: http://paycrea.com/xss.swf?a=get&c=https://vimeo.com/settings (source: https://github.com/evilcos/xss.swf/blob/master/xss_source.txt)\r\n\r\nIf you believe this is still a vulnerability, please provide a proof of concept.", 
            "markdown_message": "<p>We don&#39;t believe this to be a vulnerability. Our root crossdomain.xml file contains the following directive:</p>\n<pre class=\"highlight plaintext\"><code>&lt;site-control permitted-cross-domain-policies=&quot;by-content-type&quot;/&gt;\n</code></pre>\n<p>Per Adobe this means that requesting SWFs much check for additional crossdomain.xml policies at each subdirectory. So for example to access <a title=\"https://vimeo.com/settings\" href=\"/redirect?signature=13ee59ebf87e2db113bb94f692433700c689b597&amp;url=https%3A%2F%2Fvimeo.com%2Fsettings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://vimeo.com/settings</span><i class=\"icon-external-link\"></i></a> a SWF much validate the cross domain policy against <a title=\"https://vimeo.com/settings/crossdomain.xml\" href=\"/redirect?signature=e777718d92cec6453cd44d8479e5ca4457c3694b&amp;url=https%3A%2F%2Fvimeo.com%2Fsettings%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://vimeo.com/settings/crossdomain.xml</span><i class=\"icon-external-link\"></i></a>, which has the most restrictive policy:</p>\n<pre class=\"highlight plaintext\"><code>&lt;cross-domain-policy&gt;\n    &lt;allow-access-from domain=&quot;none&quot; secure=&quot;false&quot;/&gt;\n    &lt;allow-http-request-headers-from domain=&quot;none&quot; headers=&quot;*&quot;/&gt;\n&lt;/cross-domain-policy&gt;\n</code></pre>\n<p>We use the &quot;meta-policy&quot; style because there are a handful of url paths that we make accessible to SWFs, we deny all other requests via the restrictive crossdomain.xml you see above.</p>\n\n<p>The relevant Adobe docs are here: <a title=\"http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#meta-vs-master-policies\" href=\"/redirect?signature=ee8d904933ce427a5adfbd636bd70986914ee0bc&amp;url=http%3A%2F%2Fwww.adobe.com%2Fdevnet-docs%2Facrobatetk%2Ftools%2FAppSec%2Fxdomain.html%23meta-vs-master-policies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#meta-vs-master-policies</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>This is the PoC that we use to validate this is not a vulnerability: <a title=\"http://paycrea.com/xss.swf?a=get&amp;c=https://vimeo.com/settings\" href=\"/redirect?signature=394ab2caaa365c8b2e0464788e7f47d32e0566bf&amp;url=http%3A%2F%2Fpaycrea.com%2Fxss.swf%3Fa%3Dget%26c%3Dhttps%3A%2F%2Fvimeo.com%2Fsettings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://paycrea.com/xss.swf?a=get&amp;c=https://vimeo.com/settings</span><i class=\"icon-external-link\"></i></a> (source: <a title=\"https://github.com/evilcos/xss.swf/blob/master/xss_source.txt\" href=\"/redirect?signature=228e10ca109f7a0e1b0782dd227046b2348c5d9d&amp;url=https%3A%2F%2Fgithub.com%2Fevilcos%2Fxss.swf%2Fblob%2Fmaster%2Fxss_source.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/evilcos/xss.swf/blob/master/xss_source.txt</span><i class=\"icon-external-link\"></i></a>)</p>\n\n<p>If you believe this is still a vulnerability, please provide a proof of concept.</p>\n", 
            "type": "Activities::Comment", 
            "id": 942493, 
            "genius_execution_id": null
        }, 
        {
            "attachments": [
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/091/728/e543562dba9964b5bb11a87af25167c949a50392/Vimeo_OAuth_Bypass.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQVHWOGSNR%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T223121Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEBAaDNyA%2BB7EVws6w20xiyK3AzcCTkx0GnZzVQ6TwXkp44%2Ff6M7%2FsO19EHzsTJXAjGqGadXUwBewmY%2FA3saLwd8Xt%2FLbqrBXnPVBmQqsNFRuZECDCBvLhSnrZ0V6VgN9XIGcsvjdqc1keY1F5jqudqF9DVlIY8TMvC8HZK%2B7Q1nt4NsrhczyPwsxABuLuXRQ9jz342kfr6jcg4V0RDeoTmkF41Ft6RtUq0hmoAqdCx1%2Fz70xB4R7l69zShPP7HLfYHPPTt8XR1Db%2BqWNJQckpie0NnlFKA6ZUTMDBoFCJMNlSMrC8fe4WfzeCwJzHJRBg8PuHWSmO%2BotEruefTqBjLBoXXi34gvMNLGz%2F2UMbXN0CJxslsSVQ1hVUGyCtMe0w9EsQpL39cO7khz0GcmiaRxiDS26USPGfQCc9lffeZFTxh4so1l02filHtFdYLVvAvgjiOYt2Mz5u6lBhccM0iI2WWXmcjR%2FS%2BkxYva3%2BrEYrii1%2BMbFzOhDKAxYvafuSoo%2BiLMqIErMru4lSMvT6Hdl0F7q6ar9ursg2xy2ld%2BSsM1Ffwx%2FIlTxlx%2Fk5K%2BKS4mgc5N3QgLYcjLnqKIjMyLCEr%2FVbmVxbtUo%2B7qm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=090e1438c115c244b7d8dba45a1ffd8171539f3ad6575fd064cff8dd49ef21e5", 
                    "type": "image/png", 
                    "id": 91728, 
                    "filename": "Vimeo_OAuth_Bypass.png"
                }
            ], 
            "automated_response": false, 
            "created_at": "2016-05-05T18:29:04.712Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-05T18:29:04.712Z", 
            "actor": {
                "username": "opnsec", 
                "url": "/opnsec", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/871/072ab18b53d04e13a2d917136953d206273d7126_medium.png?1462738337"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "Here is the Proof of Concept :\nhttp://opnsec.com/vimeo/vimeoOAuth2Bypass.html\n\nJust to answer to your auto response about crossdomain.xml files :\n\"Per Adobe this means that requesting SWFs much check for additional crossdomain.xml policies at each subdirectory.\"\n\nThat's the part that is not correct. Here is a link to the same documentation :\nhttp://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#policy-file-host-basics\n\n\"Non-master policies permit access only to files at or beneath their level in the directory tree\"\n\nThat means that requesting SWF must check for additional crossdomain.xml policies at each subdirectory OR AT ANY PARENT of this subdirectory.\nIf no loadpolicyfile() is called, the SWF will only try the matching directory policy file.\nHowever, if loadpolicyfile() is called on a parent of the subdirectory, and that loaded plicy file allows cross domain request, Flash will allow the cross site request.\n\nI hope it makes sense. Here is a capture of network traffic from the POC swf file.", 
            "markdown_message": "<p>Here is the Proof of Concept :<br>\n<a title=\"http://opnsec.com/vimeo/vimeoOAuth2Bypass.html\" href=\"/redirect?signature=69f9042f72ff20931d8fa0e3bd2c619d55f33efb&amp;url=http%3A%2F%2Fopnsec.com%2Fvimeo%2FvimeoOAuth2Bypass.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://opnsec.com/vimeo/vimeoOAuth2Bypass.html</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Just to answer to your auto response about crossdomain.xml files :<br>\n&quot;Per Adobe this means that requesting SWFs much check for additional crossdomain.xml policies at each subdirectory.&quot;</p>\n\n<p>That&#39;s the part that is not correct. Here is a link to the same documentation :<br>\n<a title=\"http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#policy-file-host-basics\" href=\"/redirect?signature=4cfa6f2a24229b59a4bbc272a15b394ceb271eec&amp;url=http%3A%2F%2Fwww.adobe.com%2Fdevnet-docs%2Facrobatetk%2Ftools%2FAppSec%2Fxdomain.html%23policy-file-host-basics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#policy-file-host-basics</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>&quot;Non-master policies permit access only to files at or beneath their level in the directory tree&quot;</p>\n\n<p>That means that requesting SWF must check for additional crossdomain.xml policies at each subdirectory OR AT ANY PARENT of this subdirectory.<br>\nIf no loadpolicyfile() is called, the SWF will only try the matching directory policy file.<br>\nHowever, if loadpolicyfile() is called on a parent of the subdirectory, and that loaded plicy file allows cross domain request, Flash will allow the cross site request.</p>\n\n<p>I hope it makes sense. Here is a capture of network traffic from the POC swf file.</p>\n", 
            "type": "Activities::Comment", 
            "id": 942589, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-09T11:53:17.565Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-09T11:53:45.572Z", 
            "actor": {
                "username": "opnsec", 
                "url": "/opnsec", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/871/072ab18b53d04e13a2d917136953d206273d7126_medium.png?1462738337"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "Hello, \nMy last post about policy file mechanism wasn't very clear nor accurate, sorry for that. \n\nHowever the vulnerability is indeed present.\n\nRegards,\n\nEnguerran", 
            "markdown_message": "<p>Hello, <br>\nMy last post about policy file mechanism wasn&#39;t very clear nor accurate, sorry for that. </p>\n\n<p>However the vulnerability is indeed present.</p>\n\n<p>Regards,</p>\n\n<p>Enguerran</p>\n", 
            "type": "Activities::Comment", 
            "id": 946840, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-09T15:24:59.959Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-09T15:24:59.959Z", 
            "actor": {
                "username": "jayyspence7", 
                "url": "/jayyspence7", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "Can you retest this? This issue should be resolved.", 
            "markdown_message": "<p>Can you retest this? This issue should be resolved.</p>\n", 
            "type": "Activities::Comment", 
            "id": 947161, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-09T16:51:03.410Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-09T16:51:03.410Z", 
            "actor": {
                "username": "opnsec", 
                "url": "/opnsec", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/871/072ab18b53d04e13a2d917136953d206273d7126_medium.png?1462738337"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "This issue is resolved for me. https://api.vimeo.com/oauth/crossdomain.xml no longer allows cross domain requests.", 
            "markdown_message": "<p>This issue is resolved for me. <a title=\"https://api.vimeo.com/oauth/crossdomain.xml\" href=\"/redirect?signature=7033fff882fd29bc40ff879d1d8c5173d42c441a&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/crossdomain.xml</span><i class=\"icon-external-link\"></i></a> no longer allows cross domain requests.</p>\n", 
            "type": "Activities::Comment", 
            "id": 947310, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "opnsec", 
                "url": "/opnsec"
            }, 
            "created_at": "2016-05-09T17:29:11.323Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-09T17:29:11.323Z", 
            "actor": {
                "username": "jayyspence7", 
                "url": "/jayyspence7", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 947374, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-05-09T17:29:59.389Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-09T17:37:16.429Z", 
            "actor": {
                "url": "/vimeo", 
                "profile": {
                    "name": "Vimeo"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/056/5cb7c3ee4ca70b64963e311c6f5cd8fb4a1daed9_medium.png?1393009870"
                }
            }, 
            "team_handle": "vimeo", 
            "bounty_amount": "1000.0", 
            "collaborator": {
                "username": "opnsec", 
                "url": "/opnsec"
            }, 
            "message": "Thanks for helping make Vimeo more secure :)", 
            "markdown_message": "<p>Thanks for helping make Vimeo more secure :)</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 947377, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-29T12:00:14.278Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-29T12:00:14.278Z", 
            "actor": {
                "username": "opnsec", 
                "url": "/opnsec", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/871/072ab18b53d04e13a2d917136953d206273d7126_medium.png?1462738337"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "message": "Thanks ! Could we publicly disclose this?", 
            "markdown_message": "<p>Thanks ! Could we publicly disclose this?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1045032, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-09-18T09:39:25.223Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-18T09:39:25.223Z", 
            "actor": {
                "username": "opnsec", 
                "url": "/opnsec", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/871/072ab18b53d04e13a2d917136953d206273d7126_medium.png?1462738337"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "vimeo", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2002980, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-18T09:39:31.863Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-18T09:39:31.863Z", 
            "actor": {
                "url": "/vimeo", 
                "profile": {
                    "name": "Vimeo"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/056/5cb7c3ee4ca70b64963e311c6f5cd8fb4a1daed9_medium.png?1393009870"
                }
            }, 
            "team_handle": "vimeo", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2077361, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "opnsec", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/opnsec", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/002/871/ccc14b9b69439861aa58c81a1e17ecaed8de4094_small.png?1462738337"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -35815915.81334344, 
    "disclosed_at": "2017-10-18T09:39:31.840Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/136582", 
    "created_at": "2016-05-05T18:07:47.074Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hello Vimeo Security Team,</p>\n\n<p>There is a vulnerability in api.vimeo.com/oauth which allows an attacker to gain full App privilege over a Vimeo victim user account without user approval, just by having the victim open a link to the attacker webpage.</p>\n\n<p>Proof of Concept link :<br>\n<a title=\"http://opnsec.com/vimeo/vimeoOAuth2Bypass.html\" href=\"/redirect?signature=69f9042f72ff20931d8fa0e3bd2c619d55f33efb&amp;url=http%3A%2F%2Fopnsec.com%2Fvimeo%2FvimeoOAuth2Bypass.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://opnsec.com/vimeo/vimeoOAuth2Bypass.html</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>POC requirements :<br>\n-Tested on Windows 8.1/10 with Firefox 46, Chrome 50, Internet Explorer 11 <br>\n-Flash must be active<br>\n-You must be logged in Vimeo</p>\n\n<p>POC instructions :</p>\n\n<ol>\n<li>Open the POC link</li>\n<li>Wait a few seconds</li>\n<li>The leaked infos from OAuth authorization will show in the box. </li>\n<li>You can then check your vimeo Apps setting page at <a title=\"https://vimeo.com/settings/apps\" href=\"/redirect?signature=5af5c7d9886d9225b54b70f0df9709c5eb58c747&amp;url=https%3A%2F%2Fvimeo.com%2Fsettings%2Fapps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://vimeo.com/settings/apps</span><i class=\"icon-external-link\"></i></a> to see that the app &#39;OAuthBypass&#39; is in the list of authorized Apps</li>\n</ol>\n\n<hr>\n\n<p>Technical info :</p>\n\n<p>The vulnerability comes from the crossdomain file api.vimeo.com/oauth/crossdomain.xml which is set to &#39;allow-access-from domain=&quot;*&quot; &#39;.This means that any domain can load data with Flash from the directory &#39;api.vimeo.com/oauth/&#39; AND FROM THE FOLDER&#39;S CHILD DIRECTORIES, including the directory <a title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?signature=4b0669a1a70078247598733059f23aa08f86dc12&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize</span><i class=\"icon-external-link\"></i></a> <br>\nThe url <a title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?signature=4b0669a1a70078247598733059f23aa08f86dc12&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize</span><i class=\"icon-external-link\"></i></a> should not be accessible to cross domain flashing because it contains the Token to allow the App to gain access to the user account.</p>\n\n<p>You can verify the Flash behavor in Adobe Flash documentation on security :<br>\n<a title=\"http://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7c85.html#WS11001817-24CB-48a4-AA10-59468865F751\" href=\"/redirect?signature=52bc26a274399c8f61cbdd7d87ae6cdd2649ea00&amp;url=http%3A%2F%2Fhelp.adobe.com%2Fen_US%2Fas3%2Fdev%2FWS5b3ccc516d4fbf351e63e3d118a9b90204-7c85.html%23WS11001817-24CB-48a4-AA10-59468865F751\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7c85.html#WS11001817-24CB-48a4-AA10-59468865F751</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>&quot;A URL policy file applies only to the directory from which it is loaded &lt;b&gt;and to its child directories.&quot;&lt;b&gt;</p>\n\n<p>What happens when flash AS3 loads <a title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?signature=4b0669a1a70078247598733059f23aa08f86dc12&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize</span><i class=\"icon-external-link\"></i></a> is that :</p>\n\n<ol>\n<li>By default Flash check the Master crossdomain.xml file, which in this case is &#39;permitted-cross-domain-policies=&quot;by-content-type&quot; &#39; which means that the policy will be based on a directory base.<br>\n</li>\n<li>Then by default Flash will try to load <a title=\"https://api.vimeo.com/oauth/authorize/crossdomain.xml\" href=\"/redirect?signature=dcb3ba3bd3810814205240b28f3026e18811e7f8&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize/crossdomain.xml</span><i class=\"icon-external-link\"></i></a> which is not allowing cross site request at all. In this case, flash will not let the cross domain request and the Vimeo OAuth is safe</li>\n</ol>\n\n<p>HOWEVER, if the evil.swf flash calls &#39;Security.loadPolicyFile(&quot;api.vimeo.com/oauth/crossdomain.xml&quot;)&#39;<br>\nbefore loading url <a title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?signature=4b0669a1a70078247598733059f23aa08f86dc12&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize</span><i class=\"icon-external-link\"></i></a> then Flash will allow cross domain request on api.vimeo.com/oauth/ and on any child directory including <a title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?signature=4b0669a1a70078247598733059f23aa08f86dc12&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize</span><i class=\"icon-external-link\"></i></a>. In that case, flash will never check <a title=\"https://api.vimeo.com/oauth/authorize/crossdomain.xml\" href=\"/redirect?signature=dcb3ba3bd3810814205240b28f3026e18811e7f8&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize/crossdomain.xml</span><i class=\"icon-external-link\"></i></a> because api.vimeo.com/oauth/crossdomain.xml is enough for him to allow the cross domain request on <a title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?signature=4b0669a1a70078247598733059f23aa08f86dc12&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>I hope my explaination is clear enough. In conclusion, a call to &#39;Security.loadPolicyFile(&quot;<a title=\"https://api.vimeo.com/oauth/crossdomain.xml%22)\" href=\"/redirect?signature=cecce725481d6238284a80e37420a7e1e3b25948&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fcrossdomain.xml%2522%29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/crossdomain.xml%22)</span><i class=\"icon-external-link\"></i></a>&#39; will allow any domain to read the source code of <a title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?signature=4b0669a1a70078247598733059f23aa08f86dc12&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize</span><i class=\"icon-external-link\"></i></a>.</p>\n\n<p>From there, an attacker can steal the Token of the user and do all the authorization process (Obtaining Authentication credentials via redirect) without the need of user interaction.</p>\n\n<p>Vulnerability Mitigation :</p>\n\n<p>To remove the vulnerability, you just need to move the <a title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?signature=4b0669a1a70078247598733059f23aa08f86dc12&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize</span><i class=\"icon-external-link\"></i></a> to another subdomain like <a href=\"/redirect?signature=a5bb76e183f89ce573c964862c872602b6833e1f&amp;url=http%3A%2F%2Fwww.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>www.vimeo.com/oauth/authorize</span><i class=\"icon-external-link\"></i></a> or to another directory like api.vimeo.com/authorize where there is no allowing crossdomain.xml file between the root folder level and the &quot;authorize&quot; level.<br>\nTo keep the same implementation for the app developpers you can make a simple redirection from <a title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?signature=4b0669a1a70078247598733059f23aa08f86dc12&amp;url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://api.vimeo.com/oauth/authorize</span><i class=\"icon-external-link\"></i></a> to the new, protected &quot;authorize&quot;  location. That way flash will not be able to follow the redirection and only legitimate user will be able to validate App authorization.</p>\n\n<hr>\n\n<p>If you need more info like POC source code or if the POC doesn&#39;t work feel free to contact me.</p>\n\n<p>Regards,</p>\n\n<p>Enguerran Gillier<br>\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588<br>\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588</p>\n", 
    "vulnerability_information": "Hello Vimeo Security Team,\n\nThere is a vulnerability in api.vimeo.com/oauth which allows an attacker to gain full App privilege over a Vimeo victim user account without user approval, just by having the victim open a link to the attacker webpage.\n\nProof of Concept link :\nhttp://opnsec.com/vimeo/vimeoOAuth2Bypass.html\n\nPOC requirements :\n-Tested on Windows 8.1/10 with Firefox 46, Chrome 50, Internet Explorer 11 \n-Flash must be active\n-You must be logged in Vimeo\n\nPOC instructions :\n1. Open the POC link\n2. Wait a few seconds\n3. The leaked infos from OAuth authorization will show in the box. \n4. You can then check your vimeo Apps setting page at https://vimeo.com/settings/apps to see that the app 'OAuthBypass' is in the list of authorized Apps\n\n----------------------\n\nTechnical info :\n\nThe vulnerability comes from the crossdomain file api.vimeo.com/oauth/crossdomain.xml which is set to 'allow-access-from domain=\"*\" '.This means that any domain can load data with Flash from the directory 'api.vimeo.com/oauth/' AND FROM THE FOLDER'S CHILD DIRECTORIES, including the directory https://api.vimeo.com/oauth/authorize \nThe url https://api.vimeo.com/oauth/authorize should not be accessible to cross domain flashing because it contains the Token to allow the App to gain access to the user account.\n\nYou can verify the Flash behavor in Adobe Flash documentation on security :\nhttp://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7c85.html#WS11001817-24CB-48a4-AA10-59468865F751\n\n\"A URL policy file applies only to the directory from which it is loaded <b>and to its child directories.\"<b>\n\nWhat happens when flash AS3 loads https://api.vimeo.com/oauth/authorize is that :\n1. By default Flash check the Master crossdomain.xml file, which in this case is 'permitted-cross-domain-policies=\"by-content-type\" ' which means that the policy will be based on a directory base.  \n2. Then by default Flash will try to load https://api.vimeo.com/oauth/authorize/crossdomain.xml which is not allowing cross site request at all. In this case, flash will not let the cross domain request and the Vimeo OAuth is safe\n\nHOWEVER, if the evil.swf flash calls 'Security.loadPolicyFile(\"api.vimeo.com/oauth/crossdomain.xml\")'\nbefore loading url https://api.vimeo.com/oauth/authorize then Flash will allow cross domain request on api.vimeo.com/oauth/ and on any child directory including https://api.vimeo.com/oauth/authorize. In that case, flash will never check https://api.vimeo.com/oauth/authorize/crossdomain.xml because api.vimeo.com/oauth/crossdomain.xml is enough for him to allow the cross domain request on https://api.vimeo.com/oauth/authorize\n\nI hope my explaination is clear enough. In conclusion, a call to 'Security.loadPolicyFile(\"https://api.vimeo.com/oauth/crossdomain.xml\")' will allow any domain to read the source code of https://api.vimeo.com/oauth/authorize.\n\nFrom there, an attacker can steal the Token of the user and do all the authorization process (Obtaining Authentication credentials via redirect) without the need of user interaction.\n\nVulnerability Mitigation :\n\nTo remove the vulnerability, you just need to move the https://api.vimeo.com/oauth/authorize to another subdomain like www.vimeo.com/oauth/authorize or to another directory like api.vimeo.com/authorize where there is no allowing crossdomain.xml file between the root folder level and the \"authorize\" level.\nTo keep the same implementation for the app developpers you can make a simple redirection from https://api.vimeo.com/oauth/authorize to the new, protected \"authorize\"  location. That way flash will not be able to follow the redirection and only legitimate user will be able to validate App authorization.\n\n-------------\n\nIf you need more info like POC source code or if the POC doesn't work feel free to contact me.\n\nRegards,\n\nEnguerran Gillier\n&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;\n&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;&#x2588;", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://vimeo.com", 
            "about": "Make life worth watching", 
            "twitter_handle": "vimeo", 
            "name": "Vimeo"
        }, 
        "handle": "vimeo", 
        "url": "https://hackerone.com/vimeo", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/056/28a1c2f9f94f142a175c4a2370dad85a194797e3_small.png?1393009870", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/056/5cb7c3ee4ca70b64963e311c6f5cd8fb4a1daed9_medium.png?1393009870"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 56, 
        "default_currency": "usd"
    }, 
    "is_published": false
}