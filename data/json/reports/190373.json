{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "informative", 
    "bug_reporter_agreed_on_going_public_at": "2016-12-12T17:07:22.645Z", 
    "voters": [
        "babayaga_", 
        "hacklad", 
        "spetr0x", 
        "nosas"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 190373, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-12-12T14:32:27.797Z", 
    "vulnerability_information": "Dear Gratipay bug bounty team,\n\n# Summary\n---\n\nGratipay currently uses the [random](https://docs.python.org/dev/library/random.html) module's pseudo-random number generator which is not a cryptographically secure PRNG as stated in the docs:\n\n> The pseudo-random generators of this module should not be used for security purposes. For security or cryptographic uses, see the secrets module.\n\nThe PRNG is implemented in `crypto.py` as follows:\n\n~~~\ntry:                                # use the system PRNG if possible\n    random = random.SystemRandom()\n    using_sysrandom = True\nexcept NotImplementedError:         # fall back\n    import warnings\n    warnings.warn('A secure pseudo-random number generator is not available '\n                  'on your system. Falling back to Mersenne Twister.')\n    using_sysrandom = False\n~~~\n\nLink: https://github.com/gratipay/gratipay.com/blob/master/gratipay/security/crypto.py#L17\n\n# Why does this vulnerability exist?\n---\n\nA PRNG is an algorithm used to produce random-looking numbers with certain desirable statistical properties. In order for a PRNG to be cryptographically secure it must be resistant to prediction.\n\nThe random module uses the [Mersenne Twister](https://en.wikipedia.org/wiki/Mersenne_Twister) by default, which is designed for simulation (Monte-Carlo simulation) and modelling, and is therefore not suitable for cryptographic purposes. Interestingly Gratipay's current fallback from the `random` module is in fact the Mersenne Twister:\n\n~~~\n warnings.warn('A secure pseudo-random number generator is not available '\n                  'on your system. Falling back to Mersenne Twister.')\n~~~\n\n# How can this be fixed?\n---\n\nI recommend using the [secrets](https://docs.python.org/dev/library/secrets.html#secrets.SystemRandom) module's PRNG as follows:\n\n~~~\nrandom = secrets.SystemRandom()\n~~~\n\nFor more on `Insecure Randomness` please refer to the OWASP page here: https://www.owasp.org/index.php/Insecure_Randomness\n\nYours sincerely,\nEd", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "none", 
        "author_type": "Team"
    }, 
    "title": "Gratipay uses the random module's cryptographically insecure PRNG.", 
    "is_member_of_team?": null, 
    "vote_count": 4, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Informative", 
    "public": true, 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-12-12T14:29:12.475Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-12T14:29:12.475Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "None", 
                "old_severity": null
            }, 
            "team_handle": "gratipay", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 1358484, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-12T14:32:16.077Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-12T14:32:16.077Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Thanks for reading our source code! :-)\n\n`secrets.SystemRandom` is an [alias](https://hg.python.org/cpython/file/3.6/Lib/secrets.py#l20) for `random.SystemRandom`, which is in fact [advertised](https://hg.python.org/cpython/file/2.7/Lib/random.py#l803) as being cryptographically secure (since it [uses](https://hg.python.org/cpython/file/2.7/Lib/random.py#l805) `os.urandom` under the hood):\n\n> Use `os.urandom()` or `SystemRandom` if you require a cryptographically secure pseudo-random number generator.\n\nClosing as informative. Happy hacking! :-)", 
            "markdown_message": "<p>Thanks for reading our source code! :-)</p>\n\n<p><code>secrets.SystemRandom</code> is an <a href=\"/redirect?signature=c37153c9eb9da2536a5a755e74c726a94514372e&amp;url=https%3A%2F%2Fhg.python.org%2Fcpython%2Ffile%2F3.6%2FLib%2Fsecrets.py%23l20\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>alias</span><i class=\"icon-external-link\"></i></a> for <code>random.SystemRandom</code>, which is in fact <a href=\"/redirect?signature=ea852fdafe153f23147d62e237b952a03aa1079b&amp;url=https%3A%2F%2Fhg.python.org%2Fcpython%2Ffile%2F2.7%2FLib%2Frandom.py%23l803\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>advertised</span><i class=\"icon-external-link\"></i></a> as being cryptographically secure (since it <a href=\"/redirect?signature=978e1812b68f8a35505f0eeff240e3772cca5153&amp;url=https%3A%2F%2Fhg.python.org%2Fcpython%2Ffile%2F2.7%2FLib%2Frandom.py%23l805\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>uses</span><i class=\"icon-external-link\"></i></a> <code>os.urandom</code> under the hood):</p>\n\n<blockquote>\n<p>Use <code>os.urandom()</code> or <code>SystemRandom</code> if you require a cryptographically secure pseudo-random number generator.</p>\n</blockquote>\n\n<p>Closing as informative. Happy hacking! :-)</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 1358497, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-12T14:32:27.818Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-12T14:32:27.818Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1358498, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-12T17:07:22.659Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-12T17:07:22.659Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Dear @whit537,\n\nThank you for the prompt and informative response. Only after submitting this report did I notice that `secrets.SystemRandom` is the equivalent of `random.SystemRandom`. Since this report will be publicly disclosed, I will write a brief summary explaining what both modules are for developers who would like to implement a cryptographically secure PRNG (CPRNG).\n\n# The `random` module\n---\n\nIn order to produce cryptograpically secure strings you must ensure that you are using `random.SystemRandom` and not `random.choice`.\n\n## \ud83d\udc4e Don't use this:\n\n~~~\n''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n~~~\n\nThis uses the Mersenne Twister.\n\n## \ud83d\udc4d Use this instead:\n\n~~~\n''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\n~~~\n\n`random.SystemRandom` runs `os.urandom()` (as seen in the code snippet below), which uses the operating system's PRNG. On *nix machines that's `/dev/urandom` and `CryptGenRandom()` on Windows machines.\n\n~~~\ndef random(self):\n        \"\"\"Get the next random number in the range [0.0, 1.0).\"\"\"\n        return (long(_hexlify(_urandom(7)), 16) >> 3) * RECIP_BPF          # Runs it here.\n\n    def getrandbits(self, k):\n        \"\"\"getrandbits(k) -> x.  Generates a long int with k random bits.\"\"\"\n        if k <= 0:\n            raise ValueError('number of bits must be greater than zero')\n        if k != int(k):\n            raise TypeError('number of bits should be an integer')\n        bytes = (k + 7) // 8\n        x = long(_hexlify(_urandom(bytes)), 16)                            # ... and here.\n        return x >> (bytes * 8 - k)  \n~~~\n\nLink to docs: https://docs.python.org/2/library/random.html\nLink to source code: https://hg.python.org/cpython/file/2.7/Lib/random.py#l805\n\n# The `secrets` module\n---\n\nIf you are running Python 3.6 and want to ensure you are using a CPRNG, please opt for the `secrets` module. As @whit537 stated, `secrets.SystemRandom` is just an alias for `random.SystemRandom`. The reason behind creating this module was the fact that some developers were using `random.choice` and therefore by creating a module that only uses cryptographically secure functions there would be no way of making the same mistake. On top of that, for a very long time when looking for a random string generator in Python, the number one result was the following insecure method: http://stackoverflow.com/a/2257449.\n\nIn the `secrets` module's source code you can see that the `SystemRandom` class from the `random` module is imported as follows:\n\n~~~\nfrom random import SystemRandom\n\n_sysrand = SystemRandom()\n~~~\n\nLink to docs: https://docs.python.org/dev/library/secrets.html\nLink to source code: https://hg.python.org/cpython/file/3.6/Lib/secrets.py\n\nPlease let me know if any further information would be helpful. Thank you for your time.\n\nYours sincerely,\nEd", 
            "markdown_message": "<p>Dear <a href=\"/whit537\">@whit537</a>,</p>\n\n<p>Thank you for the prompt and informative response. Only after submitting this report did I notice that <code>secrets.SystemRandom</code> is the equivalent of <code>random.SystemRandom</code>. Since this report will be publicly disclosed, I will write a brief summary explaining what both modules are for developers who would like to implement a cryptographically secure PRNG (CPRNG).</p>\n\n<h1 id=\"the-random-module\">The <code>random</code> module</h1>\n\n<hr>\n\n<p>In order to produce cryptograpically secure strings you must ensure that you are using <code>random.SystemRandom</code> and not <code>random.choice</code>.</p>\n\n<h2 id=\"don-t-use-this\">\ud83d\udc4e Don&#39;t use this:</h2>\n<pre class=\"highlight plaintext\"><code>&#39;&#39;.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n</code></pre>\n<p>This uses the Mersenne Twister.</p>\n\n<h2 id=\"use-this-instead\">\ud83d\udc4d Use this instead:</h2>\n<pre class=\"highlight plaintext\"><code>&#39;&#39;.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\n</code></pre>\n<p><code>random.SystemRandom</code> runs <code>os.urandom()</code> (as seen in the code snippet below), which uses the operating system&#39;s PRNG. On *nix machines that&#39;s <code>/dev/urandom</code> and <code>CryptGenRandom()</code> on Windows machines.</p>\n<pre class=\"highlight plaintext\"><code>def random(self):\n        &quot;&quot;&quot;Get the next random number in the range [0.0, 1.0).&quot;&quot;&quot;\n        return (long(_hexlify(_urandom(7)), 16) &gt;&gt; 3) * RECIP_BPF          # Runs it here.\n\n    def getrandbits(self, k):\n        &quot;&quot;&quot;getrandbits(k) -&gt; x.  Generates a long int with k random bits.&quot;&quot;&quot;\n        if k &lt;= 0:\n            raise ValueError(&#39;number of bits must be greater than zero&#39;)\n        if k != int(k):\n            raise TypeError(&#39;number of bits should be an integer&#39;)\n        bytes = (k + 7) // 8\n        x = long(_hexlify(_urandom(bytes)), 16)                            # ... and here.\n        return x &gt;&gt; (bytes * 8 - k)  \n</code></pre>\n<p>Link to docs: <a title=\"https://docs.python.org/2/library/random.html\" href=\"/redirect?signature=55553c54bf7876291a603e3938865504faa41c44&amp;url=https%3A%2F%2Fdocs.python.org%2F2%2Flibrary%2Frandom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://docs.python.org/2/library/random.html</span><i class=\"icon-external-link\"></i></a><br>\nLink to source code: <a title=\"https://hg.python.org/cpython/file/2.7/Lib/random.py#l805\" href=\"/redirect?signature=978e1812b68f8a35505f0eeff240e3772cca5153&amp;url=https%3A%2F%2Fhg.python.org%2Fcpython%2Ffile%2F2.7%2FLib%2Frandom.py%23l805\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://hg.python.org/cpython/file/2.7/Lib/random.py#l805</span><i class=\"icon-external-link\"></i></a></p>\n\n<h1 id=\"the-secrets-module\">The <code>secrets</code> module</h1>\n\n<hr>\n\n<p>If you are running Python 3.6 and want to ensure you are using a CPRNG, please opt for the <code>secrets</code> module. As <a href=\"/whit537\">@whit537</a> stated, <code>secrets.SystemRandom</code> is just an alias for <code>random.SystemRandom</code>. The reason behind creating this module was the fact that some developers were using <code>random.choice</code> and therefore by creating a module that only uses cryptographically secure functions there would be no way of making the same mistake. On top of that, for a very long time when looking for a random string generator in Python, the number one result was the following insecure method: <a title=\"http://stackoverflow.com/a/2257449\" href=\"/redirect?signature=e79924d78e8b2d75ec5cae2dc6d405fdcdbfc78a&amp;url=http%3A%2F%2Fstackoverflow.com%2Fa%2F2257449\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://stackoverflow.com/a/2257449</span><i class=\"icon-external-link\"></i></a>.</p>\n\n<p>In the <code>secrets</code> module&#39;s source code you can see that the <code>SystemRandom</code> class from the <code>random</code> module is imported as follows:</p>\n<pre class=\"highlight plaintext\"><code>from random import SystemRandom\n\n_sysrand = SystemRandom()\n</code></pre>\n<p>Link to docs: <a title=\"https://docs.python.org/dev/library/secrets.html\" href=\"/redirect?signature=3a5fd416dbf4806ad2e5afd7d3a00a7fb35fcb83&amp;url=https%3A%2F%2Fdocs.python.org%2Fdev%2Flibrary%2Fsecrets.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://docs.python.org/dev/library/secrets.html</span><i class=\"icon-external-link\"></i></a><br>\nLink to source code: <a title=\"https://hg.python.org/cpython/file/3.6/Lib/secrets.py\" href=\"/redirect?signature=ddc63781377a5b42eb1441b597a281ad1e4f7d7f&amp;url=https%3A%2F%2Fhg.python.org%2Fcpython%2Ffile%2F3.6%2FLib%2Fsecrets.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://hg.python.org/cpython/file/3.6/Lib/secrets.py</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Please let me know if any further information would be helpful. Thank you for your time.</p>\n\n<p>Yours sincerely,<br>\nEd</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1358836, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-12T17:07:22.690Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-12T17:07:22.690Z", 
            "actor": {
                "username": "edoverflow", 
                "url": "/edoverflow", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/116/374/95f9ffa246b2d43ca4f14a95d8815f429544fe54_medium.png?1527882436"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1358837, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-12T17:33:15.556Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-12T17:33:15.556Z", 
            "actor": {
                "username": "whit537", 
                "url": "/whit537", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/034/094/cb0028b781bec3e126b02902d5cde4c9aedaaae8_medium.jpg?1487629901"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "gratipay", 
            "message": "Thanks for the informative write-up, @edio! P.S. We are an open organization and are always [happy to have collaborators](http://inside.gratipay.com/big-picture/welcome) if you would like to be on our blue team. :-)", 
            "markdown_message": "<p>Thanks for the informative write-up, <a href=\"/edio\">@edio</a>! P.S. We are an open organization and are always <a href=\"/redirect?signature=3b4f1feca9b5153bab290f056ec79f80a15059b0&amp;url=http%3A%2F%2Finside.gratipay.com%2Fbig-picture%2Fwelcome\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>happy to have collaborators</span><i class=\"icon-external-link\"></i></a> if you would like to be on our blue team. :-)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1358901, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "edoverflow", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/edoverflow", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/116/374/2e86e29173a7b27dc4e4c35ecaef804781110b9f_small.png?1527882436"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 32, 
        "name": "Cryptographic Issues - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2016-12-12T17:07:22.677Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/190373", 
    "created_at": "2016-12-11T15:49:45.330Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Dear Gratipay bug bounty team,</p>\n\n<h1 id=\"summary\">Summary</h1>\n\n<hr>\n\n<p>Gratipay currently uses the <a href=\"/redirect?signature=75b3fc5edd9722ecebc47967c94ef04c64c2ac9c&amp;url=https%3A%2F%2Fdocs.python.org%2Fdev%2Flibrary%2Frandom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>random</span><i class=\"icon-external-link\"></i></a> module&#39;s pseudo-random number generator which is not a cryptographically secure PRNG as stated in the docs:</p>\n\n<blockquote>\n<p>The pseudo-random generators of this module should not be used for security purposes. For security or cryptographic uses, see the secrets module.</p>\n</blockquote>\n\n<p>The PRNG is implemented in <code>crypto.py</code> as follows:</p>\n<pre class=\"highlight plaintext\"><code>try:                                # use the system PRNG if possible\n    random = random.SystemRandom()\n    using_sysrandom = True\nexcept NotImplementedError:         # fall back\n    import warnings\n    warnings.warn(&#39;A secure pseudo-random number generator is not available &#39;\n                  &#39;on your system. Falling back to Mersenne Twister.&#39;)\n    using_sysrandom = False\n</code></pre>\n<p>Link: <a title=\"https://github.com/gratipay/gratipay.com/blob/master/gratipay/security/crypto.py#L17\" href=\"/redirect?signature=3ea54512b990827b66250cf05547b3b178d5bb85&amp;url=https%3A%2F%2Fgithub.com%2Fgratipay%2Fgratipay.com%2Fblob%2Fmaster%2Fgratipay%2Fsecurity%2Fcrypto.py%23L17\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/gratipay/gratipay.com/blob/master/gratipay/security/crypto.py#L17</span><i class=\"icon-external-link\"></i></a></p>\n\n<h1 id=\"why-does-this-vulnerability-exist\">Why does this vulnerability exist?</h1>\n\n<hr>\n\n<p>A PRNG is an algorithm used to produce random-looking numbers with certain desirable statistical properties. In order for a PRNG to be cryptographically secure it must be resistant to prediction.</p>\n\n<p>The random module uses the <a href=\"/redirect?signature=b6f50e795a3277c9c43e376bd0aa314aeaca45eb&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMersenne_Twister\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Mersenne Twister</span><i class=\"icon-external-link\"></i></a> by default, which is designed for simulation (Monte-Carlo simulation) and modelling, and is therefore not suitable for cryptographic purposes. Interestingly Gratipay&#39;s current fallback from the <code>random</code> module is in fact the Mersenne Twister:</p>\n<pre class=\"highlight plaintext\"><code> warnings.warn(&#39;A secure pseudo-random number generator is not available &#39;\n                  &#39;on your system. Falling back to Mersenne Twister.&#39;)\n</code></pre>\n<h1 id=\"how-can-this-be-fixed\">How can this be fixed?</h1>\n\n<hr>\n\n<p>I recommend using the <a href=\"/redirect?signature=5d48146fafb00c896f9621ef76a3b2ac242bdf39&amp;url=https%3A%2F%2Fdocs.python.org%2Fdev%2Flibrary%2Fsecrets.html%23secrets.SystemRandom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>secrets</span><i class=\"icon-external-link\"></i></a> module&#39;s PRNG as follows:</p>\n<pre class=\"highlight plaintext\"><code>random = secrets.SystemRandom()\n</code></pre>\n<p>For more on <code>Insecure Randomness</code> please refer to the OWASP page here: <a title=\"https://www.owasp.org/index.php/Insecure_Randomness\" href=\"/redirect?signature=42798376e04de16d2b5411a2888f00d41c79f4bc&amp;url=https%3A%2F%2Fwww.owasp.org%2Findex.php%2FInsecure_Randomness\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.owasp.org/index.php/Insecure_Randomness</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Yours sincerely,<br>\nEd</p>\n", 
    "severity_rating": "none", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://gratipay.com/", 
            "about": "Gratitude? Gratipay! The easiest way for your company to pay for open source.", 
            "twitter_handle": "Gratipay", 
            "name": "Gratipay"
        }, 
        "handle": "gratipay", 
        "url": "https://hackerone.com/gratipay", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/868/5b2b5a44e2439cf6fe880b374cbbeaf38d740c6b_small.jpg?1458214340", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/001/868/d74b2c3d5d3975cb38a59a3176d952c3553a72f1_medium.jpg?1458214340"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 1868, 
        "default_currency": "usd"
    }, 
    "is_published": false
}