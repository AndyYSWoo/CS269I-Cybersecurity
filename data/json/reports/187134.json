{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-12-01T16:37:45.582Z", 
    "voters": [
        "albinowax", 
        "michiel", 
        "spam404", 
        "bogdantcaciuc", 
        "ellernate", 
        "inhibitor181", 
        "encrypt", 
        "pekafat", 
        "jelmer", 
        "madrobot", 
        "and 17 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 187134, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-12-07T10:25:57.826Z", 
    "vulnerability_information": "Description\n====================\nIf an attacker builds up multiple connections which will be released at the same time having a response Content-Length of 0, leaving out the response Content-Length header or having a higher Content-Length than the actual response while insinuating starting a doc-type then the stacked up connections will interfere with each other and, besides other weird behavior, will scramble the response buffers through each other.\n\nThe following behaviors have been observed.\n - Burp strips the content completely and comes back with only the headers\n - Buffers between the requests get scrambled up leading to content leaking between them\n - The original byte sequence in the buffer gets scrambled\n - Characters will get replaced with new characters\n\nReproduction\n====================\nIn order to find this vulnerability I wrote a proof of concept HTTP server. This server will listen on 127.0.0.1:8000 and when opening http://127.0.0.1:8000/memspy the browser will build up open requests to the server which it will not release until a defined amount of requests are met. Then when the satisfied amount of open connections have been built up the server it will release them simultaneously.\n\nThe response the server will reply with to all these connections looks as follows:\n\n```\nHTTP/1.1 200 OK\nContent-Length: -12000\nMeta:%s:%d\nContent-Type: text/html\n\n<![a-z0-9]{1024}>\n```\n\nWith [a-z0-9]{1024} I mean it will repeat 1 of the characters in the set a-z, 0-9, 1024 times. This character will be randomized between requests to easily distinguish between different responses. The Meta header will contain the character which was chosen in this randomization process and the batchId. A batch just means a set of requests being released at the same time.\n\nThe file spy.html will perform the requests and display the result on the screen so the result can be analyzed from the browser. Besides that there is a kill-switch for the threads. If you put 'killall=true' in the JavaScript console it will stop creating new new threads which can be useful.\nThe variable threads in the JavaScript must always correspond the connLimit int in Go. This regulates how many threads there should be opened. The vulnerability can be successfully triggered with as little as 4 threads and 16 characters per thread. Lower limits have not been tested.\n\nImpact\n====================\nWith further improvement an attacker can reliably eavesdrop on a victims browsing data if the attacker is able to lure the victim to it's server so the required connections can be established.\nThe response data being manipulated is also a concerning thing to note. An attacker can deliberately hold up a bunch of requests and trigger this behavior which will scramble the response and with it valuable client-side protection will be weakened.\nI was unable to verify the possibility of recovering the internal memory layout remotely which could assist in circumventing ASLR but I imagine this is not too weird to consider as a possibility considering the nature of this vuln.\n\nDiscovery\n====================\nI was testing out the Collaborator server and due to a lack of input points I started doing random stuff. That's when I suddenly noticed that when you put the intruder on 100 threads the response would slightly differentiate every so many requests. Quite puzzled as to how this could happen I tracked down the syscalls emitted by the Burp Collaborator server which didn't reveal any anomalies.\n\nFrom there I verified that it wasn't in the server so I figured it must have been something within the client processing behavior. The Collaborator server did not make use of Gzip compression or something somewhat logical which may have caused this behavior so I figured it must be a memory leak or something in the way multiple incoming requests are being handled.\n\nFrom there I built a HTTP server with the capability to hold and release multiple requests but it didn't work until I copy/pased the original response from the Collaborator server as response in my server. From there it was quite clear the Content-Length was wrongly specified and there was a need for the response to start with \"<!\" in order to trigger it.\n\nSo, the final conclusion is, when multiple threads are being processed and the content-length has to be guessed and there is some form of doctype specification present, burp will manipulate something internally which should not be touched by multiple threads at the same time. I don't have the source but that is my best guess to look for this vulnerability.\n\nI added some screenshots\n1. Shows how the responses from the Collaborator server differentiated\n2. Shows how the syscall emitted by the Collaborator server was correct but incorrectly interpreted by Burp\n3. Shows the first successes with the HTTP server when it was able to hold and burst requests\n4. First passive eavesdropping on memory\n5. Substantial amounts of internal memory leaking\n6. The final PoC server in action. Every column should be presented as the character preceding it enclosed by \"<!\" and \">\". Burp mixes the buffers around. The other 2 digits are the batchId and pckt length\n7. The PoC executing not through burp to illustrate what the server is actually sending\n\nSome recommendations while using the server:\nYou may have to try a couple of times before it works properly. It is important to first start the server and after that open http://127.0.0.1:8000/memspy with the browser. The server waits specifically for 20 open connections right now and then beams them out simultaneously. If the browser naively sent a request for favicon.ico or something there will be a request too many.\nspy.html must be in the same folder as \n\nWhen the server is running and you have connected with the memspy endpoint it will look something like this:\n```\n[system@localhost pocs]$ go run burp-pckt-burst-memspy.go \n0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.^Csignal: interrupt\n```\n0.1.2.3, etc represent the request number in hexadecimal.\nX means the wanted amount of open connections have been achieved and the responses are being flushed\n", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "high", 
            "privileges_required": "none", 
            "user_interaction": "required", 
            "attack_vector": "network", 
            "attack_complexity": "low", 
            "scope": "unchanged", 
            "integrity": "high", 
            "availability": "high"
        }, 
        "rating": "high", 
        "score": 8.8, 
        "author_type": "User"
    }, 
    "title": "JSBeautifier BApp: Race condition leads to memory disclosure", 
    "is_member_of_team?": null, 
    "vote_count": 27, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-12-31T16:37:45.643Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "attachments": [
        {
            "file_name": "1-primal-weirdness.png", 
            "type": "image/png", 
            "id": 139124, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/139/124/ff4ae58813fc0b0ca5809f0a988817f671c1a535/1-primal-weirdness.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224612Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=6b93286286bacd9cdf9aaea7bfb85aee44a1713b24d57072535206901f5f42dd"
        }, 
        {
            "file_name": "2-syscall.png", 
            "type": "image/png", 
            "id": 139125, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/139/125/b7e039d14de040afdb3b8aecc92feb9db0cd8583/2-syscall.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224612Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a9ea417f3f4e84801b4760086dedda37165e807e280cea7bd54734fcdeae0093"
        }, 
        {
            "file_name": "3-first-success.png", 
            "type": "image/png", 
            "id": 139126, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/139/126/6d9cb49a821964c27a5719a3d05fefd4fed7e4f2/3-first-success.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224612Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d2f44a700e1f6a05e828f5bb9a37c3c746e64b7afab192389d8a39b898920ed7"
        }, 
        {
            "file_name": "4-first-win.png", 
            "type": "image/png", 
            "id": 139127, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/139/127/6726642b46ec9efd2696a3e1f24cbdc8912194f5/4-first-win.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224612Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a92784224a205c2a55c52e85bd5599f859d149ee3cac836043d494a2d235c5f9"
        }, 
        {
            "file_name": "5-bigleak.png", 
            "type": "image/png", 
            "id": 139128, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/139/128/0da3f39352f6b92304275420d50e8274d315c5ef/5-bigleak.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224612Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=78a2fd1e12a4f4ea4ee215bb738792baef71541be08a8830e9eea21a75726e4e"
        }, 
        {
            "file_name": "6-win.png", 
            "type": "image/png", 
            "id": 139129, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/139/129/11641795040b7163507db8966b08fccf79a18668/6-win.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224612Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=833fbf5ecff9b6651944ae0c1979c95baecffa2720bab6644e2ec90792013a26"
        }, 
        {
            "file_name": "7-wo-burp.png", 
            "type": "image/png", 
            "id": 139139, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/139/139/e9a5c0db64bb8e72b392e13043fe86a42d0394d0/7-wo-burp.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224612Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=9ffb1f0e714123b348c085f145b81809e43d3d0084e46a51d6ed4550fb44787e"
        }, 
        {
            "file_name": "burp-pckt-burst-memspy.go", 
            "type": "text/x-c", 
            "id": 139142, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/139/142/2c00cc24c02254f6629a9785ff5e30c7efb341f6/burp-pckt-burst-memspy.go?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224612Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=79cc41dd9010e332960109094130b60c2e89789b9a35e11e90033ea969aa0bbc"
        }, 
        {
            "file_name": "spy.html", 
            "type": "text/html", 
            "id": 139143, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/139/143/094b61dc6150027c4e479f307ebcd735ef61bc00/spy.html?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224612Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=482691f217b2ea0450f1463c71e87d32d7cc663def67bd31651393e637d37bd2"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-12-01T01:56:27.749Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-01T01:56:27.749Z", 
            "actor": {
                "username": "jelmer", 
                "url": "/jelmer", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/012/636/f409a32cbb16f6a9253d020c6c0b5ba4b1c5846c_medium.jpg?1527112184"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "portswigger", 
            "message": "After rebooting my box I am experiencing difficulties reproducing the presented finding. My apologies but I will find out why it worked in the first place. Got the state file and stuff.\n\nI obtained these stack traces from stderr, could the bugs down here have any affiliation with the presented findings and forced the application to an unstable state somehow?\n\nIf I know more I will let you know\n\n\tat javax.swing.plaf.nimbus.NimbusStyle.getBackgroundPainter(NimbusStyle.java:720)\n\tat javax.swing.plaf.nimbus.SynthPainterImpl.paintBackground(SynthPainterImpl.java:99)\n\tat javax.swing.plaf.nimbus.SynthPainterImpl.paintPanelBackground(SynthPainterImpl.java:957)\n\tat javax.swing.plaf.synth.SynthPanelUI.update(SynthPanelUI.java:155)\n\tat javax.swing.JComponent.paintComponent(JComponent.java:770)\n\tat javax.swing.JComponent.paint(JComponent.java:1046)\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5223)\n\tat javax.swing.BufferStrategyPaintManager.paint(BufferStrategyPaintManager.java:295)\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1249)\n\tat javax.swing.JComponent._paintImmediately(JComponent.java:5171)\n\tat javax.swing.JComponent.paintImmediately(JComponent.java:4982)\n\tat javax.swing.RepaintManager$3.run(RepaintManager.java:808)\n\tat javax.swing.RepaintManager$3.run(RepaintManager.java:796)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:796)\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:769)\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:718)\n\tat javax.swing.RepaintManager.access$1100(RepaintManager.java:62)\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1677)\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:312)\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:745)\n\tat java.awt.EventQueue.access$300(EventQueue.java:103)\n\tat java.awt.EventQueue$3.run(EventQueue.java:706)\n\tat java.awt.EventQueue$3.run(EventQueue.java:704)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:715)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:242)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:161)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:150)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:146)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:138)\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:91)\n\n\njava.lang.ClassCastException: javax.swing.plaf.nimbus.DerivedColor$UIResource cannot be cast to javax.swing.Painter\n\tat javax.swing.plaf.nimbus.NimbusStyle.getBackgroundPainter(NimbusStyle.java:720)\n\tat javax.swing.plaf.nimbus.SynthPainterImpl.paintBackground(SynthPainterImpl.java:99)\n\tat javax.swing.plaf.nimbus.SynthPainterImpl.paintPanelBackground(SynthPainterImpl.java:957)\n\tat javax.swing.plaf.synth.SynthPanelUI.update(SynthPanelUI.java:155)\n\tat javax.swing.JComponent.paintComponent(JComponent.java:770)\n\tat javax.swing.JComponent.paint(JComponent.java:1046)\n\tat javax.swing.JComponent.paintToOffscreen(JComponent.java:5223)\n\tat javax.swing.BufferStrategyPaintManager.paint(BufferStrategyPaintManager.java:295)\n\tat javax.swing.RepaintManager.paint(RepaintManager.java:1249)\n\tat javax.swing.JComponent._paintImmediately(JComponent.java:5171)\n\tat javax.swing.JComponent.paintImmediately(JComponent.java:4982)\n\tat javax.swing.RepaintManager$3.run(RepaintManager.java:808)\n\tat javax.swing.RepaintManager$3.run(RepaintManager.java:796)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:796)\n\tat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:769)\n\tat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:718)\n\tat javax.swing.RepaintManager.access$1100(RepaintManager.java:62)\n\tat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1677)\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:312)\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:745)\n\tat java.awt.EventQueue.access$300(EventQueue.java:103)\n\tat java.awt.EventQueue$3.run(EventQueue.java:706)\n\tat java.awt.EventQueue$3.run(EventQueue.java:704)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:715)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:242)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:161)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:150)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:146)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:138)\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:91)\n\n", 
            "markdown_message": "<p>After rebooting my box I am experiencing difficulties reproducing the presented finding. My apologies but I will find out why it worked in the first place. Got the state file and stuff.</p>\n\n<p>I obtained these stack traces from stderr, could the bugs down here have any affiliation with the presented findings and forced the application to an unstable state somehow?</p>\n\n<p>If I know more I will let you know</p>\n<pre class=\"highlight plaintext\"><code>at javax.swing.plaf.nimbus.NimbusStyle.getBackgroundPainter(NimbusStyle.java:720)\nat javax.swing.plaf.nimbus.SynthPainterImpl.paintBackground(SynthPainterImpl.java:99)\nat javax.swing.plaf.nimbus.SynthPainterImpl.paintPanelBackground(SynthPainterImpl.java:957)\nat javax.swing.plaf.synth.SynthPanelUI.update(SynthPanelUI.java:155)\nat javax.swing.JComponent.paintComponent(JComponent.java:770)\nat javax.swing.JComponent.paint(JComponent.java:1046)\nat javax.swing.JComponent.paintToOffscreen(JComponent.java:5223)\nat javax.swing.BufferStrategyPaintManager.paint(BufferStrategyPaintManager.java:295)\nat javax.swing.RepaintManager.paint(RepaintManager.java:1249)\nat javax.swing.JComponent._paintImmediately(JComponent.java:5171)\nat javax.swing.JComponent.paintImmediately(JComponent.java:4982)\nat javax.swing.RepaintManager$3.run(RepaintManager.java:808)\nat javax.swing.RepaintManager$3.run(RepaintManager.java:796)\nat java.security.AccessController.doPrivileged(Native Method)\nat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)\nat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:796)\nat javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:769)\nat javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:718)\nat javax.swing.RepaintManager.access$1100(RepaintManager.java:62)\nat javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1677)\nat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:312)\nat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:745)\nat java.awt.EventQueue.access$300(EventQueue.java:103)\nat java.awt.EventQueue$3.run(EventQueue.java:706)\nat java.awt.EventQueue$3.run(EventQueue.java:704)\nat java.security.AccessController.doPrivileged(Native Method)\nat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)\nat java.awt.EventQueue.dispatchEvent(EventQueue.java:715)\nat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:242)\nat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:161)\nat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:150)\nat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:146)\nat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:138)\nat java.awt.EventDispatchThread.run(EventDispatchThread.java:91)\n</code></pre>\n<p>java.lang.ClassCastException: javax.swing.plaf.nimbus.DerivedColor$UIResource cannot be cast to javax.swing.Painter<br>\n    at javax.swing.plaf.nimbus.NimbusStyle.getBackgroundPainter(NimbusStyle.java:720)<br>\n    at javax.swing.plaf.nimbus.SynthPainterImpl.paintBackground(SynthPainterImpl.java:99)<br>\n    at javax.swing.plaf.nimbus.SynthPainterImpl.paintPanelBackground(SynthPainterImpl.java:957)<br>\n    at javax.swing.plaf.synth.SynthPanelUI.update(SynthPanelUI.java:155)<br>\n    at javax.swing.JComponent.paintComponent(JComponent.java:770)<br>\n    at javax.swing.JComponent.paint(JComponent.java:1046)<br>\n    at javax.swing.JComponent.paintToOffscreen(JComponent.java:5223)<br>\n    at javax.swing.BufferStrategyPaintManager.paint(BufferStrategyPaintManager.java:295)<br>\n    at javax.swing.RepaintManager.paint(RepaintManager.java:1249)<br>\n    at javax.swing.JComponent._paintImmediately(JComponent.java:5171)<br>\n    at javax.swing.JComponent.paintImmediately(JComponent.java:4982)<br>\n    at javax.swing.RepaintManager$3.run(RepaintManager.java:808)<br>\n    at javax.swing.RepaintManager$3.run(RepaintManager.java:796)<br>\n    at java.security.AccessController.doPrivileged(Native Method)<br>\n    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)<br>\n    at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:796)<br>\n    at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:769)<br>\n    at javax.swing.RepaintManager.prePaintDirtyRegions(RepaintManager.java:718)<br>\n    at javax.swing.RepaintManager.access$1100(RepaintManager.java:62)<br>\n    at javax.swing.RepaintManager$ProcessingRunnable.run(RepaintManager.java:1677)<br>\n    at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:312)<br>\n    at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:745)<br>\n    at java.awt.EventQueue.access$300(EventQueue.java:103)<br>\n    at java.awt.EventQueue$3.run(EventQueue.java:706)<br>\n    at java.awt.EventQueue$3.run(EventQueue.java:704)<br>\n    at java.security.AccessController.doPrivileged(Native Method)<br>\n    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)<br>\n    at java.awt.EventQueue.dispatchEvent(EventQueue.java:715)<br>\n    at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:242)<br>\n    at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:161)<br>\n    at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:150)<br>\n    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:146)<br>\n    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:138)<br>\n    at java.awt.EventDispatchThread.run(EventDispatchThread.java:91)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1332558, 
            "genius_execution_id": null
        }, 
        {
            "attachments": [
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/139/192/0da87a3fadab9072db0d6d59a73a5f836305a858/jsbeautifier-out.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2IMG7FL4%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T224612Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDHPJ1yKYcYWYj%2F9LNiK3AzyAo4x%2BPxakyZiJlRkk9M72fGqw4SrPH5qRWwrCEzUaWrTNXkqpALXRS4Q9wnQBmHJ21tNzuwZNzHm1q41ngqtlwpJP4F8P9DJ8J86pGXCj5zxKl27Xdyrp0yXro5KHbNg%2FMI31tP3CPajYLHppvbpzE4HgT6%2BgX56T9THRU9i0iPR2sPERJ5V8T5PqNGlaAxkIH%2BcDEYPwwdeod1TBqaVJeTbSTUwavuHFWj8I9aJc5ijS9LvHWHNGB5FXbFATn8ghcjqVzqIroA9nxNuPJ2vxIaAor9r4p%2Fy1e5TWqKKtSEWtQu68kIwE8NsRg80HQRso%2BCvRE8ecUk4iHSIS0Q3jmxteI2SvJRO0qZ3QaRjTDGmiTz95bj%2F%2F4H%2BR7Jy4C8RK9HLXC%2BPnDh%2FazH%2BgKdjL01iP%2BgzbXEnOyhh3IA5Imss19EK%2B2EWDifocttquTy%2F9L1a3OBtcs43O1R7Q7IURroixlPAhRunZI2Z9MyZSlDzcJsSgY9uPguXfm%2BdDi6ysAHwhyXucVtSiReGyNvDkzSArwNHacFF2yzh47gdSbs3NLHHvBIWOzk4ozBhf5yrOj2mTit4ouKem4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=310c0129ca9aa6d7aeda0835fef05ea3680d7c39c22c5312fb6f715e5ea3616d", 
                    "type": "text/plain", 
                    "id": 139192, 
                    "filename": "jsbeautifier-out.txt"
                }
            ], 
            "automated_response": false, 
            "created_at": "2016-12-01T04:05:41.734Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-01T04:05:41.734Z", 
            "actor": {
                "username": "jelmer", 
                "url": "/jelmer", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/012/636/f409a32cbb16f6a9253d020c6c0b5ba4b1c5846c_medium.jpg?1527112184"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "portswigger", 
            "message": "I got good news! I managed to reproduce the vulnerability after reloading my state file. When I realized it was an option within my configuration I pinpointed it to user options and figured it's the JS Beautifier bapp causing this vulnerability.\n\nAfter decompiling the processHttpMessage function we get the following\n\n```\n    public void processHttpMessage(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo)\n    {\n        String toolName = mCallbacks.getToolName(toolFlag);\n        toolName = toolName.toLowerCase();\n        if(!messageIsRequest && (toolName.indexOf(\"proxy\") > -1 && beautifierPreferences.isAutomaticInProxy() || beautifierPreferences.isAutomaticInAll()))\n            try\n            {\n                URL uUrl = helpers.analyzeRequest(messageInfo).getUrl();\n                if(beautifierPreferences.isDebugMode())\n                    stdout.println((new StringBuilder()).append(\"Incoming URL: \").append(uUrl.toString()).toString());\n                if(!beautifierPreferences.isRestrictedToScope() || mCallbacks.isInScope(uUrl))\n                {\n                    IHttpRequestResponse newMessageInfo[] = new IHttpRequestResponse[1];\n                    newMessageInfo[0] = messageInfo;\n                    JSBeautifierFunctions jsBeautifierFunctions = new JSBeautifierFunctions(mCallbacks, beautifierPreferences);\n                    if(beautifierPreferences.isDebugMode())\n                        stdout.println((new StringBuilder()).append(\"Begin beautifying [In Scope]: \").append(uUrl.toString()).toString());\n                    jsBeautifierFunctions.beautifyIt(newMessageInfo, true, 2);\n                    if(beautifierPreferences.isDebugMode())\n                        stdout.println((new StringBuilder()).append(\"End beautifying [In Scope]: \").append(uUrl.toString()).toString());\n                }\n            }\n            catch(Exception e)\n            {\n                e.printStackTrace();\n            }\n    }\n```\nThere it hints to beautifierPreferences.isDebugMode(). If we look in the tab there is indeed a debug mode. After turning it on and configuring it to log to a file it is quite clear in the order of messages that this function is asynchronously handling the packages bursted and manipulates the responses. I attached the output and would propose we share this report with the BurpSuiteJSBeautifier team.", 
            "markdown_message": "<p>I got good news! I managed to reproduce the vulnerability after reloading my state file. When I realized it was an option within my configuration I pinpointed it to user options and figured it&#39;s the JS Beautifier bapp causing this vulnerability.</p>\n\n<p>After decompiling the processHttpMessage function we get the following</p>\n<pre class=\"highlight plaintext\"><code>    public void processHttpMessage(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo)\n    {\n        String toolName = mCallbacks.getToolName(toolFlag);\n        toolName = toolName.toLowerCase();\n        if(!messageIsRequest &amp;&amp; (toolName.indexOf(&quot;proxy&quot;) &gt; -1 &amp;&amp; beautifierPreferences.isAutomaticInProxy() || beautifierPreferences.isAutomaticInAll()))\n            try\n            {\n                URL uUrl = helpers.analyzeRequest(messageInfo).getUrl();\n                if(beautifierPreferences.isDebugMode())\n                    stdout.println((new StringBuilder()).append(&quot;Incoming URL: &quot;).append(uUrl.toString()).toString());\n                if(!beautifierPreferences.isRestrictedToScope() || mCallbacks.isInScope(uUrl))\n                {\n                    IHttpRequestResponse newMessageInfo[] = new IHttpRequestResponse[1];\n                    newMessageInfo[0] = messageInfo;\n                    JSBeautifierFunctions jsBeautifierFunctions = new JSBeautifierFunctions(mCallbacks, beautifierPreferences);\n                    if(beautifierPreferences.isDebugMode())\n                        stdout.println((new StringBuilder()).append(&quot;Begin beautifying [In Scope]: &quot;).append(uUrl.toString()).toString());\n                    jsBeautifierFunctions.beautifyIt(newMessageInfo, true, 2);\n                    if(beautifierPreferences.isDebugMode())\n                        stdout.println((new StringBuilder()).append(&quot;End beautifying [In Scope]: &quot;).append(uUrl.toString()).toString());\n                }\n            }\n            catch(Exception e)\n            {\n                e.printStackTrace();\n            }\n    }\n</code></pre>\n<p>There it hints to beautifierPreferences.isDebugMode(). If we look in the tab there is indeed a debug mode. After turning it on and configuring it to log to a file it is quite clear in the order of messages that this function is asynchronously handling the packages bursted and manipulates the responses. I attached the output and would propose we share this report with the BurpSuiteJSBeautifier team.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1332878, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-01T09:45:06.569Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-01T09:45:06.569Z", 
            "actor": {
                "username": "albinowax", 
                "url": "/albinowax", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/056/414/bce94a05fd388840e1434de719d1f6131c4bad96_medium.png?1455907114"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "portswigger", 
            "message": "Thanks for the report. As this is an issue with a BApp it's not in scope for the bounty, but I'll pass this on to the JSBeautifier developer and hopefully we can get it fixed.", 
            "markdown_message": "<p>Thanks for the report. As this is an issue with a BApp it&#39;s not in scope for the bounty, but I&#39;ll pass this on to the JSBeautifier developer and hopefully we can get it fixed.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1333309, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-01T10:22:54.472Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-06T22:30:35.365Z", 
            "actor": {
                "username": "albinowax", 
                "url": "/albinowax", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/056/414/bce94a05fd388840e1434de719d1f6131c4bad96_medium.png?1455907114"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "portswigger", 
            "message": "Could you report this directly to \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588? Thanks.", 
            "markdown_message": "<p>Could you report this directly to \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588? Thanks.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1333400, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-01T12:35:34.055Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-01T12:35:34.055Z", 
            "actor": {
                "username": "albinowax", 
                "url": "/albinowax", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/056/414/bce94a05fd388840e1434de719d1f6131c4bad96_medium.png?1455907114"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_title": "JSBeautifier BApp: Race condition leads to memory disclosure", 
                "old_title": "Race condition leads to memory leak in synchronized processing of specific threads"
            }, 
            "team_handle": "portswigger", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportTitleUpdated", 
            "id": 1333609, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "jelmer", 
                "url": "/jelmer"
            }, 
            "created_at": "2016-12-01T14:26:12.106Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-01T14:26:12.106Z", 
            "actor": {
                "username": "albinowax", 
                "url": "/albinowax", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/056/414/bce94a05fd388840e1434de719d1f6131c4bad96_medium.png?1455907114"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "portswigger", 
            "message": "At the developer's request, we've resolved this issue by revoking JSBeautifier. \n\nSince the vulnerability is in a user extension this isn't eligible for a cash bounty, but it's still an excellent report so we'd love to send you some swag. We look forward to further reports from you!", 
            "markdown_message": "<p>At the developer&#39;s request, we&#39;ve resolved this issue by revoking JSBeautifier. </p>\n\n<p>Since the vulnerability is in a user extension this isn&#39;t eligible for a cash bounty, but it&#39;s still an excellent report so we&#39;d love to send you some swag. We look forward to further reports from you!</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1333832, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "jelmer", 
                "url": "/jelmer"
            }, 
            "created_at": "2016-12-01T14:26:47.594Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-01T14:26:47.594Z", 
            "actor": {
                "url": "/portswigger", 
                "profile": {
                    "name": "PortSwigger Web Security"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/252/818bdfc580e8978b40690f534077d29f49a99cb2_medium.?1473435773"
                }
            }, 
            "team_handle": "portswigger", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::SwagAwarded", 
            "id": 1333833, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-01T14:35:08.015Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-01T14:35:08.015Z", 
            "actor": {
                "url": "/portswigger", 
                "profile": {
                    "name": "PortSwigger Web Security"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/015/252/818bdfc580e8978b40690f534077d29f49a99cb2_medium.?1473435773"
                }
            }, 
            "team_handle": "portswigger", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::NotEligibleForBounty", 
            "id": 1333854, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-01T16:37:45.610Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-01T16:37:45.610Z", 
            "actor": {
                "username": "jelmer", 
                "url": "/jelmer", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/012/636/f409a32cbb16f6a9253d020c6c0b5ba4b1c5846c_medium.jpg?1527112184"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "portswigger", 
            "first_to_agree": true, 
            "message": "I didn't know we would end up in a BApp plugin either. I suppose its a good idea to uninstall them before testing Burp itself. It has been fun to track this bug down and I am sure this type of vulnerability is in other places as well so I can reuse the server. Thanks for the swag", 
            "markdown_message": "<p>I didn&#39;t know we would end up in a BApp plugin either. I suppose its a good idea to uninstall them before testing Burp itself. It has been fun to track this bug down and I am sure this type of vulnerability is in other places as well so I can reuse the server. Thanks for the swag</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1334156, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-01T16:53:39.710Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-01T16:53:39.710Z", 
            "actor": {
                "username": "albinowax", 
                "url": "/albinowax", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/056/414/bce94a05fd388840e1434de719d1f6131c4bad96_medium.png?1455907114"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "portswigger", 
            "message": "Enjoy! I've just added a warning note about disabling plugins to the bounty brief, to hopefully spare some other testers from being lead astray.\n\nI'll approve disclosure in a week or so, to give the revocation time to take effect.", 
            "markdown_message": "<p>Enjoy! I&#39;ve just added a warning note about disabling plugins to the bounty brief, to hopefully spare some other testers from being lead astray.</p>\n\n<p>I&#39;ll approve disclosure in a week or so, to give the revocation time to take effect.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1334205, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-07T10:25:57.846Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-07T10:25:57.846Z", 
            "actor": {
                "username": "albinowax", 
                "url": "/albinowax", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/056/414/bce94a05fd388840e1434de719d1f6131c4bad96_medium.png?1455907114"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "portswigger", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1346980, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-07T10:25:57.884Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-07T10:25:57.884Z", 
            "actor": {
                "username": "albinowax", 
                "url": "/albinowax", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/056/414/bce94a05fd388840e1434de719d1f6131c4bad96_medium.png?1455907114"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "portswigger", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1346981, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "jelmer", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/jelmer", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/012/636/425d501228f0b6c000136257594ad0a829d84996_small.jpg?1527112184"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 2, 
        "name": "Memory Corruption - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -60934107.018539466, 
    "disclosed_at": "2016-12-07T10:25:57.869Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/187134", 
    "created_at": "2016-12-01T00:10:48.976Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"description\">Description</h1>\n\n<p>If an attacker builds up multiple connections which will be released at the same time having a response Content-Length of 0, leaving out the response Content-Length header or having a higher Content-Length than the actual response while insinuating starting a doc-type then the stacked up connections will interfere with each other and, besides other weird behavior, will scramble the response buffers through each other.</p>\n\n<p>The following behaviors have been observed.</p>\n\n<ul>\n<li>Burp strips the content completely and comes back with only the headers</li>\n<li>Buffers between the requests get scrambled up leading to content leaking between them</li>\n<li>The original byte sequence in the buffer gets scrambled</li>\n<li>Characters will get replaced with new characters</li>\n</ul>\n\n<h1 id=\"reproduction\">Reproduction</h1>\n\n<p>In order to find this vulnerability I wrote a proof of concept HTTP server. This server will listen on 127.0.0.1:8000 and when opening <a title=\"http://127.0.0.1:8000/memspy\" href=\"/redirect?signature=873984640576ba2715c8cb89860c140ace76a8ff&amp;url=http%3A%2F%2F127.0.0.1%3A8000%2Fmemspy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://127.0.0.1:8000/memspy</span><i class=\"icon-external-link\"></i></a> the browser will build up open requests to the server which it will not release until a defined amount of requests are met. Then when the satisfied amount of open connections have been built up the server it will release them simultaneously.</p>\n\n<p>The response the server will reply with to all these connections looks as follows:</p>\n<pre class=\"highlight plaintext\"><code>HTTP/1.1 200 OK\nContent-Length: -12000\nMeta:%s:%d\nContent-Type: text/html\n\n&lt;![a-z0-9]{1024}&gt;\n</code></pre>\n<p>With [a-z0-9]{1024} I mean it will repeat 1 of the characters in the set a-z, 0-9, 1024 times. This character will be randomized between requests to easily distinguish between different responses. The Meta header will contain the character which was chosen in this randomization process and the batchId. A batch just means a set of requests being released at the same time.</p>\n\n<p>The file spy.html will perform the requests and display the result on the screen so the result can be analyzed from the browser. Besides that there is a kill-switch for the threads. If you put &#39;killall=true&#39; in the JavaScript console it will stop creating new new threads which can be useful.<br>\nThe variable threads in the JavaScript must always correspond the connLimit int in Go. This regulates how many threads there should be opened. The vulnerability can be successfully triggered with as little as 4 threads and 16 characters per thread. Lower limits have not been tested.</p>\n\n<h1 id=\"impact\">Impact</h1>\n\n<p>With further improvement an attacker can reliably eavesdrop on a victims browsing data if the attacker is able to lure the victim to it&#39;s server so the required connections can be established.<br>\nThe response data being manipulated is also a concerning thing to note. An attacker can deliberately hold up a bunch of requests and trigger this behavior which will scramble the response and with it valuable client-side protection will be weakened.<br>\nI was unable to verify the possibility of recovering the internal memory layout remotely which could assist in circumventing ASLR but I imagine this is not too weird to consider as a possibility considering the nature of this vuln.</p>\n\n<h1 id=\"discovery\">Discovery</h1>\n\n<p>I was testing out the Collaborator server and due to a lack of input points I started doing random stuff. That&#39;s when I suddenly noticed that when you put the intruder on 100 threads the response would slightly differentiate every so many requests. Quite puzzled as to how this could happen I tracked down the syscalls emitted by the Burp Collaborator server which didn&#39;t reveal any anomalies.</p>\n\n<p>From there I verified that it wasn&#39;t in the server so I figured it must have been something within the client processing behavior. The Collaborator server did not make use of Gzip compression or something somewhat logical which may have caused this behavior so I figured it must be a memory leak or something in the way multiple incoming requests are being handled.</p>\n\n<p>From there I built a HTTP server with the capability to hold and release multiple requests but it didn&#39;t work until I copy/pased the original response from the Collaborator server as response in my server. From there it was quite clear the Content-Length was wrongly specified and there was a need for the response to start with &quot;&lt;!&quot; in order to trigger it.</p>\n\n<p>So, the final conclusion is, when multiple threads are being processed and the content-length has to be guessed and there is some form of doctype specification present, burp will manipulate something internally which should not be touched by multiple threads at the same time. I don&#39;t have the source but that is my best guess to look for this vulnerability.</p>\n\n<p>I added some screenshots</p>\n\n<ol>\n<li>Shows how the responses from the Collaborator server differentiated</li>\n<li>Shows how the syscall emitted by the Collaborator server was correct but incorrectly interpreted by Burp</li>\n<li>Shows the first successes with the HTTP server when it was able to hold and burst requests</li>\n<li>First passive eavesdropping on memory</li>\n<li>Substantial amounts of internal memory leaking</li>\n<li>The final PoC server in action. Every column should be presented as the character preceding it enclosed by &quot;&lt;!&quot; and &quot;&gt;&quot;. Burp mixes the buffers around. The other 2 digits are the batchId and pckt length</li>\n<li>The PoC executing not through burp to illustrate what the server is actually sending</li>\n</ol>\n\n<p>Some recommendations while using the server:<br>\nYou may have to try a couple of times before it works properly. It is important to first start the server and after that open <a title=\"http://127.0.0.1:8000/memspy\" href=\"/redirect?signature=873984640576ba2715c8cb89860c140ace76a8ff&amp;url=http%3A%2F%2F127.0.0.1%3A8000%2Fmemspy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://127.0.0.1:8000/memspy</span><i class=\"icon-external-link\"></i></a> with the browser. The server waits specifically for 20 open connections right now and then beams them out simultaneously. If the browser naively sent a request for favicon.ico or something there will be a request too many.<br>\nspy.html must be in the same folder as </p>\n\n<p>When the server is running and you have connected with the memspy endpoint it will look something like this:</p>\n<pre class=\"highlight plaintext\"><code>[system@localhost pocs]$ go run burp-pckt-burst-memspy.go \n0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F.10.11.12.13.X0.1.2.3.4.^Csignal: interrupt\n</code></pre>\n<p>0.1.2.3, etc represent the request number in hexadecimal.<br>\nX means the wanted amount of open connections have been achieved and the responses are being flushed</p>\n", 
    "severity_rating": "high", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://portswigger.net", 
            "about": "Burp Suite is the leading software for web security testing", 
            "twitter_handle": "Burp_Suite", 
            "name": "PortSwigger Web Security"
        }, 
        "handle": "portswigger", 
        "url": "https://hackerone.com/portswigger", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/015/252/733642d71ddc1da5f0085d91a465ec94b901834a_small.?1473435773", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/015/252/818bdfc580e8978b40690f534077d29f49a99cb2_medium.?1473435773"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 15252, 
        "default_currency": "usd"
    }, 
    "is_published": false
}