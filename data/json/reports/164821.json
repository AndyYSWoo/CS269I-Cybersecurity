{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-11-19T20:09:11.749Z", 
    "voters": [
        "sp1d3rs", 
        "bugdiscloseguys", 
        "eveeez", 
        "craxerbikash", 
        "666reda", 
        "smit", 
        "bigbug", 
        "spetr0x", 
        "dyabla", 
        "yazzikage"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 164821, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "OX Guard: DOM Based Cross-Site Scripting (#2)", 
    "is_member_of_team?": null, 
    "vote_count": 10, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-12-19T20:09:11.833Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$500", 
    "attachments": [
        {
            "file_name": "xss.png", 
            "type": "image/png", 
            "id": 116282, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/116/282/cf93d6b101f8bb9fdbe7d209436be43f292c26e6/xss.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ2SVVFJ4K%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T222839Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA4aDHbUi43kCnkCH8ghLCK3A1d0D7VWgJRDZWkdXXQGdmf7n%2FMcJt3uTEwb6Hdinq%2BFBbOAPOTsDxxrJ44I1M0GsX5wZenJPL8PevI%2FkbL9IqT6R%2BJKEKlPqPM6LpUT14hZkERpNFrQjbQc8QQ%2BGLJrYv6NGh3Ip0gK9gXfS%2BBt4RVWsZtku7hv1GxjVLrVN4tDuBx9kVUepW9naK5%2F0oXZzGIIp6Gjh%2FIKSsk58VEBKjC8XaVYCB%2BOEny5LgjoqjGxQtdacfYhOkVvkddEIug%2BxqJX03QrdlzYBPmNTl%2FPYt%2B7Ia6XenfHJpLptcsNwDKANRyeTTV%2FG3g%2BOCXLUeY4exATzHTwdvoYqOvrt5wMz9qaQRoRKK%2BUjVv5ctpYJvTH%2FMcrqKT%2Bat0Vu5%2B29B4mQPTT0FWbwQNEZv9s2WUcZfFK4nwDe%2FbWVaTYUyESNo3P9MBzjTGlE3RUSHfTIaws9cxbq%2B26X0Us8FyKWbfQU0Wz7XFi79Hu7vzT0q43xcUGempz37db7hbAD8s5J3Yuqly6EYzpKQo3hgzH0paY8Y8q0cEeQcN483KhHSXRw2GkwLMg8vEagxezp9Qvun6sYzBWVKsCvy4ohp2m4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=433aa2ccad1cd3247828b744ed4978083ddee1b879cdd01c3bbcb748374c107e"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-09-05T09:12:12.426Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-05T09:12:12.426Z", 
            "actor": {
                "username": "mheiland", 
                "url": "/mheiland", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "open-xchange", 
            "message": "Thanks for the report, we're looking into it.", 
            "markdown_message": "<p>Thanks for the report, we&#39;re looking into it.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1173678, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "dejavuln", 
                "url": "/dejavuln"
            }, 
            "created_at": "2016-09-25T12:26:31.281Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-25T12:26:31.281Z", 
            "actor": {
                "username": "mheiland", 
                "url": "/mheiland", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "open-xchange", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1214817, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-09-26T08:27:47.258Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-09-26T08:27:47.258Z", 
            "actor": {
                "url": "/open-xchange", 
                "profile": {
                    "name": "Open-Xchange"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/906/b7c0771c5edfbd0774f7209e493699e39f5cb695_medium.?1454083837"
                }
            }, 
            "team_handle": "open-xchange", 
            "bounty_amount": "500.0", 
            "collaborator": {
                "username": "dejavuln", 
                "url": "/dejavuln"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 1215682, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-19T20:09:11.783Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-19T20:09:11.783Z", 
            "actor": {
                "username": "dejavuln", 
                "url": "/dejavuln", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/045/064/5981b4f8a64f2637b643f797be2e18f302ce9875_medium.png?1457363129"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "open-xchange", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2168842, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-12-19T20:09:13.753Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-12-19T20:09:13.753Z", 
            "actor": {
                "url": "/open-xchange", 
                "profile": {
                    "name": "Open-Xchange"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/906/b7c0771c5edfbd0774f7209e493699e39f5cb695_medium.?1454083837"
                }
            }, 
            "team_handle": "open-xchange", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2236071, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "dejavuln", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/dejavuln", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/045/064/555bf3cfde9b926ac3540de3f4acc94325696e05_small.png?1457363129"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 60, 
        "name": "Cross-site Scripting (XSS) - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -30421167.634888835, 
    "disclosed_at": "2017-12-19T20:09:13.712Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/164821", 
    "created_at": "2016-08-31T19:08:42.136Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h2 id=\"summary\">Summary</h2>\n\n<p>OX Guard&#39;s &quot;Guest Reader&quot; is vulnerable to DOM Based XSS. </p>\n\n<p>While this report is closely related to <a href=\"/reports/158853\">#158853</a>, it is not a duplicate. I&#39;ve had a look at the code introduced by commit 7fdbd307662f0041ed5e45b2f73c6530b79c6124, which I believe was supposed to protect against <a href=\"/reports/158853\">#158853</a>. Today&#39;s report describes how to bypass this protection in order to exploit the original vulnerability with identical ease and impact.</p>\n\n<p>The vulnerable parameter is still &quot;templid&quot;. The reader.js script (see below) takes the parameter&#39;s value and injects it into the page/DOM without encoding or properly sanitizing it first.  </p>\n\n<h2 id=\"poc\">PoC:</h2>\n<pre class=\"highlight plaintext\"><code>https://sandbox.open-xchange.com/guard/reader/reader.html?templid=1%27%22%3E%3Cscript%3Ealert%28%27XSS%20@%20%27%2bdocument.domain%29%3C%2fscript%3E\n</code></pre>\n<p><a href=\"#\" class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"xss.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/116/282/cf93d6b101f8bb9fdbe7d209436be43f292c26e6/xss.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ2SVVFJ4K%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T222839Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDHbUi43kCnkCH8ghLCK3A1d0D7VWgJRDZWkdXXQGdmf7n%2FMcJt3uTEwb6Hdinq%2BFBbOAPOTsDxxrJ44I1M0GsX5wZenJPL8PevI%2FkbL9IqT6R%2BJKEKlPqPM6LpUT14hZkERpNFrQjbQc8QQ%2BGLJrYv6NGh3Ip0gK9gXfS%2BBt4RVWsZtku7hv1GxjVLrVN4tDuBx9kVUepW9naK5%2F0oXZzGIIp6Gjh%2FIKSsk58VEBKjC8XaVYCB%2BOEny5LgjoqjGxQtdacfYhOkVvkddEIug%2BxqJX03QrdlzYBPmNTl%2FPYt%2B7Ia6XenfHJpLptcsNwDKANRyeTTV%2FG3g%2BOCXLUeY4exATzHTwdvoYqOvrt5wMz9qaQRoRKK%2BUjVv5ctpYJvTH%2FMcrqKT%2Bat0Vu5%2B29B4mQPTT0FWbwQNEZv9s2WUcZfFK4nwDe%2FbWVaTYUyESNo3P9MBzjTGlE3RUSHfTIaws9cxbq%2B26X0Us8FyKWbfQU0Wz7XFi79Hu7vzT0q43xcUGempz37db7hbAD8s5J3Yuqly6EYzpKQo3hgzH0paY8Y8q0cEeQcN483KhHSXRw2GkwLMg8vEagxezp9Qvun6sYzBWVKsCvy4ohp2m4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=433aa2ccad1cd3247828b744ed4978083ddee1b879cdd01c3bbcb748374c107e\" data-attachment-type=\"image/png\"><img src=\"https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/116/282/cf93d6b101f8bb9fdbe7d209436be43f292c26e6/xss.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQ2SVVFJ4K%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20181206T222839Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=FQoGZXIvYXdzEA4aDHbUi43kCnkCH8ghLCK3A1d0D7VWgJRDZWkdXXQGdmf7n%2FMcJt3uTEwb6Hdinq%2BFBbOAPOTsDxxrJ44I1M0GsX5wZenJPL8PevI%2FkbL9IqT6R%2BJKEKlPqPM6LpUT14hZkERpNFrQjbQc8QQ%2BGLJrYv6NGh3Ip0gK9gXfS%2BBt4RVWsZtku7hv1GxjVLrVN4tDuBx9kVUepW9naK5%2F0oXZzGIIp6Gjh%2FIKSsk58VEBKjC8XaVYCB%2BOEny5LgjoqjGxQtdacfYhOkVvkddEIug%2BxqJX03QrdlzYBPmNTl%2FPYt%2B7Ia6XenfHJpLptcsNwDKANRyeTTV%2FG3g%2BOCXLUeY4exATzHTwdvoYqOvrt5wMz9qaQRoRKK%2BUjVv5ctpYJvTH%2FMcrqKT%2Bat0Vu5%2B29B4mQPTT0FWbwQNEZv9s2WUcZfFK4nwDe%2FbWVaTYUyESNo3P9MBzjTGlE3RUSHfTIaws9cxbq%2B26X0Us8FyKWbfQU0Wz7XFi79Hu7vzT0q43xcUGempz37db7hbAD8s5J3Yuqly6EYzpKQo3hgzH0paY8Y8q0cEeQcN483KhHSXRw2GkwLMg8vEagxezp9Qvun6sYzBWVKsCvy4ohp2m4AU%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=433aa2ccad1cd3247828b744ed4978083ddee1b879cdd01c3bbcb748374c107e\" class=\"markdown-inline-image\"></a></p>\n\n<h2 id=\"vulnerable-script-code\">Vulnerable script/code:</h2>\n<pre class=\"highlight plaintext\"><code>templid = getURLParameter(&quot;templid&quot;);\nif (templid == null || isNaN(parseInt(templid))) {   // If no clean template ID, see if we have a default from config.js\n[...]\n}\nif (templid !== null) {\n    $(&#39;head&#39;).append(&#39;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./templates/&#39; + templid + &#39;-style.css&quot;&gt;&#39;);\n}\n</code></pre>\n<h2 id=\"details\">Details</h2>\n\n<p>Quick comparison with the previous code:</p>\n<pre class=\"highlight plaintext\"><code>$ git diff b67aed12e6184cd06e24253154eab83925ff1fc7 7fdbd307662f0041ed5e45b2f73c6530b79c6124\n\n[...]\n-if (templid == null) {   // If no template ID, see if we have a default from config.js\n+if (templid == null || isNaN(parseInt(templid))) {   // If no clean template ID, see if we have a default from config.js\n[...]\n</code></pre>\n<p><code>isNaN(parseInt(templid))</code> was apparently added to check whether the <code>templid</code> variable contains a number, and nothing else. Expected behavior seems to be that only a &quot;clean&quot; number can be parsed by <code>parseInt()</code>, which would otherwise return <code>NaN</code>, causing <code>isNaN()</code> to return <code>true</code>, leading <code>templid</code> to be overwritten with a safe value inside the If statement. </p>\n\n<p>The problem with this approach is that <code>parseInt()</code> does not simply attempt to convert the entire supplied parameter to an integer. Instead, as the name suggests, <code>parseInt()</code> tries to <strong>parse</strong> the parameter. Quote from <a href=\"/redirect?signature=7b1dbc1c7f8b43e19f37f3f8e0a5c6261d179624&amp;url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FparseInt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt</span><i class=\"icon-external-link\"></i></a>:</p>\n\n<blockquote>\n<p><strong><u>Return value</u></strong><br>\nAn integer number parsed from the given string. If the <strong>first</strong> character cannot be converted to a number, NaN is returned.</p>\n</blockquote>\n\n<p>Consequently, any HTML/JS code preceded by a number will pass the <code>isNaN(parseInt(templid))</code> check.</p>\n\n<p>Examples:</p>\n<pre class=\"highlight plaintext\"><code>&gt; parseInt(&quot;Hello&quot;);\nNaN\n\n&gt; parseInt(&quot;4ello&quot;);\n4\n\n&gt; isNaN(parseInt(&quot;Hello&quot;));\ntrue\n\n&gt; isNaN(parseInt(&quot;4ello&quot;));\nfalse\n</code></pre>", 
    "vulnerability_information": "## Summary\n\nOX Guard's \"Guest Reader\" is vulnerable to DOM Based XSS. \n\nWhile this report is closely related to #158853, it is not a duplicate. I've had a look at the code introduced by commit 7fdbd307662f0041ed5e45b2f73c6530b79c6124, which I believe was supposed to protect against #158853. Today's report describes how to bypass this protection in order to exploit the original vulnerability with identical ease and impact.\n\nThe vulnerable parameter is still \"templid\". The reader.js script (see below) takes the parameter's value and injects it into the page/DOM without encoding or properly sanitizing it first.  \n\n## PoC:\n```\nhttps://sandbox.open-xchange.com/guard/reader/reader.html?templid=1%27%22%3E%3Cscript%3Ealert%28%27XSS%20@%20%27%2bdocument.domain%29%3C%2fscript%3E\n```\n{F116282}\n\n## Vulnerable script/code:\n\n```\ntemplid = getURLParameter(\"templid\");\nif (templid == null || isNaN(parseInt(templid))) {   // If no clean template ID, see if we have a default from config.js\n[...]\n}\nif (templid !== null) {\n    $('head').append('<link rel=\"stylesheet\" type=\"text/css\" href=\"./templates/' + templid + '-style.css\">');\n}\n```\n\n## Details\n\nQuick comparison with the previous code:\n\n```\n$ git diff b67aed12e6184cd06e24253154eab83925ff1fc7 7fdbd307662f0041ed5e45b2f73c6530b79c6124\n\n[...]\n-if (templid == null) {   // If no template ID, see if we have a default from config.js\n+if (templid == null || isNaN(parseInt(templid))) {   // If no clean template ID, see if we have a default from config.js\n[...]\n```\n\n`isNaN(parseInt(templid))` was apparently added to check whether the `templid` variable contains a number, and nothing else. Expected behavior seems to be that only a \"clean\" number can be parsed by `parseInt()`, which would otherwise return `NaN`, causing `isNaN()` to return `true`, leading `templid` to be overwritten with a safe value inside the If statement. \n\nThe problem with this approach is that `parseInt()` does not simply attempt to convert the entire supplied parameter to an integer. Instead, as the name suggests, `parseInt()` tries to **parse** the parameter. Quote from [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt):\n\n> **_Return value_**\n> An integer number parsed from the given string. If the **first** character cannot be converted to a number, NaN is returned.\n\nConsequently, any HTML/JS code preceded by a number will pass the `isNaN(parseInt(templid))` check.\n\nExamples:\n\n```\n> parseInt(\"Hello\");\nNaN\n\n> parseInt(\"4ello\");\n4\n\n> isNaN(parseInt(\"Hello\"));\ntrue\n\n> isNaN(parseInt(\"4ello\"));\nfalse\n```\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "http://www.open-xchange.com", 
            "about": "Creator of communication, collaboration and office productivity software for service providers", 
            "twitter_handle": "openexchange", 
            "name": "Open-Xchange"
        }, 
        "handle": "open-xchange", 
        "url": "https://hackerone.com/open-xchange", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/008/906/6dc9519916ca8b0b2db97220097e17a2584c3651_small.?1454083837", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/008/906/b7c0771c5edfbd0774f7209e493699e39f5cb695_medium.?1454083837"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 8906, 
        "default_currency": "usd"
    }, 
    "is_published": false
}