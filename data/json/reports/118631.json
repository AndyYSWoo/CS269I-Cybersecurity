{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": true, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-07-23T22:37:48.492Z", 
    "voters": [
        "bl4de", 
        "spam404", 
        "bogdantcaciuc", 
        "eveeez", 
        "r0p3", 
        "securitybreaker", 
        "null-byte", 
        "paulos_", 
        "japz", 
        "barakat", 
        "and 3 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "200.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 118631, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": null, 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "XSSI (Cross Site Script Inclusion)", 
    "is_member_of_team?": null, 
    "vote_count": 13, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-08-22T22:37:48.547Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$200", 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-02-24T23:22:52.754Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-02-24T23:22:52.754Z", 
            "actor": {
                "username": "coinbase2", 
                "url": "/coinbase2", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "Can you explain how exactly an attacker would be able to intercept the response from https://www.coinbase.com/pusher/auth?", 
            "markdown_message": "<p>Can you explain how exactly an attacker would be able to intercept the response from <a title=\"https://www.coinbase.com/pusher/auth\" href=\"/redirect?signature=4aa36022edc6e86b5eab02295b06e0ca101abe31&amp;url=https%3A%2F%2Fwww.coinbase.com%2Fpusher%2Fauth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.coinbase.com/pusher/auth</span><i class=\"icon-external-link\"></i></a>?</p>\n", 
            "type": "Activities::Comment", 
            "id": 811661, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-02-24T23:47:55.016Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-02-24T23:47:55.016Z", 
            "actor": {
                "username": "paulos_", 
                "url": "/paulos_", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/601/4588a51ca509a58d1c27bb823bebe9594409951c_medium.png?1502343645"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "@coinbase2 this will be helpful, I think: https://www.mbsd.jp/Whitepaper/xssi.pdf the UTF16BE , the proxy bug in Firefox and the IE bug leaks written in that paper will show how some browsers will be able to do that\n\nFor instance, in IE9 (example (B) in the paper): \n```javascript\n<script>window.onerror=function(err){alert(err)}</script>\n<script src=\"https://www.coinbase.com/accounts/549850166bb03f3a19000148/receive_address\" chartset=\"UTF-16BE\"></script>\n```\nwill get the address of that account. not a serious bug, but you get the idea. can simply be mitigated by including things like })while(1){ like Google does on its sensetive JSON replies to mess with the response and thus make it unparsable.\n\nThanks,", 
            "markdown_message": "<p><a href=\"/coinbase2\">@coinbase2</a> this will be helpful, I think: <a title=\"https://www.mbsd.jp/Whitepaper/xssi.pdf\" href=\"/redirect?signature=5a2150d7cff8d5ca0ff2126e5e734d6acae3f316&amp;url=https%3A%2F%2Fwww.mbsd.jp%2FWhitepaper%2Fxssi.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.mbsd.jp/Whitepaper/xssi.pdf</span><i class=\"icon-external-link\"></i></a> the UTF16BE , the proxy bug in Firefox and the IE bug leaks written in that paper will show how some browsers will be able to do that</p>\n\n<p>For instance, in IE9 (example (B) in the paper): </p>\n<pre class=\"highlight javascript\"><code><span class=\"o\">&lt;</span><span class=\"nx\">script</span><span class=\"o\">&gt;</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">onerror</span><span class=\"o\">=</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">){</span><span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)}</span><span class=\"o\">&lt;</span><span class=\"sr\">/script</span><span class=\"err\">&gt;\n</span><span class=\"o\">&lt;</span><span class=\"nx\">script</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"s2\">&quot;https://www.coinbase.com/accounts/549850166bb03f3a19000148/receive_address&quot;</span> <span class=\"nx\">chartset</span><span class=\"o\">=</span><span class=\"s2\">&quot;UTF-16BE&quot;</span><span class=\"o\">&gt;&lt;</span><span class=\"sr\">/script</span><span class=\"err\">&gt;\n</span></code></pre>\n<p>will get the address of that account. not a serious bug, but you get the idea. can simply be mitigated by including things like })while(1){ like Google does on its sensetive JSON replies to mess with the response and thus make it unparsable.</p>\n\n<p>Thanks,</p>\n", 
            "type": "Activities::Comment", 
            "id": 811727, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-02-25T23:53:52.897Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-02-25T23:53:52.897Z", 
            "actor": {
                "username": "coinbase2", 
                "url": "/coinbase2", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "I'm going to do an audit of our JSON endpoints and ensure that all cookie-authenticated JSON endpoints are accessible exclusively via the POST method (with CSRF protection enabled).\n\nThat should fix this entire class of vulnerabilities.\n", 
            "markdown_message": "<p>I&#39;m going to do an audit of our JSON endpoints and ensure that all cookie-authenticated JSON endpoints are accessible exclusively via the POST method (with CSRF protection enabled).</p>\n\n<p>That should fix this entire class of vulnerabilities.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 813453, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-25T08:41:54.791Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-25T08:41:54.791Z", 
            "actor": {
                "username": "paulos_", 
                "url": "/paulos_", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/601/4588a51ca509a58d1c27bb823bebe9594409951c_medium.png?1502343645"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "@coinbase2 ping.", 
            "markdown_message": "<p><a href=\"/coinbase2\">@coinbase2</a> ping.</p>\n", 
            "type": "Activities::Comment", 
            "id": 870648, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-25T18:28:14.627Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-25T18:28:14.627Z", 
            "actor": {
                "username": "coinbase2", 
                "url": "/coinbase2", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "The endpoint you pointed out is actually the only one I could find that could conceivably leak information. It has since been modified to use the POST method, which should fix the issue you reported.\n\nCan you confirm this resolves the report?\n", 
            "markdown_message": "<p>The endpoint you pointed out is actually the only one I could find that could conceivably leak information. It has since been modified to use the POST method, which should fix the issue you reported.</p>\n\n<p>Can you confirm this resolves the report?</p>\n", 
            "type": "Activities::Comment", 
            "id": 871390, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-03-25T21:34:23.828Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-25T21:34:23.828Z", 
            "actor": {
                "username": "paulos_", 
                "url": "/paulos_", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/601/4588a51ca509a58d1c27bb823bebe9594409951c_medium.png?1502343645"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "Yes. Fixed.", 
            "markdown_message": "<p>Yes. Fixed.</p>\n", 
            "type": "Activities::Comment", 
            "id": 871759, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "paulos_", 
                "url": "/paulos_"
            }, 
            "created_at": "2016-03-25T22:19:38.952Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-25T22:19:38.952Z", 
            "actor": {
                "username": "coinbase2", 
                "url": "/coinbase2", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 871837, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-03-25T22:22:31.901Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-03-25T22:22:31.901Z", 
            "actor": {
                "url": "/coinbase", 
                "profile": {
                    "name": "Coinbase"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/104/fd5bb1d22c531efe70f6594543d9e5685f08f4c5_medium.png?1395368444"
                }
            }, 
            "team_handle": "coinbase", 
            "bounty_amount": "200.0", 
            "collaborator": {
                "username": "paulos_", 
                "url": "/paulos_"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 871842, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-04-15T13:39:00.304Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-04-15T13:39:00.304Z", 
            "actor": {
                "username": "paulos_", 
                "url": "/paulos_", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/601/4588a51ca509a58d1c27bb823bebe9594409951c_medium.png?1502343645"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "message": "@coinbase2 @coinbase thanks. btw, this can be exploited in all browsers, not just the once mentioned in above papers. if you'd like a poc, please revert the fix and I give you a poc working in all browsers. thanks,", 
            "markdown_message": "<p><a href=\"/coinbase2\">@coinbase2</a> <a href=\"/coinbase\">@coinbase</a> thanks. btw, this can be exploited in all browsers, not just the once mentioned in above papers. if you&#39;d like a poc, please revert the fix and I give you a poc working in all browsers. thanks,</p>\n", 
            "type": "Activities::Comment", 
            "id": 907833, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-07-23T22:37:48.528Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-07-23T22:37:48.528Z", 
            "actor": {
                "username": "paulos_", 
                "url": "/paulos_", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/601/4588a51ca509a58d1c27bb823bebe9594409951c_medium.png?1502343645"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "coinbase", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1861271, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-08-22T22:38:07.789Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-08-22T22:38:07.789Z", 
            "actor": {
                "url": "/coinbase", 
                "profile": {
                    "name": "Coinbase"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/104/fd5bb1d22c531efe70f6594543d9e5685f08f4c5_medium.png?1395368444"
                }
            }, 
            "team_handle": "coinbase", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1947336, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-03-21T14:47:53.074Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-03-21T14:47:53.074Z", 
            "actor": {
                "url": "/coinbase", 
                "profile": {
                    "name": "Coinbase"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/104/fd5bb1d22c531efe70f6594543d9e5685f08f4c5_medium.png?1395368444"
                }
            }, 
            "team_handle": "coinbase", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::CommentsClosed", 
            "id": 2514722, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "paulos_", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/paulos_", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/008/601/c4386dbd803651038555e18d6df83bbc6fd22459_small.png?1502343645"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -40694161.854616135, 
    "disclosed_at": "2017-08-22T22:38:07.744Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/118631", 
    "created_at": "2016-02-24T23:00:33.343Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hi,</p>\n\n<p><a title=\"https://www.coinbase.com/pusher/auth\" href=\"/redirect?signature=4aa36022edc6e86b5eab02295b06e0ca101abe31&amp;url=https%3A%2F%2Fwww.coinbase.com%2Fpusher%2Fauth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.coinbase.com/pusher/auth</span><i class=\"icon-external-link\"></i></a> returns sensetive  a json auth-token response that can be parsed by </p>\n<pre class=\"highlight javascript\"><code><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">()</span>\n</code></pre>\n<p>from external site. this can easily be mitigated by putting /**/ or // chars at the beginning of the json response and thus making functions like JSON.parse unable to get the data extracted because of parsing errors.</p>\n\n<p>I do know the url takes 2 post parameters and one of them being a <strong>channel name</strong> to properly get the json response. but if an attacker get access to that parameter, just once. he will forever be able to use it. </p>\n\n<p>for instance:</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">&quot;https://www.coinbase.com/pusher/auth?callback=tothis&quot;</span> <span class=\"na\">method=</span><span class=\"s\">&quot;POST&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;socket_id&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;1.266427&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;hidden&quot;</span> <span class=\"na\">name=</span><span class=\"s\">&quot;channel_name&quot;</span> <span class=\"na\">value=</span><span class=\"s\">&quot;private-549850166bb03f3b19000147-QPCIGVGojmUh1w&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;submit&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n</code></pre>\n<p>if I visit that URL I will get the json response, now persumably the channel_name would reset over time or when I log out. unfortunatly, that isn&#39;t true. if I log back in, that private channel_name would still result a token, in other words, never expiring and reusable. combining this with json parsing, it is possible for an attacker who knows the channel_name to steal the tokens, over and over.</p>\n\n<p>Thanks,</p>\n", 
    "vulnerability_information": "Hi,\n\nhttps://www.coinbase.com/pusher/auth returns sensetive  a json auth-token response that can be parsed by \n```javascript\nJSON.parse()\n```\nfrom external site. this can easily be mitigated by putting /**/ or // chars at the beginning of the json response and thus making functions like JSON.parse unable to get the data extracted because of parsing errors.\n\nI do know the url takes 2 post parameters and one of them being a **channel name** to properly get the json response. but if an attacker get access to that parameter, just once. he will forever be able to use it. \n\nfor instance:\n```html\n<form action=\"https://www.coinbase.com/pusher/auth?callback=tothis\" method=\"POST\">\n<input type=\"hidden\" name=\"socket_id\" value=\"1.266427\">\n<input type=\"hidden\" name=\"channel_name\" value=\"private-549850166bb03f3b19000147-QPCIGVGojmUh1w\">\n<input type=\"submit\">\n</form>\n```\nif I visit that URL I will get the json response, now persumably the channel_name would reset over time or when I log out. unfortunatly, that isn't true. if I log back in, that private channel_name would still result a token, in other words, never expiring and reusable. combining this with json parsing, it is possible for an attacker who knows the channel_name to steal the tokens, over and over.\n\nThanks,\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://coinbase.com/security", 
            "about": "Creating an open financial system for the world", 
            "twitter_handle": "", 
            "name": "Coinbase"
        }, 
        "handle": "coinbase", 
        "url": "https://hackerone.com/coinbase", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/104/985cb288fb7f1b0c19dd614c6de490762aa27723_small.png?1395368444", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/104/fd5bb1d22c531efe70f6594543d9e5685f08f4c5_medium.png?1395368444"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 104, 
        "default_currency": "usd"
    }, 
    "is_published": false
}