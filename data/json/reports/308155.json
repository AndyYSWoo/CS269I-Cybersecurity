{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "jokebookservice1", 
        "bl4de", 
        "eveeez", 
        "plazmaz"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 308155, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-02-09T15:00:35.971Z", 
    "vulnerability_information": "**Module:**\n\n* Name: [html-janitor](https://www.npmjs.com/package/html-janitor)\n* Version: 2.0.2\n\n**Summary:**\n\nPassing user-controlled data to the module's clean() function can result in arbitrary JS execution, because of unsafe DOM operations. \n\nThe description \"*Cleans up your markup and allows you to take control of your HTML. HTMLJanitor uses a defined whitelist to limit HTML it is given to a defined subset.*\" implies that \"dirty\" HTML is expected and therefore I would assume the clean method should never result in arbitrary JS being executed.\n\n**Description:**\n\nThe following will result in JS execution:\n```javascript\nvar myJanitor = new HTMLJanitor({tags:{p:{}}});\nvar cleanHtml = myJanitor.clean(\"<p><img src onerror=alert()><p>\")\n```\n\nbecause [of this code](https://github.com/guardian/html-janitor/blob/master/src/html-janitor.js#L44):\n\n```js\nHTMLJanitor.prototype.clean = function (html) {\n    var sandbox = document.createElement('div'); // This is not a safe way to create a sandbox.\n    sandbox.innerHTML = html; // At this point, the onerror in the img is triggered.\n```\n\n**Recommendation:**\n\nThe \"sandbox\" should be created using safe browser APIs such as `document.implementation.createHTMLDocument();`.\n\n*Note that I previously reported this issue at https://github.com/guardian/html-janitor/issues/34*\n\n## Impact\n\nGiven the module's description I would assume it should be used to prevent XSS vulnerabilities. This is currently a very dangerous assumption given that the module itself has a XSS vulnerability. \n\nNote that the author might have never intended to feed untrusted data into the clean() function. However, in that case this should be at least mentioned in the documentation, because other developers most certainly will use the package in such scenarios.", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "high", 
            "privileges_required": "low", 
            "user_interaction": "none", 
            "attack_vector": "network", 
            "attack_complexity": "low", 
            "scope": "changed", 
            "integrity": "none", 
            "availability": "none"
        }, 
        "rating": "critical", 
        "score": 9.8, 
        "author_type": "Team"
    }, 
    "title": "[html-janitor] Passing user-controlled data to clean() leads to XSS", 
    "is_member_of_team?": null, 
    "vote_count": 4, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "html-janitor", 
        "max_severity": "critical", 
        "databaseId": 5495, 
        "asset_type": "SOURCE_CODE"
    }, 
    "allow_singular_disclosure_at": "2018-03-11T15:00:36.126Z", 
    "state": "Closed", 
    "cve_ids": [
        "CVE-2017-0931"
    ], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "old_scope": "Other module", 
            "created_at": "2018-01-23T13:41:34.188Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-23T13:41:34.188Z", 
            "actor": {
                "username": "vdeturckheim", 
                "url": "/vdeturckheim", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/161/010/a8ef3570e084af57bff77fbc33de7281eb3d8a45_medium.jpg?1508181781"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "new_scope": "html-janitor", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ChangedScope", 
            "id": 2309963, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-23T18:11:57.232Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-23T18:11:57.232Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Hi Martin,\n\nThanks for another detailed report on the problem and fix.\nEven though the actual fix might be in different places, it seems that both this and the other issue (308158) have the same context, vulnerability and impact/end result. Do you agree we can set this one as a duplicate?", 
            "markdown_message": "<p>Hi Martin,</p>\n\n<p>Thanks for another detailed report on the problem and fix.<br>\nEven though the actual fix might be in different places, it seems that both this and the other issue (308158) have the same context, vulnerability and impact/end result. Do you agree we can set this one as a duplicate?</p>\n", 
            "type": "Activities::Comment", 
            "id": 2310856, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-23T18:42:53.941Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-23T18:44:08.273Z", 
            "actor": {
                "username": "bayotop", 
                "url": "/bayotop", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/036/633/4e73458fffdb16796d3b91f672104fa30a4722ad_medium.jpg?1544039858"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Hi, I agree that the impact/end result is the same for anyone using the library. Nonetheless, it's a different vulnerability. This one is a XSS in the library's code. 308158 is a sanitization bypass that allows arbitrary HTML to slip through the cleaning process regardless of the initial settings passed to the `HTMLJanitor()` constructor. \n\nI tried to keep the issues separate for the sake of transparency, tracking, etc. \n\nIf handling both issues in one report works better for you then that's fine with me.\n\nOn the other hand, it would make perfect sense to label this one as a duplicate in case the author decides that untrusted input was never considered.  Updating the documentation accordingly would solve both issues. Maybe we should wait for what they have to say? ", 
            "markdown_message": "<p>Hi, I agree that the impact/end result is the same for anyone using the library. Nonetheless, it&#39;s a different vulnerability. This one is a XSS in the library&#39;s code. 308158 is a sanitization bypass that allows arbitrary HTML to slip through the cleaning process regardless of the initial settings passed to the <code>HTMLJanitor()</code> constructor. </p>\n\n<p>I tried to keep the issues separate for the sake of transparency, tracking, etc. </p>\n\n<p>If handling both issues in one report works better for you then that&#39;s fine with me.</p>\n\n<p>On the other hand, it would make perfect sense to label this one as a duplicate in case the author decides that untrusted input was never considered.  Updating the documentation accordingly would solve both issues. Maybe we should wait for what they have to say? </p>\n", 
            "type": "Activities::Comment", 
            "id": 2311100, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-23T18:45:51.784Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-23T18:45:51.784Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "Sounds good.", 
            "markdown_message": "<p>Sounds good.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2311105, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-24T19:29:40.346Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-24T19:29:40.346Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugTriaged", 
            "id": 2314467, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-01-31T22:12:16.026Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-01-31T22:12:16.026Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "Critical (9.8)", 
                "old_severity": "High"
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 2340415, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-08T03:55:33.890Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-08T03:55:33.890Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "cve_ids": [
                "CVE-2017-0928"
            ], 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::CveIdAdded", 
            "id": 2361104, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-08T04:00:16.495Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-08T04:00:16.495Z", 
            "actor": {
                "username": "reed", 
                "url": "/reed", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/132/5781ea1c43c5c7680dd145226b86348a8d6ed085_medium.jpg?1394062279"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "cve_ids": [
                "CVE-2017-0931"
            ], 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::CveIdAdded", 
            "id": 2361117, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-09T14:45:20.080Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-09T14:45:20.080Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "I will publicly disclose the vulnerability as we did with the related report #308158.\n\nThanks again @bayotop for reporting this to the Node.js ecosystem, we appreciate it1", 
            "markdown_message": "<p>I will publicly disclose the vulnerability as we did with the related report <a href=\"/reports/308158\">#308158</a>.</p>\n\n<p>Thanks again <a href=\"/bayotop\">@bayotop</a> for reporting this to the Node.js ecosystem, we appreciate it1</p>\n", 
            "type": "Activities::Comment", 
            "id": 2367119, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "bayotop", 
                "url": "/bayotop"
            }, 
            "created_at": "2018-02-09T15:00:16.573Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-09T15:00:16.573Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 2367155, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-09T15:00:36.007Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-09T15:00:36.007Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2367157, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-09T15:00:45.494Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-09T15:00:45.494Z", 
            "actor": {
                "username": "lirantal", 
                "url": "/lirantal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/096/045/01f6fd0d814d80d025eb8a0dcb5292f042739569_medium.jpeg?1515169110"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "nodejs-ecosystem", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 2367158, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "bayotop", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/bayotop", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/036/633/e331da5b8e3a380324eb7c0cefdf97fe1901b5be_small.jpg?1544039858"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 63, 
        "name": "Cross-site Scripting (XSS) - DOM"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -23354796.541175216, 
    "disclosed_at": "2018-02-09T15:00:45.549Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/308155", 
    "created_at": "2018-01-23T12:34:13.662Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><strong>Module:</strong></p>\n\n<ul>\n<li>Name: <a href=\"/redirect?signature=343a01e01864149beb5ef31736cb48f5f3d11cf8&amp;url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-janitor\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>html-janitor</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>Version: 2.0.2</li>\n</ul>\n\n<p><strong>Summary:</strong></p>\n\n<p>Passing user-controlled data to the module&#39;s clean() function can result in arbitrary JS execution, because of unsafe DOM operations. </p>\n\n<p>The description &quot;<em>Cleans up your markup and allows you to take control of your HTML. HTMLJanitor uses a defined whitelist to limit HTML it is given to a defined subset.</em>&quot; implies that &quot;dirty&quot; HTML is expected and therefore I would assume the clean method should never result in arbitrary JS being executed.</p>\n\n<p><strong>Description:</strong></p>\n\n<p>The following will result in JS execution:</p>\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">myJanitor</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">HTMLJanitor</span><span class=\"p\">({</span><span class=\"na\">tags</span><span class=\"p\">:{</span><span class=\"na\">p</span><span class=\"p\">:{}}});</span>\n<span class=\"kd\">var</span> <span class=\"nx\">cleanHtml</span> <span class=\"o\">=</span> <span class=\"nx\">myJanitor</span><span class=\"p\">.</span><span class=\"nx\">clean</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;p&gt;&lt;img src onerror=alert()&gt;&lt;p&gt;&quot;</span><span class=\"p\">)</span>\n</code></pre>\n<p>because <a href=\"/redirect?signature=34407d4145830466abdea4d402c638ba15cbb35b&amp;url=https%3A%2F%2Fgithub.com%2Fguardian%2Fhtml-janitor%2Fblob%2Fmaster%2Fsrc%2Fhtml-janitor.js%23L44\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>of this code</span><i class=\"icon-external-link\"></i></a>:</p>\n<pre class=\"highlight javascript\"><code><span class=\"nx\">HTMLJanitor</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">clean</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">html</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">sandbox</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;div&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// This is not a safe way to create a sandbox.</span>\n    <span class=\"nx\">sandbox</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"nx\">html</span><span class=\"p\">;</span> <span class=\"c1\">// At this point, the onerror in the img is triggered.</span>\n</code></pre>\n<p><strong>Recommendation:</strong></p>\n\n<p>The &quot;sandbox&quot; should be created using safe browser APIs such as <code>document.implementation.createHTMLDocument();</code>.</p>\n\n<p><em>Note that I previously reported this issue at <a title=\"https://github.com/guardian/html-janitor/issues/34\" href=\"/redirect?signature=899ec2e81fa8c8c7567da109e39717e684592c03&amp;url=https%3A%2F%2Fgithub.com%2Fguardian%2Fhtml-janitor%2Fissues%2F34\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/guardian/html-janitor/issues/34</span><i class=\"icon-external-link\"></i></a></em></p>\n\n<h2 id=\"impact\">Impact</h2>\n\n<p>Given the module&#39;s description I would assume it should be used to prevent XSS vulnerabilities. This is currently a very dangerous assumption given that the module itself has a XSS vulnerability. </p>\n\n<p>Note that the author might have never intended to feed untrusted data into the clean() function. However, in that case this should be at least mentioned in the documentation, because other developers most certainly will use the package in such scenarios.</p>\n", 
    "severity_rating": "critical", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://nodejs.org/en/security/", 
            "about": "This program is used to handle vulnerabilities in the Node.js ecosystem.", 
            "twitter_handle": "", 
            "name": "Node.js third-party modules"
        }, 
        "handle": "nodejs-ecosystem", 
        "url": "https://hackerone.com/nodejs-ecosystem", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/023/949/309112251b444244d95977d1299148aae6482789_small.?1508679627", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/023/949/c1f5f15ac094c1327c13dd19f55dbcb7411272bd_medium.?1508679627"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 23949, 
        "default_currency": "usd"
    }, 
    "is_published": false
}