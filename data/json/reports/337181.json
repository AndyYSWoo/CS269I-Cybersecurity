{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "eveeez", 
        "the_baghdad_sniper", 
        "juba_", 
        "cryptographer"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 337181, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-07-12T14:19:45.344Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "app.passit.io is vulnerable against Brute Force password quessing attack", 
    "is_member_of_team?": null, 
    "vote_count": 4, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": {
        "asset_identifier": "app.passit.io", 
        "max_severity": "critical", 
        "databaseId": 8266, 
        "asset_type": "URL"
    }, 
    "allow_singular_disclosure_at": "2018-08-11T14:19:45.479Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2018-04-13T14:07:57.836Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-13T14:07:57.836Z", 
            "actor": {
                "username": "david_x4am4", 
                "url": "/david_x4am4", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "passit", 
            "message": "Thanks for the report. To be clear, are you able to brute force the server authentication or the actual private key? I'll assume you are talking about guessing the server password which would get you access to a user's ciphertext. This is still bad but limits damage. It's bad because I'd like to assume that even if my crypto strategy is flawed the basic server auth would keep users safe. Auth works like this:\n\n1. User types plain text password (we were just discussing making this min length 10 too)\n2. libsodium pw_hash (argon2) is run client side\n3. The hash is sent to the server. The server treats the hash like the password\n4. The server hashes it again to check (Basic Django auth).\n\nThe fact that hashes are long would likely make this brute force harder to pull off.\n\nCaptcha: Yes - it would help but can be annoying so I'd want it only on users who try to log in many times. I think this could be a nice to have (not urgent) feature. \nRate limit - Well I am an idiot. I have rate limits already....except for the login view. You wouldn't notice this clicking around in the web interface but just repeating /api/auth/login/ can be done over and over. Do'h. That's an easy fix at least.\n\nI'll add the rate limit next release and look into ip/user blocking. In the not near future I'll consider the captcha.", 
            "markdown_message": "<p>Thanks for the report. To be clear, are you able to brute force the server authentication or the actual private key? I&#39;ll assume you are talking about guessing the server password which would get you access to a user&#39;s ciphertext. This is still bad but limits damage. It&#39;s bad because I&#39;d like to assume that even if my crypto strategy is flawed the basic server auth would keep users safe. Auth works like this:</p>\n\n<ol>\n<li>User types plain text password (we were just discussing making this min length 10 too)</li>\n<li>libsodium pw_hash (argon2) is run client side</li>\n<li>The hash is sent to the server. The server treats the hash like the password</li>\n<li>The server hashes it again to check (Basic Django auth).</li>\n</ol>\n\n<p>The fact that hashes are long would likely make this brute force harder to pull off.</p>\n\n<p>Captcha: Yes - it would help but can be annoying so I&#39;d want it only on users who try to log in many times. I think this could be a nice to have (not urgent) feature. <br>\nRate limit - Well I am an idiot. I have rate limits already....except for the login view. You wouldn&#39;t notice this clicking around in the web interface but just repeating /api/auth/login/ can be done over and over. Do&#39;h. That&#39;s an easy fix at least.</p>\n\n<p>I&#39;ll add the rate limit next release and look into ip/user blocking. In the not near future I&#39;ll consider the captcha.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 2603539, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-04-13T15:04:15.550Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-13T15:04:15.550Z", 
            "actor": {
                "username": "muon4", 
                "url": "/muon4", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/059/198/94611496b2e23678f49226bef0c6c6ff3a047dc6_medium.png?1519214359"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "passit", 
            "message": "Hello! \n\nThanks for the answer.\nIn my opinion this rate limit decision is good! Captcha brings more like layered defence and it's not as good as rate limit.\nOh, I should have tested another endpoints too but I thought that the login is most important :)\n\nThe server authentication is my answer to your question if I understood it correctly.\n\nI should be more clear and investigate this more - sorry for this lack of information and fast reporting! Anyway as you said too the login should be protected anyway.\n\nIf I can anything for you please let me know.\n\nCheers!", 
            "markdown_message": "<p>Hello! </p>\n\n<p>Thanks for the answer.<br>\nIn my opinion this rate limit decision is good! Captcha brings more like layered defence and it&#39;s not as good as rate limit.<br>\nOh, I should have tested another endpoints too but I thought that the login is most important :)</p>\n\n<p>The server authentication is my answer to your question if I understood it correctly.</p>\n\n<p>I should be more clear and investigate this more - sorry for this lack of information and fast reporting! Anyway as you said too the login should be protected anyway.</p>\n\n<p>If I can anything for you please let me know.</p>\n\n<p>Cheers!</p>\n", 
            "type": "Activities::Comment", 
            "id": 2603771, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-04-14T13:19:42.752Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-14T13:19:42.752Z", 
            "actor": {
                "username": "david_x4am4", 
                "url": "/david_x4am4", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "passit", 
            "message": "I believe this issue is resolved and will be fixed on app.passit.io on the next planned release. Feel free to review https://gitlab.com/passit/passit-backend/merge_requests/15\n\nHighlights:\n\n- 100 attempts per user. We want this to only come up doing brute force attempts (not the user trying too many times).\n- The fact that the password is hashed client side already mitigates the issue because an attacker would have to either try hashing weak password guesses (slow, cpu and ram intensive) or just guess random hashes (which are long)\n- We are requiring min length 10 (pre hash) passwords\n- A captcha after 5 attempts would be ideal but I think a low priority so it won't be included in the next release\n- All other login methods were removed (like django admin)\n\nLet me know if you disagree on anything with my plan. I'll keep this report open until it's live on app.passit.io. Thanks again!", 
            "markdown_message": "<p>I believe this issue is resolved and will be fixed on app.passit.io on the next planned release. Feel free to review <a title=\"https://gitlab.com/passit/passit-backend/merge_requests/15\" href=\"/redirect?signature=813661f89e08c4023461892de02032a5d567c1d0&amp;url=https%3A%2F%2Fgitlab.com%2Fpassit%2Fpassit-backend%2Fmerge_requests%2F15\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://gitlab.com/passit/passit-backend/merge_requests/15</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Highlights:</p>\n\n<ul>\n<li>100 attempts per user. We want this to only come up doing brute force attempts (not the user trying too many times).</li>\n<li>The fact that the password is hashed client side already mitigates the issue because an attacker would have to either try hashing weak password guesses (slow, cpu and ram intensive) or just guess random hashes (which are long)</li>\n<li>We are requiring min length 10 (pre hash) passwords</li>\n<li>A captcha after 5 attempts would be ideal but I think a low priority so it won&#39;t be included in the next release</li>\n<li>All other login methods were removed (like django admin)</li>\n</ul>\n\n<p>Let me know if you disagree on anything with my plan. I&#39;ll keep this report open until it&#39;s live on app.passit.io. Thanks again!</p>\n", 
            "type": "Activities::Comment", 
            "id": 2607477, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-04-14T15:57:05.311Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-14T15:57:05.311Z", 
            "actor": {
                "username": "muon4", 
                "url": "/muon4", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/059/198/94611496b2e23678f49226bef0c6c6ff3a047dc6_medium.png?1519214359"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "passit", 
            "message": "Hello\n\nSounds reasonable in my opinion!\nOnly thing what I'd change is that how many times users can try passwords. Like 20 times / 10 minutes should be enough to detect the attack but also enough for trying right password. This is just my opinion :)\n\nGreat work anyway!\n\nCheers", 
            "markdown_message": "<p>Hello</p>\n\n<p>Sounds reasonable in my opinion!<br>\nOnly thing what I&#39;d change is that how many times users can try passwords. Like 20 times / 10 minutes should be enough to detect the attack but also enough for trying right password. This is just my opinion :)</p>\n\n<p>Great work anyway!</p>\n\n<p>Cheers</p>\n", 
            "type": "Activities::Comment", 
            "id": 2607721, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-04-15T09:14:51.475Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-15T09:14:51.475Z", 
            "actor": {
                "username": "muon4", 
                "url": "/muon4", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/059/198/94611496b2e23678f49226bef0c6c6ff3a047dc6_medium.png?1519214359"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "passit", 
            "message": "Hello\n\nBtw - I'd add HSTS header to the app.passit.io. Your policy is not tight but I didn't wanted to hit you another report with this \"best practice\".. If you are going to set it ofcourse I am interested about reputation points :)\n\nJust a hint: If you never think going to the public with this program I recommend you to add some \"Out of scope\" reports - this makes your life so much easier! Or atleast it should make ;)\n\nCheers!", 
            "markdown_message": "<p>Hello</p>\n\n<p>Btw - I&#39;d add HSTS header to the app.passit.io. Your policy is not tight but I didn&#39;t wanted to hit you another report with this &quot;best practice&quot;.. If you are going to set it ofcourse I am interested about reputation points :)</p>\n\n<p>Just a hint: If you never think going to the public with this program I recommend you to add some &quot;Out of scope&quot; reports - this makes your life so much easier! Or atleast it should make ;)</p>\n\n<p>Cheers!</p>\n", 
            "type": "Activities::Comment", 
            "id": 2614963, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "muon4", 
                "url": "/muon4"
            }, 
            "created_at": "2018-04-15T18:06:27.919Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-15T18:06:27.919Z", 
            "actor": {
                "username": "david_x4am4", 
                "url": "/david_x4am4", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "passit", 
            "message": "Fixed on app.passit.io. Let me know if you believe otherwise. I made the max attempts 50 - I'd like it to never really happen for human users until we can think through the UX here more. Thank you.\n\nAgree HSTS is on my list of things to do already.", 
            "markdown_message": "<p>Fixed on app.passit.io. Let me know if you believe otherwise. I made the max attempts 50 - I&#39;d like it to never really happen for human users until we can think through the UX here more. Thank you.</p>\n\n<p>Agree HSTS is on my list of things to do already.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 2615748, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-04-15T18:28:29.159Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-15T18:28:29.159Z", 
            "actor": {
                "username": "muon4", 
                "url": "/muon4", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/059/198/94611496b2e23678f49226bef0c6c6ff3a047dc6_medium.png?1519214359"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "passit", 
            "message": "Hello\n\nGreat work! Thanks.\n\nCheers", 
            "markdown_message": "<p>Hello</p>\n\n<p>Great work! Thanks.</p>\n\n<p>Cheers</p>\n", 
            "type": "Activities::Comment", 
            "id": 2615775, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-07-12T14:19:45.399Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-07-12T14:19:45.399Z", 
            "actor": {
                "username": "david_x4am4", 
                "url": "/david_x4am4", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "passit", 
            "first_to_agree": true, 
            "message": "Just going through old issues to mark public when that seems appropriate.", 
            "markdown_message": "<p>Just going through old issues to mark public when that seems appropriate.</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 3035027, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-08-11T14:19:59.174Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-08-11T14:19:59.174Z", 
            "actor": {
                "url": "/passit", 
                "profile": {
                    "name": "Passit"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/027/430/17055152d134807f3f268a457d03c8fa286b2522_medium.?1522077958"
                }
            }, 
            "team_handle": "passit", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 3177065, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "muon4", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/muon4", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/059/198/33d05756ac88489638c3e272383e3a57c3bdf080_small.png?1519214359"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 31, 
        "name": "Brute Force"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -10137494.322662618, 
    "disclosed_at": "2018-08-11T14:19:59.123Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/337181", 
    "created_at": "2018-04-13T09:02:07.603Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p><strong>Summary:</strong><br>\napp.passit.io is vulnerable against Brute Force password quessing attack</p>\n\n<p><strong>Description:</strong><br>\nHello!</p>\n\n<p>I have found out that your login functionality is vulnerable against brute force attack.<br>\nThis is especially dangerous in your case because an attacker can get all of users passwords if they brute correctly password! And the because the &quot;master password&quot; requirements are not very toughs.</p>\n\n<h2 id=\"steps-to-reproduce\">Steps To Reproduce:</h2>\n\n<ol>\n<li>Try to &quot;guess&quot; your own password like 50 times in very short time perioid and see that you can still successfull log in!</li>\n</ol>\n\n<h3 id=\"how-to-fix\">How to fix?</h3>\n\n<ul>\n<li>Atleast add captcha &lt;-- This is optional and makes brute force attacks a way more harder</li>\n<li>Set rate limit which temporary block the IP/user &lt;-- This is recommended</li>\n</ul>\n\n<p>As a reference you can see almost every login is configured against this :)</p>\n\n<p>If you need any information please let me know.</p>\n\n<p>Cheers!</p>\n\n<h2 id=\"impact\">Impact</h2>\n\n<p>An attacker could get access to users/victims accounts by brute forcing passwords.</p>\n", 
    "vulnerability_information": "**Summary:**\napp.passit.io is vulnerable against Brute Force password quessing attack\n\n**Description:**\nHello!\n\nI have found out that your login functionality is vulnerable against brute force attack.\nThis is especially dangerous in your case because an attacker can get all of users passwords if they brute correctly password! And the because the \"master password\" requirements are not very toughs.\n\n\n## Steps To Reproduce:\n\n  1. Try to \"guess\" your own password like 50 times in very short time perioid and see that you can still successfull log in!\n\n### How to fix?\n- Atleast add captcha <-- This is optional and makes brute force attacks a way more harder\n- Set rate limit which temporary block the IP/user <-- This is recommended\n\nAs a reference you can see almost every login is configured against this :)\n\nIf you need any information please let me know.\n\nCheers!\n\n## Impact\n\nAn attacker could get access to users/victims accounts by brute forcing passwords.", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://passit.io", 
            "about": "An open source app that uses an established and modern cryptographic library to secure your passwords online so you can access them anywhere.", 
            "twitter_handle": "passitdotio", 
            "name": "Passit"
        }, 
        "handle": "passit", 
        "url": "https://hackerone.com/passit", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/027/430/01c3dc4da88f8e7aebe706452240d287ee0fb28f_small.?1522077958", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/027/430/17055152d134807f3f268a457d03c8fa286b2522_medium.?1522077958"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 27430, 
        "default_currency": "usd"
    }, 
    "is_published": false
}