{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "muon4", 
        "eveeez", 
        "geeknik", 
        "axolotl", 
        "apapedulimu"
    ], 
    "facebook_team?": false, 
    "has_bounty?": false, 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 284951, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2018-04-25T05:31:00.769Z", 
    "vulnerability_information": "It is possible to trigger an *out-of-bounds read* in *monero-blockchain-import* when importing a corrupt blockchain and not verifying blocks and transitions during import (--verify 0).\n\nUsing a corrupt import_file, the attacker has full control over *buffer_block* in import_from_file (blockchain_import.cpp). As shown in the following lines of code (blockchain_import.cpp:404-407), this also enables the attacker to craft a corrupt bootstrap::block_package bp at will:\n```\nstr1.assign(buffer_block, chunk_size);\nbootstrap::block_package bp;\nif (! ::serialization::parse_binary(str1, bp))\n    throw std::runtime_error(\"Error in deserialization of chunk\");\n```\n\nIf verification is turned off (opt_verify = false), the following line of code (blockchain_import.cpp:484) is executed, where all arguments in the function call are extracted from the corrupt *bp*, hence, controlled by the attacker:\n```\ncore.get_blockchain_storage().get_db().add_block(b, block_size, cumulative_difficulty, coins_generated, txs);\n```\nThe executed function *BlockchainLMDB::add_block* then executes the following line of code (db_lmdb.cpp:2850), which passes the same (corrupt) arguments to the function *BlockchainDB::add_block*, where the actual memory corruption finally happens:\n```\nBlockchainDB::add_block(blk, block_size, cumulative_difficulty, coins_generated, txs);\n```\nIn *BlockchainDB::add_block*, there is unfortunately no sanity check about the passed arguments and the following lines are executed (blockchain_db:210-217):\n```\nint tx_i = 0;\ncrypto::hash tx_hash = null_hash;\nfor (const transaction& tx : txs)\n{\n    tx_hash = blk.tx_hashes[tx_i];                   // here the out-of-bounds read happens\n    add_transaction(blk_hash, tx, &tx_hash);\n    ++tx_i;\n}\n```\nAs *txs* as well as *blk* originate from the *bootstrap::block_package bp* generated in blockchain_import, they can be set to arbitrary values by the attacker. In particular, if *bp* is crafted such that *bp.txs.size() > bp.block.tx_hashes.size()*, then an out-of-bounds memory corruption happens in the for loop when accessing *blk.tx_hashes*.\n\nI have not yet examined whether the bug can be exploited in any malicious way, but I think it needs to be fixed anyways. Further, as the bug happens in the database outside of blockchain_import.cpp, it may also affect other code in monero, not only *monero-blockchain-import*. I have also not checked that. The bug can be easily fixed by introducing additional sanity checks, such as, whether *bp.txs.size() != bp.block.tx_hashes.size()*.\n\nI'll be happy to answer any further questions regarding the bug. Thank you!", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "low", 
        "author_type": "User"
    }, 
    "title": "Out-of-bounds read when importing corrupt blockchain with monero-blockchain-import", 
    "is_member_of_team?": null, 
    "vote_count": 5, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2018-05-25T05:31:00.853Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-11-02T10:14:52.321Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-02T10:14:52.321Z", 
            "actor": {
                "username": "moneromooo", 
                "url": "/moneromooo", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "Hrm. Looks like my comment got sent to the bit bucket, sorry if this is a dupe.\nBasically, what I'd said is that you only use --verify 0 if you've created the file yourself, ie you know it's not malicious. That's the whole point of verification, to verify. That said, the proposed check is simple and non invasive, and so good to add. ", 
            "markdown_message": "<p>Hrm. Looks like my comment got sent to the bit bucket, sorry if this is a dupe.<br>\nBasically, what I&#39;d said is that you only use --verify 0 if you&#39;ve created the file yourself, ie you know it&#39;s not malicious. That&#39;s the whole point of verification, to verify. That said, the proposed check is simple and non invasive, and so good to add. </p>\n", 
            "type": "Activities::Comment", 
            "id": 2124102, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-02T14:55:00.071Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-02T14:55:00.071Z", 
            "actor": {
                "username": "moneromooo", 
                "url": "/moneromooo", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "Is there an indication this out of bounds read could be exploitable beyond crashing the importer, assuming the user disables verification ? Since there is no actual tx, adding the tx will fail, and that should be it. Since this is local, there is no information leak. ", 
            "markdown_message": "<p>Is there an indication this out of bounds read could be exploitable beyond crashing the importer, assuming the user disables verification ? Since there is no actual tx, adding the tx will fail, and that should be it. Since this is local, there is no information leak. </p>\n", 
            "type": "Activities::Comment", 
            "id": 2125249, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-02T20:02:58.662Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-02T20:04:10.574Z", 
            "actor": {
                "username": "sybr", 
                "url": "/sybr", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "Everything good, no dupe. Yes, I agree with you that importing a malicious blockchain with \"--verify 0\" is a rather unusual scenario.\n\nI've looked a little more closely into the bug and so far I see no indication that it could be exploited in a malicious way.\n\nSubmitting the bug, I've though about an info leak scenario in which the database of the attacked user is filled with transactions that contain out-of-bounds *tx_hash*'s', i.e., parts of the attacked user's memory that resides next to *blk.tx_hashes*. To exfiltrate this data, other users could retrieve these transactions (i.e., parts of the attacked user's memory) while bootstrapping themselves through the network.\n\nHowever, I'm new to Monero and don't know yet what the code really does. So from your post I assume that this is not possible, since tx's are somehow verified so that \"adding the tx will fail, and that should be it\"?", 
            "markdown_message": "<p>Everything good, no dupe. Yes, I agree with you that importing a malicious blockchain with &quot;--verify 0&quot; is a rather unusual scenario.</p>\n\n<p>I&#39;ve looked a little more closely into the bug and so far I see no indication that it could be exploited in a malicious way.</p>\n\n<p>Submitting the bug, I&#39;ve though about an info leak scenario in which the database of the attacked user is filled with transactions that contain out-of-bounds <em>tx_hash</em>&#39;s&#39;, i.e., parts of the attacked user&#39;s memory that resides next to <em>blk.tx_hashes</em>. To exfiltrate this data, other users could retrieve these transactions (i.e., parts of the attacked user&#39;s memory) while bootstrapping themselves through the network.</p>\n\n<p>However, I&#39;m new to Monero and don&#39;t know yet what the code really does. So from your post I assume that this is not possible, since tx&#39;s are somehow verified so that &quot;adding the tx will fail, and that should be it&quot;?</p>\n", 
            "type": "Activities::Comment", 
            "id": 2129317, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-03T20:08:39.730Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-03T20:08:39.730Z", 
            "actor": {
                "username": "moneromooo", 
                "url": "/moneromooo", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "If you're reading a transaction from the DB, you get a DB record, which has a size. The size is the size of the data chunk you originally wrote in, rather than an arbitrary number. So if you read N bytes from the DB, it's N bytes from the file. You won't get uninitialized memory there. I doubt you can save uninitialized memory in (which you could then read back in a non-buggy read) since what's saved is a serialized tx which was verified to be valid. It could be plausible if you find a way to fill uninitialized data into the several std::vector fields in play, but I don't know of a way.\n\nTxes are verified before being added, so unless the verification code is buggy, these should not pass the verification stage. If you run the imported with --verify 0, verification does not happen, but then it's a circular argument, since we're talking about a --verify 0 case in the first place.\n\nThat said, you are correct that *if* it is possible to store a tx into the DB which contains fragments of the user's memory, then it becomes possible to exfiltrate the data by requesting this transaction through normal P2P requests. However, doing so requires knowing the hash (you request by hash). If it contains uninitialized data, its hash will be unpredictable. If you know the parts that are uninitialized, you could plausible brute force all values of the uninitialized data, but that quickly becomes unwieldy. There is a P2P request to enumerate known hashes, but this only acts on blocks on the main chain, and in order for a block to be added to the main chain, its hash has to be below a difficulty level (essentially its hash must be less than a given 256 bit value, so a random hash has very, very little chance to match. Besides, the tx must also pass validity checks in addition to this hash below target check. So not gonna happen in practice.\n\nUnless another bug somewhere of course.\n", 
            "markdown_message": "<p>If you&#39;re reading a transaction from the DB, you get a DB record, which has a size. The size is the size of the data chunk you originally wrote in, rather than an arbitrary number. So if you read N bytes from the DB, it&#39;s N bytes from the file. You won&#39;t get uninitialized memory there. I doubt you can save uninitialized memory in (which you could then read back in a non-buggy read) since what&#39;s saved is a serialized tx which was verified to be valid. It could be plausible if you find a way to fill uninitialized data into the several std::vector fields in play, but I don&#39;t know of a way.</p>\n\n<p>Txes are verified before being added, so unless the verification code is buggy, these should not pass the verification stage. If you run the imported with --verify 0, verification does not happen, but then it&#39;s a circular argument, since we&#39;re talking about a --verify 0 case in the first place.</p>\n\n<p>That said, you are correct that <em>if</em> it is possible to store a tx into the DB which contains fragments of the user&#39;s memory, then it becomes possible to exfiltrate the data by requesting this transaction through normal P2P requests. However, doing so requires knowing the hash (you request by hash). If it contains uninitialized data, its hash will be unpredictable. If you know the parts that are uninitialized, you could plausible brute force all values of the uninitialized data, but that quickly becomes unwieldy. There is a P2P request to enumerate known hashes, but this only acts on blocks on the main chain, and in order for a block to be added to the main chain, its hash has to be below a difficulty level (essentially its hash must be less than a given 256 bit value, so a random hash has very, very little chance to match. Besides, the tx must also pass validity checks in addition to this hash below target check. So not gonna happen in practice.</p>\n\n<p>Unless another bug somewhere of course.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2133034, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-03T20:36:07.831Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-03T20:36:07.831Z", 
            "actor": {
                "username": "anonimal", 
                "url": "/anonimal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/857/5d3774e5d965a4122d4364133d467ea77fc31acd_medium.png?1449305173"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "Hi Florian,\n\nThank you very much for your detailed report and for bringing this issue to our attention.\n\nAs noted in our [VRP](https://github.com/monero-project/meta/blob/master/VULNERABILITY_RESPONSE_PROCESS.md):\n\n```\n4. Response Manager makes inquiries to satisfy any needed information to confirm if submission is indeed a vulnerability\n    - a. If submission proves to be vulnerable, proceed to next step\n    - b. If not vulnerable:\n      - i. Response Manager responds with reasons why submission is not a vulnerability\n      - ii. Response Manager moves discussion to a new or existing ticket on GitHub if necessary\n```\n\nBased on the information discovered/provided, if this report can be deduced as an exploitable vulnerability (as opposed to a simple bug) - with 100% certainty/reproducibility - then we will proceed to section 4a. If not, then we would like to move to 4b and close this issue as Resolved (where you'll then get reputation points and a spot on our Thank You page) and then move the issue to github (where you will get credit for the proposed patch).\n\nIf this report is shown to not be an exploit, then no bounty will be released. Please continue hacking though because we do have bounty available.", 
            "markdown_message": "<p>Hi Florian,</p>\n\n<p>Thank you very much for your detailed report and for bringing this issue to our attention.</p>\n\n<p>As noted in our <a href=\"/redirect?signature=5e9e65bbb3a76ef84398127abbc01aad1274a760&amp;url=https%3A%2F%2Fgithub.com%2Fmonero-project%2Fmeta%2Fblob%2Fmaster%2FVULNERABILITY_RESPONSE_PROCESS.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>VRP</span><i class=\"icon-external-link\"></i></a>:</p>\n<pre class=\"highlight plaintext\"><code>4. Response Manager makes inquiries to satisfy any needed information to confirm if submission is indeed a vulnerability\n    - a. If submission proves to be vulnerable, proceed to next step\n    - b. If not vulnerable:\n      - i. Response Manager responds with reasons why submission is not a vulnerability\n      - ii. Response Manager moves discussion to a new or existing ticket on GitHub if necessary\n</code></pre>\n<p>Based on the information discovered/provided, if this report can be deduced as an exploitable vulnerability (as opposed to a simple bug) - with 100% certainty/reproducibility - then we will proceed to section 4a. If not, then we would like to move to 4b and close this issue as Resolved (where you&#39;ll then get reputation points and a spot on our Thank You page) and then move the issue to github (where you will get credit for the proposed patch).</p>\n\n<p>If this report is shown to not be an exploit, then no bounty will be released. Please continue hacking though because we do have bounty available.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2133116, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-03T22:29:50.907Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-03T22:29:50.907Z", 
            "actor": {
                "username": "sybr", 
                "url": "/sybr", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "I don't think the bug is exploitable and I won't spend further time investigating this, since imho the maximum \"outcome\" is not worth the time. That said, I would like to move to 4b, close this issue, and take the reputation points as well as spot on the thank you page. Regarding continue hacking: do you have information on the amount you will pay for exploitable bugs of low/medium/high severity?\n\nThank you both for your quick, kind, and informative answers, especially moneromooo for your detailed answer on the workings of Monero!", 
            "markdown_message": "<p>I don&#39;t think the bug is exploitable and I won&#39;t spend further time investigating this, since imho the maximum &quot;outcome&quot; is not worth the time. That said, I would like to move to 4b, close this issue, and take the reputation points as well as spot on the thank you page. Regarding continue hacking: do you have information on the amount you will pay for exploitable bugs of low/medium/high severity?</p>\n\n<p>Thank you both for your quick, kind, and informative answers, especially moneromooo for your detailed answer on the workings of Monero!</p>\n", 
            "type": "Activities::Comment", 
            "id": 2133475, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-06T18:01:16.996Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-06T18:01:16.996Z", 
            "actor": {
                "username": "anonimal", 
                "url": "/anonimal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/857/5d3774e5d965a4122d4364133d467ea77fc31acd_medium.png?1449305173"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": ">Regarding continue hacking: do you have information on the amount you will pay for exploitable bugs of low/medium/high severity?\n\n@ovrflow this is something that we need to resolve on our end a.s.a.p. Thanks for the reminder.\n\n>Thank you both for your quick, kind, and informative answers, especially moneromooo for your detailed answer on the workings of Monero!\n\nThank you again @ovrflow. Will you open the issue on github then PR your fix? This will make accreditation easier.", 
            "markdown_message": "<blockquote>\n<p>Regarding continue hacking: do you have information on the amount you will pay for exploitable bugs of low/medium/high severity?</p>\n</blockquote>\n\n<p><a href=\"/ovrflow\">@ovrflow</a> this is something that we need to resolve on our end a.s.a.p. Thanks for the reminder.</p>\n\n<blockquote>\n<p>Thank you both for your quick, kind, and informative answers, especially moneromooo for your detailed answer on the workings of Monero!</p>\n</blockquote>\n\n<p>Thank you again <a href=\"/ovrflow\">@ovrflow</a>. Will you open the issue on github then PR your fix? This will make accreditation easier.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2137640, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "sybr", 
                "url": "/sybr"
            }, 
            "created_at": "2017-11-06T18:02:31.026Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-06T18:02:31.026Z", 
            "actor": {
                "username": "anonimal", 
                "url": "/anonimal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/857/5d3774e5d965a4122d4364133d467ea77fc31acd_medium.png?1449305173"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 2137646, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-09T11:12:45.250Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-09T11:12:45.250Z", 
            "actor": {
                "username": "moneromooo", 
                "url": "/moneromooo", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "Hi, I see no patch on github. If you prefer, I can PR it directly, if you give the authorship information you want (nick, email, both optional).\n", 
            "markdown_message": "<p>Hi, I see no patch on github. If you prefer, I can PR it directly, if you give the authorship information you want (nick, email, both optional).</p>\n", 
            "type": "Activities::Comment", 
            "id": 2145509, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-09T11:17:37.863Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-09T11:17:37.863Z", 
            "actor": {
                "username": "moneromooo", 
                "url": "/moneromooo", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "Rereading something I wrote above, I conflated two things in my explanation. I was thinking of block, not txes:\n\nThe transaction hash does not need to be below target. The block PoW hash does (which is different from the block hash). Transactions are included in blocks (by way of a merkle tree, the root of which is included in the hashed data). There is no enumeration P2P call for txes, just blocks, but you can get a list of txes from the blocks). So it doesn't alter the conclusion, just the details of what I said.\n", 
            "markdown_message": "<p>Rereading something I wrote above, I conflated two things in my explanation. I was thinking of block, not txes:</p>\n\n<p>The transaction hash does not need to be below target. The block PoW hash does (which is different from the block hash). Transactions are included in blocks (by way of a merkle tree, the root of which is included in the hashed data). There is no enumeration P2P call for txes, just blocks, but you can get a list of txes from the blocks). So it doesn&#39;t alter the conclusion, just the details of what I said.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2145525, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-11T22:19:18.468Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-11T22:19:18.468Z", 
            "actor": {
                "username": "sybr", 
                "url": "/sybr", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "Hi! I'm sorry. So far, I had no time to do the github patch. If you want to get the bug fixed in the next days, please PR it directly. My nick on github is \"flozilla\". If you can wait for one or two weeks, then I can PR it.", 
            "markdown_message": "<p>Hi! I&#39;m sorry. So far, I had no time to do the github patch. If you want to get the bug fixed in the next days, please PR it directly. My nick on github is &quot;flozilla&quot;. If you can wait for one or two weeks, then I can PR it.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2151833, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-13T11:20:54.888Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-13T11:20:54.888Z", 
            "actor": {
                "username": "moneromooo", 
                "url": "/moneromooo", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "I don't see any repo at that username, so I don't know which email address is preferred for authorship. Is it \"flozilla@users.noreply.github.com\" ?", 
            "markdown_message": "<p>I don&#39;t see any repo at that username, so I don&#39;t know which email address is preferred for authorship. Is it &quot;<a title=\"flozilla@users.noreply.github.com\" href=\"mailto:flozilla@users.noreply.github.com\" rel=\"nofollow noopener noreferrer\">flozilla@users.noreply.github.com</a>&quot; ?</p>\n", 
            "type": "Activities::Comment", 
            "id": 2153657, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-14T20:55:03.066Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-14T20:55:03.066Z", 
            "actor": {
                "username": "sybr", 
                "url": "/sybr", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "Yes, I would like to use the anonymous github provided no-reply address. Thank you!", 
            "markdown_message": "<p>Yes, I would like to use the anonymous github provided no-reply address. Thank you!</p>\n", 
            "type": "Activities::Comment", 
            "id": 2157986, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-11-15T10:05:43.468Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-11-15T10:05:43.468Z", 
            "actor": {
                "username": "moneromooo", 
                "url": "/moneromooo", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "OK, here's the patch I came up with, I'll PR this unless you have further comments. Thanks.\n\ncommit f9fad186080547a19fb3cc0f663763769b0830e5\nAuthor: flozilla <flozilla@users.noreply.github.com>\nDate:   Wed Nov 15 10:02:23 2017 +0000\n\n    blockchain_db: sanity check on tx/hash vector sizes\n    \n    It could trip on a corrupt/crafted file if the user has disabled\n    input verification.\n\ndiff --git a/src/blockchain_db/blockchain_db.cpp b/src/blockchain_db/blockchain_db.cpp\nindex c3f6e3d..2fb43a4 100644\n--- a/src/blockchain_db/blockchain_db.cpp\n+++ b/src/blockchain_db/blockchain_db.cpp\n@@ -194,6 +194,10 @@ uint64_t BlockchainDB::add_block( const block& blk\n                                 , const std::vector<transaction>& txs\n                                 )\n {\n+  // sanity\n+  if (blk.tx_hashes.size() != txs.size())\n+    throw new std::runtime_error(\"Inconsistent tx/hashes sizes\");\n+\n   block_txn_start(false);\n \n   TIME_MEASURE_START(time1);\n", 
            "markdown_message": "<p>OK, here&#39;s the patch I came up with, I&#39;ll PR this unless you have further comments. Thanks.</p>\n\n<p>commit f9fad186080547a19fb3cc0f663763769b0830e5<br>\nAuthor: flozilla <a title=\"flozilla@users.noreply.github.com\" href=\"mailto:flozilla@users.noreply.github.com\" rel=\"nofollow noopener noreferrer\">flozilla@users.noreply.github.com</a><br>\nDate:   Wed Nov 15 10:02:23 2017 +0000</p>\n<pre class=\"highlight plaintext\"><code>blockchain_db: sanity check on tx/hash vector sizes\n\nIt could trip on a corrupt/crafted file if the user has disabled\ninput verification.\n</code></pre>\n<p>diff --git a/src/blockchain_db/blockchain_db.cpp b/src/blockchain_db/blockchain_db.cpp<br>\nindex c3f6e3d..2fb43a4 100644<br>\n--- a/src/blockchain_db/blockchain_db.cpp<br>\n+++ b/src/blockchain_db/blockchain_db.cpp<br>\n@@ -194,6 +194,10 @@ uint64_t BlockchainDB::add_block( const block&amp; blk<br>\n                                 , const std::vector&lt;transaction&gt;&amp; txs<br>\n                                 )<br>\n {</p>\n\n<ul>\n<li> // sanity</li>\n<li> if (blk.tx_hashes.size() != txs.size())</li>\n<li>   throw new std::runtime_error(&quot;Inconsistent tx/hashes sizes&quot;);\n+\nblock_txn_start(false);</li>\n</ul>\n\n<p>TIME_MEASURE_START(time1);</p>\n", 
            "type": "Activities::Comment", 
            "id": 2158974, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-04-25T05:31:00.797Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-25T05:31:00.797Z", 
            "actor": {
                "username": "anonimal", 
                "url": "/anonimal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/857/5d3774e5d965a4122d4364133d467ea77fc31acd_medium.png?1449305173"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2662162, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2018-04-25T05:49:59.316Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2018-04-25T05:49:59.316Z", 
            "actor": {
                "username": "anonimal", 
                "url": "/anonimal", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/857/5d3774e5d965a4122d4364133d467ea77fc31acd_medium.png?1449305173"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "monero", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 2662188, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "sybr", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/sybr", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 8, 
        "name": "Out-of-bounds Read"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -16908844.615464818, 
    "disclosed_at": "2018-04-25T05:49:59.363Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/284951", 
    "created_at": "2017-10-31T20:50:31.348Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>It is possible to trigger an <em>out-of-bounds read</em> in <em>monero-blockchain-import</em> when importing a corrupt blockchain and not verifying blocks and transitions during import (--verify 0).</p>\n\n<p>Using a corrupt import_file, the attacker has full control over <em>buffer_block</em> in import_from_file (blockchain_import.cpp). As shown in the following lines of code (blockchain_import.cpp:404-407), this also enables the attacker to craft a corrupt bootstrap::block_package bp at will:</p>\n<pre class=\"highlight plaintext\"><code>str1.assign(buffer_block, chunk_size);\nbootstrap::block_package bp;\nif (! ::serialization::parse_binary(str1, bp))\n    throw std::runtime_error(&quot;Error in deserialization of chunk&quot;);\n</code></pre>\n<p>If verification is turned off (opt_verify = false), the following line of code (blockchain_import.cpp:484) is executed, where all arguments in the function call are extracted from the corrupt <em>bp</em>, hence, controlled by the attacker:</p>\n<pre class=\"highlight plaintext\"><code>core.get_blockchain_storage().get_db().add_block(b, block_size, cumulative_difficulty, coins_generated, txs);\n</code></pre>\n<p>The executed function <em>BlockchainLMDB::add_block</em> then executes the following line of code (db_lmdb.cpp:2850), which passes the same (corrupt) arguments to the function <em>BlockchainDB::add_block</em>, where the actual memory corruption finally happens:</p>\n<pre class=\"highlight plaintext\"><code>BlockchainDB::add_block(blk, block_size, cumulative_difficulty, coins_generated, txs);\n</code></pre>\n<p>In <em>BlockchainDB::add_block</em>, there is unfortunately no sanity check about the passed arguments and the following lines are executed (blockchain_db:210-217):</p>\n<pre class=\"highlight plaintext\"><code>int tx_i = 0;\ncrypto::hash tx_hash = null_hash;\nfor (const transaction&amp; tx : txs)\n{\n    tx_hash = blk.tx_hashes[tx_i];                   // here the out-of-bounds read happens\n    add_transaction(blk_hash, tx, &amp;tx_hash);\n    ++tx_i;\n}\n</code></pre>\n<p>As <em>txs</em> as well as <em>blk</em> originate from the <em>bootstrap::block_package bp</em> generated in blockchain_import, they can be set to arbitrary values by the attacker. In particular, if <em>bp</em> is crafted such that <em>bp.txs.size() &gt; bp.block.tx_hashes.size()</em>, then an out-of-bounds memory corruption happens in the for loop when accessing <em>blk.tx_hashes</em>.</p>\n\n<p>I have not yet examined whether the bug can be exploited in any malicious way, but I think it needs to be fixed anyways. Further, as the bug happens in the database outside of blockchain_import.cpp, it may also affect other code in monero, not only <em>monero-blockchain-import</em>. I have also not checked that. The bug can be easily fixed by introducing additional sanity checks, such as, whether <em>bp.txs.size() != bp.block.tx_hashes.size()</em>.</p>\n\n<p>I&#39;ll be happy to answer any further questions regarding the bug. Thank you!</p>\n", 
    "severity_rating": "low", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://getmonero.org", 
            "about": " Monero: the secure, private, untraceable cryptocurrency", 
            "twitter_handle": "monerocurrency", 
            "name": "Monero"
        }, 
        "handle": "monero", 
        "url": "https://hackerone.com/monero", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/007/731/e9db7ce84f372b423c4d212b494be78c2e0a571e_small.png?1484006970", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/007/731/3428da1efb473c529a0d2e5836012a846f8b8d1e_medium.png?1484006970"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 7731, 
        "default_currency": "usd"
    }, 
    "is_published": false
}