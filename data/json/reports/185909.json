{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "pekafat", 
        "madrobot", 
        "mpz", 
        "exadmin", 
        "codertom", 
        "spetr0x", 
        "dyabla", 
        "paulcale04"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "50.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 185909, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2016-11-30T07:08:24.576Z", 
    "vulnerability_information": "in:\n\thttps://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L106\n\thttps://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L112\n\thttps://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L133\n\thttps://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L139\n\t\nthere is usages of unserialize function\t\t\n```\n\t\t\t\t\t$option = unserialize( $item->data );\n\t\t\t\t\t$details = unserialize( $item->data );\n```\n\nwithout disallowing unneeded classes.\nthus, if attacker managed to control the value of $item->data he will be able to:\n\n1\\. conduct PHP POP exploitation, more information:\n\nhttp://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing\nhttp://www.slideshare.net/MailRuGroup/security-meetup-22-php-unserialize-exploiting\n\n2\\. unserialize itself has many security bugs in previous PHP versions which can be exploited, more information:\n\nhttps://www.evonide.com/fuzzing-unserialize/\nhttps://blog.checkpoint.com/wp-content/uploads/2016/08/Exploiting-PHP-7-unserialize-Report-160829.pdf\n\nfix:\n\n1\\. don't use serialize/unserialize if json_encode/json_decode can be used instead. (fix both 1 & 2 attack vectors)\n2\\. if 1 isn't possible, use safe unserialize invocation, such as:\n```\n        if (version_compare(PHP_VERSION, '7.0', 'lt')) {\n            return safeUnserialize($data);\n        } else {\n            return safeUnserialize($data, false);\n        }\n```\n\nImplement safeUnserialize function that based on PMA_safeUnserialize:\nhttps://github.com/phpmyadmin/phpmyadmin/blob/fb161a7bebe60d902f743227158eca6a9889c472/libraries/core.lib.php#L1080\nbut with fix for the issue described in:\nhttps://hackerone.com/reports/181315#activity-1322058", 
    "activity_page_count": 1, 
    "severity": {
        "rating": "medium", 
        "author_type": "Team"
    }, 
    "title": "unchecked unserialize usages in audit-trail-extension/audit-trail-extension.php", 
    "is_member_of_team?": null, 
    "vote_count": 8, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2016-12-30T07:08:24.630Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "activity_page_number": 1, 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$50", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2016-11-28T16:36:23.677Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-28T16:36:23.677Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "Thanks Emanuel, this looks valid at first glance.", 
            "markdown_message": "<p>Thanks Emanuel, this looks valid at first glance.</p>\n", 
            "type": "Activities::BugTriaged", 
            "id": 1323290, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-29T04:07:00.851Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-29T04:07:00.851Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "Actually, now that I think about it, that plugin only works if the Audit Trail plugin is running, and Audit Trail makes the decision to store `$item` in a serialized string.\n\nSo, this would need to be fixed in Audit Trail first, before anything could be done in `audit-trail-extension`.", 
            "markdown_message": "<p>Actually, now that I think about it, that plugin only works if the Audit Trail plugin is running, and Audit Trail makes the decision to store <code>$item</code> in a serialized string.</p>\n\n<p>So, this would need to be fixed in Audit Trail first, before anything could be done in <code>audit-trail-extension</code>.</p>\n", 
            "type": "Activities::Comment", 
            "id": 1325043, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-29T04:19:49.209Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-29T04:19:49.209Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "Closing since this needs to be fixed upstream first.", 
            "markdown_message": "<p>Closing since this needs to be fixed upstream first.</p>\n", 
            "type": "Activities::BugInformative", 
            "id": 1325060, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-29T12:03:50.022Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-29T12:03:50.022Z", 
            "actor": {
                "username": "e3amn2l", 
                "url": "/e3amn2l", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "in case upstream will not change the serialize call/format, you need to disallow not needed classes as I point in 2 in fix (under \"use safe unserialize invocation\")", 
            "markdown_message": "<p>in case upstream will not change the serialize call/format, you need to disallow not needed classes as I point in 2 in fix (under &quot;use safe unserialize invocation&quot;)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1325809, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-29T16:11:29.759Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-29T16:11:29.759Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "It doesn't look like PMA_safeUnserialize() supports whitelisting objects, so that would have to be added.\n\nIt still doesn't seem necessary, though, because I don't see any way an attacker could manipulate `$item`, unless they could already execute PHP code. There's no user input to take advantage of.\n\nHere's where `$item` gets passed to my plugin by Audit Trail:\n\n* https://plugins.trac.wordpress.org/browser/audit-trail/trunk/models/audit.php?rev=1167079#L197\n* https://plugins.trac.wordpress.org/browser/audit-trail/trunk/models/audit.php?rev=1167079#L214\n\nCan you demonstrate a way to pass a malicious object to my plugin?", 
            "markdown_message": "<p>It doesn&#39;t look like PMA_safeUnserialize() supports whitelisting objects, so that would have to be added.</p>\n\n<p>It still doesn&#39;t seem necessary, though, because I don&#39;t see any way an attacker could manipulate <code>$item</code>, unless they could already execute PHP code. There&#39;s no user input to take advantage of.</p>\n\n<p>Here&#39;s where <code>$item</code> gets passed to my plugin by Audit Trail:</p>\n\n<ul>\n<li><a title=\"https://plugins.trac.wordpress.org/browser/audit-trail/trunk/models/audit.php?rev=1167079#L197\" href=\"/redirect?signature=d40ebc3a18abc1319a4ff2c9f5adf88a3a38d6a2&amp;url=https%3A%2F%2Fplugins.trac.wordpress.org%2Fbrowser%2Faudit-trail%2Ftrunk%2Fmodels%2Faudit.php%3Frev%3D1167079%23L197\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://plugins.trac.wordpress.org/browser/audit-trail/trunk/models/audit.php?rev=1167079#L197</span><i class=\"icon-external-link\"></i></a></li>\n<li><a title=\"https://plugins.trac.wordpress.org/browser/audit-trail/trunk/models/audit.php?rev=1167079#L214\" href=\"/redirect?signature=a088a9ad8ead332214446cefe3b54a4d0300a1d8&amp;url=https%3A%2F%2Fplugins.trac.wordpress.org%2Fbrowser%2Faudit-trail%2Ftrunk%2Fmodels%2Faudit.php%3Frev%3D1167079%23L214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://plugins.trac.wordpress.org/browser/audit-trail/trunk/models/audit.php?rev=1167079#L214</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n\n<p>Can you demonstrate a way to pass a malicious object to my plugin?</p>\n", 
            "type": "Activities::Comment", 
            "id": 1326634, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-29T17:51:02.637Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-29T17:51:02.637Z", 
            "actor": {
                "username": "e3amn2l", 
                "url": "/e3amn2l", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "1\\. one way is changing the value directly from the database (in case attacker managed to compromise the database / get access to it) then attacker will want to hack the client (execute PHP code), not sure how much a hardened wordpress installation (that use some of the following defines, so even admin can't run PHP code)\nDISALLOW_FILE_EDIT\nDISALLOW_FILE_MODS\nis resistant to attack that come from compromised database, still it's better to not increase the attack surface.\n2\\. it might be possible to influence $item in creation time (will check if it's possible later), still it's better to protect from this (too not assume it be safe forever)\n\n>It doesn't look like PMA_safeUnserialize() supports whitelisting objects, so that would have to be added.\n\nyes, if support for PHP < 7 is needed (unserialize support whitelisted objects from PHP > 7)", 
            "markdown_message": "<p>1. one way is changing the value directly from the database (in case attacker managed to compromise the database / get access to it) then attacker will want to hack the client (execute PHP code), not sure how much a hardened wordpress installation (that use some of the following defines, so even admin can&#39;t run PHP code)<br>\nDISALLOW_FILE_EDIT<br>\nDISALLOW_FILE_MODS<br>\nis resistant to attack that come from compromised database, still it&#39;s better to not increase the attack surface.<br>\n2. it might be possible to influence $item in creation time (will check if it&#39;s possible later), still it&#39;s better to protect from this (too not assume it be safe forever)</p>\n\n<blockquote>\n<p>It doesn&#39;t look like PMA_safeUnserialize() supports whitelisting objects, so that would have to be added.</p>\n</blockquote>\n\n<p>yes, if support for PHP &lt; 7 is needed (unserialize support whitelisted objects from PHP &gt; 7)</p>\n", 
            "type": "Activities::Comment", 
            "id": 1327011, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-30T06:57:20.009Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-30T06:57:20.009Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "Doh, you're right, a compromised db is a practical vector.", 
            "markdown_message": "<p>Doh, you&#39;re right, a compromised db is a practical vector.</p>\n", 
            "type": "Activities::BugReopened", 
            "id": 1328892, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-30T07:05:08.684Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-30T07:05:08.684Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "additional_data": {
                "new_severity": "Medium", 
                "old_severity": null
            }, 
            "team_handle": "iandunn-projects", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportSeverityUpdated", 
            "id": 1328909, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2016-11-30T07:06:03.350Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-30T07:06:03.350Z", 
            "actor": {
                "url": "/iandunn-projects", 
                "profile": {
                    "name": "Ian Dunn"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/162/cb18840e181960dbb77b2b8a38f637a2df47fa29_medium.jpg?1508123836"
                }
            }, 
            "team_handle": "iandunn-projects", 
            "bounty_amount": "50.0", 
            "collaborator": {
                "username": "e3amn2l", 
                "url": "/e3amn2l"
            }, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::BountyAwarded", 
            "id": 1328910, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "e3amn2l", 
                "url": "/e3amn2l"
            }, 
            "created_at": "2016-11-30T07:08:17.209Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-30T07:08:17.209Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "message": "This is really old code that I doubt anybody is using, so I didn't bother doing a proper fix. I just [removed the serialization](https://github.com/iandunn/audit-trail-extension/commit/5076c714024167eef2c69d648b779110f2c92309) so that the raw string is displayed.", 
            "markdown_message": "<p>This is really old code that I doubt anybody is using, so I didn&#39;t bother doing a proper fix. I just <a href=\"/redirect?signature=7d0a13fca8b8504881215d61164c4115a2f1189e&amp;url=https%3A%2F%2Fgithub.com%2Fiandunn%2Faudit-trail-extension%2Fcommit%2F5076c714024167eef2c69d648b779110f2c92309\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>removed the serialization</span><i class=\"icon-external-link\"></i></a> so that the raw string is displayed.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 1328914, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-11-30T07:08:24.599Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-11-30T07:08:24.599Z", 
            "actor": {
                "username": "iandunn", 
                "url": "/iandunn", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/002/974/4a74c8e7efc3996e6fff3f72ddccc09ab92986a2_medium.jpg?1506561124"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "iandunn-projects", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 1328916, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2016-12-30T07:08:31.354Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2016-12-30T07:08:31.354Z", 
            "actor": {
                "url": "/iandunn-projects", 
                "profile": {
                    "name": "Ian Dunn"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/000/162/cb18840e181960dbb77b2b8a38f637a2df47fa29_medium.jpg?1508123836"
                }
            }, 
            "team_handle": "iandunn-projects", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ReportBecamePublic", 
            "id": 1391857, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "e3amn2l", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/e3amn2l", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -61054617.098102935, 
    "disclosed_at": "2016-12-30T07:08:31.322Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/185909", 
    "created_at": "2016-11-28T01:20:42.688Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<p>in:<br>\n    <a title=\"https://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L106\" href=\"/redirect?signature=8d9b1fe1530bfb72c8f00e88c36c75a029662e4a&amp;url=https%3A%2F%2Fgithub.com%2Fiandunn%2Faudit-trail-extension%2Fblob%2Fmaster%2Faudit-trail-extension.php%23L106\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L106</span><i class=\"icon-external-link\"></i></a><br>\n    <a title=\"https://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L112\" href=\"/redirect?signature=b34364eb0da3cd60fe310dd581a8e5e28cf3d05d&amp;url=https%3A%2F%2Fgithub.com%2Fiandunn%2Faudit-trail-extension%2Fblob%2Fmaster%2Faudit-trail-extension.php%23L112\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L112</span><i class=\"icon-external-link\"></i></a><br>\n    <a title=\"https://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L133\" href=\"/redirect?signature=3c4ceafa23e3db2b8569ee361e35afad06e55c68&amp;url=https%3A%2F%2Fgithub.com%2Fiandunn%2Faudit-trail-extension%2Fblob%2Fmaster%2Faudit-trail-extension.php%23L133\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L133</span><i class=\"icon-external-link\"></i></a><br>\n    <a title=\"https://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L139\" href=\"/redirect?signature=29f540ee9cd07260e2cbbc497486e5ea07f7557b&amp;url=https%3A%2F%2Fgithub.com%2Fiandunn%2Faudit-trail-extension%2Fblob%2Fmaster%2Faudit-trail-extension.php%23L139\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/iandunn/audit-trail-extension/blob/master/audit-trail-extension.php#L139</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>there is usages of unserialize function     </p>\n<pre class=\"highlight plaintext\"><code>                    $option = unserialize( $item-&gt;data );\n                    $details = unserialize( $item-&gt;data );\n</code></pre>\n<p>without disallowing unneeded classes.<br>\nthus, if attacker managed to control the value of $item-&gt;data he will be able to:</p>\n\n<p>1. conduct PHP POP exploitation, more information:</p>\n\n<p><a title=\"http://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing\" href=\"/redirect?signature=538f3a855abbaee179232ca5a14356ba8540beea&amp;url=http%3A%2F%2Fwww.slideshare.net%2F_s_n_t%2Fphp-unserialization-vulnerabilities-what-are-we-missing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"http://www.slideshare.net/MailRuGroup/security-meetup-22-php-unserialize-exploiting\" href=\"/redirect?signature=ef72b8d03af653a6b7972721f8d8a7ce44e42b97&amp;url=http%3A%2F%2Fwww.slideshare.net%2FMailRuGroup%2Fsecurity-meetup-22-php-unserialize-exploiting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>http://www.slideshare.net/MailRuGroup/security-meetup-22-php-unserialize-exploiting</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>2. unserialize itself has many security bugs in previous PHP versions which can be exploited, more information:</p>\n\n<p><a title=\"https://www.evonide.com/fuzzing-unserialize/\" href=\"/redirect?signature=9d20a69f055de9bc0f0029c4ff7bc723161845c9&amp;url=https%3A%2F%2Fwww.evonide.com%2Ffuzzing-unserialize%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.evonide.com/fuzzing-unserialize/</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://blog.checkpoint.com/wp-content/uploads/2016/08/Exploiting-PHP-7-unserialize-Report-160829.pdf\" href=\"/redirect?signature=d15b50d13949d6dc15723b89d60c51cf6158fc77&amp;url=https%3A%2F%2Fblog.checkpoint.com%2Fwp-content%2Fuploads%2F2016%2F08%2FExploiting-PHP-7-unserialize-Report-160829.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://blog.checkpoint.com/wp-content/uploads/2016/08/Exploiting-PHP-7-unserialize-Report-160829.pdf</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>fix:</p>\n\n<p>1. don&#39;t use serialize/unserialize if json_encode/json_decode can be used instead. (fix both 1 &amp; 2 attack vectors)<br>\n2. if 1 isn&#39;t possible, use safe unserialize invocation, such as:</p>\n<pre class=\"highlight plaintext\"><code>        if (version_compare(PHP_VERSION, &#39;7.0&#39;, &#39;lt&#39;)) {\n            return safeUnserialize($data);\n        } else {\n            return safeUnserialize($data, false);\n        }\n</code></pre>\n<p>Implement safeUnserialize function that based on PMA_safeUnserialize:<br>\n<a title=\"https://github.com/phpmyadmin/phpmyadmin/blob/fb161a7bebe60d902f743227158eca6a9889c472/libraries/core.lib.php#L1080\" href=\"/redirect?signature=992e44f1de33b2942b43abdcbd3ee2dc20ab3cfe&amp;url=https%3A%2F%2Fgithub.com%2Fphpmyadmin%2Fphpmyadmin%2Fblob%2Ffb161a7bebe60d902f743227158eca6a9889c472%2Flibraries%2Fcore.lib.php%23L1080\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/phpmyadmin/phpmyadmin/blob/fb161a7bebe60d902f743227158eca6a9889c472/libraries/core.lib.php#L1080</span><i class=\"icon-external-link\"></i></a><br>\nbut with fix for the issue described in:<br>\n<a title=\"https://hackerone.com/reports/181315#activity-1322058\" href=\"https://hackerone.com/reports/181315#activity-1322058\">https://hackerone.com/reports/181315#activity-1322058</a></p>\n", 
    "severity_rating": "medium", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "", 
            "about": "I'm a WordPress developer who maintains several small open source projects.", 
            "twitter_handle": "", 
            "name": "Ian Dunn"
        }, 
        "handle": "iandunn-projects", 
        "url": "https://hackerone.com/iandunn-projects", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/000/162/eb309ba9f6270977cf4e55dc66f0b8d7099a34b7_small.jpg?1508123836", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/000/162/cb18840e181960dbb77b2b8a38f637a2df47fa29_medium.jpg?1508123836"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 162, 
        "default_currency": "usd"
    }, 
    "is_published": false
}