{
    "abilities": {
        "can_manage_common_responses?": false, 
        "can_manage_collaborators?": false, 
        "can_reopen?": false, 
        "can_ban_researcher?": false, 
        "can_create_severity?": false, 
        "can_assign_to_h1_triage?": false, 
        "can_agree_on_going_public?": false, 
        "assignable_team_member_groups": [], 
        "can_view_credential_account_details?": false, 
        "can_export?": false, 
        "can_create_retest?": false, 
        "can_assign_to_user?": false, 
        "can_use_common_responses?": false, 
        "can_hide_timeline?": false, 
        "can_be_manually_disclosed?": false, 
        "assignable_team_members": [], 
        "can_clone?": false, 
        "can_be_publicly_disclosed?": false, 
        "can_close_comments?": false, 
        "can_view_bounty_weights?": false, 
        "can_suggest_bounty_amount?": false, 
        "can_cancel_disclosure_request?": false, 
        "can_redact?": false, 
        "can_change_structured_scope?": false, 
        "can_post_internal_comments?": false, 
        "can_change_state?": false, 
        "can_change_weakness?": false, 
        "can_add_comment?": false, 
        "can_reassign_to_team?": false, 
        "can_change_title?": false, 
        "can_award_bounty?": false, 
        "can_award_swag?": false, 
        "can_close?": false, 
        "can_manage?": false
    }, 
    "comments_closed?": false, 
    "substate": "resolved", 
    "bug_reporter_agreed_on_going_public_at": null, 
    "voters": [
        "eveeez", 
        "ranjit_p", 
        "sufian_saoree"
    ], 
    "facebook_team?": false, 
    "has_bounty?": true, 
    "bounty_amount": "25.0", 
    "rejected_anc_report_that_can_be_sent_back_to_anc_triagers?": false, 
    "original_report_id": null, 
    "id": 273998, 
    "can_view_team": true, 
    "team_member_agreed_on_going_public_at": "2017-10-16T05:49:22.885Z", 
    "activity_page_count": 1, 
    "activity_page_number": 1, 
    "title": "CSRF token does not valided during blog comment", 
    "is_member_of_team?": null, 
    "vote_count": 3, 
    "summaries": [
        {
            "category": "team", 
            "can_create?": false, 
            "can_view?": true
        }, 
        {
            "category": "researcher", 
            "can_create?": false, 
            "can_view?": true
        }
    ], 
    "structured_scope": null, 
    "allow_singular_disclosure_at": "2017-11-15T05:49:22.921Z", 
    "state": "Closed", 
    "cve_ids": [], 
    "readable_substate": "Resolved", 
    "public": true, 
    "formatted_bounty": "$25", 
    "singular_disclosure_disabled": false, 
    "activities": [
        {
            "automated_response": false, 
            "created_at": "2017-10-03T12:57:26.753Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T12:57:26.753Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "The CSRF validation actually takes place here: https://github.com/paragonie/airship/blob/1d92318390e394afa750461493a96848721224ec/src/Cabin/Hull/Controller/BlogPosts.php#L525 before that protected method `addComment()` is called.\n\n`$this->post()` checks for CSRF tokens.\n\nI'm going to look closer at the behavior you're seeing, but generall, if you omit the tokens it's treated as a GET request.", 
            "markdown_message": "<p>The CSRF validation actually takes place here: <a title=\"https://github.com/paragonie/airship/blob/1d92318390e394afa750461493a96848721224ec/src/Cabin/Hull/Controller/BlogPosts.php#L525\" href=\"/redirect?signature=71684f6dbd58cde4e87834e728bd695a6e955e83&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F1d92318390e394afa750461493a96848721224ec%2Fsrc%2FCabin%2FHull%2FController%2FBlogPosts.php%23L525\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/1d92318390e394afa750461493a96848721224ec/src/Cabin/Hull/Controller/BlogPosts.php#L525</span><i class=\"icon-external-link\"></i></a> before that protected method <code>addComment()</code> is called.</p>\n\n<p><code>$this-&gt;post()</code> checks for CSRF tokens.</p>\n\n<p>I&#39;m going to look closer at the behavior you&#39;re seeing, but generall, if you omit the tokens it&#39;s treated as a GET request.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2040749, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T14:49:22.317Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T14:49:22.317Z", 
            "actor": {
                "username": "ranjit_p", 
                "url": "/ranjit_p", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "i just  checked  https://github.com/paragonie/airship/blob/1d92318390e394afa750461493a96848721224ec/src/Cabin/Hull/Controller/BlogPosts.php#L525 \nHere ```$this->post()  ``` checks for CSRF token\nBut Here parameter passed as ```$post = $this->post(new CommentFilter(), true);``` , a ```true``` bool value.\nNow jump to that post function  https://github.com/paragonie/airship/blob/master/src/Engine/Controller.php#L349\n```\nprotected function post(\n        InputFilterContainer $filterContainer = null,\n        bool $ignoreCSRFToken = false\n    ) {\n        if ($this->airship_http_method !== 'POST' || empty($_POST)) {\n            return false;\n        }\n        if ($ignoreCSRFToken) {    //here $ignoreCSRFToken is true ,so no CSRF validation \n            if ($filterContainer) {\n                try {\n                    return $filterContainer($_POST);\n                } catch (\\TypeError $ex) {\n                    $this->log(\n                        'Input validation threw a TypeError',\n                        LogLevel::ALERT,\n                        \\Airship\\throwableToArray($ex)\n                    );\n                    return false;\n                }\n            }\n            return $_POST;\n        }\n...........................................\n.......\n```\nhere as we passed ```true``` as  ```$ignoreCSRFToken``` value, it ignore CSRF check", 
            "markdown_message": "<p>i just  checked  <a title=\"https://github.com/paragonie/airship/blob/1d92318390e394afa750461493a96848721224ec/src/Cabin/Hull/Controller/BlogPosts.php#L525\" href=\"/redirect?signature=71684f6dbd58cde4e87834e728bd695a6e955e83&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F1d92318390e394afa750461493a96848721224ec%2Fsrc%2FCabin%2FHull%2FController%2FBlogPosts.php%23L525\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/1d92318390e394afa750461493a96848721224ec/src/Cabin/Hull/Controller/BlogPosts.php#L525</span><i class=\"icon-external-link\"></i></a> <br>\nHere <code>$this-&gt;post()</code> checks for CSRF token<br>\nBut Here parameter passed as <code>$post = $this-&gt;post(new CommentFilter(), true);</code> , a <code>true</code> bool value.<br>\nNow jump to that post function  <a title=\"https://github.com/paragonie/airship/blob/master/src/Engine/Controller.php#L349\" href=\"/redirect?signature=ab718ceee150321d54d7d0f0c42f0e982b014178&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2Fmaster%2Fsrc%2FEngine%2FController.php%23L349\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/master/src/Engine/Controller.php#L349</span><i class=\"icon-external-link\"></i></a></p>\n<pre class=\"highlight plaintext\"><code>protected function post(\n        InputFilterContainer $filterContainer = null,\n        bool $ignoreCSRFToken = false\n    ) {\n        if ($this-&gt;airship_http_method !== &#39;POST&#39; || empty($_POST)) {\n            return false;\n        }\n        if ($ignoreCSRFToken) {    //here $ignoreCSRFToken is true ,so no CSRF validation \n            if ($filterContainer) {\n                try {\n                    return $filterContainer($_POST);\n                } catch (\\TypeError $ex) {\n                    $this-&gt;log(\n                        &#39;Input validation threw a TypeError&#39;,\n                        LogLevel::ALERT,\n                        \\Airship\\throwableToArray($ex)\n                    );\n                    return false;\n                }\n            }\n            return $_POST;\n        }\n...........................................\n.......\n</code></pre>\n<p>here as we passed <code>true</code> as  <code>$ignoreCSRFToken</code> value, it ignore CSRF check</p>\n", 
            "type": "Activities::Comment", 
            "id": 2041087, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T15:31:01.884Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T15:31:01.884Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "Yeah, and that's the only place that it was passed. However, given that ReCAPTCHA will prevent CSRF, this is actually okay. Public forms with CSRF aren't really a huge source of concern for us.", 
            "markdown_message": "<p>Yeah, and that&#39;s the only place that it was passed. However, given that ReCAPTCHA will prevent CSRF, this is actually okay. Public forms with CSRF aren&#39;t really a huge source of concern for us.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2041171, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T15:48:13.452Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T15:48:13.452Z", 
            "actor": {
                "username": "ranjit_p", 
                "url": "/ranjit_p", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "yeah, CAPTCHA will prevent CSRF  but there is a situation where user does not required CAPTCHA \ncheck ```AddComment``` function  https://github.com/paragonie/airship/blob/1d92318390e394afa750461493a96848721224ec/src/Cabin/Hull/Controller/BlogPosts.php#L97\n```\n        if ($this->can('publish')) { /// THIS IS ENDPOINT\n            // No CAPTCHA necessary\n            $published = true;\n            $can_comment = true;\n        } elseif ($this->config('blog.comments.recaptcha')) {\n            if (isset($post['g-recaptcha-response'])) {\n............\n............................\n````\nSo here if user has a permission to publish then CAPTCHA varification does not required\nand as  we already bypassed CSRF Token, so for this user CSRF Attack will be applied\n", 
            "markdown_message": "<p>yeah, CAPTCHA will prevent CSRF  but there is a situation where user does not required CAPTCHA <br>\ncheck <code>AddComment</code> function  <a title=\"https://github.com/paragonie/airship/blob/1d92318390e394afa750461493a96848721224ec/src/Cabin/Hull/Controller/BlogPosts.php#L97\" href=\"/redirect?signature=8b7ee3805cac448c1dc80e66dac09b6c0dd6a0c6&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2F1d92318390e394afa750461493a96848721224ec%2Fsrc%2FCabin%2FHull%2FController%2FBlogPosts.php%23L97\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/1d92318390e394afa750461493a96848721224ec/src/Cabin/Hull/Controller/BlogPosts.php#L97</span><i class=\"icon-external-link\"></i></a></p>\n<pre class=\"highlight plaintext\"><code>        if ($this-&gt;can(&#39;publish&#39;)) { /// THIS IS ENDPOINT\n            // No CAPTCHA necessary\n            $published = true;\n            $can_comment = true;\n        } elseif ($this-&gt;config(&#39;blog.comments.recaptcha&#39;)) {\n            if (isset($post[&#39;g-recaptcha-response&#39;])) {\n............\n............................\n</code></pre>\n<p>So here if user has a permission to publish then CAPTCHA varification does not required<br>\nand as  we already bypassed CSRF Token, so for this user CSRF Attack will be applied</p>\n", 
            "type": "Activities::Comment", 
            "id": 2041205, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T15:52:12.851Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T15:52:12.851Z", 
            "actor": {
                "username": "ranjit_p", 
                "url": "/ranjit_p", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "Now CSRF attack will occur for Administrators user(he has full access, so no RECAPTCHA) and  those users who has publish permission allowed.", 
            "markdown_message": "<p>Now CSRF attack will occur for Administrators user(he has full access, so no RECAPTCHA) and  those users who has publish permission allowed.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2041223, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "reporter": {
                "username": "ranjit_p", 
                "url": "/ranjit_p"
            }, 
            "created_at": "2017-10-03T16:11:41.421Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T16:11:41.421Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "Sorry, I wasn't very clear. Let me try again.\n\nI understand how CSRF attacks work in general, and I understand how this is an instance of one. We're both clear on that point, it seems, and there is no disagreement on the facts.\n\nHowever, these comment forms are public. The worst you can do is impersonate an Author, which are already allowed to be shared among multiple users in the first place.\n\n(Aside: I've been debating renaming Author to Persona to make this more intuitive for people to understand.)\n\nWhile CSRF enforcement is a good idea to leave enabled everywhere (hence, it is a bug), being able to CSRF a public form when CAPTCHAs are disabled, when the maximum impact is that a message is posed that can easily be fixed by hiding/deleting it, and there's no avenue for greater client-side or server-side impact (no XSS or RCE, no overwriting other people's data), it becomes more of a Github issue rather than a HackerOne issue. Neither the confidentiality. integrity, or availability of existing data or systems are violated.\n\nCSRF on public forms with the worst case nuclear option impact of \"submits a comment in someone else's name when CAPTCHAs aren't enforced, which is in turn easily removed\" is a valid bug, but it's not something anyone will lose sleep over.\n\nThe bug, thus, is fixed: https://github.com/paragonie/airship/commit/c43c6d564fa5a2b5ccdd32e67ba7c10737b19b0a\n\nI was debating only checking the CSRF tokens in situations where the CAPTCHA wasn't being enforced, but the redundant checks are a better outcome than the complexity that logic would entail, and I'd rather not make an unauditable mess out of the logic here.", 
            "markdown_message": "<p>Sorry, I wasn&#39;t very clear. Let me try again.</p>\n\n<p>I understand how CSRF attacks work in general, and I understand how this is an instance of one. We&#39;re both clear on that point, it seems, and there is no disagreement on the facts.</p>\n\n<p>However, these comment forms are public. The worst you can do is impersonate an Author, which are already allowed to be shared among multiple users in the first place.</p>\n\n<p>(Aside: I&#39;ve been debating renaming Author to Persona to make this more intuitive for people to understand.)</p>\n\n<p>While CSRF enforcement is a good idea to leave enabled everywhere (hence, it is a bug), being able to CSRF a public form when CAPTCHAs are disabled, when the maximum impact is that a message is posed that can easily be fixed by hiding/deleting it, and there&#39;s no avenue for greater client-side or server-side impact (no XSS or RCE, no overwriting other people&#39;s data), it becomes more of a Github issue rather than a HackerOne issue. Neither the confidentiality. integrity, or availability of existing data or systems are violated.</p>\n\n<p>CSRF on public forms with the worst case nuclear option impact of &quot;submits a comment in someone else&#39;s name when CAPTCHAs aren&#39;t enforced, which is in turn easily removed&quot; is a valid bug, but it&#39;s not something anyone will lose sleep over.</p>\n\n<p>The bug, thus, is fixed: <a title=\"https://github.com/paragonie/airship/commit/c43c6d564fa5a2b5ccdd32e67ba7c10737b19b0a\" href=\"/redirect?signature=c625f364a0b6534049f532edec6e758e2cea5ccb&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fcommit%2Fc43c6d564fa5a2b5ccdd32e67ba7c10737b19b0a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/commit/c43c6d564fa5a2b5ccdd32e67ba7c10737b19b0a</span><i class=\"icon-external-link\"></i></a></p>\n\n<p>I was debating only checking the CSRF tokens in situations where the CAPTCHA wasn&#39;t being enforced, but the redundant checks are a better outcome than the complexity that logic would entail, and I&#39;d rather not make an unauditable mess out of the logic here.</p>\n", 
            "type": "Activities::BugResolved", 
            "id": 2041281, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T16:29:10.430Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T16:29:10.430Z", 
            "actor": {
                "username": "ranjit_p", 
                "url": "/ranjit_p", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "Using CSRF attack,Here attacker can post any number of comment to a Blog post.\nAttacker send a link and when user open that link comment will created and victim does not even know how comment is created.\nThats the different matter that victim can later delete those unnecessary comment or can hide them.\nits a Client-side bug and has same impact as XSS(both required user to open malicious link).\nAs 2017 OWASP CSRF listed in top 10 vulnerability\nhttps://www.owasp.org/index.php/Top_10_2017-Top_10\n", 
            "markdown_message": "<p>Using CSRF attack,Here attacker can post any number of comment to a Blog post.<br>\nAttacker send a link and when user open that link comment will created and victim does not even know how comment is created.<br>\nThats the different matter that victim can later delete those unnecessary comment or can hide them.<br>\nits a Client-side bug and has same impact as XSS(both required user to open malicious link).<br>\nAs 2017 OWASP CSRF listed in top 10 vulnerability<br>\n<a title=\"https://www.owasp.org/index.php/Top_10_2017-Top_10\" href=\"/redirect?signature=abc4b2f4613da5e7fbfb8ef289283f6015ecb66d&amp;url=https%3A%2F%2Fwww.owasp.org%2Findex.php%2FTop_10_2017-Top_10\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://www.owasp.org/index.php/Top_10_2017-Top_10</span><i class=\"icon-external-link\"></i></a></p>\n", 
            "type": "Activities::Comment", 
            "id": 2041317, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T16:32:19.876Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T16:32:19.876Z", 
            "actor": {
                "username": "ranjit_p", 
                "url": "/ranjit_p", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "And the main point is that it Bypassed your CSRF protection mechanism.", 
            "markdown_message": "<p>And the main point is that it Bypassed your CSRF protection mechanism.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2041322, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T17:12:46.053Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T17:12:46.053Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "> Attacker send a link and when user open that link comment will created and victim does not even know how comment is created.\n> Thats the different matter that victim can later delete those unnecessary comment or can hide them.\n> its a Client-side bug and has same impact as XSS(both required user to open malicious link).\n\nUh, no, that's not an XSS. That's a CSRF that allows Author impersonation, which can be used for phishing-type behavior, but this isn't an XSS bug.\n\nIf the Author in question was allowed to post unfiltered JavaScript? Then yeah, that'd be XSS.\n\nThis requires a user to be gullible, and honestly, I consider phishing and social engineering out of scope for application security concerns. I'm concerned with code execution, not \"humans can be tricked into doing dangerous or stupid things\".\n\n> And the main point is that it Bypassed your CSRF protection mechanism.\n\nIt didn't bypass the mechanism. The mechanism was simply disabled on a public form.\n\nI've never, at any point, said \"this isn't CSRF\". I've said \"CSRF on public forms with a very narrow impact doesn't concern us\".", 
            "markdown_message": "<blockquote>\n<p>Attacker send a link and when user open that link comment will created and victim does not even know how comment is created.<br>\nThats the different matter that victim can later delete those unnecessary comment or can hide them.<br>\nits a Client-side bug and has same impact as XSS(both required user to open malicious link).</p>\n</blockquote>\n\n<p>Uh, no, that&#39;s not an XSS. That&#39;s a CSRF that allows Author impersonation, which can be used for phishing-type behavior, but this isn&#39;t an XSS bug.</p>\n\n<p>If the Author in question was allowed to post unfiltered JavaScript? Then yeah, that&#39;d be XSS.</p>\n\n<p>This requires a user to be gullible, and honestly, I consider phishing and social engineering out of scope for application security concerns. I&#39;m concerned with code execution, not &quot;humans can be tricked into doing dangerous or stupid things&quot;.</p>\n\n<blockquote>\n<p>And the main point is that it Bypassed your CSRF protection mechanism.</p>\n</blockquote>\n\n<p>It didn&#39;t bypass the mechanism. The mechanism was simply disabled on a public form.</p>\n\n<p>I&#39;ve never, at any point, said &quot;this isn&#39;t CSRF&quot;. I&#39;ve said &quot;CSRF on public forms with a very narrow impact doesn&#39;t concern us&quot;.</p>\n", 
            "type": "Activities::Comment", 
            "id": 2041424, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T17:29:36.651Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T17:29:36.651Z", 
            "actor": {
                "username": "ranjit_p", 
                "url": "/ranjit_p", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "I did not say  it's xss,  I said csrf has same impact as xss. \nMost of the client side bug has user to convince. \nCsrf,  Xss all of them are social engineering attack because attacker has to trick the victim to open malicious link. \nSo both of them should be out of scope according to u. \nAnd  I bet u  can't find a single public bug bounty programs  in hackerone who  think csrf as social engineering  and they put them in out of scope. ", 
            "markdown_message": "<p>I did not say  it&#39;s xss,  I said csrf has same impact as xss. <br>\nMost of the client side bug has user to convince. <br>\nCsrf,  Xss all of them are social engineering attack because attacker has to trick the victim to open malicious link. <br>\nSo both of them should be out of scope according to u. <br>\nAnd  I bet u  can&#39;t find a single public bug bounty programs  in hackerone who  think csrf as social engineering  and they put them in out of scope. </p>\n", 
            "type": "Activities::Comment", 
            "id": 2041464, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T17:34:12.067Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T17:34:12.067Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "> And I bet u can't find a single public bug bounty programs in hackerone who think **csrf** as social engineering and **they put them in out of scope**.\n\nBolded for emphasis.\n\n* https://hackerone.com/abacuslabs\n* https://hackerone.com/puppetlabs\n* https://hackerone.com/whmcs\n* https://hackerone.com/sendsafely\n* https://hackerone.com/riskio\n* https://hackerone.com/codepen_io\n* https://hackerone.com/simple\n* https://hackerone.com/servicerocket\n* https://hackerone.com/getpantheon\n* ... I can keep going\n\nQuoted from their excluded from scope sections:\n\n> CSRF on forms that are available to anonymous users (e.g. the contact form).", 
            "markdown_message": "<blockquote>\n<p>And I bet u can&#39;t find a single public bug bounty programs in hackerone who think <strong>csrf</strong> as social engineering and <strong>they put them in out of scope</strong>.</p>\n</blockquote>\n\n<p>Bolded for emphasis.</p>\n\n<ul>\n<li><a title=\"https://hackerone.com/abacuslabs\" href=\"https://hackerone.com/abacuslabs\">https://hackerone.com/abacuslabs</a></li>\n<li><a title=\"https://hackerone.com/puppetlabs\" href=\"https://hackerone.com/puppetlabs\">https://hackerone.com/puppetlabs</a></li>\n<li><a title=\"https://hackerone.com/whmcs\" href=\"https://hackerone.com/whmcs\">https://hackerone.com/whmcs</a></li>\n<li><a title=\"https://hackerone.com/sendsafely\" href=\"https://hackerone.com/sendsafely\">https://hackerone.com/sendsafely</a></li>\n<li><a title=\"https://hackerone.com/riskio\" href=\"https://hackerone.com/riskio\">https://hackerone.com/riskio</a></li>\n<li><a title=\"https://hackerone.com/codepen_io\" href=\"https://hackerone.com/codepen_io\">https://hackerone.com/codepen_io</a></li>\n<li><a title=\"https://hackerone.com/simple\" href=\"https://hackerone.com/simple\">https://hackerone.com/simple</a></li>\n<li><a title=\"https://hackerone.com/servicerocket\" href=\"https://hackerone.com/servicerocket\">https://hackerone.com/servicerocket</a></li>\n<li><a title=\"https://hackerone.com/getpantheon\" href=\"https://hackerone.com/getpantheon\">https://hackerone.com/getpantheon</a></li>\n<li>... I can keep going</li>\n</ul>\n\n<p>Quoted from their excluded from scope sections:</p>\n\n<blockquote>\n<p>CSRF on forms that are available to anonymous users (e.g. the contact form).</p>\n</blockquote>\n", 
            "type": "Activities::Comment", 
            "id": 2041475, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T17:39:15.506Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T17:39:15.506Z", 
            "actor": {
                "username": "ranjit_p", 
                "url": "/ranjit_p", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "Yeah,  there a few ot them but they neglect it when it does not contain any security issue", 
            "markdown_message": "<p>Yeah,  there a few ot them but they neglect it when it does not contain any security issue</p>\n", 
            "type": "Activities::Comment", 
            "id": 2041494, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T17:43:22.472Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T17:43:22.472Z", 
            "actor": {
                "username": "ranjit_p", 
                "url": "/ranjit_p", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "If u see other CMS like WordPress, joomla, drupal  they  think Csrf  as big issue as it effect user  and user privacy precedence first", 
            "markdown_message": "<p>If u see other CMS like WordPress, joomla, drupal  they  think Csrf  as big issue as it effect user  and user privacy precedence first</p>\n", 
            "type": "Activities::Comment", 
            "id": 2041498, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T17:49:13.293Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T17:49:13.293Z", 
            "actor": {
                "username": "ranjit_p", 
                "url": "/ranjit_p", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "Now if attacker found some self xss( which most company put them out of scope)  and  chained with csrf and can full take control over victim account. ", 
            "markdown_message": "<p>Now if attacker found some self xss( which most company put them out of scope)  and  chained with csrf and can full take control over victim account. </p>\n", 
            "type": "Activities::Comment", 
            "id": 2041512, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-03T17:53:16.970Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T17:53:16.970Z", 
            "actor": {
                "username": "ranjit_p", 
                "url": "/ranjit_p", 
                "profile_picture_urls": {
                    "medium": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "And  it's OK if u did not think it as security issue. \nAnyway final decision is yours. \nAny bounty for this report? ", 
            "markdown_message": "<p>And  it&#39;s OK if u did not think it as security issue. <br>\nAnyway final decision is yours. <br>\nAny bounty for this report? </p>\n", 
            "type": "Activities::Comment", 
            "id": 2041525, 
            "genius_execution_id": null
        }, 
        {
            "bounty_currency": "usd", 
            "automated_response": false, 
            "created_at": "2017-10-03T18:19:56.842Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-03T18:19:56.842Z", 
            "actor": {
                "url": "/paragonie", 
                "profile": {
                    "name": "Paragon Initiative Enterprises"
                }, 
                "ibb": false, 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/008/539/17d54b48e116d815fd72bc29f2cd71df6b3659ad_medium.?1453010804"
                }
            }, 
            "team_handle": "paragonie", 
            "bonus_amount": "0.0", 
            "bounty_amount": "25.0", 
            "collaborator": {
                "username": "ranjit_p", 
                "url": "/ranjit_p"
            }, 
            "message": "> If u see other CMS like WordPress, joomla, drupal they think Csrf as big issue as it effect user and user privacy precedence first\n\nIf it was a CSRF issue that affected any form that isn't already available to anonymous users, it would be a huge problem. The context matters more than the semantics.\n\n> Now if attacker found some self xss( which most company put them out of scope) and chained with csrf and can full take control over victim account.\n\nEver opened the developer console on Facebook.com? That's really the best anyone can hope to do here.\n\nAlso, you don't need to \"chain with CSRF\", because if you get XSS on the user's machine, CSRF should be assumed to be bypassed. The only thing that isn't bypassed in such a scenario is a CAPTCHA, which is in turn a bad UX so most companies will, stuck between a rock and a hard place, decide to just focus on preventing XSS in the first place.\n\nCompanies have to set boundaries. Otherwise, \"If the user intentionally installs this malware their keystrokes and mouse movements can be stolen\" would be an acceptable bug report for password theft. And \"installing malware\" and \"self-XSS\" aren't significantly different concepts.\n\n> And it's OK if u did not think it as security issue. \n> Anyway final decision is yours. \n> Any bounty for this report?\n\nThis is not as big of a deal as your previous finding. That's all I've been alluding to this entire time.", 
            "markdown_message": "<blockquote>\n<p>If u see other CMS like WordPress, joomla, drupal they think Csrf as big issue as it effect user and user privacy precedence first</p>\n</blockquote>\n\n<p>If it was a CSRF issue that affected any form that isn&#39;t already available to anonymous users, it would be a huge problem. The context matters more than the semantics.</p>\n\n<blockquote>\n<p>Now if attacker found some self xss( which most company put them out of scope) and chained with csrf and can full take control over victim account.</p>\n</blockquote>\n\n<p>Ever opened the developer console on Facebook.com? That&#39;s really the best anyone can hope to do here.</p>\n\n<p>Also, you don&#39;t need to &quot;chain with CSRF&quot;, because if you get XSS on the user&#39;s machine, CSRF should be assumed to be bypassed. The only thing that isn&#39;t bypassed in such a scenario is a CAPTCHA, which is in turn a bad UX so most companies will, stuck between a rock and a hard place, decide to just focus on preventing XSS in the first place.</p>\n\n<p>Companies have to set boundaries. Otherwise, &quot;If the user intentionally installs this malware their keystrokes and mouse movements can be stolen&quot; would be an acceptable bug report for password theft. And &quot;installing malware&quot; and &quot;self-XSS&quot; aren&#39;t significantly different concepts.</p>\n\n<blockquote>\n<p>And it&#39;s OK if u did not think it as security issue. <br>\nAnyway final decision is yours. <br>\nAny bounty for this report?</p>\n</blockquote>\n\n<p>This is not as big of a deal as your previous finding. That&#39;s all I&#39;ve been alluding to this entire time.</p>\n", 
            "type": "Activities::BountyAwarded", 
            "id": 2041627, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-16T05:49:22.904Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-16T05:49:22.904Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "first_to_agree": true, 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::AgreedOnGoingPublic", 
            "id": 2068132, 
            "genius_execution_id": null
        }, 
        {
            "automated_response": false, 
            "created_at": "2017-10-16T05:49:29.584Z", 
            "is_internal": false, 
            "editable": false, 
            "updated_at": "2017-10-16T05:49:29.584Z", 
            "actor": {
                "username": "paragonie-scott", 
                "url": "/paragonie-scott", 
                "profile_picture_urls": {
                    "medium": "https://profile-photos.hackerone-user-content.com/000/051/441/e8c4034a4e3ed3d486883ffc34b95daa43a499d2_medium.png?1453933942"
                }, 
                "hackerone_triager": false
            }, 
            "team_handle": "paragonie", 
            "message": "", 
            "markdown_message": "", 
            "type": "Activities::ManuallyDisclosed", 
            "id": 2068133, 
            "genius_execution_id": null
        }
    ], 
    "in_validation?": false, 
    "is_participant": false, 
    "singular_disclosure_allowed": true, 
    "reporter": {
        "username": "ranjit_p", 
        "hacker_mediation": false, 
        "hackerone_triager": false, 
        "disabled": false, 
        "url": "/ranjit_p", 
        "profile_picture_urls": {
            "small": "/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"
        }, 
        "is_me?": false
    }, 
    "weakness": {
        "id": 45, 
        "name": "Cross-Site Request Forgery (CSRF)"
    }, 
    "is_external_bug": false, 
    "visibility": "full", 
    "allow_singular_disclosure_after": -33410528.785906557, 
    "disclosed_at": "2017-10-16T05:49:29.614Z", 
    "stage": 4, 
    "url": "https://hackerone.com/reports/273998", 
    "created_at": "2017-10-03T07:32:14.444Z", 
    "original_report_url": null, 
    "vulnerability_information_html": "<h1 id=\"summury\">SUMMURY</h1>\n\n<p>i tested that all post request has CSRF token.<br>\nDuring Author profile creation also a CSRF token is posted. Now when i removed this CSRF token , show   s error like bellow </p>\n<pre class=\"highlight plaintext\"><code>CSRF validation failed\n\n0 /var/www/csprng/src/Cabin/Bridge/Controller/Author.php(52): Airship\\Engine\\Controller-&gt;post(Object(Airship\\Cabin\\Bridge\\Filter\\Author\\AuthorFilter))\n/var/www/csprng/src/Engine/AutoPilot.php(485): Airship\\Cabin\\Bridge\\Controller\\Author-&gt;create()\n /var/www/csprng/src/Engine/AutoPilot.php(315): Airship\\Engine\\AutoPilot-&gt;serve(Array, Array)\n /var/www/csprng/src/public/index.php(86): Airship\\Engine\\AutoPilot-&gt;route(Object(Airship\\Engine\\Networking\\HTTP\\ServerRequest))\n{main}\n</code></pre>\n<p>So its a CSRF validation failed error.<br>\nNow if request submitted with proper CSRF token, then response will be 302 redirect.<br>\nSo, i come to this point that if proper CSRF token provided then we get 302 redirect as success response and If CSRF validation failed then we get above error response or something else.</p>\n\n<p>Now  during Blog Reply comment Following request POST data is made</p>\n<pre class=\"highlight plaintext\"><code>\n_CSRF_TOKEN=KrkFX0bGkcwgoIKX8Y7KKr1F%3A0ElYiUhZ5wJDSS8kE2FmPxY58Dr3533SH63ZRJBPBfO-&amp;author=47&amp;name=&amp;email=&amp;url=&amp;message=ssdfsfsfsf+sfsd&amp;g-recaptcha-response=03AJzQf7Ojuy_9znHGgl-bZOSweJZo...............\n\n</code></pre>\n<p>Now remove the CSRF_TOKEN and see  302 redirect as response header, this  indicate that request is successfull and server does not checked CSRF here And no CSRF validation error.</p>\n<pre class=\"highlight plaintext\"><code>HTTP/1.1 302 Found\nDate: Tue, 03 Oct 2017 01:15:15 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nCache-Control: no-store, no-cache, must-revalidate\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nLocation: https://cspr.ng/blog/2017/05/csprng-airship-dev-branch#comments\nPragma: no-cache\nStatus: 302 Found\n</code></pre>\n<p>i checked four file are reponsible for blog comment and non of them are checking CSRF.<br>\n<a title=\"https://github.com/paragonie/airship/blob/master/src/Cabin/Bridge/Controller/Blog.php\" href=\"/redirect?signature=eea455b1b7d74724f834f68e1485b1784b8d0b87&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2Fmaster%2Fsrc%2FCabin%2FBridge%2FController%2FBlog.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/master/src/Cabin/Bridge/Controller/Blog.php</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://github.com/paragonie/airship/blob/master/src/Cabin/Bridge/Model/Blog.php\" href=\"/redirect?signature=bc67965a0b03e08280655277e5458d58b197788a&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2Fmaster%2Fsrc%2FCabin%2FBridge%2FModel%2FBlog.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/master/src/Cabin/Bridge/Model/Blog.php</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://github.com/paragonie/airship/blob/master/src/Cabin/Hull/Model/Blog.php\" href=\"/redirect?signature=11af6d93a5b414197735bef1130e5d7da27f225e&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2Fmaster%2Fsrc%2FCabin%2FHull%2FModel%2FBlog.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/master/src/Cabin/Hull/Model/Blog.php</span><i class=\"icon-external-link\"></i></a><br>\n<a title=\"https://github.com/paragonie/airship/blob/master/src/Cabin/Hull/Controller/BlogPosts.php#107\" href=\"/redirect?signature=bb68d489fddd56976c311f5861c1e2a3d9850811&amp;url=https%3A%2F%2Fgithub.com%2Fparagonie%2Fairship%2Fblob%2Fmaster%2Fsrc%2FCabin%2FHull%2FController%2FBlogPosts.php%23107\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>https://github.com/paragonie/airship/blob/master/src/Cabin/Hull/Controller/BlogPosts.php#107</span><i class=\"icon-external-link\"></i></a><br>\nhere i see only the last file verify google captcha but not CSRF</p>\n\n<h1 id=\"step-to-reproduce\">STEP TO REPRODUCE</h1>\n\n<ol>\n<li>goto any  post and comment</li>\n<li>capture request and remove CSRF token</li>\n<li>submit that request and see successfull, no CSRF validation error</li>\n</ol>\n", 
    "vulnerability_information": "SUMMURY\n=================\ni tested that all post request has CSRF token.\nDuring Author profile creation also a CSRF token is posted. Now when i removed this CSRF token , show   s error like bellow \n```\nCSRF validation failed\n\n0 /var/www/csprng/src/Cabin/Bridge/Controller/Author.php(52): Airship\\Engine\\Controller->post(Object(Airship\\Cabin\\Bridge\\Filter\\Author\\AuthorFilter))\n/var/www/csprng/src/Engine/AutoPilot.php(485): Airship\\Cabin\\Bridge\\Controller\\Author->create()\n /var/www/csprng/src/Engine/AutoPilot.php(315): Airship\\Engine\\AutoPilot->serve(Array, Array)\n /var/www/csprng/src/public/index.php(86): Airship\\Engine\\AutoPilot->route(Object(Airship\\Engine\\Networking\\HTTP\\ServerRequest))\n{main}\n```\nSo its a CSRF validation failed error.\nNow if request submitted with proper CSRF token, then response will be 302 redirect.\nSo, i come to this point that if proper CSRF token provided then we get 302 redirect as success response and If CSRF validation failed then we get above error response or something else.\n\nNow  during Blog Reply comment Following request POST data is made\n```\n\n_CSRF_TOKEN=KrkFX0bGkcwgoIKX8Y7KKr1F%3A0ElYiUhZ5wJDSS8kE2FmPxY58Dr3533SH63ZRJBPBfO-&author=47&name=&email=&url=&message=ssdfsfsfsf+sfsd&g-recaptcha-response=03AJzQf7Ojuy_9znHGgl-bZOSweJZo...............\n\n```\nNow remove the CSRF_TOKEN and see  302 redirect as response header, this  indicate that request is successfull and server does not checked CSRF here And no CSRF validation error.\n```\nHTTP/1.1 302 Found\nDate: Tue, 03 Oct 2017 01:15:15 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nCache-Control: no-store, no-cache, must-revalidate\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nLocation: https://cspr.ng/blog/2017/05/csprng-airship-dev-branch#comments\nPragma: no-cache\nStatus: 302 Found\n```\ni checked four file are reponsible for blog comment and non of them are checking CSRF.\nhttps://github.com/paragonie/airship/blob/master/src/Cabin/Bridge/Controller/Blog.php\nhttps://github.com/paragonie/airship/blob/master/src/Cabin/Bridge/Model/Blog.php\nhttps://github.com/paragonie/airship/blob/master/src/Cabin/Hull/Model/Blog.php\nhttps://github.com/paragonie/airship/blob/master/src/Cabin/Hull/Controller/BlogPosts.php#107\nhere i see only the last file verify google captcha but not CSRF\n\nSTEP TO REPRODUCE\n======================\n1. goto any  post and comment\n2. capture request and remove CSRF token\n3. submit that request and see successfull, no CSRF validation error\n", 
    "team_private?": false, 
    "team": {
        "profile": {
            "website": "https://github.com/paragonie", 
            "about": "Cryptography and Application Security Consultants - We Produce Various Open Source Libraries", 
            "twitter_handle": "ParagonIE", 
            "name": "Paragon Initiative Enterprises"
        }, 
        "handle": "paragonie", 
        "url": "https://hackerone.com/paragonie", 
        "state": "public_mode", 
        "profile_picture_urls": {
            "small": "https://profile-photos.hackerone-user-content.com/000/008/539/a041268a04bb7a5c3d3a88a9dccc6b5955eff4d7_small.?1453010804", 
            "medium": "https://profile-photos.hackerone-user-content.com/000/008/539/17d54b48e116d815fd72bc29f2cd71df6b3659ad_medium.?1453010804"
        }, 
        "awards_miles": false, 
        "permissions": [], 
        "id": 8539, 
        "default_currency": "usd"
    }, 
    "is_published": false
}