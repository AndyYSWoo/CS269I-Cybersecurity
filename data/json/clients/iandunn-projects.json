{
    "twitter_handle": "", 
    "can_manage_team_member_groups": false, 
    "allowed_to_use_saml_in_sandbox": false, 
    "show_mean_resolution_time": true, 
    "policy_html": "<h3 id=\"scope\">Scope</h3>\n\n<p>Bounties are usually only paid for <strong>source code vulnerabilities</strong> in the assets listed in the <code>In Scope</code> section below. <strong>Low severity reports</strong> will often be closed as <code>Informative</code>, since they&#39;re not worth the time.</p>\n\n<h3 id=\"top-targets\">Top Targets</h3>\n\n<ul>\n<li><a href=\"https://github.com/iandunn/regolith\" rel=\"nofollow noopener noreferrer\"><span>Regolith</span><i class=\"icon-external-link\"></i></a></li>\n<li>\n<a href=\"https://wordpress.org/plugins/google-authenticator-per-user-prompt/\" rel=\"nofollow noopener noreferrer\"><span>Google Authenticator - Per User Prompt</span><i class=\"icon-external-link\"></i></a> - $100 bonus if you can <a href=\"https://github.com/julien731/WP-Google-Authenticator/issues/11#issuecomment-215546720\" rel=\"nofollow noopener noreferrer\"><span>exploit the custom nonce implementation</span><i class=\"icon-external-link\"></i></a> to bypass authentication</li>\n<li><a href=\"https://wordpress.org/plugins/basic-google-maps-placemarks/\" rel=\"nofollow noopener noreferrer\"><span>Basic Google Maps Placemarks</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n\n<p>There are <strong>more targets</strong> listed in the <code>In Scope</code> section below.</p>\n\n<h3 id=\"bounties\">Bounties</h3>\n\n<table>\n<thead>\n<tr>\n<th>Severity</th>\n<th>Award</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>High</td>\n<td>$100 - $400</td>\n</tr>\n<tr>\n<td>Medium</td>\n<td>$50</td>\n</tr>\n<tr>\n<td>Low</td>\n<td>$0 - $25</td>\n</tr>\n</tbody>\n</table>\n\n<p>Severity is based on <a href=\"https://www.first.org/cvss/calculator/3.0\" rel=\"nofollow noopener noreferrer\"><span>CVSS 3</span><i class=\"icon-external-link\"></i></a>, but may be adjusted up or down at my discretion. For example, a vulnerability in a plugin with 10,000 active installations may be higher than a vulnerability in a plugin with 100 active installations.</p>\n\n<p>To qualify, <strong>reports must include a PoC</strong> and have <strong>complete steps to reproduce</strong>. There must be <strong>practical and demonstrable security implications</strong>, not just a theoretical scenario, or a missing best practice.</p>\n\n<h3 id=\"scope-exclusions-common-invalid-reports\">Scope Exclusions / Common Invalid Reports</h3>\n\n<ul>\n<li>\n<strong>Rare or low-severity edge cases</strong>: Like regular bugs, not all security bugs are worth fixing. Some edge cases may be closed as <code>Informative</code>. For example, CEMI attacks using standard trigger characters (like <a href=\"/reports/151516\">#151516</a>) are welcome, but characters that only work in Excel, or only in old versions of software, etc are not accepted (see <a href=\"/reports/124223\">#124223</a>).</li>\n<li>\n<strong>Front-end XSS from custom post types</strong>: WordPress <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html\" rel=\"nofollow noopener noreferrer\"><span>intentionally allows Administrator and Editor accounts to enter unfiltered HTML</span><i class=\"icon-external-link\"></i></a> into posts (including custom post types) and comments. Reports of XSS within <code>wp-admin</code> are valid, though.</li>\n<li>\n<strong>CSRF relying on nonce re-use</strong>: WordPress nonces aren&#39;t intended to be true nonces; <a href=\"https://codex.wordpress.org/WordPress_Nonces\" rel=\"nofollow noopener noreferrer\"><span>they are meant to be reusable for 12-24 hours</span><i class=\"icon-external-link\"></i></a>. That&#39;s not ideal, but it&#39;s an accepted practice in the WordPress ecosystem.</li>\n<li>\n<strong>Path Disclosure</strong>: <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-there-path-disclosures-when-directly-loading-certain-files\" rel=\"nofollow noopener noreferrer\"><span>That is really a server configuration issue</span><i class=\"icon-external-link\"></i></a>, and any competent sysadmin will have <code>display_errors</code> disabled on production boxes. </li>\n<li>\n<strong>Version Disclosure</strong>: That&#39;s usually just security through obscurity, and <a href=\"https://core.trac.wordpress.org/ticket/23394#comment:9\" rel=\"nofollow noopener noreferrer\"><span>it is trivial to determine the version of open-source software through many methods</span><i class=\"icon-external-link\"></i></a>.</li>\n</ul>\n\n<p>Invalid reports will be disclosed in order <a href=\"https://hackerone.com/reports/160488#activity-1220162\">to help other researchers and programs learn from them</a>.</p>\n", 
    "facebook_team": false, 
    "can_view_private_program_application_requirement": false, 
    "show_mean_bounty_time": true, 
    "total_bounties_paid_prefix": null, 
    "awards_miles": false, 
    "average_bounty_upper_range": 50.0, 
    "top_bounty_lower_range": 125.0, 
    "anc_enabled": null, 
    "offers_thanks": true, 
    "default_currency": "usd", 
    "show_average_bounty": true, 
    "can_edit_name_and_handle": false, 
    "last_policy_change_at": "2018-09-24T16:11:48.522Z", 
    "can_view_scope_versions": true, 
    "only_cleared_hackers": false, 
    "launched_publicly_at": "2014-04-23T16:15:00.931Z", 
    "bug_count": 14, 
    "mean_time_to_bounty": null, 
    "offers_swag": false, 
    "offers_bounties": true, 
    "id": 162, 
    "mean_time_to_resolution": null, 
    "has_cover_video": false, 
    "profile_picture_urls": {
        "small": "https://profile-photos.hackerone-user-content.com/000/000/162/eb309ba9f6270977cf4e55dc66f0b8d7099a34b7_small.jpg?1508123836", 
        "large": "https://profile-photos.hackerone-user-content.com/000/000/162/f4afb0b81de001441ba555d3fbaf2d9c14a76394_large.jpg?1508123836", 
        "xtralarge": "https://profile-photos.hackerone-user-content.com/000/000/162/3cd34266c2f6d955811ac7c226387f1334ae7860_xtralarge.jpg?1508123836"
    }, 
    "show_response_efficiency_percentage": true, 
    "is_external_program": false, 
    "allows_disclosure_assistance": true, 
    "show_top_bounties": true, 
    "target_signal": 0, 
    "cover_photo_url": "/cover_photos/default/missing.png", 
    "can_view_policy_versions": true, 
    "profile": {
        "website": "", 
        "about": "I'm a WordPress developer who maintains several small open source projects.", 
        "twitter_handle": "", 
        "name": "Ian Dunn"
    }, 
    "scopes": [], 
    "handle": "iandunn-projects", 
    "cover_color": "#ffffff", 
    "mean_time_to_first_response": 97200, 
    "average_bounty_lower_range": 50.0, 
    "response_efficiency_percentage": 100, 
    "policy": "### Scope\r\n\r\nBounties are usually only paid for **source code vulnerabilities** in the assets listed in the `In Scope` section below. **Low severity reports** will often be closed as `Informative`, since they're not worth the time.\r\n\r\n### Top Targets\r\n\r\n* [Regolith](https://github.com/iandunn/regolith)\r\n* [Google Authenticator - Per User Prompt](https://wordpress.org/plugins/google-authenticator-per-user-prompt/) - $100 bonus if you can [exploit the custom nonce implementation](https://github.com/julien731/WP-Google-Authenticator/issues/11#issuecomment-215546720) to bypass authentication\r\n* [Basic Google Maps Placemarks](https://wordpress.org/plugins/basic-google-maps-placemarks/)\r\n\r\nThere are **more targets** listed in the `In Scope` section below.\r\n\r\n\r\n### Bounties\r\n\r\n| Severity | Award            |\r\n| -------- | ------------- |\r\n| High       | $100 - $400 |\r\n| Medium | $50                |\r\n| Low        | $0 - $25       |\r\n\r\nSeverity is based on [CVSS 3](https://www.first.org/cvss/calculator/3.0), but may be adjusted up or down at my discretion. For example, a vulnerability in a plugin with 10,000 active installations may be higher than a vulnerability in a plugin with 100 active installations.\r\n\r\nTo qualify, **reports must include a PoC** and have **complete steps to reproduce**. There must be **practical and demonstrable security implications**, not just a theoretical scenario, or a missing best practice.\r\n\r\n\r\n### Scope Exclusions / Common Invalid Reports\r\n\r\n* **Rare or low-severity edge cases**: Like regular bugs, not all security bugs are worth fixing. Some edge cases may be closed as `Informative`. For example, CEMI attacks using standard trigger characters (like #151516) are welcome, but characters that only work in Excel, or only in old versions of software, etc are not accepted (see #124223).\r\n* **Front-end XSS from custom post types**: WordPress [intentionally allows Administrator and Editor accounts to enter unfiltered HTML](https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html) into posts (including custom post types) and comments. Reports of XSS within `wp-admin` are valid, though.\r\n* **CSRF relying on nonce re-use**: WordPress nonces aren't intended to be true nonces; [they are meant to be reusable for 12-24 hours](https://codex.wordpress.org/WordPress_Nonces). That's not ideal, but it's an accepted practice in the WordPress ecosystem.\r\n* **Path Disclosure**: [That is really a server configuration issue](https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-there-path-disclosures-when-directly-loading-certain-files), and any competent sysadmin will have `display_errors` disabled on production boxes. \r\n* **Version Disclosure**: That's usually just security through obscurity, and [it is trivial to determine the version of open-source software through many methods](https://core.trac.wordpress.org/ticket/23394#comment:9).\r\n\r\nInvalid reports will be disclosed in order [to help other researchers and programs learn from them](https://hackerone.com/reports/160488#activity-1220162).", 
    "can_view_hacktivity": true, 
    "base_bounty": 0, 
    "has_cover_photo": false, 
    "total_bounties_paid": 1100.0, 
    "policy_markdown": "<h3 id=\"scope\">Scope</h3>\n\n<p>Bounties are usually only paid for <strong>source code vulnerabilities</strong> in the assets listed in the <code>In Scope</code> section below. <strong>Low severity reports</strong> will often be closed as <code>Informative</code>, since they&#39;re not worth the time.</p>\n\n<h3 id=\"top-targets\">Top Targets</h3>\n\n<ul>\n<li><a href=\"https://github.com/iandunn/regolith\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Regolith</span><i class=\"icon-external-link\"></i></a></li>\n<li>\n<a href=\"https://wordpress.org/plugins/google-authenticator-per-user-prompt/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Google Authenticator - Per User Prompt</span><i class=\"icon-external-link\"></i></a> - $100 bonus if you can <a href=\"https://github.com/julien731/WP-Google-Authenticator/issues/11#issuecomment-215546720\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>exploit the custom nonce implementation</span><i class=\"icon-external-link\"></i></a> to bypass authentication</li>\n<li><a href=\"https://wordpress.org/plugins/basic-google-maps-placemarks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Basic Google Maps Placemarks</span><i class=\"icon-external-link\"></i></a></li>\n</ul>\n\n<p>There are <strong>more targets</strong> listed in the <code>In Scope</code> section below.</p>\n\n<h3 id=\"bounties\">Bounties</h3>\n\n<table>\n<thead>\n<tr>\n<th>Severity</th>\n<th>Award</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>High</td>\n<td>$100 - $400</td>\n</tr>\n<tr>\n<td>Medium</td>\n<td>$50</td>\n</tr>\n<tr>\n<td>Low</td>\n<td>$0 - $25</td>\n</tr>\n</tbody>\n</table>\n\n<p>Severity is based on <a href=\"https://www.first.org/cvss/calculator/3.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>CVSS 3</span><i class=\"icon-external-link\"></i></a>, but may be adjusted up or down at my discretion. For example, a vulnerability in a plugin with 10,000 active installations may be higher than a vulnerability in a plugin with 100 active installations.</p>\n\n<p>To qualify, <strong>reports must include a PoC</strong> and have <strong>complete steps to reproduce</strong>. There must be <strong>practical and demonstrable security implications</strong>, not just a theoretical scenario, or a missing best practice.</p>\n\n<h3 id=\"scope-exclusions-common-invalid-reports\">Scope Exclusions / Common Invalid Reports</h3>\n\n<ul>\n<li>\n<strong>Rare or low-severity edge cases</strong>: Like regular bugs, not all security bugs are worth fixing. Some edge cases may be closed as <code>Informative</code>. For example, CEMI attacks using standard trigger characters (like <a href=\"/reports/151516\">#151516</a>) are welcome, but characters that only work in Excel, or only in old versions of software, etc are not accepted (see <a href=\"/reports/124223\">#124223</a>).</li>\n<li>\n<strong>Front-end XSS from custom post types</strong>: WordPress <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>intentionally allows Administrator and Editor accounts to enter unfiltered HTML</span><i class=\"icon-external-link\"></i></a> into posts (including custom post types) and comments. Reports of XSS within <code>wp-admin</code> are valid, though.</li>\n<li>\n<strong>CSRF relying on nonce re-use</strong>: WordPress nonces aren&#39;t intended to be true nonces; <a href=\"https://codex.wordpress.org/WordPress_Nonces\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>they are meant to be reusable for 12-24 hours</span><i class=\"icon-external-link\"></i></a>. That&#39;s not ideal, but it&#39;s an accepted practice in the WordPress ecosystem.</li>\n<li>\n<strong>Path Disclosure</strong>: <a href=\"https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-there-path-disclosures-when-directly-loading-certain-files\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>That is really a server configuration issue</span><i class=\"icon-external-link\"></i></a>, and any competent sysadmin will have <code>display_errors</code> disabled on production boxes. </li>\n<li>\n<strong>Version Disclosure</strong>: That&#39;s usually just security through obscurity, and <a href=\"https://core.trac.wordpress.org/ticket/23394#comment:9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>it is trivial to determine the version of open-source software through many methods</span><i class=\"icon-external-link\"></i></a>.</li>\n</ul>\n\n<p>Invalid reports will be disclosed in order <a href=\"https://hackerone.com/reports/160488#activity-1220162\" target=\"_blank\">to help other researchers and programs learn from them</a>.</p>\n", 
    "show_mean_first_response_time": true, 
    "show_total_bounties_paid": true, 
    "can_invite_team_member": false, 
    "researcher_count": 9, 
    "number_of_updates": 1, 
    "show_mean_report_triage_time": false, 
    "top_bounty_upper_range": 150.0, 
    "name": "Ian Dunn", 
    "submission_state": "open", 
    "url": "https://hackerone.com/iandunn-projects", 
    "ibb": false, 
    "rejecting_submissions": false, 
    "can_manage_credentials": false, 
    "can_subscribe_to_policy_changes": true, 
    "vpn_enabled": null, 
    "can_edit_profile": false, 
    "response_efficiency_indicator": "ok", 
    "mean_time_to_triage": null, 
    "show_challenge_policy": false, 
    "can_view_team_updates": true, 
    "external_url": null
}