{
    "twitter_handle": "", 
    "can_manage_team_member_groups": false, 
    "allowed_to_use_saml_in_sandbox": false, 
    "show_mean_resolution_time": true, 
    "policy_html": "<p>The Internet Bug Bounty Panel is awarding bounties for critical security vulnerabilities in popular, open source programming languages. Thanks to the hard work of the developers of these languages, uncovering vulnerabilities in this software is increasingly challenging. These bounties are our way of saying &quot;Thanks&quot; to the security researchers who take up this challenge.</p>\n\n<h1 id=\"bounty-qualification\">Bounty Qualification</h1>\n\n<p>Only critical vulnerabilities that demonstrate complete compromise of the system&#39;s integrity or confidentiality are eligible for a bounty - typically <strong>Arbitrary Code Execution</strong> or equivalent impact. While we encourage you to submit all potential issues, lower severity issues are not in scope at this time.</p>\n\n<table>\n<thead>\n<tr>\n<th>Impact</th>\n<th>Amount</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<strong>High</strong> <em>Demonstrate that remote exploitation of this bug can be easily, actively, and reliably achieved.</em>\n</td>\n<td>$1,500+</td>\n</tr>\n<tr>\n<td>\n<strong>Medium</strong> <em>Demonstrate that remote exploitation of this bug is very likely (e.g. good control a register).</em>\n</td>\n<td>$1,000</td>\n</tr>\n<tr>\n<td>\n<strong>Minimum</strong> <em>Demonstrate the presence of a security bug with probable remote exploitation potential.</em>\n</td>\n<td>$500</td>\n</tr>\n</tbody>\n</table>\n\n<p>Only vulnerabilities in the core Python programming language and standard library will be considered for eligibility. <strong>Submissions related to <em>python.org</em> and other project websites are explicitly NOT eligible.</strong>   </p>\n\n<p>The project maintainers have final decision on which issues constitute security vulnerabilities. The Panel will respect their decision, and we ask that you do as well.</p>\n\n<p>It&#39;s important to keep in mind that not all submissions will qualify for a bounty, and that the decision to award a bounty is entirely at the discretion of the Panel.</p>\n\n<h1 id=\"submission-process\">Submission Process</h1>\n\n<ul>\n<li>Disclose a previously unknown security vulnerability <strong>directly to the <a href=\"https://hackerone.com/python\">project maintainers</a></strong>.</li>\n<li>Follow the disclosure process established by the project maintainers.</li>\n<li>Clearly demonstrate the security vulnerability. Respect the time of the project volunteers as they cannot invest significant effort into incomplete reports. Low-quality reports may be disqualified.</li>\n<li>Once a public security advisory has been issued, please submit a report here. You <strong>must not</strong> send us the details of the vulnerability until it has been validated, accepted, and publicly disclosed by the project maintainers.</li>\n</ul>\n\n<h1 id=\"when-should-you-report-to-security-python-org\">When should you report to <a title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\">security@python.org</a>?</h1>\n\n<p>Depending on the risk of the issue, sometimes <a title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\">security@python.org</a> might not be the best channel to report it.</p>\n\n<p>The risk level is often determined by a product of the impact once exploited, and the probability of exploitation occurring. In other words, if a bug can cause great damage, but it takes highest privilege to exploit the bug, then the bug is not a high risk one. Similarly, if the bug is easily exploitable, but its impact is limited, then it is not a high risk issue either.</p>\n\n<p>There is not any hard and fast rule to determine if a bug is worth reporting. The general rule is any attack worth reporting via the security address must allow an attacker to affect the confidentiality, integrity and availability of the Python application or its system for which the attacker does not already have the capability.</p>\n\n<p>To illustrate the point, here are some examples of past issues and what the Python Security Response Team (PSRT) thinks of them. When in doubt, however, please do send us a report nonetheless. If the responder can&#39;t find any relevant exploitable code, the report may be re-posted publicly.</p>\n\n<h2 id=\"public-disclosure-preferred\">Public disclosure preferred</h2>\n\n<p>In <a href=\"http://bugs.python.org/issue27863\" rel=\"nofollow noopener noreferrer\"><span>issue #27863</span><i class=\"icon-external-link\"></i></a>, several problems such as use-after-free, and out-of-bound memory access in module <code>elementtree</code> were reported. However, the exploit cannot be provoked by providing it with XML data.  It requires that the attacker be able to provoke the execution of the <code>__getstate__</code> method, which is something an attacker would only be able to do if they had the ability to execute arbitrary Python code, or, if they could somehow coerce the application to pickle an XML tree.  Neither of these are generally possible from an unprivileged position.</p>\n\n<p><a href=\"http://bugs.python.org/issue27773\" rel=\"nofollow noopener noreferrer\"><span>Issue #272829</span><i class=\"icon-external-link\"></i></a> is a double-free bug in a highly critical builtin module <code>ssl</code>. However, the bug requires an attacker who can cause <code>PyWeakref_NewRef</code> to fail, which means the ability to deterministically exhaust memory at a specific point in C code execution.</p>\n\n<p>While these are clearly important bugs to fix, and may, in some hypothetical situations, have a security impact, the only proof of concept the PSRT can imagine for any of them is to be able to execute arbitrary Python code.  If you can already execute Python code, there are far worse things you can do than provoke a use-after-free or an interpreter crash.</p>\n\n<h2 id=\"private-disclosure-preferred\">Private disclosure preferred</h2>\n\n<p><a href=\"http://bugs.python.org/issue7673\" rel=\"nofollow noopener noreferrer\"><span>Issue #7673</span><i class=\"icon-external-link\"></i></a> is a security vulnerability that affect an obscure corner of the standard library but it is appropriate to disclose privately, because the APIs that it affects are ones designed to handle untrusted data, something that an attacker could plausibly get a Python program to consume with the expectation that it would be safe.</p>\n\n<p><a href=\"http://bugs.python.org/issue17239\" rel=\"nofollow noopener noreferrer\"><span>Issue #17239</span><i class=\"icon-external-link\"></i></a>  and <a href=\"http://bugs.python.org/issue24238\" rel=\"nofollow noopener noreferrer\"><span>#24238</span><i class=\"icon-external-link\"></i></a> are similar security vulnerabilities affecting multiple popular builtin modules such as <code>expat</code> and <code>elementtree</code>.  They allow an attacker to render a Python application unavailable by feeding it malicious XML data.</p>\n\n<p>The common theme of these vulnerabilities is they let the attacker <em>escalate</em> privilege from unprivileged position.  <em>Arbitrary python code execution</em> is the highest level of privilege possible in the python interpreter.  There are other modules (such as <code>marshal</code>) which explicitly say that all data must be taken from only trusted sources (and hence privileged).</p>\n", 
    "facebook_team": false, 
    "can_view_private_program_application_requirement": false, 
    "show_mean_bounty_time": true, 
    "total_bounties_paid_prefix": null, 
    "awards_miles": false, 
    "average_bounty_upper_range": 500.0, 
    "top_bounty_lower_range": 1500.0, 
    "anc_enabled": true, 
    "offers_thanks": true, 
    "default_currency": "usd", 
    "show_average_bounty": true, 
    "can_edit_name_and_handle": false, 
    "last_policy_change_at": "2016-08-26T18:44:39.889Z", 
    "can_view_scope_versions": true, 
    "only_cleared_hackers": false, 
    "launched_publicly_at": "2013-12-03T19:32:50.683Z", 
    "bug_count": 65, 
    "mean_time_to_bounty": null, 
    "offers_swag": false, 
    "offers_bounties": true, 
    "id": 27, 
    "mean_time_to_resolution": 514800, 
    "has_cover_video": false, 
    "profile_picture_urls": {
        "small": "https://profile-photos.hackerone-user-content.com/000/000/027/22df52945ba6933f27a1dbc92380fe19a4a1a93d_small.png?1383737131", 
        "large": "https://profile-photos.hackerone-user-content.com/000/000/027/32a6c71a9be33e589193ee8c2d9bd693b880f789_large.png?1383737131", 
        "xtralarge": "https://profile-photos.hackerone-user-content.com/000/000/027/2978ee0be7c6f95eea007ccf722131e6d1506299_xtralarge.png?1383737131"
    }, 
    "show_response_efficiency_percentage": true, 
    "is_external_program": false, 
    "allows_disclosure_assistance": true, 
    "show_top_bounties": true, 
    "target_signal": null, 
    "cover_photo_url": "https://cover-photos.hackerone-user-content.com/000/000/027/039f0bc8fee69a1443dbf8aa804a54dbb1ba2c35_default.png?1383766746", 
    "can_view_policy_versions": true, 
    "profile": {
        "website": "http://www.python.org/news/security", 
        "about": "", 
        "twitter_handle": "", 
        "name": "Python (IBB)"
    }, 
    "scopes": [], 
    "handle": "ibb-python", 
    "cover_color": "", 
    "mean_time_to_first_response": 424800, 
    "average_bounty_lower_range": 500.0, 
    "response_efficiency_percentage": 50, 
    "policy": "The Internet Bug Bounty Panel is awarding bounties for critical security vulnerabilities in popular, open source programming languages. Thanks to the hard work of the developers of these languages, uncovering vulnerabilities in this software is increasingly challenging. These bounties are our way of saying \"Thanks\" to the security researchers who take up this challenge.\r\n\r\nBounty Qualification\r\n==========\r\nOnly critical vulnerabilities that demonstrate complete compromise of the system's integrity or confidentiality are eligible for a bounty - typically **Arbitrary Code Execution** or equivalent impact. While we encourage you to submit all potential issues, lower severity issues are not in scope at this time.\r\n\r\n| Impact  | Amount |\r\n| --- | --- |\r\n| **High** *Demonstrate that remote exploitation of this bug can be easily, actively, and reliably achieved.* | $1,500+ |\r\n| **Medium** *Demonstrate that remote exploitation of this bug is very likely (e.g. good control a register).* | $1,000 |\r\n| **Minimum** *Demonstrate the presence of a security bug with probable remote exploitation potential.* | $500 |\r\n\r\nOnly vulnerabilities in the core Python programming language and standard library will be considered for eligibility. **Submissions related to *python.org* and other project websites are explicitly NOT eligible.**   \r\n\r\nThe project maintainers have final decision on which issues constitute security vulnerabilities. The Panel will respect their decision, and we ask that you do as well.\r\n\r\nIt's important to keep in mind that not all submissions will qualify for a bounty, and that the decision to award a bounty is entirely at the discretion of the Panel.\r\n\r\nSubmission Process\r\n===========\r\n* Disclose a previously unknown security vulnerability **directly to the [project maintainers](https://hackerone.com/python)**.\r\n* Follow the disclosure process established by the project maintainers.\r\n* Clearly demonstrate the security vulnerability. Respect the time of the project volunteers as they cannot invest significant effort into incomplete reports. Low-quality reports may be disqualified.\r\n* Once a public security advisory has been issued, please submit a report here. You **must not** send us the details of the vulnerability until it has been validated, accepted, and publicly disclosed by the project maintainers.\r\n\r\nWhen should you report to security@python.org?\r\n==============================================\r\n\r\nDepending on the risk of the issue, sometimes security@python.org might not be the best channel to report it.\r\n\r\nThe risk level is often determined by a product of the impact once exploited, and the probability of exploitation occurring. In other words, if a bug can cause great damage, but it takes highest privilege to exploit the bug, then the bug is not a high risk one. Similarly, if the bug is easily exploitable, but its impact is limited, then it is not a high risk issue either.\r\n\r\nThere is not any hard and fast rule to determine if a bug is worth reporting. The general rule is any attack worth reporting via the security address must allow an attacker to affect the confidentiality, integrity and availability of the Python application or its system for which the attacker does not already have the capability.\r\n\r\nTo illustrate the point, here are some examples of past issues and what the Python Security Response Team (PSRT) thinks of them. When in doubt, however, please do send us a report nonetheless. If the responder can't find any relevant exploitable code, the report may be re-posted publicly.\r\n\r\nPublic disclosure preferred\r\n-------------------------------\r\n\r\nIn [issue \\#27863](http://bugs.python.org/issue27863), several problems such as use-after-free, and out-of-bound memory access in module `elementtree` were reported. However, the exploit cannot be provoked by providing it with XML data.  It requires that the attacker be able to provoke the execution of the `__getstate__` method, which is something an attacker would only be able to do if they had the ability to execute arbitrary Python code, or, if they could somehow coerce the application to pickle an XML tree.  Neither of these are generally possible from an unprivileged position.\r\n\r\n[Issue \\#272829](http://bugs.python.org/issue27773) is a double-free bug in a highly critical builtin module `ssl`. However, the bug requires an attacker who can cause `PyWeakref_NewRef` to fail, which means the ability to deterministically exhaust memory at a specific point in C code execution.\r\n\r\nWhile these are clearly important bugs to fix, and may, in some hypothetical situations, have a security impact, the only proof of concept the PSRT can imagine for any of them is to be able to execute arbitrary Python code.  If you can already execute Python code, there are far worse things you can do than provoke a use-after-free or an interpreter crash.\r\n\r\nPrivate disclosure preferred\r\n-------------------------------\r\n\r\n[Issue \\#7673](http://bugs.python.org/issue7673) is a security vulnerability that affect an obscure corner of the standard library but it is appropriate to disclose privately, because the APIs that it affects are ones designed to handle untrusted data, something that an attacker could plausibly get a Python program to consume with the expectation that it would be safe.\r\n\r\n[Issue \\#17239](http://bugs.python.org/issue17239)  and [\\#24238](http://bugs.python.org/issue24238) are similar security vulnerabilities affecting multiple popular builtin modules such as `expat` and `elementtree`.  They allow an attacker to render a Python application unavailable by feeding it malicious XML data.\r\n\r\nThe common theme of these vulnerabilities is they let the attacker *escalate* privilege from unprivileged position.  *Arbitrary python code execution* is the highest level of privilege possible in the python interpreter.  There are other modules (such as `marshal`) which explicitly say that all data must be taken from only trusted sources (and hence privileged).\r\n", 
    "can_view_hacktivity": true, 
    "base_bounty": 500, 
    "has_cover_photo": true, 
    "total_bounties_paid": 58000.0, 
    "policy_markdown": "<p>The Internet Bug Bounty Panel is awarding bounties for critical security vulnerabilities in popular, open source programming languages. Thanks to the hard work of the developers of these languages, uncovering vulnerabilities in this software is increasingly challenging. These bounties are our way of saying &quot;Thanks&quot; to the security researchers who take up this challenge.</p>\n\n<h1 id=\"bounty-qualification\">Bounty Qualification</h1>\n\n<p>Only critical vulnerabilities that demonstrate complete compromise of the system&#39;s integrity or confidentiality are eligible for a bounty - typically <strong>Arbitrary Code Execution</strong> or equivalent impact. While we encourage you to submit all potential issues, lower severity issues are not in scope at this time.</p>\n\n<table>\n<thead>\n<tr>\n<th>Impact</th>\n<th>Amount</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<strong>High</strong> <em>Demonstrate that remote exploitation of this bug can be easily, actively, and reliably achieved.</em>\n</td>\n<td>$1,500+</td>\n</tr>\n<tr>\n<td>\n<strong>Medium</strong> <em>Demonstrate that remote exploitation of this bug is very likely (e.g. good control a register).</em>\n</td>\n<td>$1,000</td>\n</tr>\n<tr>\n<td>\n<strong>Minimum</strong> <em>Demonstrate the presence of a security bug with probable remote exploitation potential.</em>\n</td>\n<td>$500</td>\n</tr>\n</tbody>\n</table>\n\n<p>Only vulnerabilities in the core Python programming language and standard library will be considered for eligibility. <strong>Submissions related to <em>python.org</em> and other project websites are explicitly NOT eligible.</strong>   </p>\n\n<p>The project maintainers have final decision on which issues constitute security vulnerabilities. The Panel will respect their decision, and we ask that you do as well.</p>\n\n<p>It&#39;s important to keep in mind that not all submissions will qualify for a bounty, and that the decision to award a bounty is entirely at the discretion of the Panel.</p>\n\n<h1 id=\"submission-process\">Submission Process</h1>\n\n<ul>\n<li>Disclose a previously unknown security vulnerability <strong>directly to the <a href=\"https://hackerone.com/python\" target=\"_blank\">project maintainers</a></strong>.</li>\n<li>Follow the disclosure process established by the project maintainers.</li>\n<li>Clearly demonstrate the security vulnerability. Respect the time of the project volunteers as they cannot invest significant effort into incomplete reports. Low-quality reports may be disqualified.</li>\n<li>Once a public security advisory has been issued, please submit a report here. You <strong>must not</strong> send us the details of the vulnerability until it has been validated, accepted, and publicly disclosed by the project maintainers.</li>\n</ul>\n\n<h1 id=\"when-should-you-report-to-security-python-org\">When should you report to <a title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\">security@python.org</a>?</h1>\n\n<p>Depending on the risk of the issue, sometimes <a title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\">security@python.org</a> might not be the best channel to report it.</p>\n\n<p>The risk level is often determined by a product of the impact once exploited, and the probability of exploitation occurring. In other words, if a bug can cause great damage, but it takes highest privilege to exploit the bug, then the bug is not a high risk one. Similarly, if the bug is easily exploitable, but its impact is limited, then it is not a high risk issue either.</p>\n\n<p>There is not any hard and fast rule to determine if a bug is worth reporting. The general rule is any attack worth reporting via the security address must allow an attacker to affect the confidentiality, integrity and availability of the Python application or its system for which the attacker does not already have the capability.</p>\n\n<p>To illustrate the point, here are some examples of past issues and what the Python Security Response Team (PSRT) thinks of them. When in doubt, however, please do send us a report nonetheless. If the responder can&#39;t find any relevant exploitable code, the report may be re-posted publicly.</p>\n\n<h2 id=\"public-disclosure-preferred\">Public disclosure preferred</h2>\n\n<p>In <a href=\"http://bugs.python.org/issue27863\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>issue #27863</span><i class=\"icon-external-link\"></i></a>, several problems such as use-after-free, and out-of-bound memory access in module <code>elementtree</code> were reported. However, the exploit cannot be provoked by providing it with XML data.  It requires that the attacker be able to provoke the execution of the <code>__getstate__</code> method, which is something an attacker would only be able to do if they had the ability to execute arbitrary Python code, or, if they could somehow coerce the application to pickle an XML tree.  Neither of these are generally possible from an unprivileged position.</p>\n\n<p><a href=\"http://bugs.python.org/issue27773\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Issue #272829</span><i class=\"icon-external-link\"></i></a> is a double-free bug in a highly critical builtin module <code>ssl</code>. However, the bug requires an attacker who can cause <code>PyWeakref_NewRef</code> to fail, which means the ability to deterministically exhaust memory at a specific point in C code execution.</p>\n\n<p>While these are clearly important bugs to fix, and may, in some hypothetical situations, have a security impact, the only proof of concept the PSRT can imagine for any of them is to be able to execute arbitrary Python code.  If you can already execute Python code, there are far worse things you can do than provoke a use-after-free or an interpreter crash.</p>\n\n<h2 id=\"private-disclosure-preferred\">Private disclosure preferred</h2>\n\n<p><a href=\"http://bugs.python.org/issue7673\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Issue #7673</span><i class=\"icon-external-link\"></i></a> is a security vulnerability that affect an obscure corner of the standard library but it is appropriate to disclose privately, because the APIs that it affects are ones designed to handle untrusted data, something that an attacker could plausibly get a Python program to consume with the expectation that it would be safe.</p>\n\n<p><a href=\"http://bugs.python.org/issue17239\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>Issue #17239</span><i class=\"icon-external-link\"></i></a>  and <a href=\"http://bugs.python.org/issue24238\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>#24238</span><i class=\"icon-external-link\"></i></a> are similar security vulnerabilities affecting multiple popular builtin modules such as <code>expat</code> and <code>elementtree</code>.  They allow an attacker to render a Python application unavailable by feeding it malicious XML data.</p>\n\n<p>The common theme of these vulnerabilities is they let the attacker <em>escalate</em> privilege from unprivileged position.  <em>Arbitrary python code execution</em> is the highest level of privilege possible in the python interpreter.  There are other modules (such as <code>marshal</code>) which explicitly say that all data must be taken from only trusted sources (and hence privileged).</p>\n", 
    "show_mean_first_response_time": true, 
    "show_total_bounties_paid": true, 
    "can_invite_team_member": false, 
    "researcher_count": 25, 
    "number_of_updates": 0, 
    "show_mean_report_triage_time": true, 
    "top_bounty_upper_range": 9000.0, 
    "name": "Python (IBB)", 
    "submission_state": "open", 
    "url": "https://hackerone.com/ibb-python", 
    "ibb": true, 
    "rejecting_submissions": false, 
    "can_manage_credentials": false, 
    "can_subscribe_to_policy_changes": true, 
    "vpn_enabled": null, 
    "can_edit_profile": false, 
    "response_efficiency_indicator": "missed", 
    "mean_time_to_triage": 262800, 
    "show_challenge_policy": false, 
    "can_view_team_updates": true, 
    "external_url": null
}