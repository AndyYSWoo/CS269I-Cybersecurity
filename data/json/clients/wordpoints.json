{
    "twitter_handle": "", 
    "can_manage_team_member_groups": false, 
    "allowed_to_use_saml_in_sandbox": false, 
    "show_mean_resolution_time": true, 
    "policy_html": "<h1 id=\"scope\">Scope</h1>\n\n<p>We&#39;re interested in <strong>source code vulnerabilities</strong> in the targets listed below.</p>\n\n<h1 id=\"the-targets\">The Targets</h1>\n\n<p>In order of importance:</p>\n\n<ul>\n<li>The <a href=\"https://wordpress.org/plugins/wordpoints/\" rel=\"nofollow noopener noreferrer\"><span>WordPoints plugin</span><i class=\"icon-external-link\"></i></a> (<a href=\"https://github.com/WordPoints/wordpoints/\" rel=\"nofollow noopener noreferrer\"><span>developed on GitHub</span><i class=\"icon-external-link\"></i></a>).</li>\n<li>Extensions for the plugin developed under <a href=\"https://github.com/WordPoints/\" rel=\"nofollow noopener noreferrer\"><span>the WordPoints organization on GitHub</span><i class=\"icon-external-link\"></i></a>.</li>\n</ul>\n\n<p>Please note that at present <strong>the wordpoints.org website is <em>not</em> considered a valid target</strong>.</p>\n\n<h1 id=\"important-notes\">Important Notes</h1>\n\n<ul>\n<li>The plugin and many of the extensions are developed with the production code in the <code>/src</code> directory of the repository. In these cases, <strong>only code within the <code>/src</code> directory is in scope</strong>, since only that code is distributed and installed. This is only important when you&#39;re looking at one of the development branches. You can also download the code for the latest release (e.g., for <a href=\"https://github.com/WordPoints/wordpoints/releases/latest\" rel=\"nofollow noopener noreferrer\"><span>WordPoints</span><i class=\"icon-external-link\"></i></a>), and in that case, the package will only contain the production code.</li>\n<li>We do not maintain old branches of the code, so <strong>only vulnerabilities present in the development version and the latest release are in scope</strong>. On GitHub these will be the <code>develop</code> and <code>master</code> branches, respectively.</li>\n</ul>\n\n<h1 id=\"reporting-bugs\">Reporting Bugs</h1>\n\n<p>When reporting a vulnerability, please include a POC if possible. That will help us to validate the report as quickly as possible, and will also save you from reporting false bugs.</p>\n\n<h1 id=\"bounty-program\">Bounty Program</h1>\n\n<p>We offer small bounties for valid bugs. We may award larger bounties if we think the bug is more serious.</p>\n\n<h1 id=\"invalid-bugs\">Invalid Bugs</h1>\n\n<ul>\n<li><p><strong>Path Disclosure:</strong> That&#39;s really a server issue, and any competent admin will have <code>display_errors</code> disabled on production boxes.</p></li>\n<li><p><strong>Directory Listing:</strong> Similar to path disclosure, this isn&#39;t really a concern. Many of the projects are open source, so an attacker can already easily determine the directory structure. Only if a directory is created after the plugin/extension is installed would there be any concern of sensitive information being disclosed.</p></li>\n<li><p><strong>Version Disclosure:</strong> Hiding the names or versions of software that a service is running is just security through obscurity.</p></li>\n<li><p><strong>XSS:</strong> Reports of XSS vulnerabilities are welcome. However, <a href=\"http://codex.wordpress.org/FAQ_Security#Why_are_some_users_allowed_to_post_unfiltered_HTML.3F\" rel=\"nofollow noopener noreferrer\"><span>in WordPress some user Roles are trusted and are allowed to post unfiltered HTML</span><i class=\"icon-external-link\"></i></a> on the front end of the site. An XSS vulnerability may not be considered valid if it can only be exploited by users who have the <code>unfiltered_html</code> capability, and if it does not affect the administration panels. If you&#39;re unsure whether an XSS bug is valid, please report it anyway.</p></li>\n<li><p><strong>Nonce Persistence:</strong> WordPress uses CSRF tokens called &quot;nonces&quot;. However, unlike true nonces, they aren&#39;t used only once, but <a href=\"http://codex.wordpress.org/WordPress_Nonces#Nonce_lifetime\" rel=\"nofollow noopener noreferrer\"><span>expire after a limited time</span><i class=\"icon-external-link\"></i></a>. If you see the same nonce token value being used repeatedly, that is probably why.</p></li>\n<li><p><strong>Nonces in <code>GET</code> requests:</strong> The WordPress developers have built the nonce system to be fairly robust against leaking of nonces in <code>GET</code> requests. WordPress actually includes a function for adding a nonce as a <code>GET</code> parameter to a URL, <a href=\"https://developer.wordpress.org/reference/functions/wp_nonce_url/\" rel=\"nofollow noopener noreferrer\"><span>wp_nonce_url()</span><i class=\"icon-external-link\"></i></a>. This is generally considered an accepted risk. If you think that a particular case of using an nonce in a <code>GET</code> request poses a significant risk, please report it anyway.</p></li>\n<li><p><strong>File Uploads:</strong> WordPoints allows users with sufficient capabilities to upload arbitrary files to the server. We are only interested in vulnerabilities related to file uploads if they can be exploited by users who do not have the <code>wordpoints_install_modules</code> capability.</p></li>\n<li><p><strong>Outside Scope:</strong> Only source code bugs are within scope; vulnerabilities at the server or network layer are not in scope.</p></li>\n<li><p><strong>Invalid targets:</strong> The wordpoints.org website is not a valid target. Please see the Targets section above for a list of valid targets. </p></li>\n</ul>\n", 
    "facebook_team": false, 
    "can_view_private_program_application_requirement": false, 
    "show_mean_bounty_time": true, 
    "total_bounties_paid_prefix": null, 
    "awards_miles": false, 
    "average_bounty_upper_range": 25.0, 
    "top_bounty_lower_range": 35.0, 
    "anc_enabled": null, 
    "offers_thanks": true, 
    "default_currency": "usd", 
    "show_average_bounty": true, 
    "can_edit_name_and_handle": false, 
    "last_policy_change_at": "2017-07-21T12:24:43.071Z", 
    "can_view_scope_versions": true, 
    "only_cleared_hackers": false, 
    "launched_publicly_at": "2014-10-31T20:58:54.263Z", 
    "bug_count": 6, 
    "mean_time_to_bounty": null, 
    "offers_swag": false, 
    "offers_bounties": true, 
    "id": 361, 
    "mean_time_to_resolution": null, 
    "has_cover_video": false, 
    "profile_picture_urls": {
        "small": "https://profile-photos.hackerone-user-content.com/000/000/361/239c0e6b50a1415aab11f52639b16993ea0e85c2_small.png?1438962145", 
        "large": "https://profile-photos.hackerone-user-content.com/000/000/361/6ef62aaf44e3fbaa72b5a2e9053a760cf0a88ef7_large.png?1438962145", 
        "xtralarge": "https://profile-photos.hackerone-user-content.com/000/000/361/6d211ebbc79e77c64ec54ff4ccafc980a20b6b3d_xtralarge.png?1438962145"
    }, 
    "show_response_efficiency_percentage": true, 
    "is_external_program": false, 
    "allows_disclosure_assistance": true, 
    "show_top_bounties": true, 
    "target_signal": null, 
    "cover_photo_url": "/cover_photos/default/missing.png", 
    "can_view_policy_versions": true, 
    "profile": {
        "website": "", 
        "about": "Open source points plugin for WordPress.", 
        "twitter_handle": "", 
        "name": "WordPoints"
    }, 
    "scopes": [
        "none"
    ], 
    "handle": "wordpoints", 
    "cover_color": "#3E93C2", 
    "mean_time_to_first_response": 0, 
    "average_bounty_lower_range": 25.0, 
    "response_efficiency_percentage": 100, 
    "policy": "# Scope\r\nWe're interested in **source code vulnerabilities** in the targets listed below.\r\n\r\n# The Targets\r\nIn order of importance:\r\n- The [WordPoints plugin](https://wordpress.org/plugins/wordpoints/) ([developed on GitHub](https://github.com/WordPoints/wordpoints/)).\r\n- Extensions for the plugin developed under [the WordPoints organization on GitHub](https://github.com/WordPoints/).\r\n\r\nPlease note that at present **the wordpoints.org website is *not* considered a valid target**.\r\n\r\n# Important Notes\r\n- The plugin and many of the extensions are developed with the production code in the `/src` directory of the repository. In these cases, **only code within the `/src` directory is in scope**, since only that code is distributed and installed. This is only important when you're looking at one of the development branches. You can also download the code for the latest release (e.g., for [WordPoints](https://github.com/WordPoints/wordpoints/releases/latest)), and in that case, the package will only contain the production code.\r\n- We do not maintain old branches of the code, so **only vulnerabilities present in the development version and the latest release are in scope**. On GitHub these will be the `develop` and `master` branches, respectively.\r\n\r\n# Reporting Bugs\r\nWhen reporting a vulnerability, please include a POC if possible. That will help us to validate the report as quickly as possible, and will also save you from reporting false bugs.\r\n\r\n# Bounty Program\r\nWe offer small bounties for valid bugs. We may award larger bounties if we think the bug is more serious.\r\n\r\n# Invalid Bugs\r\n- **Path Disclosure:** That's really a server issue, and any competent admin will have `display_errors` disabled on production boxes.\r\n\r\n- **Directory Listing:** Similar to path disclosure, this isn't really a concern. Many of the projects are open source, so an attacker can already easily determine the directory structure. Only if a directory is created after the plugin/extension is installed would there be any concern of sensitive information being disclosed.\r\n\r\n- **Version Disclosure:** Hiding the names or versions of software that a service is running is just security through obscurity.\r\n\r\n- **XSS:** Reports of XSS vulnerabilities are welcome. However, [in WordPress some user Roles are trusted and are allowed to post unfiltered HTML](http://codex.wordpress.org/FAQ_Security#Why_are_some_users_allowed_to_post_unfiltered_HTML.3F) on the front end of the site. An XSS vulnerability may not be considered valid if it can only be exploited by users who have the `unfiltered_html` capability, and if it does not affect the administration panels. If you're unsure whether an XSS bug is valid, please report it anyway.\r\n\r\n- **Nonce Persistence:** WordPress uses CSRF tokens called \"nonces\". However, unlike true nonces, they aren't used only once, but [expire after a limited time](http://codex.wordpress.org/WordPress_Nonces#Nonce_lifetime). If you see the same nonce token value being used repeatedly, that is probably why.\r\n\r\n- **Nonces in `GET` requests:** The WordPress developers have built the nonce system to be fairly robust against leaking of nonces in `GET` requests. WordPress actually includes a function for adding a nonce as a `GET` parameter to a URL, [wp_nonce_url()](https://developer.wordpress.org/reference/functions/wp_nonce_url/). This is generally considered an accepted risk. If you think that a particular case of using an nonce in a `GET` request poses a significant risk, please report it anyway.\r\n\r\n- **File Uploads:** WordPoints allows users with sufficient capabilities to upload arbitrary files to the server. We are only interested in vulnerabilities related to file uploads if they can be exploited by users who do not have the `wordpoints_install_modules` capability.\r\n\r\n- **Outside Scope:** Only source code bugs are within scope; vulnerabilities at the server or network layer are not in scope.\r\n\r\n- **Invalid targets:** The wordpoints.org website is not a valid target. Please see the Targets section above for a list of valid targets. ", 
    "can_view_hacktivity": true, 
    "base_bounty": 50, 
    "has_cover_photo": false, 
    "total_bounties_paid": 165.0, 
    "policy_markdown": "<h1 id=\"scope\">Scope</h1>\n\n<p>We&#39;re interested in <strong>source code vulnerabilities</strong> in the targets listed below.</p>\n\n<h1 id=\"the-targets\">The Targets</h1>\n\n<p>In order of importance:</p>\n\n<ul>\n<li>The <a href=\"https://wordpress.org/plugins/wordpoints/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>WordPoints plugin</span><i class=\"icon-external-link\"></i></a> (<a href=\"https://github.com/WordPoints/wordpoints/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>developed on GitHub</span><i class=\"icon-external-link\"></i></a>).</li>\n<li>Extensions for the plugin developed under <a href=\"https://github.com/WordPoints/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>the WordPoints organization on GitHub</span><i class=\"icon-external-link\"></i></a>.</li>\n</ul>\n\n<p>Please note that at present <strong>the wordpoints.org website is <em>not</em> considered a valid target</strong>.</p>\n\n<h1 id=\"important-notes\">Important Notes</h1>\n\n<ul>\n<li>The plugin and many of the extensions are developed with the production code in the <code>/src</code> directory of the repository. In these cases, <strong>only code within the <code>/src</code> directory is in scope</strong>, since only that code is distributed and installed. This is only important when you&#39;re looking at one of the development branches. You can also download the code for the latest release (e.g., for <a href=\"https://github.com/WordPoints/wordpoints/releases/latest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>WordPoints</span><i class=\"icon-external-link\"></i></a>), and in that case, the package will only contain the production code.</li>\n<li>We do not maintain old branches of the code, so <strong>only vulnerabilities present in the development version and the latest release are in scope</strong>. On GitHub these will be the <code>develop</code> and <code>master</code> branches, respectively.</li>\n</ul>\n\n<h1 id=\"reporting-bugs\">Reporting Bugs</h1>\n\n<p>When reporting a vulnerability, please include a POC if possible. That will help us to validate the report as quickly as possible, and will also save you from reporting false bugs.</p>\n\n<h1 id=\"bounty-program\">Bounty Program</h1>\n\n<p>We offer small bounties for valid bugs. We may award larger bounties if we think the bug is more serious.</p>\n\n<h1 id=\"invalid-bugs\">Invalid Bugs</h1>\n\n<ul>\n<li><p><strong>Path Disclosure:</strong> That&#39;s really a server issue, and any competent admin will have <code>display_errors</code> disabled on production boxes.</p></li>\n<li><p><strong>Directory Listing:</strong> Similar to path disclosure, this isn&#39;t really a concern. Many of the projects are open source, so an attacker can already easily determine the directory structure. Only if a directory is created after the plugin/extension is installed would there be any concern of sensitive information being disclosed.</p></li>\n<li><p><strong>Version Disclosure:</strong> Hiding the names or versions of software that a service is running is just security through obscurity.</p></li>\n<li><p><strong>XSS:</strong> Reports of XSS vulnerabilities are welcome. However, <a href=\"http://codex.wordpress.org/FAQ_Security#Why_are_some_users_allowed_to_post_unfiltered_HTML.3F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>in WordPress some user Roles are trusted and are allowed to post unfiltered HTML</span><i class=\"icon-external-link\"></i></a> on the front end of the site. An XSS vulnerability may not be considered valid if it can only be exploited by users who have the <code>unfiltered_html</code> capability, and if it does not affect the administration panels. If you&#39;re unsure whether an XSS bug is valid, please report it anyway.</p></li>\n<li><p><strong>Nonce Persistence:</strong> WordPress uses CSRF tokens called &quot;nonces&quot;. However, unlike true nonces, they aren&#39;t used only once, but <a href=\"http://codex.wordpress.org/WordPress_Nonces#Nonce_lifetime\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>expire after a limited time</span><i class=\"icon-external-link\"></i></a>. If you see the same nonce token value being used repeatedly, that is probably why.</p></li>\n<li><p><strong>Nonces in <code>GET</code> requests:</strong> The WordPress developers have built the nonce system to be fairly robust against leaking of nonces in <code>GET</code> requests. WordPress actually includes a function for adding a nonce as a <code>GET</code> parameter to a URL, <a href=\"https://developer.wordpress.org/reference/functions/wp_nonce_url/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span>wp_nonce_url()</span><i class=\"icon-external-link\"></i></a>. This is generally considered an accepted risk. If you think that a particular case of using an nonce in a <code>GET</code> request poses a significant risk, please report it anyway.</p></li>\n<li><p><strong>File Uploads:</strong> WordPoints allows users with sufficient capabilities to upload arbitrary files to the server. We are only interested in vulnerabilities related to file uploads if they can be exploited by users who do not have the <code>wordpoints_install_modules</code> capability.</p></li>\n<li><p><strong>Outside Scope:</strong> Only source code bugs are within scope; vulnerabilities at the server or network layer are not in scope.</p></li>\n<li><p><strong>Invalid targets:</strong> The wordpoints.org website is not a valid target. Please see the Targets section above for a list of valid targets. </p></li>\n</ul>\n", 
    "show_mean_first_response_time": true, 
    "show_total_bounties_paid": true, 
    "can_invite_team_member": false, 
    "researcher_count": 5, 
    "number_of_updates": 0, 
    "show_mean_report_triage_time": false, 
    "top_bounty_upper_range": 35.0, 
    "name": "WordPoints", 
    "submission_state": "open", 
    "url": "https://hackerone.com/wordpoints", 
    "ibb": false, 
    "rejecting_submissions": false, 
    "can_manage_credentials": false, 
    "can_subscribe_to_policy_changes": true, 
    "vpn_enabled": null, 
    "can_edit_profile": false, 
    "response_efficiency_indicator": "ok", 
    "mean_time_to_triage": null, 
    "show_challenge_policy": false, 
    "can_view_team_updates": true, 
    "external_url": null
}